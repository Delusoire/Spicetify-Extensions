{
  "version": 3,
  "sources": ["../../shared/api.ts", "../../shared/util.ts", "../../shared/deps.ts", "../../shared/parse.ts", "../../extensions/search-on-youtube/settings.ts", "../../shared/settings.tsx", "../../shared/modules.ts", "../../extensions/search-on-youtube/app.ts"],
  "sourcesContent": ["import { AccessToken, SpotifyApi } from \"https://esm.sh/@fostertheweb/spotify-web-api-ts-sdk\"\r\nimport { SpotifyURI, escapeRegex } from \"./util.ts\"\r\n\r\nconst { Locale, GraphQL, CosmosAsync } = Spicetify\r\n\r\nexport const spotifyApi = SpotifyApi.withAccessToken(\"client-id\", {} as AccessToken, {\r\n    // @ts-ignore\r\n    fetch(url, opts) {\r\n        const { method } = opts!\r\n        // @ts-ignore\r\n        return CosmosAsync.resolve(method, url)\r\n    },\r\n    deserializer: {\r\n        deserialize(res) {\r\n            return (res as unknown as Spicetify.CosmosAsync.Response).body\r\n        },\r\n    },\r\n})\r\n\r\n/*                          GraphQL                                           */\r\n\r\nexport type fetchGQLAlbumRes = {\r\n    __typename: \"album\"\r\n    uri: SpotifyURI\r\n    name: string\r\n    artists: {\r\n        totalCount: number\r\n        items: Array<{\r\n            id: string\r\n            uri: SpotifyURI\r\n            profile: {\r\n                name: string\r\n            }\r\n            visuals: {\r\n                avatarImage: {\r\n                    sources: Array<Spicetify.Platform.ImageSized>\r\n                }\r\n            }\r\n            sharingInfo: {\r\n                shareUrl: string\r\n            }\r\n        }>\r\n    }\r\n    coverArt: {\r\n        extractedColors: {\r\n            colorRaw: {\r\n                hex: string\r\n            }\r\n            colorLight: {\r\n                hex: string\r\n            }\r\n            colorDark: {\r\n                hex: string\r\n            }\r\n        }\r\n        sources: Array<Spicetify.Platform.ImageSized>\r\n    }\r\n    discs: {\r\n        totalCount: number\r\n        items: Array<{\r\n            number: number\r\n            tracks: {\r\n                totalCount: number\r\n            }\r\n        }>\r\n    }\r\n    releases: ItemsWithCount<{\r\n        uri: SpotifyURI\r\n        name: string\r\n    }>\r\n\r\n    type: string\r\n    date: {\r\n        isoString: string\r\n        precision: string\r\n    }\r\n    playability: {\r\n        playable: boolean\r\n        reason: string\r\n    }\r\n    label: string\r\n    copyright: {\r\n        totalCount: number\r\n        items: Array<{\r\n            type: string\r\n            text: string\r\n        }>\r\n    }\r\n    courtesyLine: string\r\n    saved: boolean\r\n    sharingInfo: {\r\n        shareUrl: string\r\n        shareId: string\r\n    }\r\n    tracks: ItemsWithCount<{\r\n        uid: string\r\n        track: {\r\n            saved: boolean\r\n            uri: SpotifyURI\r\n            name: string\r\n            playcount: string\r\n            discNumber: number\r\n            trackNumber: number\r\n            contentRating: {\r\n                label: string\r\n            }\r\n            relinkingInformation: any\r\n            duration: {\r\n                totalMilliseconds: number\r\n            }\r\n            playability: {\r\n                playable: boolean\r\n            }\r\n            artists: Items<{\r\n                uri: SpotifyURI\r\n                profile: {\r\n                    name: string\r\n                }\r\n            }>\r\n        }\r\n    }>\r\n\r\n    moreAlbumsByArtist: Items<{\r\n        discography: {\r\n            popularReleasesAlbums: Items<{\r\n                id: string\r\n                uri: SpotifyURI\r\n                name: string\r\n                date: {\r\n                    year: number\r\n                }\r\n                coverArt: {\r\n                    sources: Array<Spicetify.Platform.ImageSized>\r\n                }\r\n                playability: {\r\n                    playable: boolean\r\n                    reason: string\r\n                }\r\n                sharingInfo: {\r\n                    shareId: string\r\n                    shareUrl: string\r\n                }\r\n                type: string\r\n            }>\r\n        }\r\n    }>\r\n}\r\nexport const fetchGQLAlbum = async (uri: SpotifyURI, offset = 0, limit = 487) =>\r\n    (\r\n        await GraphQL.Request(GraphQL.Definitions.getAlbum, {\r\n            uri,\r\n            locale: Locale.getLocale(),\r\n            offset,\r\n            limit,\r\n        })\r\n    ).data.albumUnion as fetchGQLAlbumRes\r\n\r\nexport type TopTracksItem = {\r\n    uid: string\r\n    track: {\r\n        id: string\r\n        uri: string\r\n        name: string\r\n        playcount: string\r\n        discNumber: number\r\n        duration: {\r\n            totalMilliseconds: number\r\n        }\r\n        playability: Playability\r\n        contentRating: {\r\n            label: \"NONE\" | \"EXPLICIT\"\r\n        }\r\n        artists: Items<{\r\n            uri: string\r\n            profile: {\r\n                name: string\r\n            }\r\n        }>\r\n        albumOfTrack: {\r\n            uri: string\r\n            coverArt: {\r\n                sources: Array<{ url: string }>\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type fetchGQLArtistOverviewRes = {\r\n    __typename: \"Artist\"\r\n    id: string\r\n    uri: string\r\n    saved: boolean\r\n    stats: {\r\n        followers: number\r\n        monthlyListeners: number\r\n        worldRank: number\r\n        topCities: {\r\n            items: Array<{\r\n                numberOfListeners: number\r\n                city: string\r\n                country: string\r\n                region: string\r\n            }>\r\n        }\r\n    }\r\n    profile: {\r\n        name: string\r\n        verified: boolean\r\n        pinnedItem: {\r\n            comment: string\r\n            type: string\r\n            backgroundImage: {\r\n                sources: Array<{ url: string }>\r\n            }\r\n            itemV2: {}\r\n            item: {\r\n                uri: string\r\n                name: string\r\n                images: {\r\n                    items: Array<{\r\n                        sources: Array<{\r\n                            url: string\r\n                            width: null\r\n                            height: null\r\n                        }>\r\n                    }>\r\n                }\r\n            }\r\n        }\r\n        biography: {\r\n            type: string\r\n            text: string\r\n        }\r\n        externalLinks: {\r\n            items: Array<{\r\n                name: string\r\n                url: string\r\n            }>\r\n        }\r\n        playlistV2: {\r\n            totalCount: number\r\n            items: Array<{\r\n                data: {\r\n                    __typename: \"Playlist\"\r\n                    uri: string\r\n                    name: string\r\n                    description: string\r\n                    ownerV2: {\r\n                        data: {\r\n                            __typename: \"User\"\r\n                            name: string\r\n                        }\r\n                    }\r\n                    images: {\r\n                        items: Array<{\r\n                            sources: Array<Spicetify.Platform.ImageSized>\r\n                        }>\r\n                    }\r\n                }\r\n            }>\r\n        }\r\n    }\r\n    visuals: {\r\n        gallery: {\r\n            items: Array<{\r\n                sources: Array<Spicetify.Platform.ImageSized>\r\n            }>\r\n        }\r\n        avatarImage: {\r\n            sources: Array<Spicetify.Platform.ImageSized>\r\n            extractedColors: {\r\n                colorRaw: {\r\n                    hex: string\r\n                }\r\n            }\r\n        }\r\n        headerImage: {\r\n            sources: Array<Spicetify.Platform.ImageSized>\r\n            extractedColors: {\r\n                colorRaw: {\r\n                    hex: string\r\n                }\r\n            }\r\n        }\r\n    }\r\n    discography: {\r\n        latest: Item1\r\n        popularReleasesAlbums: ItemsWithCount<Item1>\r\n        singles: ItemsReleases<Item1>\r\n        albums: ItemsReleases<Item1>\r\n        compilations: ItemsReleases<Item1>\r\n        topTracks: Items<TopTracksItem>\r\n    }\r\n    preRelease: any | null\r\n    relatedContent: {\r\n        appearsOn: {\r\n            totalCount: number\r\n            items: any[]\r\n        }\r\n        featuringV2: {\r\n            totalCount: number\r\n            items: any[]\r\n        }\r\n        discoveredOnV2: {\r\n            totalCount: number\r\n            items: any[]\r\n        }\r\n        relatedArtists: {\r\n            totalCount: number\r\n            items: any[]\r\n        }\r\n    }\r\n    sharingInfo: {\r\n        shareUrl: string\r\n        shareId: string\r\n    }\r\n    goods: {\r\n        events: {\r\n            userLocation: {\r\n                name: string\r\n            }\r\n            concerts: ItemsWithCount<{\r\n                uri: string\r\n                id: string\r\n                title: string\r\n                category: \"CONCERT\"\r\n                festival: boolean\r\n                nearUser: boolean\r\n                venue: {\r\n                    name: string\r\n                    location: { name: string }\r\n                    coordinates: {\r\n                        latitude: number\r\n                        longitude: number\r\n                    }\r\n                }\r\n                partnerLinks: Items<{\r\n                    partnerName: string\r\n                    url: string\r\n                }>\r\n\r\n                date: Date\r\n            }> & {\r\n                pagingInfo: {\r\n                    limit: number\r\n                }\r\n            }\r\n        }\r\n        merch: Items<{\r\n            image: {\r\n                sources: Array<{ url: string }>\r\n            }\r\n            name: string\r\n            description: string\r\n            price: string\r\n            uri: string\r\n            url: string\r\n        }>\r\n    }\r\n}\r\nexport const fetchGQLArtistOverview = async (uri: SpotifyURI) =>\r\n    (\r\n        await GraphQL.Request(GraphQL.Definitions.queryArtistOverview, {\r\n            uri,\r\n            locale: Locale.getLocale(),\r\n            includePrerelease: true,\r\n        })\r\n    ).data.artistUnion as fetchGQLArtistOverviewRes\r\n\r\nexport type fetchGQLArtistDiscographyRes = {\r\n    __typename: \"artist\"\r\n    discography: {\r\n        all: ItemsReleases<Item2>\r\n    }\r\n}\r\nexport const fetchGQLArtistDiscography = async (uri: SpotifyURI, offset = 0, limit = 116) =>\r\n    (\r\n        await GraphQL.Request(GraphQL.Definitions.queryArtistDiscographyAll, {\r\n            uri,\r\n            offset,\r\n            limit,\r\n        })\r\n    ).data.artistUnion as fetchGQLArtistDiscographyRes\r\n\r\ntype fetchGQLArtistRelatedRes = Array<{\r\n    id: string\r\n    uri: SpotifyURI\r\n    profile: {\r\n        name: string\r\n    }\r\n    visuals: {\r\n        avatarImage: {\r\n            sources: Array<Spicetify.Platform.ImageSized>\r\n        }\r\n    }\r\n}>\r\nexport const fetchGQLArtistRelated = async (uri: SpotifyURI) =>\r\n    (\r\n        await GraphQL.Request(GraphQL.Definitions.queryArtistRelated, {\r\n            uri,\r\n            locale: Locale.getLocale(),\r\n        })\r\n    ).data.artistUnion.relatedContent.relatedArtists.items as fetchGQLArtistRelatedRes\r\n\r\n/*                          Spotify Web API                                   */\r\n\r\nexport const fetchWebSoundOfSpotifyPlaylist = async (genre: string) => {\r\n    const name = `The Sound Of ${genre}`\r\n    const re = new RegExp(`^${escapeRegex(name)}$`, \"i\")\r\n    const res = await spotifyApi.search(name, [\"playlist\"])\r\n    const item = res.playlists.items.find(item => item?.owner.id === \"thesoundsofspotify\" && re.test(item.name))\r\n    return item?.uri\r\n}\r\n\r\n/*                          Last FM                                       */\r\n\r\nexport interface fetchLastFMTrackResMinimal {\r\n    track: {\r\n        name: string\r\n        mbid: string\r\n        url: string\r\n        duration: string\r\n        listeners: string\r\n        playcount: string\r\n        artist: {\r\n            name: string\r\n            mbid: string\r\n            url: string\r\n        }\r\n        album: {\r\n            artist: string\r\n            title: string\r\n            mbid: string\r\n            url: string\r\n        }\r\n        userplaycount: string\r\n        userloved: string\r\n        toptags: {\r\n            tag: Array<{\r\n                name: string\r\n                url: string\r\n            }>\r\n        }\r\n        wiki: {\r\n            published: string\r\n            summary: string\r\n            content: string\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchLastFMTrack = async (LFMApiKey: string, artist: string, trackName: string, lastFmUsername = \"\") => {\r\n    const url = new URL(\"https://ws.audioscrobbler.com/2.0/\")\r\n    url.searchParams.append(\"method\", \"track.getInfo\")\r\n    url.searchParams.append(\"api_key\", LFMApiKey)\r\n    url.searchParams.append(\"artist\", artist)\r\n    url.searchParams.append(\"track\", trackName)\r\n    url.searchParams.append(\"format\", \"json\")\r\n    url.searchParams.append(\"username\", lastFmUsername)\r\n\r\n    const res = (await fetch(url).then(res => res.json())) as fetchLastFMTrackResMinimal\r\n\r\n    return res.track\r\n}\r\n\r\n/*                          Youtube                                       */\r\n\r\nexport interface SearchYoutubeResMinimal {\r\n    items: Array<{\r\n        id: {\r\n            videoId: string\r\n        }\r\n        snippet: {\r\n            publishedAt: string\r\n            channelId: string\r\n            title: string\r\n            description: string\r\n            channelTitle: string\r\n            publishTime: string\r\n        }\r\n    }>\r\n}\r\n\r\nexport const searchYoutube = async (YouTubeApiKey: string, searchString: string) => {\r\n    const url = new URL(\"https://www.googleapis.com/youtube/v3/search\")\r\n    url.searchParams.append(\"part\", \"snippet\")\r\n    url.searchParams.append(\"maxResults\", \"10\")\r\n    url.searchParams.append(\"q\", searchString)\r\n    url.searchParams.append(\"type\", \"video\")\r\n    url.searchParams.append(\"key\", YouTubeApiKey)\r\n\r\n    return (await fetch(url).then(res => res.json())) as SearchYoutubeResMinimal\r\n}\r\n\r\n//\r\n\r\nexport type Items<A> = {\r\n    items: Array<A>\r\n}\r\nexport type ItemsWithCount<A> = Items<A> & {\r\n    totalCount: number\r\n}\r\n\r\nexport type ItemsReleases<A> = ItemsWithCount<{\r\n    releases: Items<A>\r\n}>\r\n\r\ntype Date = (\r\n    | {\r\n          year: number\r\n          month?: number\r\n          day?: number\r\n          hour?: number\r\n          mintue?: number\r\n          second?: number\r\n          precision: \"YEAR\"\r\n      }\r\n    | {\r\n          year: number\r\n          month: number\r\n          day?: number\r\n          hour?: number\r\n          mintue?: number\r\n          second?: number\r\n          precision: \"MONTH\"\r\n      }\r\n    | {\r\n          year: number\r\n          month: number\r\n          day: number\r\n          hour?: number\r\n          mintue?: number\r\n          second?: number\r\n          precision: \"DAY\"\r\n      }\r\n    | {\r\n          year: number\r\n          month: number\r\n          day: number\r\n          hour: number\r\n          mintue?: number\r\n          second?: number\r\n          precision: \"HOUR\"\r\n      }\r\n    | {\r\n          year: number\r\n          month: number\r\n          day: number\r\n          hour: number\r\n          mintue: number\r\n          second?: number\r\n          precision: \"MINUTE\"\r\n      }\r\n    | {\r\n          year: number\r\n          month: number\r\n          day: number\r\n          hour: number\r\n          mintue: number\r\n          second: number\r\n          precision: \"SECOND\"\r\n      }\r\n) & {\r\n    isoString: string\r\n}\r\n\r\ntype Playability = {\r\n    playable: boolean\r\n    reason: \"PLAYABLE\" | string\r\n}\r\n\r\nexport type ItemBase = {\r\n    id: string\r\n    uri: string\r\n    name: string\r\n    type: \"SINGLE\" | \"ALBUM\" | \"COMPILATION\" | string\r\n    coverArt: {\r\n        sources: Array<Spicetify.Platform.ImageSized>\r\n    }\r\n    tracks: {\r\n        totalCount: number\r\n    }\r\n    playability: Playability\r\n    sharingInfo: {\r\n        shareId: string\r\n        shareUrl: string\r\n    }\r\n}\r\n\r\ntype Item1 = ItemBase & {\r\n    copyright: {\r\n        items: Array<{\r\n            type: string\r\n            text: string\r\n        }>\r\n    }\r\n    date: Date\r\n\r\n    label: string\r\n}\r\n\r\ntype Item2 = ItemBase & {\r\n    date: {\r\n        year: number\r\n        isoString: string\r\n    }\r\n}\r\n", "export type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nconst { Player, URI } = Spicetify\r\nconst { PlayerAPI, History } = Spicetify.Platform\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: () => ({ before: \"start\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: () => ({ after: \"end\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const escapeRegex = (str: string) => str.replace(/[.*+?^${}()|[\\]\\\\]/g, `\\\\$&`)\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 1000,\r\n    location = document.body,\r\n    notEl?: E | null,\r\n) =>\r\n    new Promise((resolve: (value: Element) => void, reject) => {\r\n        const onMutation = () => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el) {\r\n                if (notEl && el === notEl) {\r\n                } else {\r\n                    observer.disconnect()\r\n                    return resolve(el)\r\n                }\r\n            }\r\n        }\r\n\r\n        const observer = new MutationObserver(onMutation)\r\n        onMutation()\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout)\r\n            setTimeout(() => {\r\n                observer.disconnect()\r\n                reject()\r\n            }, timeout)\r\n    })\r\n\r\nexport const trapElement = <E extends Element>(\r\n    selector: string,\r\n    callback: (el: E | null, lastEl: E | null) => void,\r\n    location = document.body,\r\n) => {\r\n    let lastEl: E | null = null\r\n\r\n    const observer = new MutationObserver(() => {\r\n        const el = document.querySelector<E>(selector)\r\n        if (el !== lastEl) callback(el, lastEl)\r\n        lastEl = el\r\n    })\r\n\r\n    observer.observe(location, {\r\n        childList: true,\r\n        subtree: true,\r\n    })\r\n}\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const getReactProps = (element: Element) =>\r\n    element[Object.keys(element).find(k => k.startsWith(\"__reactProps$\")) as keyof typeof element] as any\r\n\r\nexport const createQueueItem = (queued: boolean) => (uri: SpotifyURI) => ({\r\n    contextTrack: {\r\n        uri,\r\n        uid: \"\",\r\n        metadata: {\r\n            is_queued: queued.toString(),\r\n        },\r\n    },\r\n    removed: [],\r\n    blocked: [],\r\n    provider: queued ? (\"queue\" as const) : (\"context\" as const),\r\n})\r\n\r\nexport const setQueue = async (nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>) => {\r\n    const { _queue, _client } = PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    return _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    }) as Promise<{ error: number; reasons: string }>\r\n}\r\n\r\nexport const setPlayingContext = (uri: SpotifyURI) => {\r\n    const { sessionId } = PlayerAPI._state\r\n    return PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri })\r\n}\r\n\r\nexport const onHistoryChanged = (\r\n    toMatchTo: string | RegExp | ((location: string) => boolean),\r\n    callback: (uri: SpotifyURI) => void,\r\n    dropDuplicates = true,\r\n) => {\r\n    const createMatchFn = (toMatchTo: string | RegExp | ((input: string) => boolean)) => {\r\n        switch (typeof toMatchTo) {\r\n            case \"string\":\r\n                return (input: string) => input?.startsWith(toMatchTo) ?? false\r\n\r\n            case \"function\":\r\n                return toMatchTo\r\n\r\n            default:\r\n                return (input: string) => toMatchTo.test(input)\r\n        }\r\n    }\r\n\r\n    let lastPathname = \"\"\r\n    const matchFn = createMatchFn(toMatchTo)\r\n\r\n    const historyChanged = ({ pathname }: any) => {\r\n        if (matchFn(pathname)) {\r\n            if (dropDuplicates && lastPathname === pathname) {\r\n            } else callback(URI.fromString(pathname).toString())\r\n        }\r\n        lastPathname = pathname\r\n    }\r\n\r\n    historyChanged(History.location ?? {})\r\n    return History.listen(historyChanged)\r\n}\r\n\r\nexport const onSongChanged = (callback: (state?: Spicetify.PlayerState) => void) => {\r\n    callback(Player.data)\r\n    Player.addEventListener(\"songchange\", event => callback(event!.data))\r\n}\r\n", "// @deno-types=\"npm:@types/lodash\"\r\nimport { default as ld } from \"https://esm.sh/lodash\"\r\nexport const _ = ld\r\n\r\n// @deno-types=\"npm:@types/lodash/fp\"\r\nimport { default as ld_fp } from \"https://esm.sh/lodash/fp\"\r\nexport const fp = ld_fp\r\n", "import { Track } from \"https://esm.sh/v135/@fostertheweb/spotify-web-api-ts-sdk/dist/mjs/types.js\"\r\n\r\nimport { TopTracksItem, fetchGQLAlbumRes } from \"./api.ts\"\r\n\r\nexport type TrackData = {\r\n    uri: string\r\n    uid?: string\r\n    name: string\r\n    albumUri: string\r\n    albumName?: string\r\n    artistUri: string\r\n    artistName: string\r\n    durationMilis: number\r\n    playcount?: number\r\n    popularity?: number\r\n    releaseDate?: number\r\n    lastfmPlaycount?: number\r\n    scrobbles?: number\r\n    personalScrobbles?: number\r\n}\r\n\r\nexport const parseTopTrackFromArtist = ({ track }: TopTracksItem) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: track.albumOfTrack.uri,\r\n    albumName: undefined,\r\n    artistUri: track.artists.items[0].uri,\r\n    artistName: track.artists.items[0].profile.name,\r\n    durationMilis: track.duration.totalMilliseconds,\r\n    playcount: Number(track.playcount),\r\n    popularity: undefined,\r\n    releaseDate: undefined,\r\n})\r\n\r\nexport const parseArtistLikedTrack = (track: Spicetify.Platform.Track) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: track.album.uri,\r\n    albumName: track.album.name,\r\n    artistUri: track.artists[0].uri,\r\n    artistName: track.artists[0].name,\r\n    durationMilis: track.duration.milliseconds,\r\n    playcount: undefined,\r\n    popularity: undefined,\r\n    releaseDate: undefined,\r\n})\r\n\r\nexport const parseAlbumTrack = ({ track }: fetchGQLAlbumRes[\"tracks\"][\"items\"][0]) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: \"\", // gets filled in later\r\n    albumName: \"\", // gets filled in later\r\n    artistUri: track.artists.items[0].uri,\r\n    artistName: track.artists.items[0].profile.name,\r\n    durationMilis: track.duration.totalMilliseconds,\r\n    playcount: Number(track.playcount),\r\n    popularity: undefined,\r\n    releaseDate: -1, // gets filled in later\r\n})\r\n\r\nexport const parsePlaylistAPITrack = (track: Spicetify.Platform.PlaylistAPI.Track) => ({\r\n    uri: track.uri,\r\n    uid: track.uid,\r\n    name: track.name,\r\n    albumUri: track.album.uri,\r\n    albumName: track.album.name,\r\n    artistUri: track.artists[0].uri,\r\n    artistName: track.artists[0].name,\r\n    durationMilis: track.duration.milliseconds,\r\n    playcount: undefined,\r\n    popularity: undefined,\r\n    releaseDate: undefined,\r\n})\r\n\r\nexport const parseWebAPITrack = (track: Track) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: track.album.uri,\r\n    albumName: track.album.name,\r\n    artistUri: track.artists[0].uri,\r\n    artistName: track.artists[0].name,\r\n    durationMilis: track.duration_ms,\r\n    playcount: undefined,\r\n    popularity: track.popularity,\r\n    releaseDate: new Date(track.album.release_date).getTime(),\r\n})\r\n\r\nexport const parseLibraryAPILikedTracks = (track: Spicetify.Platform.Track) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: track.album.uri,\r\n    albumName: track.album.name,\r\n    artistUri: track.artists[0].uri,\r\n    artistName: track.artists[0].name,\r\n    durationMilis: track.duration.milliseconds,\r\n    playcount: undefined,\r\n    popularity: undefined,\r\n    releaseDate: undefined,\r\n})\r\n", "import { task } from \"https://esm.sh/fp-ts\"\r\nimport { SettingsSection } from \"../../shared/settings.tsx\"\r\n\r\nconst settings = new SettingsSection(\"Search On YouTube\", \"search-on-youtube\").addInput(\r\n    {\r\n        id: \"YouTubeApiKey\",\r\n        desc: \"YouTube API Key\",\r\n        inputType: \"text\",\r\n    },\r\n    task.of(\"***************************************\"),\r\n)\r\n\r\nsettings.pushSettings()\r\n\r\nexport const CONFIG = settings.toObject() as { YouTubeApiKey: string }\r\n", "import { task } from \"https://esm.sh/fp-ts\"\r\nimport { SectionTitle, SettingColumn, SettingSection, SettingText, SettingToggle } from \"./modules.ts\"\r\nimport { sleep } from \"./util.ts\"\r\n\r\nconst { React, ReactDOM, LocalStorage } = Spicetify\r\nconst { ButtonSecondary } = Spicetify.ReactComponent\r\nconst { History } = Spicetify.Platform\r\n\r\ntype FieldToProps<A> = Omit<A, \"type\">\r\n\r\nexport const enum FieldType {\r\n    BUTTON = \"button\",\r\n    TOGGLE = \"toggle\",\r\n    INPUT = \"input\",\r\n    HIDDEN = \"hidden\",\r\n}\r\n\r\nexport interface BaseField {\r\n    id: string\r\n    type: FieldType\r\n    desc: string\r\n}\r\n\r\nexport type SettingsField = HiddenField | InputField | ButtonField | ToggleField\r\n\r\nexport interface ButtonField extends BaseField {\r\n    type: FieldType.BUTTON\r\n    text: string\r\n    onClick?: () => void\r\n}\r\nexport interface ToggleField extends BaseField {\r\n    type: FieldType.TOGGLE\r\n    onSelected?: (checked: boolean) => void\r\n}\r\n\r\nexport interface InputField extends BaseField {\r\n    type: FieldType.INPUT\r\n    inputType: string\r\n    onChange?: (value: string) => void\r\n}\r\n\r\nexport interface HiddenField extends BaseField {\r\n    type: FieldType.HIDDEN\r\n}\r\n\r\nexport class SettingsSection {\r\n    private stopHistoryListener: any\r\n\r\n    constructor(public name: string, public id: string, public sectionFields: { [key: string]: SettingsField } = {}) {}\r\n\r\n    pushSettings = () => {\r\n        if (this.stopHistoryListener) this.stopHistoryListener()\r\n\r\n        this.stopHistoryListener = History.listen(() => this.render())\r\n        this.render()\r\n    }\r\n\r\n    toObject = () =>\r\n        new Proxy(\r\n            {},\r\n            {\r\n                get: (target, prop) => SettingsSection.getFieldValue(this.getId(prop.toString())),\r\n            },\r\n        )\r\n\r\n    private render = async () => {\r\n        while (!document.getElementById(\"desktop.settings.selectLanguage\")) {\r\n            if (History.location.pathname !== \"/preferences\") return\r\n            await sleep(100)\r\n        }\r\n\r\n        const allSettingsContainer = document.querySelector(\".x-settings-container\")!\r\n\r\n        let pluginSettingsContainer = Array.from(allSettingsContainer.children).find(({ id }) => id === this.id)\r\n\r\n        if (!pluginSettingsContainer) {\r\n            pluginSettingsContainer = document.createElement(\"div\")\r\n            pluginSettingsContainer.id = this.id\r\n            pluginSettingsContainer.className = \"settingsContainer\"\r\n            allSettingsContainer.appendChild(pluginSettingsContainer)\r\n        }\r\n\r\n        ReactDOM.render(<this.SettingsSection />, pluginSettingsContainer)\r\n    }\r\n\r\n    addButton = (props: FieldToProps<ButtonField>) => {\r\n        this.addField(FieldType.BUTTON, props)\r\n        return this\r\n    }\r\n\r\n    addToggle = (props: FieldToProps<ToggleField>, defaultValue = task.of(false)) => {\r\n        this.addField(FieldType.TOGGLE, props, defaultValue)\r\n        return this\r\n    }\r\n\r\n    addInput = (props: FieldToProps<InputField>, defaultValue = task.of(\"\")) => {\r\n        this.addField(FieldType.INPUT, props, defaultValue)\r\n        return this\r\n    }\r\n\r\n    private addField(type: FieldType, opts: FieldToProps<SettingsField>, defaultValue?: any) {\r\n        if (defaultValue !== undefined) {\r\n            const settingId = this.getId(opts.id)\r\n            SettingsSection.setDefaultFieldValue(settingId, defaultValue)\r\n        }\r\n        const field = Object.assign({}, opts, { type }) as SettingsField\r\n        this.sectionFields[opts.id] = field\r\n    }\r\n\r\n    getId = (nameId: string) => [\"extensions\", this.id, nameId].join(\":\")\r\n\r\n    private useStateFor = <A,>(id: string) => {\r\n        const [value, setValueState] = React.useState(SettingsSection.getFieldValue<A>(id))\r\n\r\n        return [\r\n            value,\r\n            (newValue: A) => {\r\n                if (newValue !== undefined) {\r\n                    setValueState(newValue)\r\n                    SettingsSection.setFieldValue(id!, newValue)\r\n                }\r\n            },\r\n        ] as const\r\n    }\r\n\r\n    static getFieldValue = <R,>(id: string): R => JSON.parse(LocalStorage.get(id) ?? \"null\")\r\n\r\n    static setFieldValue = (id: string, newValue: any) => LocalStorage.set(id, JSON.stringify(newValue))\r\n\r\n    private static setDefaultFieldValue = async (id: string, defaultValue: task.Task<any>) => {\r\n        if (SettingsSection.getFieldValue(id) === null) SettingsSection.setFieldValue(id, await defaultValue())\r\n    }\r\n\r\n    private toReactComponent = (field: SettingsField) => {\r\n        switch (field.type) {\r\n            case FieldType.BUTTON:\r\n                return this.ButtonField(field)\r\n            case FieldType.TOGGLE:\r\n                return this.ToggleField(field)\r\n            case FieldType.INPUT:\r\n                return this.InputField(field)\r\n            default:\r\n                return <></>\r\n        }\r\n    }\r\n\r\n    private SettingsSection = () => (\r\n        <SettingSection filterMatchQuery={this.name}>\r\n            <SectionTitle>{this.name}</SectionTitle>\r\n            {Object.values(this.sectionFields).map(this.toReactComponent)}\r\n        </SettingSection>\r\n    )\r\n\r\n    SettingField = ({ field, children }: { field: SettingsField; children?: any }) => (\r\n        <SettingColumn filterMatchQuery={field.id}>\r\n            <div className=\"x-settings-firstColumn\">\r\n                <SettingText htmlFor={field.id}>{field.desc}</SettingText>\r\n            </div>\r\n            <div className=\"x-settings-secondColumn\">{children}</div>\r\n        </SettingColumn>\r\n    )\r\n\r\n    ButtonField = (field: ButtonField) => (\r\n        <this.SettingField field={field}>\r\n            <ButtonSecondary id={field.id} buttonSize=\"sm\" onClick={field.onClick} className=\"x-settings-button\">\r\n                {field.text}\r\n            </ButtonSecondary>\r\n        </this.SettingField>\r\n    )\r\n\r\n    ToggleField = (field: ToggleField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<boolean>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <SettingToggle\r\n                    id={field.id}\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    onSelected={(checked: boolean) => {\r\n                        setValue(checked)\r\n                        field.onSelected?.(checked)\r\n                    }}\r\n                    className=\"x-settings-button\"\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n\r\n    InputField = (field: InputField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<string>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <input\r\n                    className=\"x-settings-input\"\r\n                    id={field.id}\r\n                    dir=\"ltr\"\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    type={field.inputType}\r\n                    onChange={e => {\r\n                        const value = e.currentTarget.value\r\n                        setValue(value)\r\n                        field.onChange?.(value)\r\n                    }}\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n}\r\n", "import { _ } from \"./deps.ts\"\r\n\r\n// @ts-expect-error webpackChunkOpen is only defined in the browser\r\nconst require = webpackChunkopen.push([[Symbol(\"Dummy module to extract require method\")], {}, re => re])\r\nconst cache = Object.keys(require.m).map(id => require(id))\r\nexport const modules = cache\r\n    .filter((module): module is Object => typeof module === \"object\")\r\n    .flatMap(module => Object.values(module))\r\nexport const functionModules = modules.filter((module): module is Function => typeof module === \"function\")\r\n\r\n// const reactObjects = modules.filter(m => m?.$$typeof)\r\n\r\n// const reactForwardRefSymbol = Spicetify.React.forwardRef().$$typeof\r\n// const reactForwardRefs = reactObjects.filter(m => m.$$typeof === reactForwardRefSymbol)\r\n\r\n// const reactMemoSymbol = Spicetify.React.memo().$$typeof\r\n// const reactMemos = reactObjects.filter(m => m.$$typeof === reactMemoSymbol)\r\n\r\nconst findModuleByStrings = (modules: Array<any>, ...filters: Array<string | RegExp>) =>\r\n    modules.find(f =>\r\n        _.overEvery(\r\n            filters.map(filter =>\r\n                typeof filter === \"string\" ? (s: string) => s.includes(filter) : (s: string) => filter.test(s),\r\n            ),\r\n        )(f.toString()),\r\n    )\r\n\r\nexport const CheckedPlaylistButtonIcon = findModuleByStrings(\r\n    functionModules,\r\n    \"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z\",\r\n)\r\n\r\nexport const SettingSection = findModuleByStrings(\r\n    functionModules,\r\n    \"function m(e){return(0,d.jsx)(r.k,{children:(0,d.jsx)(u,{...e})})}\",\r\n)\r\nexport const SectionTitle = findModuleByStrings(functionModules, \"textToHighlight\", \"textBase\")\r\nexport const SettingColumn = findModuleByStrings(functionModules, \"setSectionFilterMatchQueryValue\", \"filterMatchQuery\")\r\nexport const SettingText = findModuleByStrings(functionModules, \"textSubdued\", \"viola\")\r\nexport const SettingToggle = findModuleByStrings(functionModules, \"condensed\", \"onSelected\")\r\n\r\nexport const curationButtonClass = modules.find(m => m?.curationButton)!.curationButton\r\n", "import { searchYoutube, spotifyApi } from \"../../shared/api.ts\"\r\nimport { _ } from \"../../shared/deps.ts\"\r\nimport { parseWebAPITrack } from \"../../shared/parse.ts\"\r\nimport { SpotifyID, SpotifyURI, normalizeStr } from \"../../shared/util.ts\"\r\n\r\nimport { CONFIG } from \"./settings.ts\"\r\n\r\nconst { URI, ContextMenu } = Spicetify\r\n\r\nconst YTVidIDCache = new Map<SpotifyID, string>()\r\n\r\nconst showOnYouTube = async (uri: SpotifyURI) => {\r\n    const id = URI.fromString(uri)!.id!\r\n    if (!YTVidIDCache.get(id)) {\r\n        const track = parseWebAPITrack(await spotifyApi.tracks.get(id))\r\n        const searchString = `${track.artistName} - ${track.name} music video`\r\n\r\n        try {\r\n            const videos = await searchYoutube(CONFIG.YouTubeApiKey, searchString).then(res => res.items)\r\n            const normalizedTrackName = normalizeStr(track.name)\r\n\r\n            const video =\r\n                videos.find(video => {\r\n                    normalizeStr(video.snippet.title).includes(normalizedTrackName)\r\n                }) ?? videos[0]\r\n\r\n            YTVidIDCache.set(id, video.id.videoId)\r\n\r\n            window.open(`https://www.youtube.com/watch?v=${video.id.videoId}`)\r\n        } catch (_) {\r\n            window.open(`https://www.youtube.com/results?search_query=${encodeURIComponent(searchString)}`)\r\n        }\r\n    }\r\n}\r\n\r\nnew ContextMenu.Item(\r\n    \"Search on YouTube\",\r\n    ([uri]) => showOnYouTube(uri),\r\n    ([uri]) => _.overEvery([URI.isTrack])(uri),\r\n    `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"19px\" height=\"19px\"><path fill=\"currentColor\" d=\"M43.2,33.9c-0.4,2.1-2.1,3.7-4.2,4c-3.3,0.5-8.8,1.1-15,1.1c-6.1,0-11.6-0.6-15-1.1c-2.1-0.3-3.8-1.9-4.2-4C4.4,31.6,4,28.2,4,24c0-4.2,0.4-7.6,0.8-9.9c0.4-2.1,2.1-3.7,4.2-4C12.3,9.6,17.8,9,24,9c6.2,0,11.6,0.6,15,1.1c2.1,0.3,3.8,1.9,4.2,4c0.4,2.3,0.9,5.7,0.9,9.9C44,28.2,43.6,31.6,43.2,33.9z\"/><path fill=\"var(--spice-main)\" d=\"M20 31L20 17 32 24z\"/></svg>`,\r\n).register()\r\n"],
  "mappings": "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",
  "names": ["task", "require", "modules", "History", "History", "value", "task", "URI", "video", "_"]
}
