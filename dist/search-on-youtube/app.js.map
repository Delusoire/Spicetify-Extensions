{
  "version": 3,
  "sources": ["../../shared/api.ts", "../../shared/deps.ts", "../../shared/parse.ts", "../../shared/util.ts", "../../shared/modules.ts", "../../shared/settings.tsx", "../../extensions/search-on-youtube/settings.ts", "../../extensions/search-on-youtube/app.ts"],
  "sourcesContent": ["import { AccessToken, SpotifyApi } from \"https://esm.sh/@fostertheweb/spotify-web-api-ts-sdk\"\r\n\r\nimport { _ } from \"./deps.ts\"\r\n\r\nconst { CosmosAsync } = Spicetify\r\n\r\nexport const spotifyApi = SpotifyApi.withAccessToken(\"client-id\", {} as AccessToken, {\r\n    // @ts-ignore\r\n    fetch(url, opts) {\r\n        const { method } = opts!\r\n        // @ts-ignore\r\n        return CosmosAsync.resolve(method, url)\r\n    },\r\n    deserializer: {\r\n        deserialize(res) {\r\n            return (res as unknown as Spicetify.CosmosAsync.Response).body\r\n        },\r\n    },\r\n})\r\n\r\n/*                          Spotify Web API                                   */\r\n\r\nexport const fetchWebSoundOfSpotifyPlaylist = async (genre: string) => {\r\n    const name = `The Sound Of ${genre}`\r\n    const re = new RegExp(`^${_.escapeRegExp(name)}$`, \"i\")\r\n    const res = await spotifyApi.search(name, [\"playlist\"])\r\n    const item = res.playlists.items.find(item => item?.owner.id === \"thesoundsofspotify\" && re.test(item.name))\r\n    return item?.uri\r\n}\r\n\r\n/*                          Last FM                                       */\r\n\r\nexport interface fetchLastFMTrackResMinimal {\r\n    track: {\r\n        name: string\r\n        mbid: string\r\n        url: string\r\n        duration: string\r\n        listeners: string\r\n        playcount: string\r\n        artist: {\r\n            name: string\r\n            mbid: string\r\n            url: string\r\n        }\r\n        album: {\r\n            artist: string\r\n            title: string\r\n            mbid: string\r\n            url: string\r\n        }\r\n        userplaycount: string\r\n        userloved: string\r\n        toptags: {\r\n            tag: Array<{\r\n                name: string\r\n                url: string\r\n            }>\r\n        }\r\n        wiki: {\r\n            published: string\r\n            summary: string\r\n            content: string\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchLastFMTrack = async (LFMApiKey: string, artist: string, trackName: string, lastFmUsername = \"\") => {\r\n    const url = new URL(\"https://ws.audioscrobbler.com/2.0/\")\r\n    url.searchParams.append(\"method\", \"track.getInfo\")\r\n    url.searchParams.append(\"api_key\", LFMApiKey)\r\n    url.searchParams.append(\"artist\", artist)\r\n    url.searchParams.append(\"track\", trackName)\r\n    url.searchParams.append(\"format\", \"json\")\r\n    url.searchParams.append(\"username\", lastFmUsername)\r\n\r\n    const res = (await fetch(url).then(res => res.json())) as fetchLastFMTrackResMinimal\r\n\r\n    return res.track\r\n}\r\n\r\n/*                          Youtube                                       */\r\n\r\nexport interface SearchYoutubeResMinimal {\r\n    items: Array<{\r\n        id: {\r\n            videoId: string\r\n        }\r\n        snippet: {\r\n            publishedAt: string\r\n            channelId: string\r\n            title: string\r\n            description: string\r\n            channelTitle: string\r\n            publishTime: string\r\n        }\r\n    }>\r\n}\r\n\r\nexport const searchYoutube = async (YouTubeApiKey: string, searchString: string) => {\r\n    const url = new URL(\"https://www.googleapis.com/youtube/v3/search\")\r\n    url.searchParams.append(\"part\", \"snippet\")\r\n    url.searchParams.append(\"maxResults\", \"10\")\r\n    url.searchParams.append(\"q\", searchString)\r\n    url.searchParams.append(\"type\", \"video\")\r\n    url.searchParams.append(\"key\", YouTubeApiKey)\r\n\r\n    return (await fetch(url).then(res => res.json())) as SearchYoutubeResMinimal\r\n}\r\n", "// @deno-types=\"npm:@types/lodash\"\r\nimport { default as ld } from \"https://esm.sh/lodash\"\r\nexport const _ = ld\r\n\r\n// @deno-types=\"npm:@types/lodash/fp\"\r\nimport { default as ld_fp } from \"https://esm.sh/lodash/fp\"\r\nexport const fp = ld_fp\r\n", "import { Track } from \"https://esm.sh/v135/@fostertheweb/spotify-web-api-ts-sdk/dist/mjs/types.js\"\r\nimport { fetchAlbumRes } from \"./GraphQL/fetchAlbum.ts\"\r\nimport { TopTracksItem } from \"./GraphQL/sharedTypes.ts\"\r\n\r\nexport type TrackData = {\r\n    uri: string\r\n    uid?: string\r\n    name: string\r\n    albumUri: string\r\n    albumName?: string\r\n    artistUris: string[]\r\n    artistName: string\r\n    durationMilis: number\r\n    playcount?: number\r\n    popularity?: number\r\n    releaseDate?: number\r\n    lastfmPlaycount?: number\r\n    scrobbles?: number\r\n    personalScrobbles?: number\r\n}\r\n\r\nexport const parseTopTrackFromArtist = ({ track }: TopTracksItem) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: track.albumOfTrack.uri,\r\n    albumName: undefined,\r\n    artistUris: track.artists.items.map(artist => artist.uri),\r\n    artistName: track.artists.items[0].profile.name,\r\n    durationMilis: track.duration.totalMilliseconds,\r\n    playcount: Number(track.playcount),\r\n    popularity: undefined,\r\n    releaseDate: undefined,\r\n})\r\n\r\nexport const parseArtistLikedTrack = (track: Spicetify.Platform.Track) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: track.album.uri,\r\n    albumName: track.album.name,\r\n    artistUris: track.artists.map(artist => artist.uri),\r\n    artistName: track.artists[0].name,\r\n    durationMilis: track.duration.milliseconds,\r\n    playcount: undefined,\r\n    popularity: undefined,\r\n    releaseDate: undefined,\r\n})\r\n\r\nexport const parseAlbumTrack = ({ track }: fetchAlbumRes[\"tracks\"][\"items\"][0]) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: \"\", // gets filled in later\r\n    albumName: \"\", // gets filled in later\r\n    artistUris: track.artists.items.map(artist => artist.uri),\r\n    artistName: track.artists.items[0].profile.name,\r\n    durationMilis: track.duration.totalMilliseconds,\r\n    playcount: Number(track.playcount),\r\n    popularity: undefined,\r\n    releaseDate: -1, // gets filled in later\r\n})\r\n\r\nexport const parsePlaylistAPITrack = (track: Spicetify.Platform.PlaylistAPI.Track) => ({\r\n    uri: track.uri,\r\n    uid: track.uid,\r\n    name: track.name,\r\n    albumUri: track.album.uri,\r\n    albumName: track.album.name,\r\n    artistUris: track.artists.map(artist => artist.uri),\r\n    artistName: track.artists[0].name,\r\n    durationMilis: track.duration.milliseconds,\r\n    playcount: undefined,\r\n    popularity: undefined,\r\n    releaseDate: undefined,\r\n})\r\n\r\nexport const parseWebAPITrack = (track: Track) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: track.album.uri,\r\n    albumName: track.album.name,\r\n    artistUris: track.artists.map(artist => artist.uri),\r\n    artistName: track.artists[0].name,\r\n    durationMilis: track.duration_ms,\r\n    playcount: undefined,\r\n    popularity: track.popularity,\r\n    releaseDate: new Date(track.album.release_date).getTime(),\r\n})\r\n\r\nexport const parseLibraryAPILikedTracks = (track: Spicetify.Platform.Track) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: track.album.uri,\r\n    albumName: track.album.name,\r\n    artistUris: track.artists.map(artist => artist.uri),\r\n    artistName: track.artists[0].name,\r\n    durationMilis: track.duration.milliseconds,\r\n    playcount: undefined,\r\n    popularity: undefined,\r\n    releaseDate: undefined,\r\n})\r\n", "export type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nconst { URI } = Spicetify\r\nconst { PlayerAPI } = Spicetify.Platform\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: () => ({ before: \"start\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: () => ({ after: \"end\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport class PermanentMutationObserver extends MutationObserver {\r\n    target: HTMLElement | null = null\r\n\r\n    constructor(\r\n        targetSelector: string,\r\n        callback: MutationCallback,\r\n        opts: MutationObserverInit = {\r\n            childList: true,\r\n            subtree: true,\r\n        },\r\n    ) {\r\n        super(callback)\r\n        new MutationObserver(() => {\r\n            const nextTarget = document.querySelector<HTMLElement>(targetSelector)\r\n            if (nextTarget && !nextTarget.isEqualNode(this.target)) {\r\n                this.target && this.disconnect()\r\n                this.target = nextTarget\r\n                this.observe(this.target, opts)\r\n            }\r\n        }).observe(document.body, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n    }\r\n}\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 5000,\r\n    location = document.body,\r\n    notEl?: E | null,\r\n) =>\r\n    new Promise((resolve: (value: E) => void, reject) => {\r\n        const onMutation = () => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el) {\r\n                if (notEl && el === notEl) {\r\n                } else {\r\n                    observer.disconnect()\r\n                    return resolve(el)\r\n                }\r\n            }\r\n        }\r\n\r\n        const observer = new MutationObserver(onMutation)\r\n        onMutation()\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout)\r\n            setTimeout(() => {\r\n                observer.disconnect()\r\n                console.debug(\"waitForElement: timed out waiting for\", selector)\r\n                reject()\r\n            }, timeout)\r\n    })\r\n\r\nexport const formatUri = (uri: string) => URI.fromString(uri).toURI()\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const mainElement = document.querySelector(\"main\")!\r\nexport const [REACT_FIBER, REACT_PROPS] = Object.keys(mainElement)\r\n\r\nexport const createQueueItem =\r\n    (queued: boolean) =>\r\n    ({ uri, uid = \"\" }: { uri: string; uid?: string }) => ({\r\n        contextTrack: {\r\n            uri,\r\n            uid,\r\n            metadata: {\r\n                is_queued: queued.toString(),\r\n            },\r\n        },\r\n        removed: [],\r\n        blocked: [],\r\n        provider: queued ? (\"queue\" as const) : (\"context\" as const),\r\n    })\r\n\r\nexport const setQueue = async (\r\n    nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>,\r\n    contextUri?: string,\r\n) => {\r\n    const { _queue, _client } = PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    const res = await _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    })\r\n\r\n    await PlayerAPI.skipToNext()\r\n\r\n    if (contextUri) {\r\n        await new Promise<void>(resolve => {\r\n            PlayerAPI.getEvents().addListener(\"queue_update\", () => resolve(), { once: true })\r\n        })\r\n        await setPlayingContext(contextUri)\r\n    }\r\n\r\n    return res\r\n}\r\n\r\nexport const setPlayingContext = (uri: string) => {\r\n    const { sessionId } = PlayerAPI._state\r\n    return PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri })\r\n}\r\n", "// @ts-expect-error webpackChunkOpen is only defined in the browser\r\nconst require = webpackChunkopen.push([[Symbol(\"Dummy chunk to extract require method\")], {}, require => require])\r\nconst modules = Object.keys(require.m)\r\n    .map(id => require(id))\r\n    .filter((module): module is Object => typeof module === \"object\")\r\nexport const exportedMembers = modules.flatMap(module => Object.values(module)).filter(Boolean)\r\nexport const exportedFunctions = exportedMembers.filter((module): module is Function => typeof module === \"function\")\r\n\r\nconst exportedReactObjects = Object.groupBy(exportedMembers, x => x.$$typeof)\r\nconst exportedContexts = exportedReactObjects[Symbol.for(\"react.context\")]!\r\nconst exportedForwardRefs = exportedReactObjects[Symbol.for(\"react.forward_ref\")]!\r\nconst exportedMemos = exportedReactObjects[Symbol.for(\"react.memo\")]!\r\n\r\nconst findByStrings = (modules: Array<any>, ...filters: Array<string | RegExp>) =>\r\n    modules.find(f =>\r\n        filters\r\n            .map(filter =>\r\n                typeof filter === \"string\" ? (s: string) => s.includes(filter) : (s: string) => filter.test(s),\r\n            )\r\n            .every(filterFn => filterFn(f.toString())),\r\n    )\r\n\r\nexport const CheckedPlaylistButtonIcon = findByStrings(\r\n    exportedFunctions,\r\n    \"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z\",\r\n)\r\n\r\nexport const Highlight = findByStrings(exportedFunctions, \"hightlightClassName\", \"textToHighlight\")\r\n\r\nexport const SettingColumn = findByStrings(exportedFunctions, \"setSectionFilterMatchQueryValue\", \"filterMatchQuery\")\r\nexport const SettingText = findByStrings(exportedFunctions, \"textSubdued\", \"dangerouslySetInnerHTML\")\r\nexport const SettingToggle = findByStrings(exportedFunctions, \"condensed\", \"onSelected\")\r\n\r\nexport const curationButtonClass = exportedMembers.find(m => m?.curationButton)!.curationButton\r\n\r\nexport const rs_w = exportedForwardRefs.filter(x => x.render?.toString().includes(\"hasLeadingOrMedia\"))\r\n", "import { SettingColumn, SettingText, SettingToggle } from \"./modules.ts\"\r\nimport { sleep } from \"./util.ts\"\r\nimport { _ } from \"./deps.ts\"\r\n\r\ntype Task<A> = (() => Awaited<A>) | (() => Promise<Awaited<A>>)\r\n\r\nconst { React, ReactDOM, LocalStorage } = Spicetify\r\nconst { ButtonSecondary } = Spicetify.ReactComponent\r\nconst { History } = Spicetify.Platform\r\n\r\ntype FieldToProps<A> = Omit<A, \"type\">\r\n\r\nexport enum FieldType {\r\n    BUTTON = \"button\",\r\n    TOGGLE = \"toggle\",\r\n    INPUT = \"input\",\r\n    HIDDEN = \"hidden\",\r\n}\r\n\r\nexport interface BaseField {\r\n    id: string\r\n    type: FieldType\r\n    desc: string\r\n}\r\n\r\nexport type SettingsField = HiddenField | InputField | ButtonField | ToggleField\r\n\r\nexport interface ButtonField extends BaseField {\r\n    type: FieldType.BUTTON\r\n    text: string\r\n    onClick?: () => void\r\n}\r\nexport interface ToggleField extends BaseField {\r\n    type: FieldType.TOGGLE\r\n    onSelected?: (checked: boolean) => void\r\n}\r\n\r\nexport interface InputField extends BaseField {\r\n    type: FieldType.INPUT\r\n    inputType: string\r\n    onChange?: (value: string) => void\r\n}\r\n\r\nexport interface HiddenField extends BaseField {\r\n    type: FieldType.HIDDEN\r\n}\r\n\r\nif (!globalThis.__renderSettingSections) {\r\n    globalThis.__settingSections = new Set()\r\n    globalThis.__renderSettingSections = () => Array.from(globalThis.__settingSections)\r\n}\r\n\r\nexport class SettingsSection {\r\n    public id: string\r\n\r\n    constructor(public name: string, public sectionFields: { [key: string]: React.JSX.Element } = {}) {\r\n        this.id = _.kebabCase(name)\r\n    }\r\n\r\n    pushSettings = () => {\r\n        __settingSections.add(<this.SettingsSection />)\r\n    }\r\n\r\n    toObject = () =>\r\n        new Proxy(\r\n            {},\r\n            {\r\n                get: (target, prop) => SettingsSection.getFieldValue(this.getId(prop.toString())),\r\n                set: (target, prop, newValue) => {\r\n                    const id = this.getId(prop.toString())\r\n                    if (SettingsSection.getFieldValue(id) === newValue) return false\r\n                    SettingsSection.setFieldValue(id, newValue)\r\n                    return true\r\n                },\r\n            },\r\n        )\r\n\r\n    addButton = (props: FieldToProps<ButtonField>) => {\r\n        this.addField(FieldType.BUTTON, props, this.ButtonField)\r\n        return this\r\n    }\r\n\r\n    addToggle = (props: FieldToProps<ToggleField>, defaultValue: Task<boolean> = () => false) => {\r\n        this.addField(FieldType.TOGGLE, props, this.ToggleField, defaultValue)\r\n        return this\r\n    }\r\n\r\n    addInput = (props: FieldToProps<InputField>, defaultValue: Task<string> = () => \"\") => {\r\n        this.addField(FieldType.INPUT, props, this.InputField, defaultValue)\r\n        return this\r\n    }\r\n\r\n    private addField<SF extends SettingsField>(\r\n        type: SF[\"type\"],\r\n        opts: FieldToProps<SF>,\r\n        fieldComponent: (field: SF) => React.JSX.Element,\r\n        defaultValue?: any,\r\n    ) {\r\n        if (defaultValue !== undefined) {\r\n            const settingId = this.getId(opts.id)\r\n            SettingsSection.setDefaultFieldValue(settingId, defaultValue)\r\n        }\r\n        const field = Object.assign({}, opts, { type }) as SF\r\n        this.sectionFields[opts.id] = fieldComponent(field)\r\n    }\r\n\r\n    getId = (nameId: string) => [\"extensions\", this.id, nameId].join(\":\")\r\n\r\n    private useStateFor = <A,>(id: string) => {\r\n        const [value, setValueState] = React.useState(SettingsSection.getFieldValue<A>(id))\r\n\r\n        return [\r\n            value,\r\n            (newValue: A) => {\r\n                if (newValue !== undefined) {\r\n                    setValueState(newValue)\r\n                    SettingsSection.setFieldValue(id, newValue)\r\n                }\r\n            },\r\n        ] as const\r\n    }\r\n\r\n    static getFieldValue = <R,>(id: string): R => JSON.parse(LocalStorage.get(id) ?? \"null\")\r\n\r\n    static setFieldValue = (id: string, newValue: any) => LocalStorage.set(id, JSON.stringify(newValue))\r\n\r\n    private static setDefaultFieldValue = async (id: string, defaultValue: Task<any>) => {\r\n        if (SettingsSection.getFieldValue(id) === null) SettingsSection.setFieldValue(id, await defaultValue())\r\n    }\r\n\r\n    private SettingsSection = () => (\r\n        <__SettingSection filterMatchQuery={this.name}>\r\n            <__SectionTitle>{this.name}</__SectionTitle>\r\n            {Object.values(this.sectionFields)}\r\n        </__SettingSection>\r\n    )\r\n\r\n    SettingField = ({ field, children }: { field: SettingsField; children?: any }) => (\r\n        <SettingColumn filterMatchQuery={field.id}>\r\n            <div className=\"x-settings-firstColumn\">\r\n                <SettingText htmlFor={field.id}>{field.desc}</SettingText>\r\n            </div>\r\n            <div className=\"x-settings-secondColumn\">{children}</div>\r\n        </SettingColumn>\r\n    )\r\n\r\n    ButtonField = (field: ButtonField) => (\r\n        <this.SettingField field={field}>\r\n            <ButtonSecondary id={field.id} buttonSize=\"sm\" onClick={field.onClick} className=\"x-settings-button\">\r\n                {field.text}\r\n            </ButtonSecondary>\r\n        </this.SettingField>\r\n    )\r\n\r\n    ToggleField = (field: ToggleField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<boolean>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <SettingToggle\r\n                    id={field.id}\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    onSelected={(checked: boolean) => {\r\n                        setValue(checked)\r\n                        field.onSelected?.(checked)\r\n                    }}\r\n                    className=\"x-settings-button\"\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n\r\n    InputField = (field: InputField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<string>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <input\r\n                    className=\"x-settings-input\"\r\n                    id={field.id}\r\n                    dir=\"ltr\"\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    type={field.inputType}\r\n                    onChange={e => {\r\n                        const value = e.currentTarget.value\r\n                        setValue(value)\r\n                        field.onChange?.(value)\r\n                    }}\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n}\r\n", "import { SettingsSection } from \"../../shared/settings.tsx\"\r\n\r\nconst settings = new SettingsSection(\"Search On YouTube\").addInput(\r\n    {\r\n        id: \"YouTubeApiKey\",\r\n        desc: \"YouTube API Key\",\r\n        inputType: \"text\",\r\n    },\r\n    () => \"***************************************\",\r\n)\r\n\r\nsettings.pushSettings()\r\n\r\nexport const CONFIG = settings.toObject() as { YouTubeApiKey: string }\r\n", "import { searchYoutube, spotifyApi } from \"../../shared/api.ts\"\r\nimport { _ } from \"../../shared/deps.ts\"\r\nimport { parseWebAPITrack } from \"../../shared/parse.ts\"\r\nimport { SpotifyID, SpotifyURI, normalizeStr } from \"../../shared/util.ts\"\r\n\r\nimport { CONFIG } from \"./settings.ts\"\r\n\r\nconst { URI, ContextMenu } = Spicetify\r\n\r\nconst YTVidIDCache = new Map<SpotifyID, string>()\r\n\r\nconst showOnYouTube = async (uri: SpotifyURI) => {\r\n    const id = URI.fromString(uri)!.id!\r\n    if (!YTVidIDCache.get(id)) {\r\n        const track = parseWebAPITrack(await spotifyApi.tracks.get(id))\r\n        const searchString = `${track.artistName} - ${track.name} music video`\r\n\r\n        try {\r\n            const videos = await searchYoutube(CONFIG.YouTubeApiKey, searchString).then(res => res.items)\r\n            const normalizedTrackName = normalizeStr(track.name)\r\n\r\n            const video =\r\n                videos.find(video => {\r\n                    normalizeStr(video.snippet.title).includes(normalizedTrackName)\r\n                }) ?? videos[0]\r\n\r\n            YTVidIDCache.set(id, video.id.videoId)\r\n\r\n            window.open(`https://www.youtube.com/watch?v=${video.id.videoId}`)\r\n        } catch (_) {\r\n            window.open(`https://www.youtube.com/results?search_query=${encodeURIComponent(searchString)}`)\r\n        }\r\n    }\r\n}\r\n\r\nnew ContextMenu.Item(\r\n    \"Search on YouTube\",\r\n    ([uri]) => showOnYouTube(uri),\r\n    ([uri]) => _.overSome([URI.isTrack])(uri),\r\n    `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"19px\" height=\"19px\"><path fill=\"currentColor\" d=\"M43.2,33.9c-0.4,2.1-2.1,3.7-4.2,4c-3.3,0.5-8.8,1.1-15,1.1c-6.1,0-11.6-0.6-15-1.1c-2.1-0.3-3.8-1.9-4.2-4C4.4,31.6,4,28.2,4,24c0-4.2,0.4-7.6,0.8-9.9c0.4-2.1,2.1-3.7,4.2-4C12.3,9.6,17.8,9,24,9c6.2,0,11.6,0.6,15,1.1c2.1,0.3,3.8,1.9,4.2,4c0.4,2.3,0.9,5.7,0.9,9.9C44,28.2,43.6,31.6,43.2,33.9z\"/><path fill=\"var(--spice-main)\" d=\"M20 31L20 17 32 24z\"/></svg>`,\r\n).register()\r\n"],
  "mappings": "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",
  "names": ["require", "modules", "value", "URI", "video", "_"]
}
