import{array as Pt}from"https://esm.sh/fp-ts";import{flip as Tt,pipe as Ut,tupled as F}from"https://esm.sh/fp-ts/function";import{startsWith as wt}from"https://esm.sh/fp-ts/string";import{anyPass as $}from"https://esm.sh/fp-ts-std/Predicate";import{array as u,eq as L,string as v,record as Y,semigroup as K,function as p}from"https://esm.sh/fp-ts";import{guard as k,memoize as B}from"https://esm.sh/fp-ts-std/Function";var g=t=>k(t);var C=t=>async e=>t(await e),A=t=>e=>i=>i[t]===e;var o=t=>e=>p.flow(u.chunksOf(t),u.map(e),i=>Promise.all(i),C(u.flatten));var S=t=>p.pipe(t,p.tupled,B(L.contramap(JSON.stringify)(v.Eq)),p.untupled);import{array as tt,function as b}from"https://esm.sh/fp-ts";var et={before:{start:b.constant({before:"start"}),fromUri:t=>({before:{uri:t}}),fromUid:t=>({before:{uid:t}})},after:{end:b.constant({after:"end"}),fromUri:t=>({after:{uri:t}}),fromUid:t=>({after:{uid:t}})}};var d=t=>t.normalize("NFKD").replace(/\(.*\)/g,"").replace(/\[.*\]/g,"").replace(/-_,/g," ").replace(/[^a-zA-Z0-9 ]/g,"").replace(/\s+/g," ").toLowerCase().trim();var h=t=>new Promise(e=>setTimeout(e,t));var pt=o(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${t.join(",")}`)).artists),ct=o(1)(async([t])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${t}`)]),ut=o(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${t.join(",")}`)).albums),x=o(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${t.join(",")}`)).tracks);var N=async(t,e,i,s="")=>{let r=new URL("https://ws.audioscrobbler.com/2.0/");return r.searchParams.append("method","track.getInfo"),r.searchParams.append("api_key",t),r.searchParams.append("artist",e),r.searchParams.append("track",i),r.searchParams.append("format","json"),r.searchParams.append("username",s),await fetch(r).then(a=>a.json())},dt=S(N),I=async(t,e)=>{let i=new URL("https://www.googleapis.com/youtube/v3/search");return i.searchParams.append("part","snippet"),i.searchParams.append("maxResults","10"),i.searchParams.append("q",e),i.searchParams.append("type","video"),i.searchParams.append("key",t),await fetch(i).then(s=>s.json())};var P=t=>({albumName:t.album.name,albumUri:t.album.uri,artistName:t.artists[0].name,artistUri:t.artists[0].uri,durationMilis:t.duration_ms,name:t.name,playcount:void 0,popularity:t.popularity,releaseDate:new Date(t.album.release_date).getTime(),uri:t.uri});import{task as W}from"https://esm.sh/fp-ts";import{task as R}from"https://esm.sh/fp-ts";var{React:n,ReactDOM:D}=Spicetify,{ButtonSecondary:O}=Spicetify.ReactComponent,T=webpackChunkopen.push([[Symbol()],{},t=>t]),E=Object.keys(T.m).map(t=>T(t)),M=E.filter(t=>typeof t=="object").map(t=>{try{return Object.values(t)}catch{}}).flat(),l=M.filter(t=>typeof t=="function"),_=l.find(t=>/^function .\(.\)\{return\(0,.\.jsx\)\(/.test(t)),G=l.find(t=>t.toString().includes("textToHighlight")),Q=l.find(t=>t.toString().includes("setSectionFilterMatchQueryValue")&&t.toString().includes("filterMatchQuery")),j=l.find(t=>t.toString().includes("textSubdued")&&t.toString().includes("viola")),q=l.find(t=>t.toString().includes("condensed")&&t.toString().includes("onSelected"));var c=class t{constructor(e,i,s={}){this.name=e;this.id=i;this.sectionFields=s;this.pushSettings=()=>{this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(()=>this.render()),this.render()};this.toObject=()=>new Proxy({},{get:(e,i)=>t.getFieldValue(this.getId(i.toString()))});this.render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await h(100)}let e=document.querySelector(".x-settings-container"),i=Array.from(e.children).find(({id:s})=>s===this.id);i||(i=document.createElement("div"),i.id=this.id,i.className="settingsContainer",e.appendChild(i)),D.render(n.createElement(this.FieldsContainer,null),i)};this.addButton=e=>(this.addField("button",e),this);this.addToggle=(e,i=R.of(!1))=>(this.addField("toggle",e,i),this);this.addInput=(e,i=R.of(""))=>(this.addField("input",e,i),this);this.getId=e=>["extensions",this.id,e].join(":");this.useStateFor=e=>{let[i,s]=n.useState(t.getFieldValue(e));return[i,r=>{r!==void 0&&(s(r),t.setFieldValue(e,r))}]};this.FieldsContainer=()=>n.createElement(_,{filterMatchQuery:this.name},n.createElement(G,null,this.name),Object.values(this.sectionFields).map(e=>{let i=A("type");return g([[i("input"),this.InputField],[i("button"),this.ButtonField],[i("toggle"),this.ToggleField]])(()=>n.createElement(n.Fragment,null))(e)}));this.SettingField=({field:e,children:i})=>n.createElement(Q,{filterMatchQuery:e.id},n.createElement("div",{className:"x-settings-firstColumn"},n.createElement(j,{htmlFor:e.id},e.desc)),n.createElement("div",{className:"x-settings-secondColumn"},i));this.ButtonField=e=>n.createElement(this.SettingField,{field:e},n.createElement(O,{id:e.id,buttonSize:"sm",onClick:e.onClick,className:"x-settings-button"},e.text));this.ToggleField=e=>{let[i,s]=this.useStateFor(e.id);return n.createElement(this.SettingField,{field:e},n.createElement(q,{id:e.id,value:t.getFieldValue(this.getId(e.id)),onSelected:r=>{s(r),e.onSelected?.(r)},className:"x-settings-button"}))};this.InputField=e=>{let[i,s]=this.useStateFor(e.id);return n.createElement(this.SettingField,{field:e},n.createElement("input",{className:"x-settings-input",id:e.id,dir:"ltr",value:t.getFieldValue(this.getId(e.id)),type:e.inputType,onChange:r=>{let a=r.currentTarget.value;s(a),e.onChange?.(a)}}))}}addField(e,i,s){if(s!==void 0){let a=this.getId(i.id);t.setDefaultFieldValue(a,s)}let r=Object.assign({},i,{type:e});this.sectionFields[i.id]=r}static{this.getFieldValue=e=>JSON.parse(Spicetify.LocalStorage.get(e)??"null")}static{this.setFieldValue=(e,i)=>Spicetify.LocalStorage.set(e,JSON.stringify(i))}static{this.setDefaultFieldValue=async(e,i)=>{t.getFieldValue(e)===null&&t.setFieldValue(e,await i())}}};var U=new c("Search On YouTube","search-on-youtube").addInput({id:"YouTubeApiKey",desc:"YouTube API Key",inputType:"text"},W.of("***************************************"));U.pushSettings();var m=U.toObject();var{URI:w}=Spicetify,y=new Map,V=async t=>{let e=w.fromString(t).id;if(!y.get(e)){let i=P((await x([e]))[0]),s=`${i.artistName} - ${i.name} music video`,r=[];if(m.YouTubeApiKey)try{r=await I(m.YouTubeApiKey,s)}catch{}if(!r?.length)return void window.open(`https://www.youtube.com/results?search_query=${encodeURIComponent(s)}`);let a=d(i.name);y.set(e,r.find(f=>{d(f.snippet.title).includes(a)})?.id.videoId??r[0].id.videoId)}window.open(`https://www.youtube.com/watch?v=${y.get(e)}`)};new Spicetify.ContextMenu.Item("Search on YouTube",F(V),F($([w.isTrack])),'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="19px" height="19px"><path fill="currentColor" d="M43.2,33.9c-0.4,2.1-2.1,3.7-4.2,4c-3.3,0.5-8.8,1.1-15,1.1c-6.1,0-11.6-0.6-15-1.1c-2.1-0.3-3.8-1.9-4.2-4C4.4,31.6,4,28.2,4,24c0-4.2,0.4-7.6,0.8-9.9c0.4-2.1,2.1-3.7,4.2-4C12.3,9.6,17.8,9,24,9c6.2,0,11.6,0.6,15,1.1c2.1,0.3,3.8,1.9,4.2,4c0.4,2.3,0.9,5.7,0.9,9.9C44,28.2,43.6,31.6,43.2,33.9z"/><path fill="var(--spice-main)" d="M20 31L20 17 32 24z"/></svg>').register();
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,
