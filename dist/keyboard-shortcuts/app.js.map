{
  "version": 3,
  "sources": ["../../shared/util.ts", "../../shared/platformApi.ts", "../../extensions/keyboard-shortcuts/sneak.ts", "../../extensions/keyboard-shortcuts/util.ts", "../../shared/deps.ts", "../../extensions/keyboard-shortcuts/app.ts"],
  "sourcesContent": ["export type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nconst { Player, URI } = Spicetify\r\nconst { PlayerAPI, History } = Spicetify.Platform\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: () => ({ before: \"start\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: () => ({ after: \"end\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const escapeRegex = (str: string) => str.replace(/[.*+?^${}()|[\\]\\\\]/g, `\\\\$&`)\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 1000,\r\n    location = document.body,\r\n    notEl?: E | null,\r\n) =>\r\n    new Promise((resolve: (value: Element) => void, reject) => {\r\n        const onMutation = () => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el) {\r\n                if (notEl && el === notEl) {\r\n                } else {\r\n                    observer.disconnect()\r\n                    return resolve(el)\r\n                }\r\n            }\r\n        }\r\n\r\n        const observer = new MutationObserver(onMutation)\r\n        onMutation()\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout)\r\n            setTimeout(() => {\r\n                observer.disconnect()\r\n                reject()\r\n            }, timeout)\r\n    })\r\n\r\nexport const trapElement = <E extends Element>(\r\n    selector: string,\r\n    callback: (el: E | null, lastEl: E | null) => void,\r\n    location = document.body,\r\n) => {\r\n    let lastEl: E | null = null\r\n\r\n    const observer = new MutationObserver(() => {\r\n        const el = document.querySelector<E>(selector)\r\n        if (el !== lastEl) callback(el, lastEl)\r\n        lastEl = el\r\n    })\r\n\r\n    observer.observe(location, {\r\n        childList: true,\r\n        subtree: true,\r\n    })\r\n}\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const getReactFiber = (element: Element) =>\r\n    element[Object.keys(element).find(k => k.startsWith(\"__reactFiber$\")) as keyof typeof element] as any\r\n\r\nexport const getReactProps = (element: Element) =>\r\n    element[Object.keys(element).find(k => k.startsWith(\"__reactProps$\")) as keyof typeof element] as any\r\n\r\nexport const createQueueItem =\r\n    (queued: boolean) =>\r\n    ({ uri, uid = \"\" }: { uri: string; uid?: string }) => ({\r\n        contextTrack: {\r\n            uri,\r\n            uid,\r\n            metadata: {\r\n                is_queued: queued.toString(),\r\n            },\r\n        },\r\n        removed: [],\r\n        blocked: [],\r\n        provider: queued ? (\"queue\" as const) : (\"context\" as const),\r\n    })\r\n\r\nexport const setQueue = async (\r\n    nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>,\r\n    contextUri?: string,\r\n) => {\r\n    const { _queue, _client } = PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    const res = await _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    })\r\n\r\n    await PlayerAPI.skipToNext()\r\n\r\n    if (contextUri) {\r\n        await new Promise<void>(resolve => {\r\n            PlayerAPI._events.addListener(\"queue_update\", () => resolve(), { once: true })\r\n        })\r\n        await setPlayingContext(contextUri)\r\n    }\r\n\r\n    return res\r\n}\r\n\r\nexport const setPlayingContext = (uri: string) => {\r\n    const { sessionId } = PlayerAPI._state\r\n    return PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri })\r\n}\r\n\r\nexport const onHistoryChanged = (\r\n    toMatchTo: string | RegExp | ((location: string) => boolean),\r\n    callback: (uri: SpotifyURI) => void,\r\n    dropDuplicates = true,\r\n) => {\r\n    const createMatchFn = (toMatchTo: string | RegExp | ((input: string) => boolean)) => {\r\n        switch (typeof toMatchTo) {\r\n            case \"string\":\r\n                return (input: string) => input?.startsWith(toMatchTo) ?? false\r\n\r\n            case \"function\":\r\n                return toMatchTo\r\n\r\n            default:\r\n                return (input: string) => toMatchTo.test(input)\r\n        }\r\n    }\r\n\r\n    let lastPathname = \"\"\r\n    const matchFn = createMatchFn(toMatchTo)\r\n\r\n    const historyChanged = ({ pathname }: any) => {\r\n        if (matchFn(pathname)) {\r\n            if (dropDuplicates && lastPathname === pathname) {\r\n            } else callback(URI.fromString(pathname).toURI())\r\n        }\r\n        lastPathname = pathname\r\n    }\r\n\r\n    historyChanged(History.location ?? {})\r\n    return History.listen(historyChanged)\r\n}\r\n\r\nexport const onSongChanged = (callback: (state?: Spicetify.PlayerState) => void) => {\r\n    callback(Player.data)\r\n    Player.addEventListener(\"songchange\", event => callback(event!.data))\r\n}\r\n\r\nexport const formatUri = (uri: string) => URI.fromString(uri).toURI()\r\n", "import { SpotifyLoc, SpotifyURI } from \"./util.ts\"\r\n\r\nconst { CosmosAsync } = Spicetify\r\nconst { LibraryAPI, PlaylistAPI, RootlistAPI, PlaylistPermissionsAPI, EnhanceAPI, LocalFilesAPI } = Spicetify.Platform\r\n\r\nexport const areTracksLiked = (uris: SpotifyURI[]) => LibraryAPI.contains(...uris)\r\n\r\nexport const setTracksLiked = (uris: SpotifyURI[], liked: boolean) => LibraryAPI[liked ? \"add\" : \"remove\"]({ uris })\r\n\r\nexport const toggleTracksLiked = async (uris: SpotifyURI[]) => {\r\n    const liked = await areTracksLiked(uris)\r\n\r\n    const urisByLiked = Object.groupBy(uris, (_, index) => (liked[index] ? \"liked\" : \"notLiked\"))\r\n\r\n    const ps = []\r\n    urisByLiked.liked?.length && ps.push(setTracksLiked(urisByLiked.liked, false))\r\n    urisByLiked.notLiked?.length && ps.push(setTracksLiked(urisByLiked.notLiked, true))\r\n\r\n    return Promise.all(ps)\r\n}\r\n\r\nexport const fetchLikedTracks = async () =>\r\n    (\r\n        await LibraryAPI.getTracks({\r\n            limit: Number.MAX_SAFE_INTEGER,\r\n        })\r\n    ).items\r\nexport const fetchArtistLikedTracks = async (uri: SpotifyURI, offset = 0, limit = 100) =>\r\n    (await LibraryAPI.getTracks({ uri, offset, limit })).items\r\n\r\nexport const fetchPlaylistContents = async (uri: SpotifyURI) => (await PlaylistAPI.getContents(uri)).items\r\n\r\nexport const createFolder = async (name: string, location: Spicetify.Platform.RootlistAPI.Location = {}) =>\r\n    await RootlistAPI.createFolder(name, location)\r\n\r\nexport const addPlaylist = async (playlist: SpotifyURI, folder?: SpotifyURI) =>\r\n    await RootlistAPI.add([playlist], folder ? SpotifyLoc.after.fromUri(folder) : {})\r\n\r\n/* Replaced by createPlaylistFromTracks */\r\nexport const createPlaylist = async (name: string, location: Spicetify.Platform.RootlistAPI.Location = {}) =>\r\n    await RootlistAPI.createPlaylist(name, location)\r\n\r\nexport const createPlaylistFromTracks = (name: string, tracks: SpotifyURI[], folder?: SpotifyURI) =>\r\n    CosmosAsync.post(\"sp://core-playlist/v1/rootlist?responseFormat=protobufJson\", {\r\n        operation: \"create\",\r\n        ...(folder ? { after: folder } : {}),\r\n        name,\r\n        playlist: true,\r\n        uris: tracks,\r\n    })\r\n\r\nexport const setPlaylistVisibility = async (playlist: SpotifyURI, visibleForAll: boolean) =>\r\n    await PlaylistPermissionsAPI.setBasePermission(playlist, visibleForAll ? \"VIEWER\" : \"BLOCKED\")\r\nexport const setPlaylistPublished = async (playlist: SpotifyURI, published: boolean) =>\r\n    await RootlistAPI.setPublishedState(playlist, published)\r\n\r\nexport const fetchFolder = async (folder?: SpotifyURI) => await RootlistAPI.getContents({ folderUri: folder })\r\nexport const fetchRootFolder = () => fetchFolder(undefined)\r\n\r\nexport const addPlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    tracks: SpotifyURI[],\r\n    location: Spicetify.Platform.RootlistAPI.Location = {},\r\n) => await PlaylistAPI.add(playlist, tracks, location)\r\n\r\nexport const movePlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    uids: string[],\r\n    location: Spicetify.Platform.RootlistAPI.Location = {},\r\n) =>\r\n    await PlaylistAPI.move(\r\n        playlist,\r\n        uids.map(uid => ({ uid })),\r\n        location,\r\n    )\r\n\r\nexport const removePlaylistTracks = (playlist: SpotifyURI, tracks: Array<{ uid: string }>) =>\r\n    PlaylistAPI.remove(playlist, tracks)\r\n\r\nexport const fetchPlaylistEnhancedSongs300 = async (uri: SpotifyURI, offset = 0, limit = 300) =>\r\n    (await EnhanceAPI.getPage(uri, /* iteration */ 0, /* sessionId */ 0, offset, limit)).enhancePage.pageItems\r\nexport const fetchPlaylistEnhancedSongs = async (\r\n    uri: SpotifyURI,\r\n    offset = 0,\r\n): Promise<Array<Spicetify.Platform.EnhanceAPI.EnhanceItem>> => {\r\n    const nextPageItems = await fetchPlaylistEnhancedSongs300(uri, offset)\r\n    if (nextPageItems?.length < 300) return nextPageItems\r\n    else return nextPageItems.concat(await fetchPlaylistEnhancedSongs(uri, offset + 300))\r\n}\r\n\r\nexport const fetchLocalTracks = async () => await LocalFilesAPI.getTracks()\r\n", "import { array as a, function as f } from \"https://esm.sh/fp-ts\"\r\n\r\nimport { LitElement, css, html } from \"https://esm.sh/lit\"\r\nimport { customElement, property } from \"https://esm.sh/lit/decorators.js\"\r\nimport { map } from \"https://esm.sh/lit/directives/map.js\"\r\nimport { styleMap } from \"https://esm.sh/lit/directives/style-map.js\"\r\nimport { CLICKABLE_ELEMENT_SELECTOR, isElementInViewPort } from \"./util.ts\"\r\n\r\nexport const mousetrapInst = Spicetify.Mousetrap()\r\nexport const KEY_LIST = \"abcdefghijklmnopqrstuvwxyz\".split(\"\")\r\n\r\nexport let listeningToSneakBinds = false\r\n\r\n@customElement(\"sneak-key\")\r\nclass _SneakKey extends LitElement {\r\n    @property()\r\n    key = \"None\"\r\n\r\n    @property()\r\n    target = document.body\r\n\r\n    protected render() {\r\n        const { x, y } = this.target.getBoundingClientRect()\r\n        const styles = {\r\n            position: \"fixed\",\r\n            padding: \"3px 6px\",\r\n            backgroundColor: \"black\",\r\n            borderRadius: \"3px\",\r\n            border: \"solid 2px white\",\r\n            color: \"white\",\r\n            textTransform: \"lowercase\",\r\n            lineHeight: \"normal\",\r\n            fontSize: \"14px\",\r\n            fontWeight: \"500\",\r\n            top: y + \"px\",\r\n            left: x + \"px\",\r\n        }\r\n        return html`<span style=${styleMap(styles)}>${this.key}</span>`\r\n    }\r\n}\r\n\r\n@customElement(\"sneak-overlay\")\r\nexport class _SneakOverlay extends LitElement {\r\n    static styles = css`\r\n        :host {\r\n            z-index: 1e5;\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 100%;\r\n            display: block;\r\n        }\r\n    `\r\n\r\n    @property()\r\n    props = [] as Array<{ key: string; target: HTMLElement }>\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        requestAnimationFrame(() => {\r\n            let k1 = 0,\r\n                k2 = 0\r\n\r\n            this.props = f.pipe(\r\n                Array.from(document.querySelectorAll<HTMLElement>(CLICKABLE_ELEMENT_SELECTOR)),\r\n                // a.filter(isElementVisible),\r\n                a.filter(isElementInViewPort),\r\n                a.map(target => {\r\n                    const key = KEY_LIST[k1] + KEY_LIST[k2++]\r\n                    if (k2 >= KEY_LIST.length) k1++, (k2 = 0)\r\n                    return { target, key }\r\n                }),\r\n            )\r\n\r\n            if (k1 + k2 === 0) this.remove()\r\n            else listeningToSneakBinds = true\r\n        })\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback()\r\n        listeningToSneakBinds = false\r\n    }\r\n\r\n    updateProps(key: KeyboardEvent[\"key\"]) {\r\n        if (!listeningToSneakBinds) return\r\n\r\n        this.props = this.props.filter(prop => {\r\n            const [k1, ...ks] = prop.key.toLowerCase()\r\n            if (k1 !== key) return false\r\n            prop.key = ks.join(\"\")\r\n            return true\r\n        })\r\n        if (this.props.length === 1) this.props[0].target.click()\r\n        if (this.props.length < 2) this.remove()\r\n    }\r\n\r\n    protected render() {\r\n        return html`${map(this.props, i => html`<sneak-key key=${i.key} .target=${i.target} />`)}`\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"sneak-key\": _SneakKey\r\n        \"sneak-overlay\": _SneakOverlay\r\n    }\r\n}\r\n", "import { function as f, number as n, ord } from \"https://esm.sh/fp-ts\"\r\n\r\nimport { _ } from \"../../shared/deps.ts\"\r\n\r\nimport { listeningToSneakBinds } from \"./sneak.ts\"\r\n\r\nconst { Keyboard } = Spicetify\r\nconst { History } = Spicetify.Platform\r\n\r\nconst SCROLL_STEP = 25\r\n\r\nconst focusOnApp = () => document.querySelector<Element>(\".Root__main-view .os-viewport\")!\r\n\r\nexport const appScroll = (s: number) => {\r\n    const app = focusOnApp()\r\n    const scrollIntervalId = setInterval(() => (app.scrollTop += s * SCROLL_STEP), 10)\r\n    document.addEventListener(\"keyup\", () => clearInterval(scrollIntervalId))\r\n}\r\n\r\nexport const appScrollY = (y: number) => focusOnApp().scroll(0, y)\r\n\r\nexport const openPage = (page: string) => History.push({ pathname: page })\r\n\r\nexport const rotateSidebar = (offset: number) => {\r\n    if (offset === 0) return\r\n\r\n    const navLinks = Array.from(\r\n        Array.from(document.querySelectorAll<HTMLElement>(\".main-yourLibraryX-navLink\")).values(),\r\n    )\r\n\r\n    if (navLinks.length === 0) return\r\n\r\n    f.pipe(\r\n        document.querySelector(\".main-yourLibraryX-navLinkActive\"),\r\n        active => navLinks.findIndex(e => e === active),\r\n        curr => {\r\n            if (curr === -1 && offset < 0) curr = navLinks.length\r\n            let target = curr + (offset % navLinks.length)\r\n            if (target < 0) target += navLinks.length\r\n            return target\r\n        },\r\n        target => navLinks[target].click(),\r\n    )\r\n}\r\n\r\nexport const resizeLeftSidebar = (pxs: number) => {\r\n    const html = document.firstElementChild! as HTMLHtmlElement,\r\n        htmlStyle = html.style\r\n    htmlStyle.cssText = htmlStyle.cssText.replace(/(--left-sidebar-width: )[^;]+/, `$1${pxs}px`)\r\n}\r\n\r\nexport class Bind {\r\n    private ctrl = false\r\n    private shift = false\r\n    private alt = false\r\n    constructor(private key: string, private callback: (event: KeyboardEvent) => void) {}\r\n\r\n    setCtrl = (required: boolean) => ((this.ctrl = required), this)\r\n    setShift = (required: boolean) => ((this.shift = required), this)\r\n    setAlt = (required: boolean) => ((this.alt = required), this)\r\n\r\n    register = () =>\r\n        Keyboard.registerShortcut(\r\n            { key: this.key, ctrl: this.ctrl, shift: this.shift, alt: this.alt },\r\n            event => void (!listeningToSneakBinds && this.callback(event)),\r\n        )\r\n}\r\n\r\nexport const isElementVisible = (e: HTMLElement) => e.checkVisibility({ checkOpacity: true, checkVisibilityCSS: true })\r\nexport const isElementInViewPort = (e: HTMLElement) => {\r\n    const c = document.body\r\n    const bound = e.getBoundingClientRect()\r\n    const within = (m: number, M: number) => (x: number) => x === ord.clamp(n.Ord)(m, M)(x)\r\n    return (\r\n        f.pipe(_.mean([bound.top, bound.bottom]), within(0, c.clientHeight)) &&\r\n        f.pipe(_.mean([bound.left, bound.right]), within(0, c.clientWidth))\r\n    )\r\n}\r\n\r\nexport const CLICKABLE_ELEMENT_SELECTOR = `.Root__top-container [href]:not(link),.Root__top-container button,.Root__top-container [role=\"button\"]`\r\n", "// @deno-types=\"npm:@types/lodash\"\r\nimport { default as ld } from \"https://esm.sh/lodash\"\r\nexport const _ = ld\r\n\r\n// @deno-types=\"npm:@types/lodash/fp\"\r\nimport { default as ld_fp } from \"https://esm.sh/lodash/fp\"\r\nexport const fp = ld_fp\r\n", "import { toggleTracksLiked } from \"../../shared/platformApi.ts\"\r\n\r\nimport { KEY_LIST, _SneakOverlay, mousetrapInst } from \"./sneak.ts\"\r\nimport { Bind, appScroll, appScrollY, openPage, rotateSidebar } from \"./util.ts\"\r\n\r\nconst { Keyboard, Player } = Spicetify\r\nconst { UserAPI, UpdateAPI, History } = Spicetify.Platform\r\n\r\nlet sneakOverlay: _SneakOverlay\r\n\r\nconst binds = [\r\n    new Bind(\"s\", () => {\r\n        sneakOverlay = document.createElement(\"sneak-overlay\")\r\n        document.body.append(sneakOverlay)\r\n    }),\r\n    new Bind(\"s\", async () => {\r\n        await UserAPI._product_state_service.putValues({ pairs: { \"app-developer\": \"2\" } })\r\n        UpdateAPI.applyUpdate()\r\n    }).setShift(true),\r\n    new Bind(\"tab\", () => rotateSidebar(1)),\r\n    new Bind(\"tab\", () => rotateSidebar(-1)).setShift(true),\r\n    new Bind(\"h\", History.goBack).setShift(true),\r\n    new Bind(\"l\", History.goForward).setShift(true),\r\n    new Bind(\"j\", () => appScroll(1)),\r\n    new Bind(\"k\", () => appScroll(-1)),\r\n    new Bind(\"g\", () => appScrollY(0)),\r\n    new Bind(\"g\", () => appScrollY(Number.MAX_SAFE_INTEGER)).setShift(true),\r\n    new Bind(\"m\", () => Player.data?.item.uri && toggleTracksLiked([Player.data?.item.uri])),\r\n    new Bind(\"/\", e => {\r\n        e.preventDefault()\r\n        openPage(\"/search\")\r\n    }),\r\n]\r\n\r\nbinds.map(bind => bind.register())\r\n\r\nmousetrapInst.bind(KEY_LIST, (e: KeyboardEvent) => sneakOverlay?.updateProps(e.key), \"keypress\")\r\nmousetrapInst.bind(Keyboard.KEYS.ESCAPE, () => sneakOverlay?.remove())\r\n"],
  "mappings": "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",
  "names": ["_", "f", "History", "f", "Keyboard", "Player", "History"]
}
