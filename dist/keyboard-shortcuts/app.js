var U=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var p=(e,r,t,o)=>{for(var i=o>1?void 0:o?M(r,t):r,s=e.length-1,a;s>=0;s--)(a=e[s])&&(i=(o?a(r,t,i):a(i))||i);return o&&i&&U(r,t,i),i};import{array as g,function as z}from"https://esm.sh/fp-ts";import{LitElement as T,css as N,html as S}from"https://esm.sh/lit";import{customElement as R,property as x}from"https://esm.sh/lit/decorators.js";import{styleMap as j}from"https://esm.sh/lit/directives/style-map.js";import{map as B}from"https://esm.sh/lit/directives/map.js";import{function as d,number as H,ord as q}from"https://esm.sh/fp-ts";import{mean as v}from"https://esm.sh/fp-ts-std/Array";import{mod as O}from"https://esm.sh/fp-ts-std/Number";var $=25,L=()=>document.querySelector(".Root__main-view .os-viewport"),y=e=>{let r=L(),t=setInterval(()=>r.scrollTop+=e*$,10);document.addEventListener("keyup",()=>clearInterval(t))},b=e=>L().scroll(0,e),w=e=>Spicetify.Platform.History.push({pathname:e}),h=e=>{let r=Array.from(Array.from(document.querySelectorAll(".main-yourLibraryX-navLink")).values());d.pipe(document.querySelector(".main-yourLibraryX-navLinkActive"),t=>r.findIndex(o=>o===t),t=>O(r.length)(t===-1&&e<=0?e:t+e),t=>r[t].click())};var n=class{constructor(r,t){this.key=r;this.callback=t;this.ctrl=!1;this.shift=!1;this.alt=!1;this.setCtrl=r=>(this.ctrl=r,this);this.setShift=r=>(this.shift=r,this);this.setAlt=r=>(this.alt=r,this);this.register=()=>Spicetify.Keyboard.registerShortcut({key:this.key,ctrl:this.ctrl,shift:this.shift,alt:this.alt},r=>void(!m&&this.callback(r)))}},I=e=>e.checkVisibility({checkOpacity:!0,checkVisibilityCSS:!0}),P=e=>{let r=document.body,t=e.getBoundingClientRect(),o=(i,s)=>a=>a===q.clamp(H.Ord)(i,s)(a);return d.pipe(v([t.top,t.bottom]),o(0,r.clientHeight))&&d.pipe(v([t.left,t.right]),o(0,r.clientWidth))},_='.Root__top-container [href]:not(link),.Root__top-container button,.Root__top-container [role="button"]';var k=Spicetify.Mousetrap(),u="abcdefghijklmnopqrstuvwxyz".split(""),m=!1,l=class extends T{constructor(){super(...arguments);this.key="None";this.target=document.body}render(){let{x:t,y:o}=this.target.getBoundingClientRect(),i={position:"fixed",padding:"3px 6px",backgroundColor:"black",borderRadius:"3px",border:"solid 2px white",color:"white",textTransform:"lowercase",lineHeight:"normal",fontSize:"14px",fontWeight:"500",top:o+"px",left:t+"px"};return S`<span style=${j(i)}>${this.key}</span>`}};p([x()],l.prototype,"key",2),p([x()],l.prototype,"target",2),l=p([R("sneak-key")],l);var c=class extends T{constructor(){super();this.props=[];requestAnimationFrame(()=>{let t=0,o=0;this.props=z.pipe(Array.from(document.querySelectorAll(_)),g.filter(I),g.filter(P),g.map(i=>{let s=u[t]+u[o++];return o>=u.length&&(t++,o=0),{target:i,key:s}})),t+o===0?this.remove():m=!0})}disconnectedCallback(){super.disconnectedCallback(),m=!1}update_props(t){m&&(this.props=this.props.filter(o=>{let[i,...s]=o.key.toLowerCase();return i!==t?!1:(o.key=s.join(""),!0)}),this.props.length===1&&this.props[0].target.click(),this.props.length<2&&this.remove())}render(){return S`${B(this.props,t=>S`<sneak-key key=${t.key} .target=${t.target} />`)}`}};c.styles=N`:host {
        z-index: 1e5
        position: absolute
        width: 100%
        height: 100%
        display: block
    }`,p([x()],c.prototype,"props",2),c=p([R("sneak-overlay")],c);import{array as V,function as E}from"https://esm.sh/fp-ts";var pe={before:{start:E.constant({before:"start"}),fromUri:e=>({before:{uri:e}}),fromUid:e=>({before:{uid:e}})},after:{end:E.constant({after:"end"}),fromUri:e=>({after:{uri:e}}),fromUid:e=>({after:{uid:e}})}};var K=e=>Spicetify.Platform.LibraryAPI.contains(...e),A=(e,r)=>Spicetify.Platform.LibraryAPI[r?"add":"remove"](...e),C=async e=>{let r=await K(e);return await E.pipe(e,V.reduceWithIndex([[],[]],(t,o,i)=>(o[Number(r[t])].push(i),o)),([t,o])=>{let i=[];return t.length&&i.push(A(t,!0)),o.length&&i.push(A(o,!1)),Promise.all(i)})};var{KEYS:F}=Spicetify.Keyboard,f,Y=[new n("s",()=>{f=document.createElement("sneak-overlay"),document.body.append(f)}),new n("s",async()=>{await(Spicetify.Platform.UserAPI._product_state||Spicetify.Platform.UserAPI._product_state_service).putValues({pairs:{"app-developer":"2"}}),Spicetify.Platform.UpdateAPI.applyUpdate()}).setShift(!0),new n("tab",()=>h(1)),new n("tab",()=>h(-1)).setShift(!0),new n("h",Spicetify.Platform.History.goBack).setShift(!0),new n("l",Spicetify.Platform.History.goForward).setShift(!0),new n("j",()=>y(1)),new n("k",()=>y(-1)),new n("g",()=>b(0)),new n("g",()=>b(Number.MAX_SAFE_INTEGER)).setShift(!0),new n("m",()=>C([Spicetify.Player.data.item.uri])),new n("/",e=>{e.preventDefault(),w("/search")})];Y.map(e=>e.register());k.bind(u,e=>f.update_props(e.key),"keypress");k.bind(F.ESCAPE,()=>f?.remove());
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,
(async () => {
    if (!document.getElementById("keyboard-shortcuts-css")) {
        const el = document.createElement("style")
        el.id = "keyboard-shortcuts-css"
        
        el.textContent = "#sneak-overlay{z-index:100000;position:absolute;width:100%;height:100%;display:none}#sneak-overlay>.sneak-key{position:fixed;padding:3px 6px;background-color:#000;border-radius:3px;border:solid 2px white;color:#fff;text-transform:lowercase;line-height:normal;font-size:14px;font-weight:500}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vZXh0ZW5zaW9ucy9rZXlib2FyZC1zaG9ydGN1dHMvYXNzZXRzL3N0eWxlcy5jc3MiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIiNzbmVhay1vdmVybGF5e3otaW5kZXg6MTAwMDAwO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTpub25lfSNzbmVhay1vdmVybGF5Pi5zbmVhay1rZXl7cG9zaXRpb246Zml4ZWQ7cGFkZGluZzozcHggNnB4O2JhY2tncm91bmQtY29sb3I6YmxhY2s7Ym9yZGVyLXJhZGl1czozcHg7Ym9yZGVyOnNvbGlkIDJweCB3aGl0ZTtjb2xvcjp3aGl0ZTt0ZXh0LXRyYW5zZm9ybTpsb3dlcmNhc2U7bGluZS1oZWlnaHQ6bm9ybWFsO2ZvbnQtc2l6ZToxNHB4O2ZvbnQtd2VpZ2h0OjUwMH0iXSwKICAibWFwcGluZ3MiOiAiQUFBQSxDQUFDLGNBQWMsUUFBUSxPQUFPLFNBQVMsU0FBUyxNQUFNLEtBQUssT0FBTyxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQW5GLGFBQWlHLENBQUMsQ0FBQyxVQUFVLFNBQVMsTUFBdkgsUUFBcUksSUFBSSxJQUFJLGlCQUFpQixLQUE5SixjQUFrTCxJQUFJLE9BQU8sTUFBTSxJQUFJLE1BQU0sTUFBTSxLQUFNLGVBQWUsVUFBVSxZQUFZLE9BQU8sVUFBVSxLQUFLLFlBQVksR0FBRyIsCiAgIm5hbWVzIjogW10KfQo= */\n"
        document.head.appendChild(el)
    }
})()