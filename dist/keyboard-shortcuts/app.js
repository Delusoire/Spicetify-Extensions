var M=Object.defineProperty;var q=Object.getOwnPropertyDescriptor;var l=(e,r,t,o)=>{for(var s=o>1?void 0:o?q(r,t):r,i=e.length-1,a;i>=0;i--)(a=e[i])&&(s=(o?a(r,t,s):a(s))||s);return o&&s&&M(r,t,s),s};import{array as S,function as N}from"https://esm.sh/fp-ts";import{LitElement as R,html as k}from"https://esm.sh/lit";import{customElement as A,property as x}from"https://esm.sh/lit/decorators.js";import{styleMap as j}from"https://esm.sh/lit/directives/style-map.js";import{map as z}from"https://esm.sh/lit/directives/map.js";import{function as y,number as H,ord as O}from"https://esm.sh/fp-ts";import{mean as L}from"https://esm.sh/fp-ts-std/Array";import{mod as $}from"https://esm.sh/fp-ts-std/Number";var B=25,I=()=>document.querySelector(".Root__main-view .os-viewport"),b=e=>{let r=I(),t=setInterval(()=>r.scrollTop+=e*B,10);document.addEventListener("keyup",()=>clearInterval(t))},h=e=>I().scroll(0,e),P=e=>Spicetify.Platform.History.push({pathname:e}),g=e=>{let r=Array.from(Array.from(document.querySelectorAll(".main-yourLibraryX-navLink")).values());y.pipe(document.querySelector(".main-yourLibraryX-navLinkActive"),t=>r.findIndex(o=>o===t),t=>$(r.length)(t===-1&&e<=0?e:t+e),t=>r[t].click())};var n=class{constructor(r,t){this.key=r;this.callback=t;this.ctrl=!1;this.shift=!1;this.alt=!1;this.setCtrl=r=>(this.ctrl=r,this);this.setShift=r=>(this.shift=r,this);this.setAlt=r=>(this.alt=r,this);this.register=()=>Spicetify.Keyboard.registerShortcut({key:this.key,ctrl:this.ctrl,shift:this.shift,alt:this.alt},r=>void(!c&&this.callback(r)))}},w=e=>e.checkVisibility({checkOpacity:!0,checkVisibilityCSS:!0}),_=e=>{let r=document.body,t=e.getBoundingClientRect(),o=(s,i)=>a=>a===O.clamp(H.Ord)(s,i)(a);return y.pipe(L([t.top,t.bottom]),o(0,r.clientHeight))&&y.pipe(L([t.left,t.right]),o(0,r.clientWidth))},T='.Root__top-container [href]:not(link),.Root__top-container button,.Root__top-container [role="button"]';var E=Spicetify.Mousetrap(),u="abcdefghijklmnopqrstuvwxyz".split(""),f=!1,c=!1,p=class extends R{constructor(){super(...arguments);this.key="None";this.target=document.body}render(){let{x:t,y:o}=this.target.getBoundingClientRect(),s={top:t+"px",left:o+"px"};return k`<span class="sneak-key" styles=${j(s)}>${this.key}</span>`}};l([x()],p.prototype,"key",2),l([x()],p.prototype,"target",2),p=l([A("sneak-key")],p);var m=class extends R{constructor(){super();this.props=[];requestAnimationFrame(()=>{let t=0,o=0;this.props=N.pipe(Array.from(document.querySelectorAll(T)),S.filter(w),S.filter(_),S.map(s=>{let i=u[t]+u[o++];return o>=u.length&&(t++,o=0),{target:s,key:i}})),t+o===0?this.remove():f=!0})}disconnectedCallback(){super.disconnectedCallback(),c=!1,f=!1}update_props(t){if(!c){f&&(f=!1,c=!0);return}this.props=this.props.filter(o=>{let[s,...i]=o.key.toLowerCase();return s!==t?!1:(o.key=i.join(""),!0)}),this.props.length===1&&this.props[0].target.click(),this.props.length<2&&this.remove()}render(){return k`${z(this.props,t=>k`<sneak-key key=${t.key} .target=${t.target} />`)}`}};l([x()],m.prototype,"props",2),m=l([A("sneak-overlay")],m);import{array as V,function as v}from"https://esm.sh/fp-ts";var le={before:{start:v.constant({before:"start"}),fromUri:e=>({before:{uri:e}}),fromUid:e=>({before:{uid:e}})},after:{end:v.constant({after:"end"}),fromUri:e=>({after:{uri:e}}),fromUid:e=>({after:{uid:e}})}};var K=e=>Spicetify.Platform.LibraryAPI.contains(...e),C=(e,r)=>Spicetify.Platform.LibraryAPI[r?"add":"remove"](...e),U=async e=>{let r=await K(e);return await v.pipe(e,V.reduceWithIndex([[],[]],(t,o,s)=>(o[Number(r[t])].push(s),o)),([t,o])=>{let s=[];return t.length&&s.push(C(t,!0)),o.length&&s.push(C(o,!1)),Promise.all(s)})};var{KEYS:F}=Spicetify.Keyboard,d,Y=[new n("s",()=>{d=document.createElement("sneak-overlay"),document.body.append(d)}),new n("s",async()=>{await(Spicetify.Platform.UserAPI._product_state||Spicetify.Platform.UserAPI._product_state_service).putValues({pairs:{"app-developer":"2"}}),Spicetify.Platform.UpdateAPI.applyUpdate()}).setShift(!0),new n("tab",()=>g(1)),new n("tab",()=>g(-1)).setShift(!0),new n("h",Spicetify.Platform.History.goBack).setShift(!0),new n("l",Spicetify.Platform.History.goForward).setShift(!0),new n("j",()=>b(1)),new n("k",()=>b(-1)),new n("g",()=>h(0)),new n("g",()=>h(Number.MAX_SAFE_INTEGER)).setShift(!0),new n("m",()=>U([Spicetify.Player.data.item.uri])),new n("/",e=>{e.preventDefault(),P("/search")})];Y.map(e=>e.register());E.bind(u,e=>d.update_props(e.key),"keypress");E.bind(F.ESCAPE,()=>d?.remove());
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,
(async () => {
    if (!document.getElementById("keyboard-shortcuts-css")) {
        const el = document.createElement("style")
        el.id = "keyboard-shortcuts-css"
        
        el.textContent = "#sneak-overlay{z-index:100000;position:absolute;width:100%;height:100%;display:none}#sneak-overlay>.sneak-key{position:fixed;padding:3px 6px;background-color:#000;border-radius:3px;border:solid 2px white;color:#fff;text-transform:lowercase;line-height:normal;font-size:14px;font-weight:500}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vZXh0ZW5zaW9ucy9rZXlib2FyZC1zaG9ydGN1dHMvYXNzZXRzL3N0eWxlcy5jc3MiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIiNzbmVhay1vdmVybGF5e3otaW5kZXg6MTAwMDAwO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTpub25lfSNzbmVhay1vdmVybGF5Pi5zbmVhay1rZXl7cG9zaXRpb246Zml4ZWQ7cGFkZGluZzozcHggNnB4O2JhY2tncm91bmQtY29sb3I6YmxhY2s7Ym9yZGVyLXJhZGl1czozcHg7Ym9yZGVyOnNvbGlkIDJweCB3aGl0ZTtjb2xvcjp3aGl0ZTt0ZXh0LXRyYW5zZm9ybTpsb3dlcmNhc2U7bGluZS1oZWlnaHQ6bm9ybWFsO2ZvbnQtc2l6ZToxNHB4O2ZvbnQtd2VpZ2h0OjUwMH0iXSwKICAibWFwcGluZ3MiOiAiQUFBQSxDQUFDLGNBQWMsUUFBUSxPQUFPLFNBQVMsU0FBUyxNQUFNLEtBQUssT0FBTyxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQW5GLGFBQWlHLENBQUMsQ0FBQyxVQUFVLFNBQVMsTUFBdkgsUUFBcUksSUFBSSxJQUFJLGlCQUFpQixLQUE5SixjQUFrTCxJQUFJLE9BQU8sTUFBTSxJQUFJLE1BQU0sTUFBTSxLQUFNLGVBQWUsVUFBVSxZQUFZLE9BQU8sVUFBVSxLQUFLLFlBQVksR0FBRyIsCiAgIm5hbWVzIjogW10KfQo= */\n"
        document.head.appendChild(el)
    }
})()