import{array as n,eq as _t,number as At,option as b,ord as D,string as h,task as k,nonEmptyArray as St,function as a,record as Qt}from"https://esm.sh/fp-ts";import{guard as U}from"https://esm.sh/fp-ts-std/Function";import{anyPass as Gt}from"https://esm.sh/fp-ts-std/Predicate";import{values as N}from"https://esm.sh/fp-ts-std/Record";import{array as T,eq as xt,string as Rt,record as kt,semigroup as Ft,function as I}from"https://esm.sh/fp-ts";import{guard as Ut,memoize as Lt}from"https://esm.sh/fp-ts-std/Function";var B=t=>Ut(t);var wt=()=>kt.getUnionSemigroup(Ft.first()).concat,E=()=>T.reduce({},wt()),o=t=>async e=>t(await e),M=t=>e=>i=>i[t]===e,_=t=>e=>(t(e),e),S=t=>e=>I.flow(T.chunksOf(t),T.map(e),i=>Promise.all(i),o(T.flatten)),x=t=>e=>i=>{let r=0;return t(async(...s)=>{let m=await e(...s),c=Math.round(r++/Object.values(i).length*100);return Spicetify.showNotification(`Loading: ${c}%`,!1,200),m})(i)},Q=t=>I.pipe(t,I.tupled,Lt(xt.contramap(JSON.stringify)(Rt.Eq)),I.untupled);import{array as ne,function as G}from"https://esm.sh/fp-ts";var q={before:{start:G.constant({before:"start"}),fromUri:t=>({before:{uri:t}}),fromUid:t=>({before:{uid:t}})},after:{end:G.constant({after:"end"}),fromUri:t=>({after:{uri:t}}),fromUid:t=>({after:{uid:t}})}};var j=t=>new Promise(e=>setTimeout(e,t));var V=t=>e=>({contextTrack:{uri:e,uid:"",metadata:{is_queued:t.toString()}},removed:[],blocked:[],provider:t?"queue":"context"}),W=async t=>{let{_queue:e,_client:i}=Spicetify.Platform.PlayerAPI._queue,{prevTracks:r,queueRevision:s}=e;return i.setQueue({nextTracks:t,prevTracks:r,queueRevision:s})},$=t=>{let{sessionId:e}=Spicetify.Platform.PlayerAPI.getState();return Spicetify.Platform.PlayerAPI.updateContext(e,{uri:t,url:"context://"+t})};var z=async(t,e=0,i=487)=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.getAlbum,{uri:t,locale:Spicetify.Locale.getLocale(),offset:e,limit:i})).data.albumUnion,H=async t=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistOverview,{uri:t,locale:Spicetify.Locale.getLocale(),includePrerelease:!0})).data.artistUnion,Y=async(t,e=0,i=116)=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistDiscographyAll,{uri:t,offset:e,limit:i})).data.artistUnion.discography.all.items;var K=S(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${t.join(",")}`)).artists),J=S(1)(async([t])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${t}`)]),X=S(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${t.join(",")}`)).albums),Z=S(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${t.join(",")}`)).tracks);var tt=async()=>(await Spicetify.Platform.LibraryAPI.getTracks({limit:Number.MAX_SAFE_INTEGER})).items,et=async(t,e=0,i=100)=>(await Spicetify.Platform.LibraryAPI.getTracks({uri:t,offset:e,limit:i})).items,it=async t=>(await Spicetify.Platform.PlaylistAPI.getContents(t)).items,st=async(t,e={})=>await Spicetify.Platform.RootlistAPI.createFolder(t,e);var rt=(t,e,i)=>Spicetify.CosmosAsync.post("sp://core-playlist/v1/rootlist?responseFormat=protobufJson",{operation:"create",...i?{after:i}:{},name:t,playlist:!0,uris:e}),at=async(t,e)=>await Spicetify.Platform.PlaylistPermissionsAPI.setBasePermission(t,e?"VIEWER":"BLOCKED");var L=async t=>await Spicetify.Platform.RootlistAPI.getContents({folderUri:t}),nt=()=>L(void 0);var ot=async(t,e,i={})=>await Spicetify.Platform.PlaylistAPI.move(t,e,i);var w=async(t,e,i,r="")=>{let s=new URL("https://ws.audioscrobbler.com/2.0/");return s.searchParams.append("method","track.getInfo"),s.searchParams.append("api_key",t),s.searchParams.append("artist",e),s.searchParams.append("track",i),s.searchParams.append("format","json"),s.searchParams.append("username",r),await fetch(s).then(m=>m.json())},ye=Q(w);var lt=({track:t})=>({albumName:"",albumUri:"",artistName:t.artists.items[0].profile.name,artistUri:t.artists.items[0].uri,durationMilis:t.duration.totalMilliseconds,name:t.name,playcount:Number(t.playcount),popularity:void 0,releaseDate:-1,uri:t.uri}),pt=t=>({albumName:void 0,albumUri:t.albumOfTrack.uri,artistName:t.artists.items[0].profile.name,artistUri:t.artists.items[0].uri,durationMilis:t.duration.totalMilliseconds,name:t.name,playcount:Number(t.playcount),popularity:void 0,releaseDate:void 0,uri:t.uri}),ct=t=>({albumName:t.album.name,albumUri:t.album.uri,artistName:t.artists[0].name,artistUri:t.artists[0].uri,durationMilis:t.duration.milliseconds,name:t.name,playcount:void 0,popularity:void 0,releaseDate:void 0,uri:t.uri}),ut=t=>({albumName:t.album.name,albumUri:t.album.uri,artistName:t.artists[0].name,artistUri:t.artists[0].uri,durationMilis:t.duration.milliseconds,name:t.name,playcount:void 0,popularity:void 0,releaseDate:void 0,uid:t.uid,uri:t.uri}),dt=t=>({albumName:t.album.name,albumUri:t.album.uri,artistName:t.artists[0].name,artistUri:t.artists[0].uri,durationMilis:t.duration_ms,name:t.name,playcount:void 0,popularity:t.popularity,releaseDate:new Date(t.album.release_date).getTime(),uri:t.uri}),mt=t=>({albumName:t.album.name,albumUri:t.album.uri,artistName:t.artists[0].name,artistUri:t.artists[0].uri,durationMilis:t.duration.milliseconds,name:t.name,playcount:void 0,popularity:void 0,releaseDate:void 0,uri:t.uri});import{task as f}from"https://esm.sh/fp-ts";import{task as yt}from"https://esm.sh/fp-ts";var{React:l,ReactDOM:vt}=Spicetify,{ButtonSecondary:Dt}=Spicetify.ReactComponent,ft=webpackChunkopen.push([[Symbol()],{},t=>t]),Nt=Object.keys(ft.m).map(t=>ft(t)),Ct=Nt.filter(t=>typeof t=="object").map(t=>{try{return Object.values(t)}catch{}}).flat(),v=Ct.filter(t=>typeof t=="function"),Ot=v.find(t=>t.toString().includes("setSectionFilterMatchQueryValue")),Bt=v.find(t=>t.toString().includes("textSubdued")&&t.toString().includes("viola")),Et=v.find(t=>t.toString().includes("condensed")&&t.toString().includes("onSelected"));var R=class t{constructor(e,i,r={}){this.name=e;this.sectionId=i;this.sectionFields=r;this.pushSettings=()=>{this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(()=>this.render()),this.render()};this.toObject=()=>new Proxy({},{get:(e,i)=>t.getFieldValue(this.getId(i.toString()))});this.render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await j(100)}let e=document.querySelector(".x-settings-container"),i=Array.from(e.children).find(({id:r})=>r===this.sectionId);i||(i=document.createElement("div"),i.id=this.sectionId,i.className="settingsContainer",e.appendChild(i)),vt.render(l.createElement(this.FieldsContainer,null),i)};this.addButton=e=>(this.addField("button",e),this);this.addToggle=(e,i=yt.of(!1))=>(this.addField("toggle",e,i),this);this.addInput=(e,i=yt.of(""))=>(this.addField("input",e,i),this);this.getId=e=>`extensions:${this.sectionId}:${e}`;this.useStateFor=e=>{let[i,r]=l.useState(t.getFieldValue(e));return[i,s=>{s!==void 0&&(r(s),t.setFieldValue(e,s))}]};this.FieldsContainer=()=>l.createElement("div",{className:"x-settings-section"},l.createElement("h2",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-cello-textBase-type"},this.name),Object.entries(this.sectionFields).map(([e,i])=>l.createElement(this.Field,{field:i})));this.Field=({field:e})=>{let i=M("type");return B([[i("input"),this.InputField],[i("button"),this.ButtonField],[i("toggle"),this.ToggleField]])(()=>l.createElement(l.Fragment,null))(e)};this.SettingField=({field:e,children:i})=>l.createElement(Ot,{filterMatchQuery:e.id},l.createElement("div",{className:"x-settings-firstColumn"},l.createElement(Bt,{htmlFor:e.id},e.desc)),l.createElement("div",{className:"x-settings-secondColumn"},i));this.ButtonField=e=>l.createElement(this.SettingField,{field:e},l.createElement(Dt,{id:e.id,buttonSize:"sm",onClick:e.onClick,className:"x-settings-button"},e.text));this.ToggleField=e=>{let[i,r]=this.useStateFor(e.id);return l.createElement(this.SettingField,{field:e},l.createElement(Et,{id:e.id,value:t.getFieldValue(this.getId(e.id)),onSelected:s=>{r(s),e.onSelected?.(s)},className:"x-settings-button"}))};this.InputField=e=>{let[i,r]=this.useStateFor(e.id);return l.createElement(this.SettingField,{field:e},l.createElement("input",{className:"x-settings-input",id:e.id,dir:"ltr",value:t.getFieldValue(this.getId(e.id)),type:e.inputType,onChange:s=>{let m=s.currentTarget.value;r(m),e.onChange?.(m)}}))}}addField(e,i,r){if(r!==void 0){let m=this.getId(i.id);t.setDefaultFieldValue(m,r)}let s=Object.assign({},i,{type:e});this.sectionFields[i.id]=s}static{this.getFieldValue=e=>JSON.parse(Spicetify.LocalStorage.get(e)??"null")}static{this.setFieldValue=(e,i)=>Spicetify.LocalStorage.set(e,JSON.stringify(i))}static{this.setDefaultFieldValue=async(e,i)=>{t.getFieldValue(e)===null&&t.setFieldValue(e,await i())}}};var Mt="Sorted Playlists",gt=new R("Sort+","sort-plus").addToggle({id:"descending",desc:"Descending"},f.of(!0)).addToggle({id:"artistAllDiscography",desc:"All of the artist's Discography"}).addToggle({id:"artistTopTracks",desc:"Top Tracks"},f.of(!0)).addToggle({id:"artistPopularReleases",desc:"Popular Releases"},f.of(!0)).addToggle({id:"artistSingles",desc:"Singles"}).addToggle({id:"artistAlbums",desc:"Albums"}).addToggle({id:"artistCompilations",desc:"Compilations"}).addToggle({id:"artistLikedTracks",desc:"Liked Tracks"},f.of(!0)).addInput({id:"lastFmUsername",desc:"Last.fm Username",inputType:"text"},f.of("Username")).addInput({id:"LFMApiKey",desc:"Last.fm API Key",inputType:"text"},f.of("********************************")).addInput({id:"sortedPlaylistsFolderUri",desc:"Sorted Playlists folder uri",inputType:"text"},async()=>(await st(Mt)).uri);gt.pushSettings();var u=gt.toObject();var{URI:p}=Spicetify,bt=(c=>(c.SPOTIFY_PLAYCOUNT="Spotify - Play Count",c.SPOTIFY_POPULARITY="Spotify - Popularity",c.SPOTIFY_RELEASEDATE="Spotify - Release Date",c.LASTFM_SCROBBLES="LastFM - Scrobbles",c.LASTFM_PERSONALSCROBBLES="LastFM - My Scrobbles",c.LASTFM_PLAYCOUNT="LastFM - Play Count",c))(bt||{}),F=(t=>(t["Spotify - Play Count"]="playcount",t["Spotify - Popularity"]="popularity",t["Spotify - Release Date"]="releaseDate",t["LastFM - Scrobbles"]="scrobbles",t["LastFM - My Scrobbles"]="personalScrobbles",t["LastFM - Play Count"]="lastfmPlaycount",t))(F||{}),C=async t=>{let e=await z(t),i=new Date(e.date.isoString).getTime(),r={albumUri:e.uri,albumName:e.name,releaseDate:i};return a.pipe(e.tracks.items,n.map(a.flow(lt,s=>Object.assign(s,r))))},qt=a.flow(it,o(n.map(ut)));async function jt(t){let e=d=>d.releases.items[0].uri,i=a.flow(n.map(C),d=>Promise.all(d),o(n.flatten)),r=new Array,s=d=>{r.push(...d)},m=[],c=[];if(u.artistAllDiscography){let d=await Y(t);c.push(...d)}else{let d=(await H(t)).discography;if(u.artistLikedTracks){let A=await et(t);a.pipe(A,n.map(ct),s)}u.artistTopTracks&&a.pipe(d.topTracks.items,n.map(A=>A.track),n.map(pt),s),u.artistPopularReleases&&m.push(...d.popularReleasesAlbums.items.map(A=>A.uri)),u.artistSingles&&c.push(...d.singles.items),u.artistAlbums&&c.push(...d.albums.items),u.artistCompilations&&c.push(...d.compilations.items)}return m.push(...c.map(e)),await a.pipe(m,i,o(s)),await Promise.all(r)}var Vt=a.flow(n.map(({uri:t})=>p.fromString(t).id),Z,o(n.map(dt))),Wt=a.flow(St.groupBy(t=>t.albumUri),x(Qt.mapWithIndex)(async(t,e)=>{let i=a.pipe(h.Eq,_t.contramap(s=>s.uri)),r=await C(t);return n.intersection(i)(r,e)}),N,t=>Promise.all(t),o(n.flatten)),$t=t=>e=>a.pipe(e,n.filter(i=>i[F[t]]==null),U([[h.startsWith("Spotify - Play Count"),a.constant(Wt)]])(a.constant(Vt))(t),o(n.concat(e)),o(St.groupBy(i=>i.uri)),o(N),o(n.map(E()))),zt=async t=>{let e=(await w(u.LFMApiKey,t.artistName,t.name,u.lastFmUsername)).track;return t.lastfmPlaycount=Number(e.listeners),t.scrobbles=Number(e.playcount),t.personalScrobbles=Number(e.userplaycount),t},ht=a.flow(_(t=>void(g=t)),U([[p.isAlbum,C],[p.isArtist,jt],[p.isPlaylistV1OrV2,qt],[p.isCollection,a.flow(tt,o(n.map(mt)))]])(k.of([]))),Ht=U([[h.startsWith("Spotify"),$t],[h.startsWith("LastFM"),a.constant(a.flow(a.pipe(x(n.map)(zt)),t=>Promise.all(t)))]])(a.constant(k.of([]))),y=[];globalThis.lastSortedQueue=y;var Pt=t=>async e=>{if(Spicetify.Platform.PlayerAPI._queue._queue===null)return void Spicetify.showNotification("Queue is null!",!0);let i=a.pipe(h.Ord,D.contramap(s=>s.uri));y=a.pipe(e,n.uniq(i),t?n.reverse:a.identity),console.log("\u{1F680} ~ file: app.tsx:217 ~ const_setQueue= ~ inverted:",t),console.log("\u{1F680} ~ file: app.tsx:217 ~ const_setQueue= ~ lastSortedQueue:",y),globalThis.lastSortedQueue=y;let r=p.isCollection(g);await a.pipe(y,n.map(s=>s.uri),n.concat(["spotify:separator"]),n.map(V(r)),W),r||await $(g),await Spicetify.Platform.PlayerAPI.skipToNext()},g,O,Yt=t=>async e=>{O=t;let i=P^Number(u.descending);console.log("\u{1F680} ~ file: app.tsx:236 ~ sortByProp ~ descending:",i),console.log("\u{1F680} ~ file: app.tsx:236 ~ sortByProp ~ invertOrder:",P),console.log("\u{1F680} ~ file: app.tsx:236 ~ sortByProp ~ CONFIG.descending:",u.descending);let r=a.pipe(At.Ord,D.contramap(s=>s[F[t]]));a.pipe(e,ht,o(Ht(t)),o(n.map(s=>s[F[t]]!=null?b.some(s):b.none)),o(n.sequence(b.Applicative)),o(b.map(n.sort(r))),o(b.map(Pt(!!i))))},P=0;window.addEventListener("keydown",t=>{!t.repeat&&t.key==="Control"&&(P=1)});window.addEventListener("keyup",t=>{!t.repeat&&t.key==="Control"&&(P=0)});var Tt=(t,e)=>([i])=>{O=t;let r=P^Number(u.descending);a.pipe(i,ht,o(e),o(Pt(!!r)))},It=(t,e=t.length)=>e==0?[]:[t.splice(Math.floor(Math.random()*e),1)[0],...It(t)],Kt=new Spicetify.ContextMenu.Item("True Shuffle",Tt("True Shuffle",It),a.constTrue,"shuffle",!1),Jt=a.pipe(At.Ord,D.contramap(t=>globalThis.tracksRatings[t.uri]??0)),Xt=new Spicetify.ContextMenu.Item("Stars",Tt("Stars",n.sort(Jt)),()=>globalThis.tracksRatings!==void 0,"heart-active",!1),Zt=(t,e)=>new Spicetify.ContextMenu.Item(t,a.tupled(Yt(t)),a.constTrue,e,!1);new Spicetify.ContextMenu.SubMenu("Sort by",n.zipWith(N(bt),["play","heart","list-view","volume","artist","subtitles"],Zt).concat([Kt,Xt]),a.tupled(Gt([p.isAlbum,p.isArtist,p.isPlaylistV1OrV2,p.isCollection]))).register();var te=async()=>{let t=r=>p.fromString(r).id,e=r=>async s=>(await r([s]))[0].name;return`${await U([[p.isAlbum,a.flow(t,e(X))],[p.isArtist,a.flow(t,e(K))],[p.isPlaylistV1OrV2,a.flow(t,e(J))],[p.isCollection,k.of("Liked Tracks")]])(k.of("Unresolved"))(g)} - ${O}`};new Spicetify.Topbar.Button("Add Sorted Queue to Sorted Playlists","plus2px",async()=>{if(y.length===0)return void Spicetify.showNotification("Must sort to queue beforehand");let t=await L(u.sortedPlaylistsFolderUri).catch(nt),e=await te(),{uri:i}=await rt(e,y.map(r=>r.uri),t.uri);at(i,!1),Spicetify.showNotification(`Playlist ${e} created`)});new Spicetify.Topbar.Button("Reorder Playlist with Sorted Queue","chart-down",async()=>{if(y.length===0)return void Spicetify.showNotification("Must sort to queue beforehand");if(!p.isPlaylistV1OrV2(g))return void Spicetify.showNotification("Last sorted queue must be a playlist");a.pipe(y,x(n.map)(t=>void ot(g,[t],q.after.end())))});
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,
