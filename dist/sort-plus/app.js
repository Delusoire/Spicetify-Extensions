import{array as n,eq as Dt,number as gt,option as S,ord as N,string as h,task as L,nonEmptyArray as At,function as a,record as Nt}from"https://esm.sh/fp-ts";import{guard as U}from"https://esm.sh/fp-ts-std/Function";import{anyPass as Et}from"https://esm.sh/fp-ts-std/Predicate";import{values as E}from"https://esm.sh/fp-ts-std/Record";import{array as T,eq as Rt,string as It,record as xt,semigroup as kt,function as R}from"https://esm.sh/fp-ts";import{guard as Ft,memoize as Lt}from"https://esm.sh/fp-ts-std/Function";var B=t=>Ft(t);var wt=()=>xt.getUnionSemigroup(kt.first()).concat,M=()=>T.reduce({},wt()),u=t=>async e=>t(await e),_=t=>e=>i=>i[t]===e,Q=t=>e=>(t(e),e),b=t=>e=>R.flow(T.chunksOf(t),T.map(e),i=>Promise.all(i),u(T.flatten)),I=t=>e=>i=>{let r=0;return t(async(...s)=>{let p=await e(...s),o=Math.round(r++/Object.values(i).length*100);return Spicetify.showNotification(`Loading: ${o}%`,!1,200),p})(i)},G=t=>R.pipe(t,R.tupled,Lt(Rt.contramap(JSON.stringify)(It.Eq)),R.untupled);import{array as Zt,function as q}from"https://esm.sh/fp-ts";var V={before:{start:q.constant({before:"start"}),fromUri:t=>({before:{uri:t}}),fromUid:t=>({before:{uid:t}})},after:{end:q.constant({after:"end"}),fromUri:t=>({after:{uri:t}}),fromUid:t=>({after:{uid:t}})}};var x=t=>new Promise(e=>setTimeout(e,t));var H=t=>e=>({contextTrack:{uri:e,uid:"",metadata:{is_queued:t.toString()}},removed:[],blocked:[],provider:t?"queue":"context"}),W=async t=>{let{_queue:e,_client:i}=Spicetify.Platform.PlayerAPI._queue,{prevTracks:r,queueRevision:s}=e;return i.setQueue({nextTracks:t,prevTracks:r,queueRevision:s})},j=t=>{let{sessionId:e}=Spicetify.Platform.PlayerAPI.getState();return Spicetify.Platform.PlayerAPI.updateContext(e,{uri:t,url:"context://"+t})};var $=async(t,e=0,i=487)=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.getAlbum,{uri:t,locale:Spicetify.Locale.getLocale(),offset:e,limit:i})).data.albumUnion,Y=async t=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistOverview,{uri:t,locale:Spicetify.Locale.getLocale(),includePrerelease:!0})).data.artistUnion,z=async(t,e=0,i=116)=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistDiscographyAll,{uri:t,offset:e,limit:i})).data.artistUnion.discography.all.items;var K=b(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${t.join(",")}`)).artists),J=b(1)(async([t])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${t}`)]),X=b(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${t.join(",")}`)).albums),Z=b(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${t.join(",")}`)).tracks);var tt=async()=>(await Spicetify.Platform.LibraryAPI.getTracks({limit:Number.MAX_SAFE_INTEGER})).items,et=async(t,e=0,i=100)=>(await Spicetify.Platform.LibraryAPI.getTracks({uri:t,offset:e,limit:i})).items,it=async t=>(await Spicetify.Platform.PlaylistAPI.getContents(t)).items,st=async(t,e={})=>await Spicetify.Platform.RootlistAPI.createFolder(t,e);var rt=(t,e,i)=>Spicetify.CosmosAsync.post("sp://core-playlist/v1/rootlist?responseFormat=protobufJson",{operation:"create",...i?{after:i}:{},name:t,playlist:!0,uris:e}),at=async(t,e)=>await Spicetify.Platform.PlaylistPermissionsAPI.setBasePermission(t,e?"VIEWER":"BLOCKED");var v=async t=>await Spicetify.Platform.RootlistAPI.getContents({folderUri:t}),nt=()=>v(void 0);var ot=async(t,e,i={})=>await Spicetify.Platform.PlaylistAPI.move(t,e,i);var D=async(t,e,i,r="")=>{let s=new URL("https://ws.audioscrobbler.com/2.0/");return s.searchParams.append("method","track.getInfo"),s.searchParams.append("api_key",t),s.searchParams.append("artist",e),s.searchParams.append("track",i),s.searchParams.append("format","json"),s.searchParams.append("username",r),await fetch(s).then(p=>p.json())},oe=G(D);var lt=({track:t})=>({albumName:"",albumUri:"",artistName:t.artists.items[0].profile.name,artistUri:t.artists.items[0].uri,durationMilis:t.duration.totalMilliseconds,name:t.name,playcount:Number(t.playcount),popularity:void 0,releaseDate:-1,uri:t.uri}),pt=t=>({albumName:void 0,albumUri:t.albumOfTrack.uri,artistName:t.artists.items[0].profile.name,artistUri:t.artists.items[0].uri,durationMilis:t.duration.totalMilliseconds,name:t.name,playcount:Number(t.playcount),popularity:void 0,releaseDate:void 0,uri:t.uri}),ct=t=>({albumName:t.album.name,albumUri:t.album.uri,artistName:t.artists[0].name,artistUri:t.artists[0].uri,durationMilis:t.duration.milliseconds,name:t.name,playcount:void 0,popularity:void 0,releaseDate:void 0,uri:t.uri}),ut=t=>({albumName:t.album.name,albumUri:t.album.uri,artistName:t.artists[0].name,artistUri:t.artists[0].uri,durationMilis:t.duration.milliseconds,name:t.name,playcount:void 0,popularity:void 0,releaseDate:void 0,uid:t.uid,uri:t.uri}),mt=t=>({albumName:t.album.name,albumUri:t.album.uri,artistName:t.artists[0].name,artistUri:t.artists[0].uri,durationMilis:t.duration_ms,name:t.name,playcount:void 0,popularity:t.popularity,releaseDate:new Date(t.album.release_date).getTime(),uri:t.uri}),dt=t=>({albumName:t.album.name,albumUri:t.album.uri,artistName:t.artists[0].name,artistUri:t.artists[0].uri,durationMilis:t.duration.milliseconds,name:t.name,playcount:void 0,popularity:void 0,releaseDate:void 0,uri:t.uri});import{task as f}from"https://esm.sh/fp-ts";import{task as yt}from"https://esm.sh/fp-ts";import{constVoid as k}from"https://esm.sh/fp-ts/function";var{React:l,ReactDOM:Ut}=Spicetify,F=class t{constructor(e,i,r={}){this.name=e;this.sectionId=i;this.sectionFields=r;this.setRerender=null;this.pushSettings=async()=>{for(;!Spicetify?.Platform?.History?.listen;)await x(100);this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(({pathname:e=""})=>{e==="/preferences"&&this.render()}),Spicetify.Platform.History.location.pathname==="/preferences"&&await this.render()};this.toObject=()=>new Proxy({},{get:(e,i)=>t.getFieldValue(this.getId(i.toString()))});this.rerender=()=>{this.setRerender&&this.setRerender(Math.random())};this.render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await x(100)}let e=document.querySelector(".x-settings-container"),i=Array.from(e.children).find(({id:r})=>r===this.sectionId);i||(i=document.createElement("div"),i.id=this.sectionId,i.className="settingsContainer",e.appendChild(i)),Ut.render(l.createElement(this.FieldsContainer,null),i)};this.addButton=(e,i,r,s=k,p={})=>{let o=this.getId(e);return p.onClick=s,this.sectionFields[e]={id:o,type:"button",description:i,text:r,events:p},this};this.addToggle=(e,i,r=yt.of(!0),s=k,p={})=>{let o=this.getId(e);return t.setDefaultFieldValue(o,r),p.onChange=s,this.sectionFields[e]={id:o,type:"toggle",description:i,events:p},this};this.addInput=(e,i,r,s=k,p="text",o={})=>{let c=this.getId(e);return t.setDefaultFieldValue(c,r),o.onChange=s,this.sectionFields[e]={id:c,type:"input",description:i,inputType:p,events:o},this};this.addDropDown=(e,i,r,s=yt.of(0),p=k,o={})=>{let c=this.getId(e);return t.setDefaultFieldValue(c,s),o.onChange=p,this.sectionFields[e]={id:c,type:"dropdown",description:i,options:r,events:o},this};this.addHidden=(e,i)=>{let r=this.getId(e);return t.setDefaultFieldValue(r,i),this.sectionFields[e]={id:r,type:"hidden",description:""},this};this.getId=e=>`extensions:${this.sectionId}:${e}`;this.useStateFor=e=>{let[i,r]=l.useState(t.getFieldValue(e));return[i,s=>{s!==void 0&&(r(s),t.setFieldValue(e,s))}]};this.FieldsContainer=()=>{let[e,i]=l.useState(0);return this.setRerender=i,l.createElement("div",{className:"x-settings-section",key:e},l.createElement("h2",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-cello-textBase-type"},this.name),Object.entries(this.sectionFields).map(([r,s])=>l.createElement(this.Field,{field:s})))};this.Field=({field:e})=>{let i=_("type");return l.createElement("div",{className:"x-settings-row"},l.createElement(this.SettingDescription,{id:e.id,description:e.description}),l.createElement("div",{className:"x-settings-secondColumn"},B([[i("input"),this.SettingInputField],[i("button"),this.SettingButtonField],[i("toggle"),this.SettingToggleField],[i("dropdown"),this.SettingDropdownField]])(this.SettingHidden)(e)))};this.SettingDescription=({id:e,description:i})=>l.createElement("div",{className:"x-settings-firstColumn"},l.createElement("label",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-viola-textSubdued-type",htmlFor:e},i));this.SettingButtonField=e=>l.createElement("span",{className:""},l.createElement("button",{id:e.id,className:"Button-sc-y0gtbx-0 Button-sm-buttonSecondary-useBrowserDefaultFocusStyle x-settings-button",...e.events,type:e.type},e.text));this.SettingToggleField=e=>{let[i,r]=this.useStateFor(e.id);return l.createElement("label",{className:"x-settings-secondColumn x-toggle-wrapper"},l.createElement("input",{id:e.id,className:"x-toggle-input",type:"checkbox",checked:t.getFieldValue(e.id),...e.events,onChange:s=>{r(s.currentTarget.checked),e.events.onChange?.(s)}}),l.createElement("span",{className:"x-toggle-indicatorWrapper"},l.createElement("span",{className:"x-toggle-indicator"})))};this.SettingInputField=e=>{let[i,r]=this.useStateFor(e.id);return l.createElement("input",{className:"x-settings-input",id:e.id,dir:"ltr",value:t.getFieldValue(e.id),type:e.inputType,...e.events,onChange:s=>{r(s.currentTarget.value),e.events.onChange?.(s)}})};this.SettingDropdownField=e=>{let[i,r]=this.useStateFor(e.id);return l.createElement("select",{className:"main-dropDown-dropDown",id:e.id,...e.events,onChange:s=>{r(s.currentTarget.selectedIndex),e.events.onChange?.(s)}},e.options.map((s,p)=>l.createElement("option",{selected:p===t.getFieldValue(e.id),value:p+1},s)))};this.SettingHidden=()=>l.createElement(l.Fragment,null)}static{this.waitForReact=async()=>{for(;!(Spicetify.React&&Spicetify.ReactDOM);)x(100);return this}}static{this.getFieldValue=e=>JSON.parse(Spicetify.LocalStorage.get(e)??"null")}static{this.setFieldValue=(e,i)=>{Spicetify.LocalStorage.set(e,JSON.stringify(i))}}static{this.setDefaultFieldValue=async(e,i)=>{t.getFieldValue(e)===null&&t.setFieldValue(e,await i())}}};var vt="Sorted Playlists",ft=new F("Sort+","sort-plus").addToggle("descending","Descending",f.of(!0)).addToggle("artistAllDiscography","All of the artist's Discography",f.of(!1)).addToggle("artistTopTracks","Top Tracks").addToggle("artistPopularReleases","Popular Releases",f.of(!1)).addToggle("artistSingles","Singles").addToggle("artistAlbums","Albums").addToggle("artistCompilations","Compilations").addToggle("artistLikedTracks","Liked Tracks",f.of(!1)).addInput("lastFmUsername","Last.fm Username",f.of("Delusoire")).addInput("LFMApiKey","Last.fm API Key",f.of("44654ea047786d90338c17331a5f5d95")).addInput("sortedPlaylistsFolderUri","Sorted Playlists folder uri",async()=>(await st(vt)).uri);ft.pushSettings();var d=ft.toObject();debugger;var{URI:m}=Spicetify,bt=(o=>(o.SPOTIFY_PLAYCOUNT="Spotify - Play Count",o.SPOTIFY_POPULARITY="Spotify - Popularity",o.SPOTIFY_RELEASEDATE="Spotify - Release Date",o.LASTFM_SCROBBLES="LastFM - Scrobbles",o.LASTFM_PERSONALSCROBBLES="LastFM - My Scrobbles",o.LASTFM_PLAYCOUNT="LastFM - Play Count",o))(bt||{}),w=(t=>(t["Spotify - Play Count"]="playcount",t["Spotify - Popularity"]="popularity",t["Spotify - Release Date"]="releaseDate",t["LastFM - Scrobbles"]="scrobbles",t["LastFM - My Scrobbles"]="personalScrobbles",t["LastFM - Play Count"]="lastfmPlaycount",t))(w||{}),C=async t=>{let e=await $(t),i=new Date(e.date.isoString).getTime(),r={albumUri:e.uri,albumName:e.name,releaseDate:i};return a.pipe(e.tracks.items,n.map(a.flow(lt,s=>Object.assign(s,r))))},Ct=a.flow(it,u(n.map(ut)));async function Ot(t){let e=c=>c.releases.items[0].uri,i=a.flow(n.map(C),c=>Promise.all(c),u(n.flatten)),r=new Array,s=c=>{r.push(...c)},p=[],o=[];if(d.artistAllDiscography){let c=await z(t);o.push(...c)}else{let c=(await Y(t)).discography;if(d.artistLikedTracks){let A=await et(t);a.pipe(A,n.map(ct),s)}d.artistTopTracks&&a.pipe(c.topTracks.items,n.map(A=>A.track),n.map(pt),s),d.artistPopularReleases&&p.push(...c.popularReleasesAlbums.items.map(A=>A.uri)),d.artistSingles&&o.push(...c.singles.items),d.artistAlbums&&o.push(...c.albums.items),d.artistCompilations&&o.push(...c.compilations.items)}return p.push(...o.map(e)),await a.pipe(p,i,u(s)),await Promise.all(r)}var Bt=a.flow(n.map(({uri:t})=>m.fromString(t).id),Z,u(n.map(mt))),Mt=a.flow(At.groupBy(t=>t.albumUri),I(Nt.mapWithIndex)(async(t,e)=>{let i=a.pipe(h.Eq,Dt.contramap(s=>s.uri)),r=await C(t);return n.intersection(i)(r,e)}),E,t=>Promise.all(t),u(n.flatten)),_t=t=>e=>a.pipe(e,n.filter(i=>i[w[t]]==null),U([[h.startsWith("Spotify - Play Count"),a.constant(Mt)]])(a.constant(Bt))(t),u(n.concat(e)),u(At.groupBy(i=>i.uri)),u(E),u(n.map(M()))),Qt=async t=>{let e=(await D(d.LFMApiKey,t.artistName,t.name,d.lastFmUsername)).track;return t.lastfmPlaycount=Number(e.listeners),t.scrobbles=Number(e.playcount),t.personalScrobbles=Number(e.userplaycount),t},St=a.flow(Q(t=>void(g=t)),U([[m.isAlbum,C],[m.isArtist,Ot],[m.isPlaylistV1OrV2,Ct],[m.isCollection,a.flow(tt,u(n.map(dt)))]])(L.of([]))),Gt=U([[h.startsWith("Spotify"),_t],[h.startsWith("LastFM"),a.constant(a.flow(a.pipe(I(n.map)(Qt)),t=>Promise.all(t)))]])(a.constant(L.of([]))),y=[];globalThis.lastSortedQueue=y;var ht=t=>async e=>{if(Spicetify.Platform.PlayerAPI._queue._queue===null)return void Spicetify.showNotification("Queue is null!",!0);let i=a.pipe(h.Ord,N.contramap(s=>s.uri));y=a.pipe(e,n.uniq(i),t?n.reverse:a.identity),console.log("\u{1F680} ~ file: app.tsx:217 ~ const_setQueue= ~ inverted:",t),console.log("\u{1F680} ~ file: app.tsx:217 ~ const_setQueue= ~ lastSortedQueue:",y),globalThis.lastSortedQueue=y;let r=m.isCollection(g);await a.pipe(y,n.map(s=>s.uri),n.concat(["spotify:separator"]),n.map(H(r)),W),r||await j(g),await Spicetify.Platform.PlayerAPI.skipToNext()},g,O,qt=t=>async e=>{O=t;let i=P^Number(d.descending);console.log("\u{1F680} ~ file: app.tsx:236 ~ sortByProp ~ descending:",i),console.log("\u{1F680} ~ file: app.tsx:236 ~ sortByProp ~ invertOrder:",P),console.log("\u{1F680} ~ file: app.tsx:236 ~ sortByProp ~ CONFIG.descending:",d.descending);let r=a.pipe(gt.Ord,N.contramap(s=>s[w[t]]));a.pipe(e,St,u(Gt(t)),u(n.map(s=>s[w[t]]!=null?S.some(s):S.none)),u(n.sequence(S.Applicative)),u(S.map(n.sort(r))),u(S.map(ht(!!i))))},P=0;window.addEventListener("keydown",t=>{!t.repeat&&t.key==="Control"&&(P=1)});window.addEventListener("keyup",t=>{!t.repeat&&t.key==="Control"&&(P=0)});var Pt=(t,e)=>([i])=>{O=t;let r=P^Number(d.descending);a.pipe(i,St,u(e),u(ht(!!r)))},Tt=(t,e=t.length)=>e==0?[]:[t.splice(Math.floor(Math.random()*e),1)[0],...Tt(t)],Vt=new Spicetify.ContextMenu.Item("True Shuffle",Pt("True Shuffle",Tt),a.constTrue,"shuffle",!1),Ht=a.pipe(gt.Ord,N.contramap(t=>globalThis.tracksRatings[t.uri]??0)),Wt=new Spicetify.ContextMenu.Item("Stars",Pt("Stars",n.sort(Ht)),()=>globalThis.tracksRatings!==void 0,"heart-active",!1),jt=(t,e)=>new Spicetify.ContextMenu.Item(t,a.tupled(qt(t)),a.constTrue,e,!1);new Spicetify.ContextMenu.SubMenu("Sort by",n.zipWith(E(bt),["play","heart","list-view","volume","artist","subtitles"],jt).concat([Vt,Wt]),a.tupled(Et([m.isAlbum,m.isArtist,m.isPlaylistV1OrV2,m.isCollection]))).register();var $t=async()=>{let t=r=>m.fromString(r).id,e=r=>async s=>(await r([s]))[0].name;return`${await U([[m.isAlbum,a.flow(t,e(X))],[m.isArtist,a.flow(t,e(K))],[m.isPlaylistV1OrV2,a.flow(t,e(J))],[m.isCollection,L.of("Liked Tracks")]])(L.of("Unresolved"))(g)} - ${O}`};new Spicetify.Topbar.Button("Add Sorted Queue to Sorted Playlists","plus2px",async()=>{if(y.length===0)return void Spicetify.showNotification("Must sort to queue beforehand");let t=await v(d.sortedPlaylistsFolderUri).catch(nt),e=await $t(),{uri:i}=await rt(e,y.map(r=>r.uri),t.uri);at(i,!1),Spicetify.showNotification(`Playlist ${e} created`)});new Spicetify.Topbar.Button("Reorder Playlist with Sorted Queue","chart-down",async()=>{if(y.length===0)return void Spicetify.showNotification("Must sort to queue beforehand");if(!m.isPlaylistV1OrV2(g))return void Spicetify.showNotification("Last sorted queue must be a playlist");a.pipe(y,I(n.map)(t=>void ot(g,[t],V.after.end())))});
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,
