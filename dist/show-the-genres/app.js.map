{
  "version": 3,
  "sources": ["../../extensions/show-the-genres/app.ts", "../../shared/fp.ts", "../../shared/util.ts", "../../shared/api.ts", "../../extensions/show-the-genres/artistPage.ts", "../../extensions/show-the-genres/popup.tsx", "../../extensions/show-the-genres/settings.ts", "../../shared/settings.tsx", "../../shared/modules.ts"],
  "sourcesContent": ["import { array as a, function as f, string as str } from \"https://esm.sh/fp-ts\"\r\nimport { fetchTrackLFMAPI, fetchWebSoundOfSpotifyPlaylist } from \"../../shared/api.ts\"\r\nimport { pMchain } from \"../../shared/fp.ts\"\r\nimport { titleCase, waitForElement } from \"../../shared/util.ts\"\r\nimport { getArtistsGenresOrRelated, updateArtistPage } from \"./artistPage.ts\"\r\nimport { genrePopup } from \"./popup.tsx\"\r\nimport { CONFIG } from \"./settings.ts\"\r\n\r\nimport \"./assets/styles.scss\"\r\n\r\nconst searchPlaylist = (globalThis.searchPlaylist = (query: string) =>\r\n    Spicetify.Platform.History.push(`/search/${query}/playlists`))\r\n\r\nexport let spotifyGenres = new Array<string>()\r\nexport let lastFmTags = new Array<string>()\r\n\r\nconst updateGenreContainer = async (genres: string[]) => {\r\n    genreContainer.innerHTML = await f.pipe(\r\n        genres,\r\n        a.map(async genre => {\r\n            const uri = (await fetchWebSoundOfSpotifyPlaylist(genre)) ?? \"#\"\r\n            return `<a href=\"${uri}\" style=\"color: var(--spice-subtext); font-size: 12px\">${titleCase(genre)}</a>`\r\n        }),\r\n        ps => Promise.all(ps),\r\n        pMchain(a.intercalate(str.Monoid)(`<span>, </span>`)),\r\n    )\r\n    return genreContainer\r\n}\r\n\r\nconst updateGenresUI = async (genres: string[]) => {\r\n    const trackInfoContainer = await waitForElement(\"div.main-trackInfo-container\")\r\n\r\n    const { uri, metadata } = Spicetify.Player.data.track!\r\n\r\n    if (metadata && Spicetify.URI.isTrack(uri) && genres.length) {\r\n        trackInfoContainer?.appendChild(await updateGenreContainer(genres))\r\n\r\n        lastFmTags = f.pipe(\r\n            await fetchTrackLFMAPI(CONFIG.LFMApiKey, metadata.artist_name!, metadata.title!),\r\n            ({ track }) => track.toptags.tag,\r\n            a.map(({ name }) => name),\r\n        )\r\n    } else trackInfoContainer?.removeChild(genreContainer)\r\n}\r\n\r\nconst getArtistUrisFromCurrentTrack = () => {\r\n    const metadata = Spicetify.Player.data?.item.metadata ?? {}\r\n\r\n    return [...Array(10).keys()]\r\n        .map(k => metadata[(\"artist_uri\" + (k ? `:${k}` : \"\")) as keyof typeof metadata])\r\n        .filter(Boolean) as string[]\r\n}\r\n\r\nconst updateGenres = async () => {\r\n    const artistUris = getArtistUrisFromCurrentTrack()\r\n    spotifyGenres = await getArtistsGenresOrRelated(artistUris)\r\n\r\n    await updateGenresUI(spotifyGenres.slice(0, 5))\r\n}\r\n\r\nconst genreContainer = document.createElement(\"div\")\r\ngenreContainer.className = \"main-trackInfo-genres ellipsis-one-line main-type-finale\"\r\ngenreContainer.style.gridArea = \"genres\"\r\ngenreContainer.addEventListener(\"contextmenu\", genrePopup)\r\n\r\nSpicetify.Player.addEventListener(\"songchange\", updateGenres)\r\nupdateGenres()\r\n\r\nSpicetify.Platform.History.listen(updateArtistPage)\r\nupdateArtistPage(Spicetify.Platform.History.location)\r\n", "import {\r\n    array as ar,\r\n    eq,\r\n    string as str,\r\n    record as rec,\r\n    refinement as ref,\r\n    semigroup as sg,\r\n    function as f,\r\n} from \"https://esm.sh/fp-ts\"\r\nimport { guard, memoize } from \"https://esm.sh/fp-ts-std/Function\"\r\n\r\ntype refineBranch<A, B extends A, R> = [ref.Refinement<A, B>, (x: B) => R]\r\nexport const guard2 = <A, A1 extends A, A2 extends A, R>(branches: [refineBranch<A, A1, R>, refineBranch<A, A2, R>]) =>\r\n    guard(branches as unknown as [refineBranch<A, A, R>, refineBranch<A, A, R>])\r\nexport const guard3 = <A, A1 extends A, A2 extends A, A3 extends A, R>(\r\n    branches: [refineBranch<A, A1, R>, refineBranch<A, A2, R>, refineBranch<A, A3, R>],\r\n) => guard(branches as unknown as [refineBranch<A, A, R>, refineBranch<A, A, R>, refineBranch<A, A, R>])\r\nexport const guard4 = <A, A1 extends A, A2 extends A, A3 extends A, A4 extends A, R>(\r\n    branches: [refineBranch<A, A1, R>, refineBranch<A, A2, R>, refineBranch<A, A3, R>, refineBranch<A, A4, R>],\r\n) =>\r\n    guard(\r\n        branches as unknown as [\r\n            refineBranch<A, A, R>,\r\n            refineBranch<A, A, R>,\r\n            refineBranch<A, A, R>,\r\n            refineBranch<A, A, R>,\r\n        ],\r\n    )\r\nexport const guard5 = <A, A1 extends A, A2 extends A, A3 extends A, A4 extends A, A5 extends A, R>(\r\n    branches: [\r\n        refineBranch<A, A1, R>,\r\n        refineBranch<A, A2, R>,\r\n        refineBranch<A, A3, R>,\r\n        refineBranch<A, A4, R>,\r\n        refineBranch<A, A5, R>,\r\n    ],\r\n) =>\r\n    guard(\r\n        branches as unknown as [\r\n            refineBranch<A, A, R>,\r\n            refineBranch<A, A, R>,\r\n            refineBranch<A, A, R>,\r\n            refineBranch<A, A, R>,\r\n            refineBranch<A, A, R>,\r\n        ],\r\n    )\r\n\r\nexport const objConcat2 = <A1, A2>() => rec.getUnionSemigroup(sg.first<any>()).concat as (x: A1, y: A2) => A1 & A2\r\nexport const objConcat = <A>() => ar.reduce({} as A, objConcat2<A, A>())\r\n\r\ntype async = {\r\n    <A, B>(f: (a: A) => Promise<B>): (fa: Promise<A>) => Promise<B>\r\n    <A, B>(f: (a: A) => B): (fa: Promise<A>) => Promise<B>\r\n}\r\nexport const pMchain: async =\r\n    <A, R>(f: (a: A) => R) =>\r\n    async (fa: A) =>\r\n        f(await fa)\r\n\r\nexport const is =\r\n    <A>(c: keyof A) =>\r\n    <B extends A>(a: A[typeof c]) =>\r\n    (field: A): field is B =>\r\n        field[c] === a\r\n\r\nexport const tapAny =\r\n    <A>(f: (a: A) => void) =>\r\n    (fa: A) => {\r\n        f(fa)\r\n        return fa\r\n    }\r\n\r\nexport const chunckify =\r\n    (n: number) =>\r\n    <A, R>(g: (a: A[]) => Promise<R[]>) =>\r\n        f.flow(ar.chunksOf(n)<A>, ar.map(g), ps => Promise.all(ps), pMchain(ar.flatten))\r\n\r\nexport const withProgress =\r\n    <F extends (f: (...a: any) => any) => (fa: any) => any>(map: F) =>\r\n    (f: Parameters<F>[0]) =>\r\n    (fa: Parameters<ReturnType<F>>[0]): ReturnType<ReturnType<F>> => {\r\n        let i = 0\r\n        return map(async (...a: Parameters<Parameters<F>[0]>) => {\r\n            // @ts-expect-error: Fuck me\r\n            const ret = await f(...a)\r\n            const progress = Math.round((i++ / Object.values(fa).length) * 100)\r\n            Spicetify.showNotification(`Loading: ${progress}%`, false, 200)\r\n            return ret\r\n        })(fa)\r\n    }\r\n\r\nexport const memoize2 = <A extends any[], R>(fn: (...args: A) => R) =>\r\n    f.pipe(fn, f.tupled, memoize<A>(eq.contramap(JSON.stringify)(str.Eq)), f.untupled)\r\n", "// export interface SpotifyID\r\n//     extends Newtype<{ readonly SpotifyID: unique symbol }, string> {}\r\n// export interface SpotifyURI\r\n//     extends Newtype<{ readonly SpotifyURI: unique symbol }, string> {}\r\n\r\nimport { array as a, function as f } from \"https://esm.sh/fp-ts\"\r\n\r\nexport type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nexport type SpotifyLocObj = {\r\n    before?: \"start\" | { uri: SpotifyURI } | { uid: string }\r\n    after?: \"end\" | { uri: SpotifyURI } | { uid: string }\r\n}\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: f.constant({ before: \"start\" } as SpotifyLocObj),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: f.constant({ after: \"end\" } as SpotifyLocObj),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const escapeRegex = (str: string) => str.replace(/[.*+?^${}()|[\\]\\\\]/g, `\\\\$&`)\r\n\r\nexport const titleCase = (str: string) => str.replace(/\\b\\w/g, l => l.toUpperCase())\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 1000,\r\n    location = document.body,\r\n    notEl?: E,\r\n) =>\r\n    new Promise((resolve: (value: Element | null) => void) => {\r\n        const res = (v: any) => {\r\n            observer.disconnect()\r\n            resolve(v)\r\n        }\r\n\r\n        const observer = new MutationObserver(() => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el && (!notEl || el !== notEl)) return res(el)\r\n        })\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout) setTimeout(() => res(null), timeout)\r\n    })\r\n\r\nexport const trapElement = <E extends Element>(\r\n    selector: string,\r\n    callback: (el: E | null, lastEl: E | null) => void,\r\n    location = document.body,\r\n) => {\r\n    let lastEl: E | null = null\r\n\r\n    const observer = new MutationObserver(() => {\r\n        const el = document.querySelector<E>(selector)\r\n        if (el !== lastEl) callback(el, lastEl)\r\n        lastEl = el\r\n    })\r\n\r\n    observer.observe(location, {\r\n        childList: true,\r\n        subtree: true,\r\n    })\r\n}\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const getReactProps = (element: Element) =>\r\n    element[Object.keys(element).find(k => k.startsWith(\"__reactProps$\")) as keyof typeof element]\r\n\r\nexport const isLiked = (uris: SpotifyURI[]) => Spicetify.Platform.LibraryAPI.contains(...uris) as Promise<boolean[]>\r\n\r\nexport const setLiked = (uris: SpotifyURI[], liked: boolean) =>\r\n    Spicetify.Platform.LibraryAPI[liked ? \"add\" : \"remove\"]({ uris })\r\n\r\nexport const toggleLiked = async (uris: SpotifyURI[]) => {\r\n    const liked = await isLiked(uris)\r\n\r\n    return await f.pipe(\r\n        uris,\r\n        a.reduceWithIndex(\r\n            [[] as SpotifyURI[], [] as SpotifyURI[]] as const,\r\n            (i, acc, uri) => (acc[Number(liked[i])].push(uri), acc),\r\n        ),\r\n        ([toAdd, toRem]) => {\r\n            const ps = []\r\n            if (toAdd.length) ps.push(setLiked(toAdd, true))\r\n            if (toRem.length) ps.push(setLiked(toRem, false))\r\n            return Promise.all(ps)\r\n        },\r\n    )\r\n}\r\n\r\nexport const createQueueItem = (queued: boolean) => (uri: SpotifyURI) => ({\r\n    contextTrack: {\r\n        uri,\r\n        uid: \"\",\r\n        metadata: {\r\n            is_queued: queued.toString(),\r\n        },\r\n    },\r\n    removed: [],\r\n    blocked: [],\r\n    provider: queued ? \"queue\" : \"context\",\r\n})\r\n\r\nexport const setQueue = async (nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>) => {\r\n    const { _queue, _client } = Spicetify.Platform.PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    return _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    }) as Promise<{ error: number; reasons: string }>\r\n}\r\n\r\nexport const setPlayingContext = (uri: SpotifyURI) => {\r\n    const { sessionId } = Spicetify.Platform.PlayerAPI.getState()\r\n    return Spicetify.Platform.PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri }) as Promise<undefined>\r\n}\r\n", "import { chunckify, memoize2 } from \"./fp.ts\"\r\nimport { SpotifyID, SpotifyLocObj, SpotifyURI, escapeRegex } from \"./util.ts\"\r\n\r\n/*                          GraphQL                                           */\r\n\r\nexport const fetchGQLAlbum = async (uri: SpotifyURI, offset = 0, limit = 487) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.getAlbum, {\r\n            uri,\r\n            locale: Spicetify.Locale.getLocale(),\r\n            offset,\r\n            limit,\r\n        })\r\n    ).data.albumUnion as fetchGQLAlbumRes\r\n\r\ntype fetchArtistGQLRes = any\r\nexport const fetchGQLArtistOverview = async (uri: SpotifyURI) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistOverview, {\r\n            uri,\r\n            locale: Spicetify.Locale.getLocale(),\r\n            includePrerelease: true,\r\n        })\r\n    ).data.artistUnion as fetchArtistGQLRes\r\n\r\ntype fetchGQLArtistDiscographyRes = any\r\nexport const fetchGQLArtistDiscography = async (uri: SpotifyURI, offset = 0, limit = 116) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistDiscographyAll, {\r\n            uri,\r\n            offset,\r\n            limit,\r\n        })\r\n    ).data.artistUnion.discography.all.items as fetchGQLArtistDiscographyRes\r\n\r\nexport const fetchGQLArtistRelated = async (uri: SpotifyURI) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistRelated, {\r\n            uri,\r\n            locale: Spicetify.Locale.getLocale(),\r\n        })\r\n    ).data.artistUnion.relatedContent.relatedArtists.items as fetchGQLArtistRelatedRes\r\n\r\n/*                          Spotify Web API                                   */\r\n\r\nexport const removeWebPlaylistTracks = async (playlist: SpotifyID, tracks: SpotifyURI[]) =>\r\n    Spicetify.CosmosAsync.del(`https://api.spotify.com/v1/playlists/${playlist}/tracks`, {\r\n        tracks: tracks.map(uri => ({ uri })),\r\n    })\r\n\r\nexport const fetchWebArtistsSpot = chunckify(50)(\r\n    async (ids: SpotifyID[]) =>\r\n        (await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${ids.join(\",\")}`))\r\n            .artists as SpotApiArtist[],\r\n)\r\n\r\nexport const fetchWebPlaylistsSpot = chunckify(1)(\r\n    // @ts-ignore chunkify will never call with empty array\r\n    async ([id]: [SpotifyID]) => [\r\n        (await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${id}`)) as SpotApiPlaylist,\r\n    ],\r\n)\r\nexport const fetchWebAlbumsSpot = chunckify(50)(\r\n    async (ids: SpotifyID[]) =>\r\n        (await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${ids.join(\",\")}`))\r\n            .albums as SpotApiAlbum[],\r\n)\r\n\r\nexport const fetchWebTracksSpot = chunckify(50)(\r\n    async (ids: SpotifyID[]) =>\r\n        (await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${ids.join(\",\")}`))\r\n            .tracks as SpotApiTrack[],\r\n)\r\n\r\nexport const searchWebItemSpot = async (q: string, type: string[]) =>\r\n    Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/search?q=${encodeURIComponent(q)}&type=${type.join(\",\")}`)\r\n\r\nexport const fetchWebSoundOfSpotifyPlaylist = async (genre: string) => {\r\n    const name = `The Sound Of ${genre}`\r\n    const re = new RegExp(`^${escapeRegex(name)}$`, \"i\")\r\n    const res = await searchWebItemSpot(name, [\"playlist\"])\r\n    const item = res.playlists.items[0]\r\n    return item?.owner.id === \"thesoundsofspotify\" && re.test(item.name) ? item.uri : null\r\n}\r\n\r\n/*                          Platform                                          */\r\n\r\nexport const fetchPlatLikedTracks = async () =>\r\n    (\r\n        await Spicetify.Platform.LibraryAPI.getTracks({\r\n            limit: Number.MAX_SAFE_INTEGER,\r\n        })\r\n    ).items as fetchPlatArtistLikedTracksRes\r\nexport const fetchPlatArtistLikedTracks = async (uri: SpotifyURI, offset = 0, limit = 100) =>\r\n    (await Spicetify.Platform.LibraryAPI.getTracks({ uri, offset, limit })).items as fetchPlatArtistLikedTracksRes\r\n\r\nexport const fetchPlatPlaylistContents = async (uri: SpotifyURI) =>\r\n    (await Spicetify.Platform.PlaylistAPI.getContents(uri)).items as fetchWebPlaylistRes\r\n\r\nexport const createPlatFolder = async (name: string, location: SpotifyLocObj = {}) =>\r\n    await Spicetify.Platform.RootlistAPI.createFolder(name, location)\r\n\r\nexport const addPlatPlaylist = async (playlist: SpotifyURI, folder?: SpotifyURI, addedAt = new Date()) =>\r\n    await Spicetify.Platform.RootlistAPI.add([playlist], { after: { type: \"folder\", addedAt, uri: folder } })\r\n\r\n/* Replaced by createSPPlaylistFromTracks */\r\nexport const createPlatPlaylist = async (name: string, location: SpotifyLocObj = {}) =>\r\n    await Spicetify.Platform.RootlistAPI.createPlaylist(name, location)\r\n\r\nexport const createSPPlaylistFromTracks = (name: string, tracks: SpotifyURI[], folder?: SpotifyURI) =>\r\n    Spicetify.CosmosAsync.post(\"sp://core-playlist/v1/rootlist?responseFormat=protobufJson\", {\r\n        operation: \"create\",\r\n        ...(folder ? { after: folder } : {}),\r\n        name,\r\n        playlist: true,\r\n        uris: tracks,\r\n    })\r\n\r\nexport const setPlatPlaylistVisibility = async (playlist: SpotifyURI, visibleForAll: boolean) =>\r\n    await Spicetify.Platform.PlaylistPermissionsAPI.setBasePermission(playlist, visibleForAll ? \"VIEWER\" : \"BLOCKED\")\r\nexport const setPlatPlaylistPublished = async (playlist: SpotifyURI, published: boolean) =>\r\n    await Spicetify.Platform.RootlistAPI.setPublishedState(playlist, published)\r\n\r\nexport const fetchPlatFolder = async (folder?: SpotifyURI) =>\r\n    (await Spicetify.Platform.RootlistAPI.getContents({ folderUri: folder })) as fetchPlatFolderRes\r\nexport const fetchPlatRootFolder = () => fetchPlatFolder(undefined)\r\n\r\nexport const addPlatPlaylistTracks = async (playlist: SpotifyURI, tracks: SpotifyURI[], location: SpotifyLocObj = {}) =>\r\n    await Spicetify.Platform.PlaylistAPI.add(playlist, tracks, location)\r\n\r\nexport const movePlatPlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    tracks: Array<{ uid: string }>,\r\n    location: SpotifyLocObj = {},\r\n) => await Spicetify.Platform.PlaylistAPI.move(playlist, tracks, location)\r\n\r\nexport const removePlatPlaylistTracks = async (playlist: SpotifyURI, tracks: Array<{ uid: string }>) =>\r\n    Spicetify.Platform.PlaylistAPI.remove(playlist, tracks)\r\n\r\nexport const fetchPlatPlaylistEnhancedSongs300 = async (uri: SpotifyURI, offset = 0, limit = 300) =>\r\n    (await Spicetify.Platform.EnhanceAPI.getPage(uri, /* iteration */ 0, /* sessionId */ 0, offset, limit)).enhancePage\r\n        .pageItems as any[]\r\nexport const fetchPlatPlaylistEnhancedSongs = async (uri: SpotifyURI, offset = 0): Promise<any[]> => {\r\n    const nextPageItems = await fetchPlatPlaylistEnhancedSongs300(uri, offset)\r\n    if (nextPageItems?.length < 300) return nextPageItems\r\n    else return nextPageItems.concat(fetchPlatPlaylistEnhancedSongs(uri, offset + 300))\r\n}\r\n\r\nexport const fetchLocalTracks = async () => await Spicetify.Platform.LocalFilesAPI.getTracks()\r\n\r\n/*                          Non Spotify                                       */\r\n\r\nexport const fetchTrackLFMAPI = async (LFMApiKey: string, artist: string, trackName: string, lastFmUsername = \"\") => {\r\n    const url = new URL(\"https://ws.audioscrobbler.com/2.0/\")\r\n    url.searchParams.append(\"method\", \"track.getInfo\")\r\n    url.searchParams.append(\"api_key\", LFMApiKey)\r\n    url.searchParams.append(\"artist\", artist)\r\n    url.searchParams.append(\"track\", trackName)\r\n    url.searchParams.append(\"format\", \"json\")\r\n    url.searchParams.append(\"username\", lastFmUsername)\r\n\r\n    return (await fetch(url).then(res => res.json())) as fetchTrackLFMAPIRes\r\n}\r\n\r\nexport const fetchTrackLFMAPIMemoized = memoize2(fetchTrackLFMAPI)\r\n\r\nexport const searchYoutube = async (YouTubeApiKey: string, searchString: string) => {\r\n    const url = new URL(\"https://www.googleapis.com/youtube/v3/search\")\r\n    url.searchParams.append(\"part\", \"snippet\")\r\n    url.searchParams.append(\"maxResults\", \"10\")\r\n    url.searchParams.append(\"q\", searchString)\r\n    url.searchParams.append(\"type\", \"video\")\r\n    url.searchParams.append(\"key\", YouTubeApiKey)\r\n\r\n    return (await fetch(url).then(res => res.json())) as any[]\r\n}\r\n\r\n/*                          Types                                             */\r\n\r\nexport interface fetchGQLAlbumRes {\r\n    __typename: \"album\"\r\n    uri: SpotifyURI\r\n    name: string\r\n    artists: {\r\n        totalCount: number\r\n        items: Array<{\r\n            id: string\r\n            uri: SpotifyURI\r\n            profile: {\r\n                name: string\r\n            }\r\n            visuals: {\r\n                avatarImage: {\r\n                    sources: SpotApiImage[]\r\n                }\r\n            }\r\n            sharingInfo: {\r\n                shareUrl: string\r\n            }\r\n        }>\r\n    }\r\n    coverArt: {\r\n        extractedColors: {\r\n            colorRaw: {\r\n                hex: string\r\n            }\r\n            colorLight: {\r\n                hex: string\r\n            }\r\n            colorDark: {\r\n                hex: string\r\n            }\r\n        }\r\n        sources: SpotApiImage[]\r\n    }\r\n    discs: {\r\n        totalCount: number\r\n        items: Array<{\r\n            number: number\r\n            tracks: {\r\n                totalCount: number\r\n            }\r\n        }>\r\n    }\r\n    releases: {\r\n        totalCount: number\r\n        items: Array<{\r\n            uri: SpotifyURI\r\n            name: string\r\n        }>\r\n    }\r\n    type: string\r\n    date: {\r\n        isoString: string\r\n        precision: string\r\n    }\r\n    playability: {\r\n        playable: boolean\r\n        reason: string\r\n    }\r\n    label: string\r\n    copyright: {\r\n        totalCount: number\r\n        items: Array<{\r\n            type: string\r\n            text: string\r\n        }>\r\n    }\r\n    courtesyLine: string\r\n    saved: boolean\r\n    sharingInfo: {\r\n        shareUrl: string\r\n        shareId: string\r\n    }\r\n    tracks: {\r\n        totalCount: number\r\n        items: Array<{\r\n            uid: string\r\n            track: {\r\n                saved: boolean\r\n                uri: SpotifyURI\r\n                name: string\r\n                playcount: string\r\n                discNumber: number\r\n                trackNumber: number\r\n                contentRating: {\r\n                    label: string\r\n                }\r\n                relinkingInformation: any\r\n                duration: {\r\n                    totalMilliseconds: number\r\n                }\r\n                playability: {\r\n                    playable: boolean\r\n                }\r\n                artists: {\r\n                    items: Array<{\r\n                        uri: SpotifyURI\r\n                        profile: {\r\n                            name: string\r\n                        }\r\n                    }>\r\n                }\r\n            }\r\n        }>\r\n    }\r\n    moreAlbumsByArtist: {\r\n        items: Array<{\r\n            discography: {\r\n                popularReleasesAlbums: {\r\n                    items: Array<{\r\n                        id: string\r\n                        uri: SpotifyURI\r\n                        name: string\r\n                        date: {\r\n                            year: number\r\n                        }\r\n                        coverArt: {\r\n                            sources: SpotApiImage[]\r\n                        }\r\n                        playability: {\r\n                            playable: boolean\r\n                            reason: string\r\n                        }\r\n                        sharingInfo: {\r\n                            shareId: string\r\n                            shareUrl: string\r\n                        }\r\n                        type: string\r\n                    }>\r\n                }\r\n            }\r\n        }>\r\n    }\r\n}\r\n\r\nexport type fetchGQLArtistRelatedRes = Array<{\r\n    id: string\r\n    uri: SpotifyURI\r\n    profile: {\r\n        name: string\r\n    }\r\n    visuals: {\r\n        avatarImage: {\r\n            sources: SpotApiImage[]\r\n        }\r\n    }\r\n}>\r\n\r\nexport type fetchPlatArtistLikedTracksRes = Array<{\r\n    type: string\r\n    uri: string\r\n    name: string\r\n    duration: SpotApiDuration\r\n    album: SpotApiAlbumMin\r\n    artists: SpotApiArtistMin[]\r\n    discNumber: number\r\n    trackNumber: number\r\n    isExplicit: boolean\r\n    isPlayable: boolean\r\n    isLocal: boolean\r\n    is19PlusOnly: boolean\r\n    addedAt: string\r\n}>\r\n\r\nexport type fetchWebPlaylistRes = Array<{\r\n    uid: string\r\n    playIndex: null\r\n    addedAt: string\r\n    addedBy: {\r\n        type: string\r\n        uri: SpotifyURI\r\n        username: string\r\n        displayName: string\r\n        images: SpotApiImage2[]\r\n    }\r\n    formatListAttributes: {}\r\n    type: \"track\"\r\n    uri: SpotifyURI\r\n    name: string\r\n    album: SpotApiAlbumMin\r\n    artists: SpotApiArtistMin[]\r\n    discNumber: number\r\n    trackNumber: number\r\n    duration: SpotApiDuration\r\n    isExplicit: boolean\r\n    isLocal: boolean\r\n    isPlayable: boolean\r\n    is19PlusOnly: boolean\r\n}>\r\n\r\nexport interface fetchTrackLFMAPIRes {\r\n    track: {\r\n        name: string\r\n        mbid: string\r\n        url: string\r\n        duration: string\r\n        streamable: {\r\n            \"#text\": string\r\n            fulltrack: string\r\n        }\r\n        listeners: string\r\n        playcount: string\r\n        artist: {\r\n            name: string\r\n            mbid: string\r\n            url: string\r\n        }\r\n        album: {\r\n            artist: string\r\n            title: string\r\n            mbid: string\r\n            url: string\r\n            image: Array<{\r\n                \"#text\": string\r\n                size: string\r\n            }>\r\n            \"@attr\": {\r\n                position: string\r\n            }\r\n        }\r\n        userplaycount: string\r\n        userloved: string\r\n        toptags: {\r\n            tag: Array<{\r\n                name: string\r\n                url: string\r\n            }>\r\n        }\r\n        wiki: {\r\n            published: string\r\n            summary: string\r\n            content: string\r\n        }\r\n    }\r\n}\r\n\r\n//\r\n\r\nexport interface SpotApiAlbumMin {\r\n    type: \"album\"\r\n    uri: SpotifyURI\r\n    name: string\r\n    artist: SpotApiArtistMin\r\n    images: SpotApiImage2[]\r\n}\r\n\r\nexport interface SpotApiImage2 {\r\n    url: string\r\n    label: \"small\" | \"standard\" | \"large\" | \"xlarge\"\r\n}\r\n\r\nexport interface SpotApiTrack {\r\n    album: SpotApiAlbum\r\n    artists: SpotApiArtist[]\r\n    available_markets: string[]\r\n    disc_number: number\r\n    duration_ms: number\r\n    explicit: boolean\r\n    external_ids: SpotApiEIDs\r\n    external_urls: SpotApiEUrls\r\n    href: string\r\n    id: string\r\n    is_playable: boolean\r\n    linked_from: {}\r\n    restrictions: SpotApiRestrictions\r\n    name: string\r\n    popularity: number\r\n    preview_url: string\r\n    track_number: number\r\n    type: string\r\n    uri: SpotifyURI\r\n    is_local: boolean\r\n}\r\n\r\nexport interface SpotApiArtist {\r\n    external_urls: SpotApiEUrls\r\n    followers: SpotApiFollowers\r\n    genres: string[]\r\n    href: string\r\n    id: string\r\n    images: SpotApiImage[]\r\n    name: string\r\n    popularity: number\r\n    type: string\r\n    uri: SpotifyURI\r\n}\r\n\r\nexport interface SpotApiArtistMin {\r\n    type: \"artist\"\r\n    uri: SpotifyURI\r\n    name: string\r\n}\r\n\r\nexport interface SpotApiAlbum {\r\n    album_type: string\r\n    total_tracks: number\r\n    available_markets: string[]\r\n    external_urls: SpotApiEUrls\r\n    href: string\r\n    id: string\r\n    images: SpotApiImage[]\r\n    name: string\r\n    release_date: string\r\n    release_date_precision: string\r\n    restrictions: SpotApiRestrictions\r\n    type: string\r\n    uri: SpotifyURI\r\n    copyrights: Array<{\r\n        text: string\r\n        type: string\r\n    }>\r\n    external_ids: SpotApiEIDs\r\n    genres: string[]\r\n    label: string\r\n    popularity: number\r\n    album_group: string\r\n    artists: Array<{\r\n        external_urls: SpotApiEUrls\r\n        href: string\r\n        id: string\r\n        name: string\r\n        type: string\r\n        uri: SpotifyURI\r\n    }>\r\n}\r\n\r\nexport interface SpotApiEUrls {\r\n    spotify: string\r\n}\r\n\r\nexport interface SpotApiEIDs {\r\n    isrc: string\r\n    ean: string\r\n    upc: string\r\n}\r\n\r\nexport interface SpotApiImage {\r\n    url: string\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport interface SpotApiRestrictions {\r\n    reason: string\r\n}\r\n\r\nexport interface SpotApiFollowers {\r\n    href: string\r\n    total: number\r\n}\r\nexport interface SpotApiDuration {\r\n    milliseconds: number\r\n}\r\nexport interface SpotApiPlaylist {\r\n    collaborative: boolean\r\n    description: string\r\n    external_urls: SpotApiEUrls\r\n    followers: {\r\n        href: string\r\n        total: number\r\n    }\r\n    href: string\r\n    id: SpotifyID\r\n    images: SpotApiImage[]\r\n    name: string\r\n    owner: SpotApiOwner\r\n    public: boolean\r\n    snapshot_id: string\r\n    tracks: {\r\n        href: string\r\n        limit: number\r\n        next: string\r\n        offset: number\r\n        previous: string\r\n        total: number\r\n        items: Array<{\r\n            added_at: string\r\n            added_by: SpotApiOwner\r\n            is_local: boolean\r\n            track: SpotApiTrack\r\n        }>\r\n    }\r\n    type: string\r\n    uri: SpotifyURI\r\n}\r\n\r\nexport interface SpotApiOwner {\r\n    external_urls: SpotApiEUrls\r\n    followers?: {\r\n        href: string\r\n        total: number\r\n    }\r\n    href: string\r\n    id: SpotifyID\r\n    type: string\r\n    uri: SpotifyURI\r\n    display_name?: string\r\n    name?: string\r\n}\r\n\r\n//TODO: Better TS interface for recursive fetchPlatFolderRes\r\nexport interface fetchPlatFolderRes {\r\n    type: \"folder\" | \"placeholder\" | \"playlist\"\r\n    addedAt: string\r\n    items?: Array<fetchPlatFolderRes>\r\n    name?: string\r\n    uri: string\r\n    description?: string\r\n    images?: SpotApiImage2[]\r\n    madeFor?: null\r\n    owner?: {\r\n        type: \"user\"\r\n        uri: string\r\n        username: string\r\n        displayName: string\r\n        images: any[]\r\n    }\r\n    totalLength?: number\r\n    unfilteredTotalLength?: number\r\n    totalLikes?: null\r\n    duration?: null\r\n    isCollaborative?: boolean\r\n    isLoaded?: boolean\r\n    isOwnedBySelf?: boolean\r\n    isPublished?: boolean\r\n    hasEpisodes?: null\r\n    hasSpotifyTracks?: null\r\n    hasSpotifyAudiobooks?: null\r\n    canAdd?: boolean\r\n    canRemove?: boolean\r\n    canPlay?: null\r\n    formatListData?: {\r\n        type: string\r\n        attributes: { [key: string]: string }\r\n    } | null\r\n    canReportAnnotationAbuse?: boolean\r\n    hasDateAdded?: boolean\r\n    permissions?: null\r\n    collaborators?: {\r\n        count: number\r\n        items: any[]\r\n    }\r\n    isNotFound?: boolean\r\n    isForbidden?: boolean\r\n}\r\n", "import { array as a, function as f, string as str } from \"https://esm.sh/fp-ts\"\r\nimport { prepend } from \"https://esm.sh/fp-ts-std/String\"\r\nimport { fetchGQLArtistRelated, fetchWebArtistsSpot, fetchWebSoundOfSpotifyPlaylist } from \"../../shared/api.ts\"\r\nimport { pMchain } from \"../../shared/fp.ts\"\r\nimport { SpotifyURI, titleCase, waitForElement } from \"../../shared/util.ts\"\r\n\r\nconst { URI } = Spicetify\r\n\r\nexport const updateArtistPage = async ({ pathname }: { pathname: string }) => {\r\n    const uri = URI.fromString(pathname)\r\n\r\n    if (!URI.isArtist(uri!)) return\r\n\r\n    // prepare new genreContainer\r\n    const genreContainer = document.createElement(\"div\")\r\n    genreContainer.className = \"main-entityHeader-detailsText genre-container\"\r\n    genreContainer.innerHTML = await f.pipe(\r\n        await getArtistsGenresOrRelated([`${uri}`]),\r\n        a.takeLeft(5),\r\n        a.map(async genre => {\r\n            const uri = await fetchWebSoundOfSpotifyPlaylist(genre)\r\n            return `<a class=\"main-entityHeader-genreLink\" ${\r\n                uri === null\r\n                    ? `href=\"#\" data-value=\"${genre}\" onclick=\"searchPlaylist(this.getAttribute('data-value'))`\r\n                    : `href=\"${uri}\"`\r\n            } style=\"color: var(--spice-subtext); font-size: 1rem\">${titleCase(genre)}</a>`\r\n        }),\r\n        ps => Promise.all(ps),\r\n        pMchain(a.intercalate(str.Monoid)(`<span>, </span>`)),\r\n        pMchain(prepend(`<span>Artist Genres : </span>`)),\r\n    )\r\n\r\n    document.querySelector(\".genre-container\")?.remove()\r\n\r\n    const entityHeaderText = await waitForElement(\"div.main-entityHeader-headerText\")\r\n    entityHeaderText?.insertBefore(genreContainer, await waitForElement(\"span.main-entityHeader-detailsText\"))\r\n}\r\n\r\nexport const getArtistsGenresOrRelated = async (artistsUris: SpotifyURI[], src = null) => {\r\n    const getArtistsGenres: (artistsUris: SpotifyURI[]) => Promise<string[]> = f.flow(\r\n        a.map(uri => URI.fromString(uri)!.id!),\r\n        fetchWebArtistsSpot,\r\n        pMchain(a.flatMap(artist => artist.genres)),\r\n        pMchain(a.uniq(str.Eq)),\r\n    )\r\n\r\n    const allGenres = await getArtistsGenres(artistsUris)\r\n\r\n    return allGenres.length\r\n        ? allGenres\r\n        : await f.pipe(\r\n              artistsUris[0],\r\n              fetchGQLArtistRelated,\r\n              pMchain(a.map(a => a.uri)),\r\n              pMchain(a.chunksOf(5)),\r\n              pMchain(\r\n                  a.reduce(Promise.resolve([] as string[]), async (acc, arr5uris) =>\r\n                      (await acc).length ? await acc : await getArtistsGenres(arr5uris),\r\n                  ),\r\n              ),\r\n          )\r\n}\r\n", "import { task } from \"https://esm.sh/fp-ts\"\r\nimport { fetchWebSoundOfSpotifyPlaylist } from \"../../shared/api.ts\"\r\nimport { titleCase } from \"../../shared/util.ts\"\r\nimport { lastFmTags, spotifyGenres } from \"./app.ts\"\r\n\r\nconst { React } = Spicetify\r\n\r\n// @ts-ignore\r\nexport const genrePopup = (globalThis.genrePopup = () => {\r\n    Spicetify.PopupModal.display({\r\n        title: `Genres of: ${Spicetify.Player.data.item?.metadata?.title}`,\r\n        content: (\r\n            <div className=\"genres-popup\">\r\n                {spotifyGenres.length === 0 ? <></> : <SpotifyGenresContainer />}\r\n                {lastFmTags.length === 0 ? <></> : <LastFmTagsContainer />}\r\n            </div>\r\n        ),\r\n        isLarge: true,\r\n    })\r\n})\r\n\r\nconst ButtonElement = ({ name = \"\", color = \"\", onClick = task.of(undefined) as task.Task<void> }) => (\r\n    <button className={`login-button${color}`} onClick={onClick}>\r\n        {name}\r\n    </button>\r\n)\r\n\r\nconst SpotifyGenresContainer = () => {\r\n    const [value, setValue] = React.useState(spotifyGenres)\r\n\r\n    Spicetify.Player.addEventListener(\"songchange\", () => setTimeout(() => setValue(spotifyGenres), 500))\r\n\r\n    const openSoundOfPlaylistOrSearchResults = (query: string) => async () => {\r\n        const uri = await fetchWebSoundOfSpotifyPlaylist(query)\r\n        if (uri === null) Spicetify.Platform.History.push(`/search/${query}/playlists`)\r\n        else Spicetify.Platform.History.push(`/playlist/${uri.split(\":\")[2]}`)\r\n\r\n        Spicetify.PopupModal.hide()\r\n    }\r\n\r\n    return (\r\n        <div className=\"spaced-down\">\r\n            <h1 className=\"title\">Spotify Genres</h1>\r\n            {value.map(n => (\r\n                <ButtonElement name={titleCase(n)} onClick={openSoundOfPlaylistOrSearchResults(n)} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst LastFmTagsContainer = () => {\r\n    if (lastFmTags.length == 0) return <></>\r\n    const [value, setValue] = React.useState(lastFmTags)\r\n\r\n    Spicetify.Player.addEventListener(\"songchange\", () => setTimeout(() => setValue(lastFmTags), 100))\r\n\r\n    const openPlaylistSearchResults = (query: string) => async () => {\r\n        Spicetify.Platform.History.push(`/search/${query}/playlists`)\r\n        Spicetify.PopupModal.hide()\r\n    }\r\n\r\n    return (\r\n        <div className=\"spaced-down\">\r\n            <h1 className=\"title\">Last FM Tags</h1>\r\n            {value.map(n => (\r\n                <ButtonElement name={titleCase(n)} onClick={openPlaylistSearchResults(n)} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n", "import { task } from \"https://esm.sh/fp-ts\"\r\nimport { SettingsSection } from \"../../shared/settings.tsx\"\r\n\r\nconst settings = new SettingsSection(\"Show The Genres\", \"show-the-genres\").addInput(\r\n    {\r\n        id: \"LFMApiKey\",\r\n        desc: \"Last.fm API Key\",\r\n        inputType: \"text\",\r\n    },\r\n    task.of(\"********************************\"),\r\n)\r\n\r\nsettings.pushSettings()\r\n\r\nexport const CONFIG = settings.toObject() as {\r\n    LFMApiKey: string\r\n}\r\n", "import { task } from \"https://esm.sh/fp-ts\"\r\nimport { guard3, is } from \"./fp.ts\"\r\nimport { sleep } from \"./util.ts\"\r\nimport { SettingSection, SettingColumn, SettingText, SettingToggle, SectionTitle } from \"./modules.ts\"\r\n\r\nconst { React, ReactDOM } = Spicetify\r\nconst { ButtonSecondary } = Spicetify.ReactComponent as any\r\n\r\ntype FieldToProps<A> = Omit<A, \"type\">\r\n\r\nexport const enum FieldType {\r\n    BUTTON = \"button\",\r\n    TOGGLE = \"toggle\",\r\n    INPUT = \"input\",\r\n    HIDDEN = \"hidden\",\r\n}\r\n\r\nexport interface BaseField {\r\n    id: string\r\n    type: FieldType\r\n    desc: string\r\n}\r\n\r\nexport type SettingsField = HiddenField | InputField | ButtonField | ToggleField\r\n\r\nexport interface ButtonField extends BaseField {\r\n    type: FieldType.BUTTON\r\n    text: string\r\n    onClick?: () => void\r\n}\r\nexport interface ToggleField extends BaseField {\r\n    type: FieldType.TOGGLE\r\n    onSelected?: (checked: boolean) => void\r\n}\r\n\r\nexport interface InputField extends BaseField {\r\n    type: FieldType.INPUT\r\n    inputType: string\r\n    onChange?: (value: string) => void\r\n}\r\n\r\nexport interface HiddenField extends BaseField {\r\n    type: FieldType.HIDDEN\r\n}\r\n\r\nexport class SettingsSection {\r\n    private stopHistoryListener: any\r\n\r\n    constructor(public name: string, public id: string, public sectionFields: { [key: string]: SettingsField } = {}) {}\r\n\r\n    pushSettings = () => {\r\n        if (this.stopHistoryListener) this.stopHistoryListener()\r\n\r\n        this.stopHistoryListener = Spicetify.Platform.History.listen(() => this.render())\r\n        this.render()\r\n    }\r\n\r\n    toObject = () =>\r\n        new Proxy(\r\n            {},\r\n            {\r\n                get: (target, prop) => SettingsSection.getFieldValue(this.getId(prop.toString())),\r\n            },\r\n        )\r\n\r\n    private render = async () => {\r\n        while (!document.getElementById(\"desktop.settings.selectLanguage\")) {\r\n            if (Spicetify.Platform.History.location.pathname !== \"/preferences\") return\r\n            await sleep(100)\r\n        }\r\n\r\n        const allSettingsContainer = document.querySelector(\".x-settings-container\")!\r\n\r\n        let pluginSettingsContainer = Array.from(allSettingsContainer.children).find(({ id }) => id === this.id)\r\n\r\n        if (!pluginSettingsContainer) {\r\n            pluginSettingsContainer = document.createElement(\"div\")\r\n            pluginSettingsContainer.id = this.id\r\n            pluginSettingsContainer.className = \"settingsContainer\"\r\n            allSettingsContainer.appendChild(pluginSettingsContainer)\r\n        }\r\n\r\n        ReactDOM.render(<this.SettingsSection />, pluginSettingsContainer)\r\n    }\r\n\r\n    addButton = (props: FieldToProps<ButtonField>) => {\r\n        this.addField(FieldType.BUTTON, props)\r\n        return this\r\n    }\r\n\r\n    addToggle = (props: FieldToProps<ToggleField>, defaultValue = task.of(false)) => {\r\n        this.addField(FieldType.TOGGLE, props, defaultValue)\r\n        return this\r\n    }\r\n\r\n    addInput = (props: FieldToProps<InputField>, defaultValue = task.of(\"\")) => {\r\n        this.addField(FieldType.INPUT, props, defaultValue)\r\n        return this\r\n    }\r\n\r\n    private addField(type: FieldType, opts: FieldToProps<SettingsField>, defaultValue?: any) {\r\n        if (defaultValue !== undefined) {\r\n            const settingId = this.getId(opts.id)\r\n            SettingsSection.setDefaultFieldValue(settingId, defaultValue)\r\n        }\r\n        const field = Object.assign({}, opts, { type }) as SettingsField\r\n        this.sectionFields[opts.id] = field\r\n    }\r\n\r\n    getId = (nameId: string) => [\"extensions\", this.id, nameId].join(\":\")\r\n\r\n    private useStateFor = <A,>(id: string) => {\r\n        const [value, setValueState] = React.useState(SettingsSection.getFieldValue<A>(id))\r\n\r\n        return [\r\n            value,\r\n            (newValue: A) => {\r\n                if (newValue !== undefined) {\r\n                    setValueState(newValue)\r\n                    SettingsSection.setFieldValue(id!, newValue)\r\n                }\r\n            },\r\n        ] as const\r\n    }\r\n\r\n    static getFieldValue = <R,>(id: string): R => JSON.parse(Spicetify.LocalStorage.get(id) ?? \"null\")\r\n\r\n    static setFieldValue = (id: string, newValue: any) => Spicetify.LocalStorage.set(id, JSON.stringify(newValue))\r\n\r\n    private static setDefaultFieldValue = async (id: string, defaultValue: task.Task<any>) => {\r\n        if (SettingsSection.getFieldValue(id) === null) SettingsSection.setFieldValue(id, await defaultValue())\r\n    }\r\n\r\n    private SettingsSection = () => (\r\n        <SettingSection filterMatchQuery={this.name}>\r\n            <SectionTitle>{this.name}</SectionTitle>\r\n            {Object.values(this.sectionFields).map(field => {\r\n                const isType = is<SettingsField>(\"type\")\r\n\r\n                return guard3([\r\n                    [isType<InputField>(FieldType.INPUT), this.InputField],\r\n                    [isType(FieldType.BUTTON), this.ButtonField],\r\n                    [isType(FieldType.TOGGLE), this.ToggleField],\r\n                ])(() => <></>)(field)\r\n            })}\r\n        </SettingSection>\r\n    )\r\n\r\n    SettingField = ({ field, children }: { field: SettingsField; children?: any }) => (\r\n        <SettingColumn filterMatchQuery={field.id}>\r\n            <div className=\"x-settings-firstColumn\">\r\n                <SettingText htmlFor={field.id}>{field.desc}</SettingText>\r\n            </div>\r\n            <div className=\"x-settings-secondColumn\">{children}</div>\r\n        </SettingColumn>\r\n    )\r\n\r\n    ButtonField = (field: ButtonField) => (\r\n        <this.SettingField field={field}>\r\n            <ButtonSecondary id={field.id} buttonSize=\"sm\" onClick={field.onClick} className=\"x-settings-button\">\r\n                {field.text}\r\n            </ButtonSecondary>\r\n        </this.SettingField>\r\n    )\r\n\r\n    ToggleField = (field: ToggleField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<boolean>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <SettingToggle\r\n                    id={field.id}\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    onSelected={(checked: boolean) => {\r\n                        setValue(checked)\r\n                        field.onSelected?.(checked)\r\n                    }}\r\n                    className=\"x-settings-button\"\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n\r\n    InputField = (field: InputField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<string>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <input\r\n                    className=\"x-settings-input\"\r\n                    id={field.id}\r\n                    dir=\"ltr\"\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    type={field.inputType}\r\n                    onChange={e => {\r\n                        const value = e.currentTarget.value\r\n                        setValue(value)\r\n                        field.onChange?.(value)\r\n                    }}\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n}\r\n", "import { allPass } from \"https://esm.sh/fp-ts-std@0.18.0/Predicate\"\r\n\r\n// @ts-expect-error webpackChunkOpen is only defined in the browser\r\nconst require = webpackChunkopen.push([[Symbol(\"Dummy module to extract require method\")], {}, re => re])\r\nconst cache = Object.keys(require.m).map(id => require(id))\r\nexport const modules = cache\r\n    .filter((module): module is Object => typeof module === \"object\")\r\n    .flatMap(module => Object.values(module))\r\nexport const functionModules = modules.filter((module): module is Function => typeof module === \"function\")\r\n\r\nexport const reactObjects = modules.filter(m => m?.$$typeof)\r\nconst reactMemoSymbol = Spicetify.React.memo().$$typeof\r\nexport const reactMemos = reactObjects.filter(m => m.$$typeof === reactMemoSymbol)\r\n\r\nconst findModuleByStrings = (modules: Array<any>, ...filters: Array<string | RegExp>) =>\r\n    modules.find(f =>\r\n        allPass(\r\n            filters.map(filter =>\r\n                typeof filter === \"string\" ? (s: string) => s.includes(filter) : (s: string) => filter.test(s),\r\n            ),\r\n        )(f.toString()),\r\n    ) as any\r\n\r\nexport const CheckedPlaylistButtonIcon = findModuleByStrings(\r\n    functionModules,\r\n    \"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z\",\r\n)\r\n\r\nexport const SettingSection = findModuleByStrings(\r\n    functionModules,\r\n    \"function m(e){return(0,d.jsx)(r.k,{children:(0,d.jsx)(u,{...e})})}\",\r\n)\r\nexport const SectionTitle = findModuleByStrings(functionModules, \"textToHighlight\", \"semanticColor\")\r\nexport const SettingColumn = findModuleByStrings(functionModules, \"setSectionFilterMatchQueryValue\", \"filterMatchQuery\")\r\nexport const SettingText = findModuleByStrings(functionModules, \"textSubdued\", \"viola\")\r\nexport const SettingToggle = findModuleByStrings(functionModules, \"condensed\", \"onSelected\")\r\n\r\nexport const curationButtonClass = modules.find(m => m?.curationButton)!.curationButton\r\n"],
  "mappings": ";AAAA,SAAS,SAASA,IAAG,YAAYC,IAAG,UAAUC,YAAW;;;ACAzD;AAAA,EACI,SAAS;AAAA,EACT;AAAA,EACA,UAAU;AAAA,EACV,UAAU;AAAA,EAEV,aAAa;AAAA,EACb,YAAY;AAAA,OACT;AACP,SAAS,OAAO,eAAe;AAKxB,IAAM,SAAS,CAClB,aACC,MAAM,QAA4F;AAsChG,IAAM,UACT,CAAOC,OACP,OAAO,OACHA,GAAE,MAAM,EAAE;AAEX,IAAM,KACT,CAAI,MACJ,CAAcC,OACd,CAAC,UACG,MAAM,CAAC,MAAMA;AASd,IAAM,YACT,CAAC,MACD,CAAO,MACH,EAAE,KAAK,GAAG,SAAS,CAAC,GAAM,GAAG,IAAI,CAAC,GAAG,QAAM,QAAQ,IAAI,EAAE,GAAG,QAAQ,GAAG,OAAO,CAAC;AAgBhF,IAAM,WAAW,CAAqB,OACzC,EAAE,KAAK,IAAI,EAAE,QAAQ,QAAW,GAAG,UAAU,KAAK,SAAS,EAAE,IAAI,EAAE,CAAC,GAAG,EAAE,QAAQ;;;ACvFrF,SAAS,SAAS,GAAG,YAAYC,UAAS;AAUnC,IAAM,aAAa;AAAA,EACtB,QAAQ;AAAA,IACJ,OAAOA,GAAE,SAAS,EAAE,QAAQ,QAAQ,CAAkB;AAAA,IACtD,SAAS,CAAC,SAAqB,EAAE,QAAQ,EAAE,IAAI,EAAE;AAAA,IACjD,SAAS,CAAC,SAAiB,EAAE,QAAQ,EAAE,IAAI,EAAE;AAAA,EACjD;AAAA,EACA,OAAO;AAAA,IACH,KAAKA,GAAE,SAAS,EAAE,OAAO,MAAM,CAAkB;AAAA,IACjD,SAAS,CAAC,SAAqB,EAAE,OAAO,EAAE,IAAI,EAAE;AAAA,IAChD,SAAS,CAAC,SAAiB,EAAE,OAAO,EAAE,IAAI,EAAE;AAAA,EAChD;AACJ;AAEO,IAAM,cAAc,CAACC,SAAgBA,KAAI,QAAQ,uBAAuB,MAAM;AAE9E,IAAM,YAAY,CAACA,SAAgBA,KAAI,QAAQ,SAAS,OAAK,EAAE,YAAY,CAAC;AAa5E,IAAM,iBAAiB,CAC1B,UACA,UAAU,KACV,WAAW,SAAS,MACpB,UAEA,IAAI,QAAQ,CAAC,YAA6C;AACtD,QAAM,MAAM,CAAC,MAAW;AACpB,aAAS,WAAW;AACpB,YAAQ,CAAC;AAAA,EACb;AAEA,QAAM,WAAW,IAAI,iBAAiB,MAAM;AACxC,UAAM,KAAK,SAAS,cAAiB,QAAQ;AAC7C,QAAI,OAAO,CAAC,SAAS,OAAO;AAAQ,aAAO,IAAI,EAAE;AAAA,EACrD,CAAC;AAED,WAAS,QAAQ,UAAU;AAAA,IACvB,WAAW;AAAA,IACX,SAAS;AAAA,EACb,CAAC;AAED,MAAI;AAAS,eAAW,MAAM,IAAI,IAAI,GAAG,OAAO;AACpD,CAAC;AAqBE,IAAM,QAAQ,CAAC,OAAe,IAAI,QAAQ,aAAW,WAAW,SAAS,EAAE,CAAC;;;ACpD5E,IAAM,wBAAwB,OAAO,SAEpC,MAAM,UAAU,QAAQ,QAAQ,UAAU,QAAQ,YAAY,oBAAoB;AAAA,EAC9E;AAAA,EACA,QAAQ,UAAU,OAAO,UAAU;AACvC,CAAC,GACH,KAAK,YAAY,eAAe,eAAe;AAS9C,IAAM,sBAAsB,UAAU,EAAE;AAAA,EAC3C,OAAO,SACF,MAAM,UAAU,YAAY,IAAI,0CAA0C,IAAI,KAAK,GAAG,CAAC,EAAE,GACrF;AACb;AAEO,IAAM,wBAAwB,UAAU,CAAC;AAAA;AAAA,EAE5C,OAAO,CAAC,EAAE,MAAmB;AAAA,IACxB,MAAM,UAAU,YAAY,IAAI,wCAAwC,EAAE,EAAE;AAAA,EACjF;AACJ;AACO,IAAM,qBAAqB,UAAU,EAAE;AAAA,EAC1C,OAAO,SACF,MAAM,UAAU,YAAY,IAAI,yCAAyC,IAAI,KAAK,GAAG,CAAC,EAAE,GACpF;AACb;AAEO,IAAM,qBAAqB,UAAU,EAAE;AAAA,EAC1C,OAAO,SACF,MAAM,UAAU,YAAY,IAAI,yCAAyC,IAAI,KAAK,GAAG,CAAC,EAAE,GACpF;AACb;AAEO,IAAM,oBAAoB,OAAO,GAAW,SAC/C,UAAU,YAAY,IAAI,uCAAuC,mBAAmB,CAAC,CAAC,SAAS,KAAK,KAAK,GAAG,CAAC,EAAE;AAE5G,IAAM,iCAAiC,OAAO,UAAkB;AACnE,QAAM,OAAO,gBAAgB,KAAK;AAClC,QAAM,KAAK,IAAI,OAAO,IAAI,YAAY,IAAI,CAAC,KAAK,GAAG;AACnD,QAAM,MAAM,MAAM,kBAAkB,MAAM,CAAC,UAAU,CAAC;AACtD,QAAM,OAAO,IAAI,UAAU,MAAM,CAAC;AAClC,SAAO,MAAM,MAAM,OAAO,wBAAwB,GAAG,KAAK,KAAK,IAAI,IAAI,KAAK,MAAM;AACtF;AAqEO,IAAM,mBAAmB,OAAO,WAAmB,QAAgB,WAAmB,iBAAiB,OAAO;AACjH,QAAM,MAAM,IAAI,IAAI,oCAAoC;AACxD,MAAI,aAAa,OAAO,UAAU,eAAe;AACjD,MAAI,aAAa,OAAO,WAAW,SAAS;AAC5C,MAAI,aAAa,OAAO,UAAU,MAAM;AACxC,MAAI,aAAa,OAAO,SAAS,SAAS;AAC1C,MAAI,aAAa,OAAO,UAAU,MAAM;AACxC,MAAI,aAAa,OAAO,YAAY,cAAc;AAElD,SAAQ,MAAM,MAAM,GAAG,EAAE,KAAK,SAAO,IAAI,KAAK,CAAC;AACnD;AAEO,IAAM,2BAA2B,SAAS,gBAAgB;;;ACpKjE,SAAS,SAASC,IAAG,YAAYC,IAAG,UAAUC,YAAW;AACzD,SAAS,eAAe;AAKxB,IAAM,EAAE,IAAI,IAAI;AAET,IAAM,mBAAmB,OAAO,EAAE,SAAS,MAA4B;AAC1E,QAAM,MAAM,IAAI,WAAW,QAAQ;AAEnC,MAAI,CAAC,IAAI,SAAS,GAAI;AAAG;AAGzB,QAAMC,kBAAiB,SAAS,cAAc,KAAK;AACnD,EAAAA,gBAAe,YAAY;AAC3B,EAAAA,gBAAe,YAAY,MAAMC,GAAE;AAAA,IAC/B,MAAM,0BAA0B,CAAC,GAAG,GAAG,EAAE,CAAC;AAAA,IAC1CC,GAAE,SAAS,CAAC;AAAA,IACZA,GAAE,IAAI,OAAM,UAAS;AACjB,YAAMC,OAAM,MAAM,+BAA+B,KAAK;AACtD,aAAO,0CACHA,SAAQ,OACF,wBAAwB,KAAK,+DAC7B,SAASA,IAAG,GACtB,yDAAyD,UAAU,KAAK,CAAC;AAAA,IAC7E,CAAC;AAAA,IACD,QAAM,QAAQ,IAAI,EAAE;AAAA,IACpB,QAAQD,GAAE,YAAYE,KAAI,MAAM,EAAE,iBAAiB,CAAC;AAAA,IACpD,QAAQ,QAAQ,+BAA+B,CAAC;AAAA,EACpD;AAEA,WAAS,cAAc,kBAAkB,GAAG,OAAO;AAEnD,QAAM,mBAAmB,MAAM,eAAe,kCAAkC;AAChF,oBAAkB,aAAaJ,iBAAgB,MAAM,eAAe,oCAAoC,CAAC;AAC7G;AAEO,IAAM,4BAA4B,OAAO,aAA2B,MAAM,SAAS;AACtF,QAAM,mBAAqEC,GAAE;AAAA,IACzEC,GAAE,IAAI,SAAO,IAAI,WAAW,GAAG,EAAG,EAAG;AAAA,IACrC;AAAA,IACA,QAAQA,GAAE,QAAQ,YAAU,OAAO,MAAM,CAAC;AAAA,IAC1C,QAAQA,GAAE,KAAKE,KAAI,EAAE,CAAC;AAAA,EAC1B;AAEA,QAAM,YAAY,MAAM,iBAAiB,WAAW;AAEpD,SAAO,UAAU,SACX,YACA,MAAMH,GAAE;AAAA,IACJ,YAAY,CAAC;AAAA,IACb;AAAA,IACA,QAAQC,GAAE,IAAI,CAAAA,OAAKA,GAAE,GAAG,CAAC;AAAA,IACzB,QAAQA,GAAE,SAAS,CAAC,CAAC;AAAA,IACrB;AAAA,MACIA,GAAE;AAAA,QAAO,QAAQ,QAAQ,CAAC,CAAa;AAAA,QAAG,OAAO,KAAK,cACjD,MAAM,KAAK,SAAS,MAAM,MAAM,MAAM,iBAAiB,QAAQ;AAAA,MACpE;AAAA,IACJ;AAAA,EACJ;AACV;;;AC7DA,SAAS,YAAY;AAKrB,IAAM,EAAE,MAAM,IAAI;AAGX,IAAM,aAAc,WAAW,aAAa,MAAM;AACrD,YAAU,WAAW,QAAQ;AAAA,IACzB,OAAO,cAAc,UAAU,OAAO,KAAK,MAAM,UAAU,KAAK;AAAA,IAChE,SACI,oCAAC,SAAI,WAAU,kBACV,cAAc,WAAW,IAAI,wDAAE,IAAM,oCAAC,4BAAuB,GAC7D,WAAW,WAAW,IAAI,wDAAE,IAAM,oCAAC,yBAAoB,CAC5D;AAAA,IAEJ,SAAS;AAAA,EACb,CAAC;AACL;AAEA,IAAM,gBAAgB,CAAC,EAAE,OAAO,IAAI,QAAQ,IAAI,UAAU,KAAK,GAAG,MAAS,EAAqB,MAC5F,oCAAC,YAAO,WAAW,eAAe,KAAK,IAAI,WACtC,IACL;AAGJ,IAAM,yBAAyB,MAAM;AACjC,QAAM,CAAC,OAAO,QAAQ,IAAI,MAAM,SAAS,aAAa;AAEtD,YAAU,OAAO,iBAAiB,cAAc,MAAM,WAAW,MAAM,SAAS,aAAa,GAAG,GAAG,CAAC;AAEpG,QAAM,qCAAqC,CAAC,UAAkB,YAAY;AACtE,UAAM,MAAM,MAAM,+BAA+B,KAAK;AACtD,QAAI,QAAQ;AAAM,gBAAU,SAAS,QAAQ,KAAK,WAAW,KAAK,YAAY;AAAA;AACzE,gBAAU,SAAS,QAAQ,KAAK,aAAa,IAAI,MAAM,GAAG,EAAE,CAAC,CAAC,EAAE;AAErE,cAAU,WAAW,KAAK;AAAA,EAC9B;AAEA,SACI,oCAAC,SAAI,WAAU,iBACX,oCAAC,QAAG,WAAU,WAAQ,gBAAc,GACnC,MAAM,IAAI,OACP,oCAAC,iBAAc,MAAM,UAAU,CAAC,GAAG,SAAS,mCAAmC,CAAC,GAAG,CACtF,CACL;AAER;AAEA,IAAM,sBAAsB,MAAM;AAC9B,MAAI,WAAW,UAAU;AAAG,WAAO,wDAAE;AACrC,QAAM,CAAC,OAAO,QAAQ,IAAI,MAAM,SAAS,UAAU;AAEnD,YAAU,OAAO,iBAAiB,cAAc,MAAM,WAAW,MAAM,SAAS,UAAU,GAAG,GAAG,CAAC;AAEjG,QAAM,4BAA4B,CAAC,UAAkB,YAAY;AAC7D,cAAU,SAAS,QAAQ,KAAK,WAAW,KAAK,YAAY;AAC5D,cAAU,WAAW,KAAK;AAAA,EAC9B;AAEA,SACI,oCAAC,SAAI,WAAU,iBACX,oCAAC,QAAG,WAAU,WAAQ,cAAY,GACjC,MAAM,IAAI,OACP,oCAAC,iBAAc,MAAM,UAAU,CAAC,GAAG,SAAS,0BAA0B,CAAC,GAAG,CAC7E,CACL;AAER;;;ACrEA,SAAS,QAAAG,aAAY;;;ACArB,SAAS,QAAAC,aAAY;;;ACArB,SAAS,eAAe;AAGxB,IAAMC,WAAU,iBAAiB,KAAK,CAAC,CAAC,OAAO,wCAAwC,CAAC,GAAG,CAAC,GAAG,QAAM,EAAE,CAAC;AACxG,IAAM,QAAQ,OAAO,KAAKA,SAAQ,CAAC,EAAE,IAAI,QAAMA,SAAQ,EAAE,CAAC;AACnD,IAAM,UAAU,MAClB,OAAO,CAAC,WAA6B,OAAO,WAAW,QAAQ,EAC/D,QAAQ,YAAU,OAAO,OAAO,MAAM,CAAC;AACrC,IAAM,kBAAkB,QAAQ,OAAO,CAAC,WAA+B,OAAO,WAAW,UAAU;AAEnG,IAAM,eAAe,QAAQ,OAAO,OAAK,GAAG,QAAQ;AAC3D,IAAM,kBAAkB,UAAU,MAAM,KAAK,EAAE;AACxC,IAAM,aAAa,aAAa,OAAO,OAAK,EAAE,aAAa,eAAe;AAEjF,IAAM,sBAAsB,CAACC,aAAwB,YACjDA,SAAQ;AAAA,EAAK,CAAAC,OACT;AAAA,IACI,QAAQ;AAAA,MAAI,YACR,OAAO,WAAW,WAAW,CAAC,MAAc,EAAE,SAAS,MAAM,IAAI,CAAC,MAAc,OAAO,KAAK,CAAC;AAAA,IACjG;AAAA,EACJ,EAAEA,GAAE,SAAS,CAAC;AAClB;AAEG,IAAM,4BAA4B;AAAA,EACrC;AAAA,EACA;AACJ;AAEO,IAAM,iBAAiB;AAAA,EAC1B;AAAA,EACA;AACJ;AACO,IAAM,eAAe,oBAAoB,iBAAiB,mBAAmB,eAAe;AAC5F,IAAM,gBAAgB,oBAAoB,iBAAiB,mCAAmC,kBAAkB;AAChH,IAAM,cAAc,oBAAoB,iBAAiB,eAAe,OAAO;AAC/E,IAAM,gBAAgB,oBAAoB,iBAAiB,aAAa,YAAY;AAEpF,IAAM,sBAAsB,QAAQ,KAAK,OAAK,GAAG,cAAc,EAAG;;;ADhCzE,IAAM,EAAE,OAAAC,QAAO,SAAS,IAAI;AAC5B,IAAM,EAAE,gBAAgB,IAAI,UAAU;AAuC/B,IAAM,kBAAN,MAAM,iBAAgB;AAAA,EAGzB,YAAmB,MAAqB,IAAmB,gBAAkD,CAAC,GAAG;AAA9F;AAAqB;AAAmB;AAE3D,wBAAe,MAAM;AACjB,UAAI,KAAK;AAAqB,aAAK,oBAAoB;AAEvD,WAAK,sBAAsB,UAAU,SAAS,QAAQ,OAAO,MAAM,KAAK,OAAO,CAAC;AAChF,WAAK,OAAO;AAAA,IAChB;AAEA,oBAAW,MACP,IAAI;AAAA,MACA,CAAC;AAAA,MACD;AAAA,QACI,KAAK,CAAC,QAAQ,SAAS,iBAAgB,cAAc,KAAK,MAAM,KAAK,SAAS,CAAC,CAAC;AAAA,MACpF;AAAA,IACJ;AAEJ,SAAQ,SAAS,YAAY;AACzB,aAAO,CAAC,SAAS,eAAe,iCAAiC,GAAG;AAChE,YAAI,UAAU,SAAS,QAAQ,SAAS,aAAa;AAAgB;AACrE,cAAM,MAAM,GAAG;AAAA,MACnB;AAEA,YAAM,uBAAuB,SAAS,cAAc,uBAAuB;AAE3E,UAAI,0BAA0B,MAAM,KAAK,qBAAqB,QAAQ,EAAE,KAAK,CAAC,EAAE,GAAG,MAAM,OAAO,KAAK,EAAE;AAEvG,UAAI,CAAC,yBAAyB;AAC1B,kCAA0B,SAAS,cAAc,KAAK;AACtD,gCAAwB,KAAK,KAAK;AAClC,gCAAwB,YAAY;AACpC,6BAAqB,YAAY,uBAAuB;AAAA,MAC5D;AAEA,eAAS,OAAO,gBAAAC,OAAA,cAAC,KAAK,iBAAL,IAAqB,GAAI,uBAAuB;AAAA,IACrE;AAEA,qBAAY,CAAC,UAAqC;AAC9C,WAAK,SAAS,uBAAkB,KAAK;AACrC,aAAO;AAAA,IACX;AAEA,qBAAY,CAAC,OAAkC,eAAeC,MAAK,GAAG,KAAK,MAAM;AAC7E,WAAK,SAAS,uBAAkB,OAAO,YAAY;AACnD,aAAO;AAAA,IACX;AAEA,oBAAW,CAAC,OAAiC,eAAeA,MAAK,GAAG,EAAE,MAAM;AACxE,WAAK,SAAS,qBAAiB,OAAO,YAAY;AAClD,aAAO;AAAA,IACX;AAWA,iBAAQ,CAAC,WAAmB,CAAC,cAAc,KAAK,IAAI,MAAM,EAAE,KAAK,GAAG;AAEpE,SAAQ,cAAc,CAAK,OAAe;AACtC,YAAM,CAAC,OAAO,aAAa,IAAID,OAAM,SAAS,iBAAgB,cAAiB,EAAE,CAAC;AAElF,aAAO;AAAA,QACH;AAAA,QACA,CAAC,aAAgB;AACb,cAAI,aAAa,QAAW;AACxB,0BAAc,QAAQ;AACtB,6BAAgB,cAAc,IAAK,QAAQ;AAAA,UAC/C;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAUA,SAAQ,kBAAkB,MACtB,gBAAAA,OAAA,cAAC,kBAAe,kBAAkB,KAAK,QACnC,gBAAAA,OAAA,cAAC,oBAAc,KAAK,IAAK,GACxB,OAAO,OAAO,KAAK,aAAa,EAAE,IAAI,WAAS;AAC5C,YAAM,SAAS,GAAkB,MAAM;AAEvC,aAAO,OAAO;AAAA,QACV,CAAC,OAAmB,mBAAe,GAAG,KAAK,UAAU;AAAA,QACrD,CAAC,OAAO,qBAAgB,GAAG,KAAK,WAAW;AAAA,QAC3C,CAAC,OAAO,qBAAgB,GAAG,KAAK,WAAW;AAAA,MAC/C,CAAC,EAAE,MAAM,gBAAAA,OAAA,cAAAA,OAAA,cAAE,CAAG,EAAE,KAAK;AAAA,IACzB,CAAC,CACL;AAGJ,wBAAe,CAAC,EAAE,OAAO,SAAS,MAC9B,gBAAAA,OAAA,cAAC,iBAAc,kBAAkB,MAAM,MACnC,gBAAAA,OAAA,cAAC,SAAI,WAAU,4BACX,gBAAAA,OAAA,cAAC,eAAY,SAAS,MAAM,MAAK,MAAM,IAAK,CAChD,GACA,gBAAAA,OAAA,cAAC,SAAI,WAAU,6BAA2B,QAAS,CACvD;AAGJ,uBAAc,CAAC,UACX,gBAAAA,OAAA,cAAC,KAAK,cAAL,EAAkB,SACf,gBAAAA,OAAA,cAAC,mBAAgB,IAAI,MAAM,IAAI,YAAW,MAAK,SAAS,MAAM,SAAS,WAAU,uBAC5E,MAAM,IACX,CACJ;AAGJ,uBAAc,CAAC,UAAuB;AAClC,YAAM,KAAK,KAAK,MAAM,MAAM,EAAE;AAC9B,YAAM,CAAC,OAAO,QAAQ,IAAI,KAAK,YAAqB,EAAE;AACtD,aACI,gBAAAA,OAAA,cAAC,KAAK,cAAL,EAAkB,SACf,gBAAAA,OAAA;AAAA,QAAC;AAAA;AAAA,UACG,IAAI,MAAM;AAAA,UACV,OAAO,iBAAgB,cAAc,EAAE;AAAA,UACvC,YAAY,CAAC,YAAqB;AAC9B,qBAAS,OAAO;AAChB,kBAAM,aAAa,OAAO;AAAA,UAC9B;AAAA,UACA,WAAU;AAAA;AAAA,MACd,CACJ;AAAA,IAER;AAEA,sBAAa,CAAC,UAAsB;AAChC,YAAM,KAAK,KAAK,MAAM,MAAM,EAAE;AAC9B,YAAM,CAAC,OAAO,QAAQ,IAAI,KAAK,YAAoB,EAAE;AACrD,aACI,gBAAAA,OAAA,cAAC,KAAK,cAAL,EAAkB,SACf,gBAAAA,OAAA;AAAA,QAAC;AAAA;AAAA,UACG,WAAU;AAAA,UACV,IAAI,MAAM;AAAA,UACV,KAAI;AAAA,UACJ,OAAO,iBAAgB,cAAc,EAAE;AAAA,UACvC,MAAM,MAAM;AAAA,UACZ,UAAU,OAAK;AACX,kBAAME,SAAQ,EAAE,cAAc;AAC9B,qBAASA,MAAK;AACd,kBAAM,WAAWA,MAAK;AAAA,UAC1B;AAAA;AAAA,MACJ,CACJ;AAAA,IAER;AAAA,EA1JkH;AAAA,EAoD1G,SAAS,MAAiB,MAAmC,cAAoB;AACrF,QAAI,iBAAiB,QAAW;AAC5B,YAAM,YAAY,KAAK,MAAM,KAAK,EAAE;AACpC,uBAAgB,qBAAqB,WAAW,YAAY;AAAA,IAChE;AACA,UAAM,QAAQ,OAAO,OAAO,CAAC,GAAG,MAAM,EAAE,KAAK,CAAC;AAC9C,SAAK,cAAc,KAAK,EAAE,IAAI;AAAA,EAClC;AAAA,EAkBA;AAAA,SAAO,gBAAgB,CAAK,OAAkB,KAAK,MAAM,UAAU,aAAa,IAAI,EAAE,KAAK,MAAM;AAAA;AAAA,EAEjG;AAAA,SAAO,gBAAgB,CAAC,IAAY,aAAkB,UAAU,aAAa,IAAI,IAAI,KAAK,UAAU,QAAQ,CAAC;AAAA;AAAA,EAE7G;AAAA,SAAe,uBAAuB,OAAO,IAAY,iBAAiC;AACtF,UAAI,iBAAgB,cAAc,EAAE,MAAM;AAAM,yBAAgB,cAAc,IAAI,MAAM,aAAa,CAAC;AAAA,IAC1G;AAAA;AAwEJ;;;ADxMA,IAAM,WAAW,IAAI,gBAAgB,mBAAmB,iBAAiB,EAAE;AAAA,EACvE;AAAA,IACI,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,WAAW;AAAA,EACf;AAAA,EACAC,MAAK,GAAG,kCAAkC;AAC9C;AAEA,SAAS,aAAa;AAEf,IAAM,SAAS,SAAS,SAAS;;;ANJxC,IAAM,iBAAkB,WAAW,iBAAiB,CAAC,UACjD,UAAU,SAAS,QAAQ,KAAK,WAAW,KAAK,YAAY;AAEzD,IAAI,gBAAgB,IAAI,MAAc;AACtC,IAAI,aAAa,IAAI,MAAc;AAE1C,IAAM,uBAAuB,OAAO,WAAqB;AACrD,iBAAe,YAAY,MAAMC,GAAE;AAAA,IAC/B;AAAA,IACAC,GAAE,IAAI,OAAM,UAAS;AACjB,YAAM,MAAO,MAAM,+BAA+B,KAAK,KAAM;AAC7D,aAAO,YAAY,GAAG,0DAA0D,UAAU,KAAK,CAAC;AAAA,IACpG,CAAC;AAAA,IACD,QAAM,QAAQ,IAAI,EAAE;AAAA,IACpB,QAAQA,GAAE,YAAYC,KAAI,MAAM,EAAE,iBAAiB,CAAC;AAAA,EACxD;AACA,SAAO;AACX;AAEA,IAAM,iBAAiB,OAAO,WAAqB;AAC/C,QAAM,qBAAqB,MAAM,eAAe,8BAA8B;AAE9E,QAAM,EAAE,KAAK,SAAS,IAAI,UAAU,OAAO,KAAK;AAEhD,MAAI,YAAY,UAAU,IAAI,QAAQ,GAAG,KAAK,OAAO,QAAQ;AACzD,wBAAoB,YAAY,MAAM,qBAAqB,MAAM,CAAC;AAElE,iBAAaF,GAAE;AAAA,MACX,MAAM,iBAAiB,OAAO,WAAW,SAAS,aAAc,SAAS,KAAM;AAAA,MAC/E,CAAC,EAAE,MAAM,MAAM,MAAM,QAAQ;AAAA,MAC7BC,GAAE,IAAI,CAAC,EAAE,KAAK,MAAM,IAAI;AAAA,IAC5B;AAAA,EACJ;AAAO,wBAAoB,YAAY,cAAc;AACzD;AAEA,IAAM,gCAAgC,MAAM;AACxC,QAAM,WAAW,UAAU,OAAO,MAAM,KAAK,YAAY,CAAC;AAE1D,SAAO,CAAC,GAAG,MAAM,EAAE,EAAE,KAAK,CAAC,EACtB,IAAI,OAAK,SAAU,gBAAgB,IAAI,IAAI,CAAC,KAAK,GAA6B,CAAC,EAC/E,OAAO,OAAO;AACvB;AAEA,IAAM,eAAe,YAAY;AAC7B,QAAM,aAAa,8BAA8B;AACjD,kBAAgB,MAAM,0BAA0B,UAAU;AAE1D,QAAM,eAAe,cAAc,MAAM,GAAG,CAAC,CAAC;AAClD;AAEA,IAAM,iBAAiB,SAAS,cAAc,KAAK;AACnD,eAAe,YAAY;AAC3B,eAAe,MAAM,WAAW;AAChC,eAAe,iBAAiB,eAAe,UAAU;AAEzD,UAAU,OAAO,iBAAiB,cAAc,YAAY;AAC5D,aAAa;AAEb,UAAU,SAAS,QAAQ,OAAO,gBAAgB;AAClD,iBAAiB,UAAU,SAAS,QAAQ,QAAQ;",
  "names": ["a", "f", "str", "f", "a", "f", "str", "a", "f", "str", "genreContainer", "f", "a", "uri", "str", "task", "task", "require", "modules", "f", "React", "React", "task", "value", "task", "f", "a", "str"]
}
