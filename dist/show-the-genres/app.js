import{array as v,string as ut,function as H}from"https://esm.sh/fp-ts";import{array as x,eq as W,string as V,record as mt,semigroup as ht,function as S}from"https://esm.sh/fp-ts";import{guard as z,memoize as K}from"https://esm.sh/fp-ts-std/Function";var w=t=>z(t);var l=t=>async e=>t(await e),L=t=>e=>i=>i[t]===e;var m=t=>e=>S.flow(x.chunksOf(t),x.map(e),i=>Promise.all(i),l(x.flatten));var U=t=>S.pipe(t,S.tupled,K(W.contramap(JSON.stringify)(V.Eq)),S.untupled);import{array as Pt,function as B}from"https://esm.sh/fp-ts";var It={before:{start:B.constant({before:"start"}),fromUri:t=>({before:{uri:t}}),fromUid:t=>({before:{uid:t}})},after:{end:B.constant({after:"end"}),fromUri:t=>({after:{uri:t}}),fromUid:t=>({after:{uid:t}})}},C=t=>t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),c=t=>t.replace(/\b\w/g,e=>e.toUpperCase());var A=(t,e=1e3,i=document.body,s)=>new Promise(r=>{let o=g=>{T.disconnect(),r(g)},T=new MutationObserver(()=>{let g=document.querySelector(t);if(g&&(!s||g!==s))return o(g)});T.observe(i,{childList:!0,subtree:!0}),e&&setTimeout(()=>o(null),e)});var E=t=>new Promise(e=>setTimeout(e,t));var O=async t=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistRelated,{uri:t,locale:Spicetify.Locale.getLocale()})).data.artistUnion.relatedContent.relatedArtists.items;var G=m(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${t.join(",")}`)).artists),Lt=m(1)(async([t])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${t}`)]),Ut=m(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${t.join(",")}`)).albums),Bt=m(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${t.join(",")}`)).tracks),J=async(t,e)=>Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/search?q=${encodeURIComponent(t)}&type=${e.join(",")}`),u=async t=>{let e=`The Sound Of ${t}`,i=new RegExp(`^${C(e)}$`,"i"),r=(await J(e,["playlist"])).playlists.items[0];return r?.owner.id==="thesoundsofspotify"&&i.test(r.name)?r.uri:null};var P=async(t,e,i,s="")=>{let r=new URL("https://ws.audioscrobbler.com/2.0/");return r.searchParams.append("method","track.getInfo"),r.searchParams.append("api_key",t),r.searchParams.append("artist",e),r.searchParams.append("track",i),r.searchParams.append("format","json"),r.searchParams.append("username",s),await fetch(r).then(o=>o.json())},Ct=U(P);import{array as p,string as N,function as I}from"https://esm.sh/fp-ts";import{prepend as X}from"https://esm.sh/fp-ts-std/String";var{URI:R}=Spicetify,F=async({pathname:t})=>{let e=R.fromString(t);if(!R.isArtist(e))return;let i=document.createElement("div");i.className="main-entityHeader-detailsText genre-container",i.innerHTML=await I.pipe(await k([`${e}`]),p.takeLeft(5),p.map(async r=>{let o=await u(r);return`<a class="main-entityHeader-genreLink" ${o===null?`href="#" data-value="${r}" onclick="searchPlaylist(this.getAttribute('data-value'))`:`href="${o}"`} style="color: var(--spice-subtext); font-size: 1rem">${c(r)}</a>`}),r=>Promise.all(r),l(p.intercalate(N.Monoid)("<span>, </span>")),l(X("<span>Artist Genres : </span>"))),document.querySelector(".genre-container")?.remove(),(await A("div.main-entityHeader-headerText"))?.insertBefore(i,await A("span.main-entityHeader-detailsText"))},k=async(t,e=null)=>{let i=I.flow(p.map(r=>R.fromString(r).id),G,l(p.flatMap(r=>r.genres)),l(p.uniq(N.Eq))),s=await i(t);return s.length?s:await I.pipe(t[0],O,l(p.map(r=>r.uri)),l(p.chunksOf(5)),l(p.reduce(Promise.resolve([]),async(r,o)=>(await r).length?await r:await i(o))))};import{task as Y}from"https://esm.sh/fp-ts";var{React:n}=Spicetify,M=globalThis.genrePopup=()=>{Spicetify.PopupModal.display({title:`Genres of: ${Spicetify.Player.data.item?.metadata?.title}`,content:n.createElement("div",{className:"genres-popup"},d.length===0?n.createElement(n.Fragment,null):n.createElement(Z,null),y.length===0?n.createElement(n.Fragment,null):n.createElement(tt,null)),isLarge:!0})},D=({name:t="",color:e="",onClick:i=Y.of(void 0)})=>n.createElement("button",{className:`login-button${e}`,onClick:i},t),Z=()=>{let[t,e]=n.useState(d);Spicetify.Player.addEventListener("songchange",()=>setTimeout(()=>e(d),500));let i=s=>async()=>{let r=await u(s);r===null?Spicetify.Platform.History.push(`/search/${s}/playlists`):Spicetify.Platform.History.push(`/playlist/${r.split(":")[2]}`),Spicetify.PopupModal.hide()};return n.createElement("div",{className:"spaced-down"},n.createElement("h1",{className:"title"},"Spotify Genres"),t.map(s=>n.createElement(D,{name:c(s),onClick:i(s)})))},tt=()=>{if(y.length==0)return n.createElement(n.Fragment,null);let[t,e]=n.useState(y);Spicetify.Player.addEventListener("songchange",()=>setTimeout(()=>e(y),100));let i=s=>async()=>{Spicetify.Platform.History.push(`/search/${s}/playlists`),Spicetify.PopupModal.hide()};return n.createElement("div",{className:"spaced-down"},n.createElement("h1",{className:"title"},"Last FM Tags"),t.map(s=>n.createElement(D,{name:c(s),onClick:i(s)})))};import{task as ct}from"https://esm.sh/fp-ts";import{task as _}from"https://esm.sh/fp-ts";var{React:a,ReactDOM:et}=Spicetify,{ButtonSecondary:it}=Spicetify.ReactComponent,Q=webpackChunkopen.push([[Symbol()],{},t=>t]),rt=Object.keys(Q.m).map(t=>Q(t)),st=rt.filter(t=>typeof t=="object").map(t=>{try{return Object.values(t)}catch{}}).flat(),h=st.filter(t=>typeof t=="function"),nt=h.find(t=>/^function .\(.\)\{return\(0,.\.jsx\)\(/.test(t)),at=h.find(t=>t.toString().includes("textToHighlight")),ot=h.find(t=>t.toString().includes("setSectionFilterMatchQueryValue")&&t.toString().includes("filterMatchQuery")),lt=h.find(t=>t.toString().includes("textSubdued")&&t.toString().includes("viola")),pt=h.find(t=>t.toString().includes("condensed")&&t.toString().includes("onSelected"));var b=class t{constructor(e,i,s={}){this.name=e;this.id=i;this.sectionFields=s;this.pushSettings=()=>{this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(()=>this.render()),this.render()};this.toObject=()=>new Proxy({},{get:(e,i)=>t.getFieldValue(this.getId(i.toString()))});this.render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await E(100)}let e=document.querySelector(".x-settings-container"),i=Array.from(e.children).find(({id:s})=>s===this.id);i||(i=document.createElement("div"),i.id=this.id,i.className="settingsContainer",e.appendChild(i)),et.render(a.createElement(this.FieldsContainer,null),i)};this.addButton=e=>(this.addField("button",e),this);this.addToggle=(e,i=_.of(!1))=>(this.addField("toggle",e,i),this);this.addInput=(e,i=_.of(""))=>(this.addField("input",e,i),this);this.getId=e=>["extensions",this.id,e].join(":");this.useStateFor=e=>{let[i,s]=a.useState(t.getFieldValue(e));return[i,r=>{r!==void 0&&(s(r),t.setFieldValue(e,r))}]};this.FieldsContainer=()=>a.createElement(nt,{filterMatchQuery:this.name},a.createElement(at,null,this.name),Object.values(this.sectionFields).map(e=>{let i=L("type");return w([[i("input"),this.InputField],[i("button"),this.ButtonField],[i("toggle"),this.ToggleField]])(()=>a.createElement(a.Fragment,null))(e)}));this.SettingField=({field:e,children:i})=>a.createElement(ot,{filterMatchQuery:e.id},a.createElement("div",{className:"x-settings-firstColumn"},a.createElement(lt,{htmlFor:e.id},e.desc)),a.createElement("div",{className:"x-settings-secondColumn"},i));this.ButtonField=e=>a.createElement(this.SettingField,{field:e},a.createElement(it,{id:e.id,buttonSize:"sm",onClick:e.onClick,className:"x-settings-button"},e.text));this.ToggleField=e=>{let[i,s]=this.useStateFor(e.id);return a.createElement(this.SettingField,{field:e},a.createElement(pt,{id:e.id,value:t.getFieldValue(this.getId(e.id)),onSelected:r=>{s(r),e.onSelected?.(r)},className:"x-settings-button"}))};this.InputField=e=>{let[i,s]=this.useStateFor(e.id);return a.createElement(this.SettingField,{field:e},a.createElement("input",{className:"x-settings-input",id:e.id,dir:"ltr",value:t.getFieldValue(this.getId(e.id)),type:e.inputType,onChange:r=>{let o=r.currentTarget.value;s(o),e.onChange?.(o)}}))}}addField(e,i,s){if(s!==void 0){let o=this.getId(i.id);t.setDefaultFieldValue(o,s)}let r=Object.assign({},i,{type:e});this.sectionFields[i.id]=r}static{this.getFieldValue=e=>JSON.parse(Spicetify.LocalStorage.get(e)??"null")}static{this.setFieldValue=(e,i)=>Spicetify.LocalStorage.set(e,JSON.stringify(i))}static{this.setDefaultFieldValue=async(e,i)=>{t.getFieldValue(e)===null&&t.setFieldValue(e,await i())}}};var j=new b("Show The Genres","show-the-genres").addInput({id:"LFMApiKey",desc:"Last.fm API Key",inputType:"text"},ct.of("********************************"));j.pushSettings();var $=j.toObject();var ce=globalThis.searchPlaylist=t=>Spicetify.Platform.History.push(`/search/${t}/playlists`),d=new Array,y=new Array,yt=async t=>(f.innerHTML=await H.pipe(t,v.map(async e=>`<a href="${await u(e)??"#"}" style="color: var(--spice-subtext); font-size: 12px">${c(e)}</a>`),e=>Promise.all(e),l(v.intercalate(ut.Monoid)("<span>, </span>"))),f),dt=async t=>{let e=await A("div.main-trackInfo-container"),{uri:i,metadata:s}=Spicetify.Player.data.track;s&&Spicetify.URI.isTrack(i)&&t.length?(e?.appendChild(await yt(t)),y=H.pipe(await P($.LFMApiKey,s.artist_name,s.title),({track:r})=>r.toptags.tag,v.map(({name:r})=>r))):e?.removeChild(f)},ft=()=>{let t=Spicetify.Player.data?.item.metadata??{};return[...Array(10).keys()].map(e=>t["artist_uri"+(e?`:${e}`:"")]).filter(Boolean)},q=async()=>{let t=ft();d=await k(t),await dt(d.slice(0,5))},f=document.createElement("div");f.className="main-trackInfo-genres ellipsis-one-line main-type-finale";f.style.gridArea="genres";f.addEventListener("contextmenu",M);Spicetify.Player.addEventListener("songchange",q);q();Spicetify.Platform.History.listen(F);F(Spicetify.Platform.History.location);export{y as lastFmTags,d as spotifyGenres};
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,
(async () => {
    if (!document.getElementById("show-the-genres-css")) {
        const el = document.createElement("style")
        el.id = "show-the-genres-css"
        
        el.textContent = ".genres-popup:after{content:\"\";display:table;clear:both}.genres-popup .title{color:var(--spice-text)}.genres-popup .spaced-down{margin-bottom:20px}.genres-popup .login-button{background-color:var(--spice-button);border-radius:8px;border-style:none;color:var(--spice-text);cursor:pointer;font-size:14px;height:40px;margin:10px;padding:5px 10px;text-align:center}.genres-popup .login-button:hover{background-color:var(--spice-button-active)}.main-nowPlayingWidget-trackInfo.main-trackInfo-container{grid-template:\"title title\" \"badges subtitle\" \"genres genres\"/auto 1fr auto}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vZXh0ZW5zaW9ucy9zaG93LXRoZS1nZW5yZXMvYXNzZXRzL3N0eWxlcy5jc3MiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi5nZW5yZXMtcG9wdXA6OmFmdGVye2NvbnRlbnQ6XCJcIjtkaXNwbGF5OnRhYmxlO2NsZWFyOmJvdGh9LmdlbnJlcy1wb3B1cCAudGl0bGV7Y29sb3I6dmFyKC0tc3BpY2UtdGV4dCl9LmdlbnJlcy1wb3B1cCAuc3BhY2VkLWRvd257bWFyZ2luLWJvdHRvbToyMHB4fS5nZW5yZXMtcG9wdXAgLmxvZ2luLWJ1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwaWNlLWJ1dHRvbik7Ym9yZGVyLXJhZGl1czo4cHg7Ym9yZGVyLXN0eWxlOm5vbmU7Y29sb3I6dmFyKC0tc3BpY2UtdGV4dCk7Y3Vyc29yOnBvaW50ZXI7Zm9udC1zaXplOjE0cHg7aGVpZ2h0OjQwcHg7bWFyZ2luOjEwcHg7cGFkZGluZzo1cHggMTBweDt0ZXh0LWFsaWduOmNlbnRlcn0uZ2VucmVzLXBvcHVwIC5sb2dpbi1idXR0b246aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGljZS1idXR0b24tYWN0aXZlKX0ubWFpbi1ub3dQbGF5aW5nV2lkZ2V0LXRyYWNrSW5mby5tYWluLXRyYWNrSW5mby1jb250YWluZXJ7Z3JpZC10ZW1wbGF0ZTpcInRpdGxlIHRpdGxlXCIgXCJiYWRnZXMgc3VidGl0bGVcIiBcImdlbnJlcyBnZW5yZXNcIi9hdXRvIDFmciBhdXRvfSJdLAogICJtYXBwaW5ncyI6ICJBQUFBLENBQUMsWUFBWSxPQUFRLFFBQVEsR0FBRyxRQUFRLE1BQU0sTUFBTSxJQUFJLENBQUMsQ0FBeEQsYUFBc0UsQ0FBQyxNQUFNLE1BQU0sSUFBSSxhQUFhLENBQUMsQ0FBckcsYUFBbUgsQ0FBQyxZQUFZLGNBQWMsSUFBSSxDQUFDLENBQW5KLGFBQWlLLENBQUMsYUFBYSxpQkFBaUIsSUFBSSxnQkFBck0sY0FBbU8sSUFBSSxhQUFhLEtBQUssTUFBTSxJQUFJLGNBQWMsT0FBTyxRQUFRLFVBQVUsS0FBSyxPQUFPLEtBQXRULE9BQWtVLEtBQWxVLFFBQStVLElBQUksS0FBSyxXQUFXLE1BQU0sQ0FBQyxDQUF6VyxhQUF1WCxDQUFyTixZQUFrTyxPQUFPLGlCQUFpQixJQUFJLHNCQUFzQixDQUFDLENBQUMsK0JBQStCLENBQUMseUJBQXlCLGNBQWMsY0FBYyxrQkFBa0IsZUFBZSxDQUFDLEtBQUssSUFBSSxJQUFJIiwKICAibmFtZXMiOiBbXQp9Cg== */\n"
        document.head.appendChild(el)
    }
})()