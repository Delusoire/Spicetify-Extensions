import{array as k,string as it,function as Q}from"https://esm.sh/fp-ts";import{array as I,eq as V,string as W,record as ot,semigroup as lt,function as S}from"https://esm.sh/fp-ts";import{guard as q,memoize as z}from"https://esm.sh/fp-ts-std/Function";var L=e=>q(e);var c=e=>async t=>e(await t),U=e=>t=>i=>i[e]===t;var A=e=>t=>S.flow(I.chunksOf(e),I.map(t),i=>Promise.all(i),c(I.flatten));var E=e=>S.pipe(e,S.tupled,z(V.contramap(JSON.stringify)(W.Eq)),S.untupled);import{array as dt,function as B}from"https://esm.sh/fp-ts";var gt={before:{start:B.constant({before:"start"}),fromUri:e=>({before:{uri:e}}),fromUid:e=>({before:{uid:e}})},after:{end:B.constant({after:"end"}),fromUri:e=>({after:{uri:e}}),fromUid:e=>({after:{uid:e}})}},C=e=>e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),y=e=>e.replace(/\b\w/g,t=>t.toUpperCase());var h=(e,t=1e3,i=document.body,s)=>new Promise(r=>{let n=l=>{p.disconnect(),r(l)},p=new MutationObserver(()=>{let l=document.querySelector(e);if(l&&(!s||l!==s))return n(l)});p.observe(i,{childList:!0,subtree:!0}),t&&setTimeout(()=>n(null),t)});var b=e=>new Promise(t=>setTimeout(t,e));var D=async e=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistRelated,{uri:e,locale:Spicetify.Locale.getLocale()})).data.artistUnion.relatedContent.relatedArtists.items;var O=A(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${e.join(",")}`)).artists),xt=A(1)(async([e])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${e}`)]),Pt=A(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${e.join(",")}`)).albums),It=A(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${e.join(",")}`)).tracks),K=async(e,t)=>Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/search?q=${encodeURIComponent(e)}&type=${t.join(",")}`),d=async e=>{let t=`The Sound Of ${e}`,i=new RegExp(`^${C(t)}$`,"i"),r=(await K(t,["playlist"])).playlists.items[0];return r?.owner.id==="thesoundsofspotify"&&i.test(r.name)?r.uri:null};var R=async(e,t,i,s="")=>{let r=new URL("https://ws.audioscrobbler.com/2.0/");return r.searchParams.append("method","track.getInfo"),r.searchParams.append("api_key",e),r.searchParams.append("artist",t),r.searchParams.append("track",i),r.searchParams.append("format","json"),r.searchParams.append("username",s),await fetch(r).then(n=>n.json())},Rt=E(R);import{array as u,string as N,function as v}from"https://esm.sh/fp-ts";import{prepend as J}from"https://esm.sh/fp-ts-std/String";var{URI:F}=Spicetify,w=async({pathname:e})=>{let t=F.fromString(e);if(!F.isArtist(t))return;let i=document.createElement("div");i.className="main-entityHeader-detailsText genre-container",i.innerHTML=await v.pipe(await T([`${t}`]),u.takeLeft(5),u.map(async r=>{let n=await d(r);return`<a class="main-entityHeader-genreLink" ${n===null?`href="#" data-value="${r}" onclick="searchPlaylist(this.getAttribute('data-value'))`:`href="${n}"`} style="color: var(--spice-subtext); font-size: 1rem">${y(r)}</a>`}),r=>Promise.all(r),c(u.intercalate(N.Monoid)("<span>, </span>")),c(J("<span>Artist Genres : </span>"))),document.querySelector(".genre-container")?.remove(),(await h("div.main-entityHeader-headerText"))?.insertBefore(i,await h("span.main-entityHeader-detailsText"))},T=async(e,t=null)=>{let i=v.flow(u.map(r=>F.fromString(r).id),O,c(u.flatMap(r=>r.genres)),c(u.uniq(N.Eq))),s=await i(e);return s.length?s:await v.pipe(e[0],D,c(u.map(r=>r.uri)),c(u.chunksOf(5)),c(u.reduce(Promise.resolve([]),async(r,n)=>(await r).length?await r:await i(n))))};import{task as X}from"https://esm.sh/fp-ts";var{React:o}=Spicetify,M=globalThis.genrePopup=()=>{Spicetify.PopupModal.display({title:`Genres of: ${Spicetify.Player.data.track?.metadata?.title}`,content:o.createElement("div",{className:"genres-popup"},m.length===0?o.createElement(o.Fragment,null):o.createElement(Y,null),g.length===0?o.createElement(o.Fragment,null):o.createElement(Z,null)),isLarge:!0})},G=({name:e="",color:t="",onClick:i=X.of(void 0)})=>o.createElement("button",{className:`login-button${t}`,onClick:i},e),Y=()=>{let[e,t]=o.useState(m);Spicetify.Player.addEventListener("songchange",()=>setTimeout(()=>t(m),500));let i=s=>async()=>{let r=await d(s);r===null?Spicetify.Platform.History.push(`/search/${s}/playlists`):Spicetify.Platform.History.push(`/playlist/${r.split(":")[2]}`),Spicetify.PopupModal.hide()};return o.createElement("div",{className:"spaced-down"},o.createElement("h1",{className:"title"},"Spotify Genres"),e.map(s=>o.createElement(G,{name:y(s),onClick:i(s)})))},Z=()=>{if(g.length==0)return o.createElement(o.Fragment,null);let[e,t]=o.useState(g);Spicetify.Player.addEventListener("songchange",()=>setTimeout(()=>t(g),100));let i=s=>async()=>{Spicetify.Platform.History.push(`/search/${s}/playlists`),Spicetify.PopupModal.hide()};return o.createElement("div",{className:"spaced-down"},o.createElement("h1",{className:"title"},"Last FM Tags"),e.map(s=>o.createElement(G,{name:y(s),onClick:i(s)})))};import{task as et}from"https://esm.sh/fp-ts";import{task as H}from"https://esm.sh/fp-ts";import{constVoid as x}from"https://esm.sh/fp-ts/function";var{React:a,ReactDOM:tt}=Spicetify,P=class e{constructor(t,i,s={}){this.name=t;this.sectionId=i;this.sectionFields=s}stopHistoryListener;setRerender=null;static waitForReact=async()=>{for(;!(Spicetify.React&&Spicetify.ReactDOM);)b(100);return this};pushSettings=async()=>{for(;!Spicetify?.Platform?.History?.listen;)await b(100);this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(({pathname:t=""})=>{t==="/preferences"&&this.render()}),Spicetify.Platform.History.location.pathname==="/preferences"&&await this.render()};toObject=()=>new Proxy({},{get:(t,i)=>e.getFieldValue(this.getId(i.toString()))});rerender=()=>{this.setRerender&&this.setRerender(Math.random())};render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await b(100)}let t=document.querySelector(".x-settings-container"),i=Array.from(t.children).find(({id:s})=>s===this.sectionId);i||(i=document.createElement("div"),i.id=this.sectionId,i.className="settingsContainer",t.appendChild(i)),tt.render(a.createElement(this.FieldsContainer,null),i)};addButton=(t,i,s,r=x,n={})=>{let p=this.getId(t);return n.onClick=r,this.sectionFields[t]={id:p,type:"button",description:i,text:s,events:n},this};addToggle=(t,i,s=H.of(!0),r=x,n={})=>{let p=this.getId(t);return e.setDefaultFieldValue(p,s),n.onChange=r,this.sectionFields[t]={id:p,type:"toggle",description:i,events:n},this};addInput=(t,i,s,r=x,n="text",p={})=>{let l=this.getId(t);return e.setDefaultFieldValue(l,s),p.onChange=r,this.sectionFields[t]={id:l,type:"input",description:i,inputType:n,events:p},this};addDropDown=(t,i,s,r=H.of(0),n=x,p={})=>{let l=this.getId(t);return e.setDefaultFieldValue(l,r),p.onChange=n,this.sectionFields[t]={id:l,type:"dropdown",description:i,options:s,events:p},this};addHidden=(t,i)=>{let s=this.getId(t);return e.setDefaultFieldValue(s,i),this.sectionFields[t]={id:s,type:"hidden",description:""},this};getId=t=>`extensions:${this.sectionId}:${t}`;useStateFor=t=>{let[i,s]=a.useState(e.getFieldValue(t));return[i,r=>{r!==void 0&&(s(r),e.setFieldValue(t,r))}]};static getFieldValue=t=>JSON.parse(Spicetify.LocalStorage.get(t)??"null");static setFieldValue=(t,i)=>{Spicetify.LocalStorage.set(t,JSON.stringify(i))};static setDefaultFieldValue=async(t,i)=>{e.getFieldValue(t)===null&&e.setFieldValue(t,await i())};FieldsContainer=()=>{let[t,i]=a.useState(0);return this.setRerender=i,a.createElement("div",{className:"x-settings-section",key:t},a.createElement("h2",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-cello-textBase-type"},this.name),Object.entries(this.sectionFields).map(([s,r])=>a.createElement(this.Field,{field:r})))};Field=({field:t})=>{let i=U("type");return a.createElement("div",{className:"x-settings-row"},a.createElement(this.SettingDescription,{id:t.id,description:t.description}),a.createElement("div",{className:"x-settings-secondColumn"},L([[i("input"),this.SettingInputField],[i("button"),this.SettingButtonField],[i("toggle"),this.SettingToggleField],[i("dropdown"),this.SettingDropdownField]])(this.SettingHidden)(t)))};SettingDescription=({id:t,description:i})=>a.createElement("div",{className:"x-settings-firstColumn"},a.createElement("label",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-viola-textSubdued-type",htmlFor:t},i));SettingButtonField=t=>a.createElement("span",{className:""},a.createElement("button",{id:t.id,className:"Button-sc-y0gtbx-0 Button-sm-buttonSecondary-useBrowserDefaultFocusStyle x-settings-button",...t.events,type:t.type},t.text));SettingToggleField=t=>{let[i,s]=this.useStateFor(t.id);return a.createElement("label",{className:"x-settings-secondColumn x-toggle-wrapper"},a.createElement("input",{id:t.id,className:"x-toggle-input",type:"checkbox",checked:e.getFieldValue(t.id),...t.events,onChange:r=>{s(r.currentTarget.checked),t.events.onChange?.(r)}}),a.createElement("span",{className:"x-toggle-indicatorWrapper"},a.createElement("span",{className:"x-toggle-indicator"})))};SettingInputField=t=>{let[i,s]=this.useStateFor(t.id);return a.createElement("input",{className:"x-settings-input",id:t.id,dir:"ltr",value:e.getFieldValue(t.id),type:t.inputType,...t.events,onChange:r=>{s(r.currentTarget.value),t.events.onChange?.(r)}})};SettingDropdownField=t=>{let[i,s]=this.useStateFor(t.id);return a.createElement("select",{className:"main-dropDown-dropDown",id:t.id,...t.events,onChange:r=>{s(r.currentTarget.selectedIndex),t.events.onChange?.(r)}},t.options.map((r,n)=>a.createElement("option",{selected:n===e.getFieldValue(t.id),value:n+1},r)))};SettingHidden=()=>a.createElement(a.Fragment,null)};var _=new P("Show The Genres","show-the-genres").addInput("LFMApiKey","Last.fm API Key",et.of("44654ea047786d90338c17331a5f5d95"));_.pushSettings();var $=_.toObject();var ie=globalThis.searchPlaylist=e=>Spicetify.Platform.History.push(`/search/${e}/playlists`),m=new Array,g=new Array,rt=async e=>(f.innerHTML=await Q.pipe(e,k.map(async t=>`<a href="${await d(t)??"#"}" style="color: var(--spice-subtext); font-size: 12px">${y(t)}</a>`),t=>Promise.all(t),c(k.intercalate(it.Monoid)("<span>, </span>"))),f),st=async e=>{let t=await h("div.main-trackInfo-container"),{uri:i,metadata:s}=Spicetify.Player.data.track;s&&Spicetify.URI.isTrack(i)&&e.length?(t?.appendChild(await rt(e)),g=Q.pipe(await R($.LFMApiKey,s.artist_name,s.title),({track:r})=>r.toptags.tag,k.map(({name:r})=>r))):t?.removeChild(f)},nt=()=>{let e=Spicetify.Player.data?.item.metadata??{};return[...Array(10).keys()].map(t=>e["artist_uri"+(t?`:${t}`:"")]).filter(Boolean)},j=async()=>{let e=nt();m=await T(e),await st(m.slice(0,5))},f=document.createElement("div");f.className="main-trackInfo-genres ellipsis-one-line main-type-finale";f.style.gridArea="genres";f.addEventListener("contextmenu",M);Spicetify.Player.addEventListener("songchange",j);j();Spicetify.Platform.History.listen(w);w(Spicetify.Platform.History.location);export{g as lastFmTags,m as spotifyGenres};
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vZXh0ZW5zaW9ucy9zaG93LXRoZS1nZW5yZXMvYXBwLnRzIiwgIi4uLy4uL3NoYXJlZC9mcC50cyIsICIuLi8uLi9zaGFyZWQvdXRpbC50cyIsICIuLi8uLi9zaGFyZWQvYXBpLnRzIiwgIi4uLy4uL2V4dGVuc2lvbnMvc2hvdy10aGUtZ2VucmVzL2FydGlzdFBhZ2UudHMiLCAiLi4vLi4vZXh0ZW5zaW9ucy9zaG93LXRoZS1nZW5yZXMvcG9wdXAudHN4IiwgIi4uLy4uL2V4dGVuc2lvbnMvc2hvdy10aGUtZ2VucmVzL3NldHRpbmdzLnRzIiwgIi4uLy4uL3NoYXJlZC9zZXR0aW5ncy50c3giXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IGFycmF5IGFzIGEsIHN0cmluZyBhcyBzdHIsIGZ1bmN0aW9uIGFzIGYgfSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvZnAtdHNcIlxyXG5pbXBvcnQgeyBmZXRjaFRyYWNrTEZNQVBJLCBmZXRjaFdlYlNvdW5kT2ZTcG90aWZ5UGxheWxpc3QgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL2FwaS50c1wiXHJcbmltcG9ydCB7IHBNY2hhaW4gfSBmcm9tIFwiLi4vLi4vc2hhcmVkL2ZwLnRzXCJcclxuaW1wb3J0IHsgdGl0bGVDYXNlLCB3YWl0Rm9yRWxlbWVudCB9IGZyb20gXCIuLi8uLi9zaGFyZWQvdXRpbC50c1wiXHJcbmltcG9ydCB7IGdldEFydGlzdHNHZW5yZXNPclJlbGF0ZWQsIHVwZGF0ZUFydGlzdFBhZ2UgfSBmcm9tIFwiLi9hcnRpc3RQYWdlLnRzXCJcclxuaW1wb3J0IHsgZ2VucmVQb3B1cCB9IGZyb20gXCIuL3BvcHVwLnRzeFwiXHJcbmltcG9ydCB7IENPTkZJRyB9IGZyb20gXCIuL3NldHRpbmdzLnRzXCJcclxuXHJcbmltcG9ydCBcIi4vYXNzZXRzL3N0eWxlcy5zY3NzXCJcclxuXHJcbmNvbnN0IHNlYXJjaFBsYXlsaXN0ID0gKGdsb2JhbFRoaXMuc2VhcmNoUGxheWxpc3QgPSAocXVlcnk6IHN0cmluZykgPT5cclxuICAgIFNwaWNldGlmeS5QbGF0Zm9ybS5IaXN0b3J5LnB1c2goYC9zZWFyY2gvJHtxdWVyeX0vcGxheWxpc3RzYCkpXHJcblxyXG5leHBvcnQgbGV0IHNwb3RpZnlHZW5yZXMgPSBuZXcgQXJyYXk8c3RyaW5nPigpXHJcbmV4cG9ydCBsZXQgbGFzdEZtVGFncyA9IG5ldyBBcnJheTxzdHJpbmc+KClcclxuXHJcbmNvbnN0IHVwZGF0ZUdlbnJlQ29udGFpbmVyID0gYXN5bmMgKGdlbnJlczogc3RyaW5nW10pID0+IHtcclxuICAgIGdlbnJlQ29udGFpbmVyLmlubmVySFRNTCA9IGF3YWl0IGYucGlwZShcclxuICAgICAgICBnZW5yZXMsXHJcbiAgICAgICAgYS5tYXAoYXN5bmMgZ2VucmUgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB1cmkgPSAoYXdhaXQgZmV0Y2hXZWJTb3VuZE9mU3BvdGlmeVBsYXlsaXN0KGdlbnJlKSkgPz8gXCIjXCJcclxuICAgICAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHt1cml9XCIgc3R5bGU9XCJjb2xvcjogdmFyKC0tc3BpY2Utc3VidGV4dCk7IGZvbnQtc2l6ZTogMTJweFwiPiR7dGl0bGVDYXNlKGdlbnJlKX08L2E+YFxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIHBzID0+IFByb21pc2UuYWxsKHBzKSxcclxuICAgICAgICBwTWNoYWluKGEuaW50ZXJjYWxhdGUoc3RyLk1vbm9pZCkoYDxzcGFuPiwgPC9zcGFuPmApKSxcclxuICAgIClcclxuICAgIHJldHVybiBnZW5yZUNvbnRhaW5lclxyXG59XHJcblxyXG5jb25zdCB1cGRhdGVHZW5yZXNVSSA9IGFzeW5jIChnZW5yZXM6IHN0cmluZ1tdKSA9PiB7XHJcbiAgICBjb25zdCB0cmFja0luZm9Db250YWluZXIgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudChcImRpdi5tYWluLXRyYWNrSW5mby1jb250YWluZXJcIilcclxuXHJcbiAgICBjb25zdCB7IHVyaSwgbWV0YWRhdGEgfSA9IFNwaWNldGlmeS5QbGF5ZXIuZGF0YS50cmFjayFcclxuXHJcbiAgICBpZiAobWV0YWRhdGEgJiYgU3BpY2V0aWZ5LlVSSS5pc1RyYWNrKHVyaSkgJiYgZ2VucmVzLmxlbmd0aCkge1xyXG4gICAgICAgIHRyYWNrSW5mb0NvbnRhaW5lcj8uYXBwZW5kQ2hpbGQoYXdhaXQgdXBkYXRlR2VucmVDb250YWluZXIoZ2VucmVzKSlcclxuXHJcbiAgICAgICAgbGFzdEZtVGFncyA9IGYucGlwZShcclxuICAgICAgICAgICAgYXdhaXQgZmV0Y2hUcmFja0xGTUFQSShDT05GSUcuTEZNQXBpS2V5LCBtZXRhZGF0YS5hcnRpc3RfbmFtZSEsIG1ldGFkYXRhLnRpdGxlISksXHJcbiAgICAgICAgICAgICh7IHRyYWNrIH0pID0+IHRyYWNrLnRvcHRhZ3MudGFnLFxyXG4gICAgICAgICAgICBhLm1hcCgoeyBuYW1lIH0pID0+IG5hbWUpLFxyXG4gICAgICAgIClcclxuICAgIH0gZWxzZSB0cmFja0luZm9Db250YWluZXI/LnJlbW92ZUNoaWxkKGdlbnJlQ29udGFpbmVyKVxyXG59XHJcblxyXG5jb25zdCBnZXRBcnRpc3RVcmlzRnJvbUN1cnJlbnRUcmFjayA9ICgpID0+IHtcclxuICAgIGNvbnN0IG1ldGFkYXRhID0gU3BpY2V0aWZ5LlBsYXllci5kYXRhPy5pdGVtLm1ldGFkYXRhID8/IHt9XHJcblxyXG4gICAgcmV0dXJuIFsuLi5BcnJheSgxMCkua2V5cygpXVxyXG4gICAgICAgIC5tYXAoayA9PiBtZXRhZGF0YVsoXCJhcnRpc3RfdXJpXCIgKyAoayA/IGA6JHtrfWAgOiBcIlwiKSkgYXMga2V5b2YgdHlwZW9mIG1ldGFkYXRhXSlcclxuICAgICAgICAuZmlsdGVyKEJvb2xlYW4pIGFzIHN0cmluZ1tdXHJcbn1cclxuXHJcbmNvbnN0IHVwZGF0ZUdlbnJlcyA9IGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGFydGlzdFVyaXMgPSBnZXRBcnRpc3RVcmlzRnJvbUN1cnJlbnRUcmFjaygpXHJcbiAgICBzcG90aWZ5R2VucmVzID0gYXdhaXQgZ2V0QXJ0aXN0c0dlbnJlc09yUmVsYXRlZChhcnRpc3RVcmlzKVxyXG5cclxuICAgIGF3YWl0IHVwZGF0ZUdlbnJlc1VJKHNwb3RpZnlHZW5yZXMuc2xpY2UoMCwgNSkpXHJcbn1cclxuXHJcbmNvbnN0IGdlbnJlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG5nZW5yZUNvbnRhaW5lci5jbGFzc05hbWUgPSBcIm1haW4tdHJhY2tJbmZvLWdlbnJlcyBlbGxpcHNpcy1vbmUtbGluZSBtYWluLXR5cGUtZmluYWxlXCJcclxuZ2VucmVDb250YWluZXIuc3R5bGUuZ3JpZEFyZWEgPSBcImdlbnJlc1wiXHJcbmdlbnJlQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBnZW5yZVBvcHVwKVxyXG5cclxuU3BpY2V0aWZ5LlBsYXllci5hZGRFdmVudExpc3RlbmVyKFwic29uZ2NoYW5nZVwiLCB1cGRhdGVHZW5yZXMpXHJcbnVwZGF0ZUdlbnJlcygpXHJcblxyXG5TcGljZXRpZnkuUGxhdGZvcm0uSGlzdG9yeS5saXN0ZW4odXBkYXRlQXJ0aXN0UGFnZSlcclxudXBkYXRlQXJ0aXN0UGFnZShTcGljZXRpZnkuUGxhdGZvcm0uSGlzdG9yeS5sb2NhdGlvbilcclxuIiwgImltcG9ydCB7XHJcbiAgICBhcnJheSBhcyBhcixcclxuICAgIGVxLFxyXG4gICAgc3RyaW5nIGFzIHN0cixcclxuICAgIHJlY29yZCBhcyByZWMsXHJcbiAgICByZWZpbmVtZW50IGFzIHJlZixcclxuICAgIHNlbWlncm91cCBhcyBzZyxcclxuICAgIGZ1bmN0aW9uIGFzIGYsXHJcbn0gZnJvbSBcImh0dHBzOi8vZXNtLnNoL2ZwLXRzXCJcclxuaW1wb3J0IHsgZ3VhcmQsIG1lbW9pemUgfSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvZnAtdHMtc3RkL0Z1bmN0aW9uXCJcclxuXHJcbnR5cGUgcmVmaW5lQnJhbmNoPEEsIEIgZXh0ZW5kcyBBLCBSPiA9IFtyZWYuUmVmaW5lbWVudDxBLCBCPiwgKHg6IEIpID0+IFJdXHJcbmV4cG9ydCBjb25zdCBndWFyZDIgPSA8QSwgQTEgZXh0ZW5kcyBBLCBBMiBleHRlbmRzIEEsIFI+KGJyYW5jaGVzOiBbcmVmaW5lQnJhbmNoPEEsIEExLCBSPiwgcmVmaW5lQnJhbmNoPEEsIEEyLCBSPl0pID0+XHJcbiAgICBndWFyZChicmFuY2hlcyBhcyB1bmtub3duIGFzIFtyZWZpbmVCcmFuY2g8QSwgQSwgUj4sIHJlZmluZUJyYW5jaDxBLCBBLCBSPl0pXHJcbmV4cG9ydCBjb25zdCBndWFyZDMgPSA8QSwgQTEgZXh0ZW5kcyBBLCBBMiBleHRlbmRzIEEsIEEzIGV4dGVuZHMgQSwgUj4oXHJcbiAgICBicmFuY2hlczogW3JlZmluZUJyYW5jaDxBLCBBMSwgUj4sIHJlZmluZUJyYW5jaDxBLCBBMiwgUj4sIHJlZmluZUJyYW5jaDxBLCBBMywgUj5dLFxyXG4pID0+IGd1YXJkKGJyYW5jaGVzIGFzIHVua25vd24gYXMgW3JlZmluZUJyYW5jaDxBLCBBLCBSPiwgcmVmaW5lQnJhbmNoPEEsIEEsIFI+LCByZWZpbmVCcmFuY2g8QSwgQSwgUj5dKVxyXG5leHBvcnQgY29uc3QgZ3VhcmQ0ID0gPEEsIEExIGV4dGVuZHMgQSwgQTIgZXh0ZW5kcyBBLCBBMyBleHRlbmRzIEEsIEE0IGV4dGVuZHMgQSwgUj4oXHJcbiAgICBicmFuY2hlczogW3JlZmluZUJyYW5jaDxBLCBBMSwgUj4sIHJlZmluZUJyYW5jaDxBLCBBMiwgUj4sIHJlZmluZUJyYW5jaDxBLCBBMywgUj4sIHJlZmluZUJyYW5jaDxBLCBBNCwgUj5dLFxyXG4pID0+XHJcbiAgICBndWFyZChcclxuICAgICAgICBicmFuY2hlcyBhcyB1bmtub3duIGFzIFtcclxuICAgICAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEEsIFI+LFxyXG4gICAgICAgICAgICByZWZpbmVCcmFuY2g8QSwgQSwgUj4sXHJcbiAgICAgICAgICAgIHJlZmluZUJyYW5jaDxBLCBBLCBSPixcclxuICAgICAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEEsIFI+LFxyXG4gICAgICAgIF0sXHJcbiAgICApXHJcbmV4cG9ydCBjb25zdCBndWFyZDUgPSA8QSwgQTEgZXh0ZW5kcyBBLCBBMiBleHRlbmRzIEEsIEEzIGV4dGVuZHMgQSwgQTQgZXh0ZW5kcyBBLCBBNSBleHRlbmRzIEEsIFI+KFxyXG4gICAgYnJhbmNoZXM6IFtcclxuICAgICAgICByZWZpbmVCcmFuY2g8QSwgQTEsIFI+LFxyXG4gICAgICAgIHJlZmluZUJyYW5jaDxBLCBBMiwgUj4sXHJcbiAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEEzLCBSPixcclxuICAgICAgICByZWZpbmVCcmFuY2g8QSwgQTQsIFI+LFxyXG4gICAgICAgIHJlZmluZUJyYW5jaDxBLCBBNSwgUj4sXHJcbiAgICBdLFxyXG4pID0+XHJcbiAgICBndWFyZChcclxuICAgICAgICBicmFuY2hlcyBhcyB1bmtub3duIGFzIFtcclxuICAgICAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEEsIFI+LFxyXG4gICAgICAgICAgICByZWZpbmVCcmFuY2g8QSwgQSwgUj4sXHJcbiAgICAgICAgICAgIHJlZmluZUJyYW5jaDxBLCBBLCBSPixcclxuICAgICAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEEsIFI+LFxyXG4gICAgICAgICAgICByZWZpbmVCcmFuY2g8QSwgQSwgUj4sXHJcbiAgICAgICAgXSxcclxuICAgIClcclxuXHJcbmV4cG9ydCBjb25zdCBvYmpDb25jYXQyID0gPEExLCBBMj4oKSA9PiByZWMuZ2V0VW5pb25TZW1pZ3JvdXAoc2cuZmlyc3Q8YW55PigpKS5jb25jYXQgYXMgKHg6IEExLCB5OiBBMikgPT4gQTEgJiBBMlxyXG5leHBvcnQgY29uc3Qgb2JqQ29uY2F0ID0gPEE+KCkgPT4gYXIucmVkdWNlKHt9IGFzIEEsIG9iakNvbmNhdDI8QSwgQT4oKSlcclxuXHJcbnR5cGUgYXN5bmMgPSB7XHJcbiAgICA8QSwgQj4oZjogKGE6IEEpID0+IFByb21pc2U8Qj4pOiAoZmE6IFByb21pc2U8QT4pID0+IFByb21pc2U8Qj5cclxuICAgIDxBLCBCPihmOiAoYTogQSkgPT4gQik6IChmYTogUHJvbWlzZTxBPikgPT4gUHJvbWlzZTxCPlxyXG59XHJcbmV4cG9ydCBjb25zdCBwTWNoYWluOiBhc3luYyA9XHJcbiAgICA8QSwgUj4oZjogKGE6IEEpID0+IFIpID0+XHJcbiAgICBhc3luYyAoZmE6IEEpID0+XHJcbiAgICAgICAgZihhd2FpdCBmYSlcclxuXHJcbmV4cG9ydCBjb25zdCBpcyA9XHJcbiAgICA8QT4oYzoga2V5b2YgQSkgPT5cclxuICAgIDxCIGV4dGVuZHMgQT4oYTogQVt0eXBlb2YgY10pID0+XHJcbiAgICAoZmllbGQ6IEEpOiBmaWVsZCBpcyBCID0+XHJcbiAgICAgICAgZmllbGRbY10gPT09IGFcclxuXHJcbmV4cG9ydCBjb25zdCB0YXBBbnkgPVxyXG4gICAgPEE+KGY6IChhOiBBKSA9PiB2b2lkKSA9PlxyXG4gICAgKGZhOiBBKSA9PiB7XHJcbiAgICAgICAgZihmYSlcclxuICAgICAgICByZXR1cm4gZmFcclxuICAgIH1cclxuXHJcbmV4cG9ydCBjb25zdCBjaHVuY2tpZnkgPVxyXG4gICAgKG46IG51bWJlcikgPT5cclxuICAgIDxBLCBSPihnOiAoYTogQVtdKSA9PiBQcm9taXNlPFJbXT4pID0+XHJcbiAgICAgICAgZi5mbG93KGFyLmNodW5rc09mKG4pPEE+LCBhci5tYXAoZyksIHBzID0+IFByb21pc2UuYWxsKHBzKSwgcE1jaGFpbihhci5mbGF0dGVuKSlcclxuXHJcbmV4cG9ydCBjb25zdCB3aXRoUHJvZ3Jlc3MgPVxyXG4gICAgPEYgZXh0ZW5kcyAoZjogKC4uLmE6IGFueSkgPT4gYW55KSA9PiAoZmE6IGFueSkgPT4gYW55PihtYXA6IEYpID0+XHJcbiAgICAoZjogUGFyYW1ldGVyczxGPlswXSkgPT5cclxuICAgIChmYTogUGFyYW1ldGVyczxSZXR1cm5UeXBlPEY+PlswXSk6IFJldHVyblR5cGU8UmV0dXJuVHlwZTxGPj4gPT4ge1xyXG4gICAgICAgIGxldCBpID0gMFxyXG4gICAgICAgIHJldHVybiBtYXAoYXN5bmMgKC4uLmE6IFBhcmFtZXRlcnM8UGFyYW1ldGVyczxGPlswXT4pID0+IHtcclxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogRnVjayBtZVxyXG4gICAgICAgICAgICBjb25zdCByZXQgPSBhd2FpdCBmKC4uLmEpXHJcbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5yb3VuZCgoaSsrIC8gT2JqZWN0LnZhbHVlcyhmYSkubGVuZ3RoKSAqIDEwMClcclxuICAgICAgICAgICAgU3BpY2V0aWZ5LnNob3dOb3RpZmljYXRpb24oYExvYWRpbmc6ICR7cHJvZ3Jlc3N9JWAsIGZhbHNlLCAyMDApXHJcbiAgICAgICAgICAgIHJldHVybiByZXRcclxuICAgICAgICB9KShmYSlcclxuICAgIH1cclxuXHJcbmV4cG9ydCBjb25zdCBtZW1vaXplMiA9IDxBIGV4dGVuZHMgYW55W10sIFI+KGZuOiAoLi4uYXJnczogQSkgPT4gUikgPT5cclxuICAgIGYucGlwZShmbiwgZi50dXBsZWQsIG1lbW9pemU8QT4oZXEuY29udHJhbWFwKEpTT04uc3RyaW5naWZ5KShzdHIuRXEpKSwgZi51bnR1cGxlZClcclxuIiwgIi8vIGV4cG9ydCBpbnRlcmZhY2UgU3BvdGlmeUlEXHJcbi8vICAgICBleHRlbmRzIE5ld3R5cGU8eyByZWFkb25seSBTcG90aWZ5SUQ6IHVuaXF1ZSBzeW1ib2wgfSwgc3RyaW5nPiB7fVxyXG4vLyBleHBvcnQgaW50ZXJmYWNlIFNwb3RpZnlVUklcclxuLy8gICAgIGV4dGVuZHMgTmV3dHlwZTx7IHJlYWRvbmx5IFNwb3RpZnlVUkk6IHVuaXF1ZSBzeW1ib2wgfSwgc3RyaW5nPiB7fVxyXG5cclxuaW1wb3J0IHsgYXJyYXkgYXMgYSwgZnVuY3Rpb24gYXMgZiB9IGZyb20gXCJodHRwczovL2VzbS5zaC9mcC10c1wiXHJcblxyXG5leHBvcnQgdHlwZSBTcG90aWZ5SUQgPSBzdHJpbmdcclxuZXhwb3J0IHR5cGUgU3BvdGlmeVVSSSA9IHN0cmluZ1xyXG5cclxuZXhwb3J0IHR5cGUgU3BvdGlmeUxvY09iaiA9IHtcclxuICAgIGJlZm9yZT86IFwic3RhcnRcIiB8IHsgdXJpOiBTcG90aWZ5VVJJIH0gfCB7IHVpZDogc3RyaW5nIH1cclxuICAgIGFmdGVyPzogXCJlbmRcIiB8IHsgdXJpOiBTcG90aWZ5VVJJIH0gfCB7IHVpZDogc3RyaW5nIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNwb3RpZnlMb2MgPSB7XHJcbiAgICBiZWZvcmU6IHtcclxuICAgICAgICBzdGFydDogZi5jb25zdGFudCh7IGJlZm9yZTogXCJzdGFydFwiIH0gYXMgU3BvdGlmeUxvY09iaiksXHJcbiAgICAgICAgZnJvbVVyaTogKHVyaTogU3BvdGlmeVVSSSkgPT4gKHsgYmVmb3JlOiB7IHVyaSB9IH0pLFxyXG4gICAgICAgIGZyb21VaWQ6ICh1aWQ6IHN0cmluZykgPT4gKHsgYmVmb3JlOiB7IHVpZCB9IH0pLFxyXG4gICAgfSxcclxuICAgIGFmdGVyOiB7XHJcbiAgICAgICAgZW5kOiBmLmNvbnN0YW50KHsgYWZ0ZXI6IFwiZW5kXCIgfSBhcyBTcG90aWZ5TG9jT2JqKSxcclxuICAgICAgICBmcm9tVXJpOiAodXJpOiBTcG90aWZ5VVJJKSA9PiAoeyBhZnRlcjogeyB1cmkgfSB9KSxcclxuICAgICAgICBmcm9tVWlkOiAodWlkOiBzdHJpbmcpID0+ICh7IGFmdGVyOiB7IHVpZCB9IH0pLFxyXG4gICAgfSxcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGVzY2FwZVJlZ2V4ID0gKHN0cjogc3RyaW5nKSA9PiBzdHIucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csIGBcXFxcJCZgKVxyXG5cclxuZXhwb3J0IGNvbnN0IHRpdGxlQ2FzZSA9IChzdHI6IHN0cmluZykgPT4gc3RyLnJlcGxhY2UoL1xcYlxcdy9nLCBsID0+IGwudG9VcHBlckNhc2UoKSlcclxuXHJcbmV4cG9ydCBjb25zdCBub3JtYWxpemVTdHIgPSAoc3RyOiBzdHJpbmcpID0+XHJcbiAgICBzdHJcclxuICAgICAgICAubm9ybWFsaXplKFwiTkZLRFwiKVxyXG4gICAgICAgIC5yZXBsYWNlKC9cXCguKlxcKS9nLCBcIlwiKVxyXG4gICAgICAgIC5yZXBsYWNlKC9cXFsuKlxcXS9nLCBcIlwiKVxyXG4gICAgICAgIC5yZXBsYWNlKC8tXywvZywgXCIgXCIpXHJcbiAgICAgICAgLnJlcGxhY2UoL1teYS16QS1aMC05IF0vZywgXCJcIilcclxuICAgICAgICAucmVwbGFjZSgvXFxzKy9nLCBcIiBcIilcclxuICAgICAgICAudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgIC50cmltKClcclxuXHJcbi8vISBEb2VzIGxvY2F0aW9uIGFjdHVhbGx5IHBvaW50IHRvIGRvY3VtZW50LmJvZHk/XHJcbmV4cG9ydCBjb25zdCB3YWl0Rm9yRWxlbWVudCA9IDxFIGV4dGVuZHMgRWxlbWVudD4oXHJcbiAgICBzZWxlY3Rvcjogc3RyaW5nLFxyXG4gICAgdGltZW91dCA9IDEwMDAsXHJcbiAgICBsb2NhdGlvbiA9IGRvY3VtZW50LmJvZHksXHJcbiAgICBub3RFbD86IEUsXHJcbikgPT5cclxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlOiAodmFsdWU6IEVsZW1lbnQgfCBudWxsKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gKHY6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KClcclxuICAgICAgICAgICAgcmVzb2x2ZSh2KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxFPihzZWxlY3RvcilcclxuICAgICAgICAgICAgaWYgKGVsICYmICghbm90RWwgfHwgZWwgIT09IG5vdEVsKSkgcmV0dXJuIHJlcyhlbClcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGxvY2F0aW9uLCB7XHJcbiAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcclxuICAgICAgICAgICAgc3VidHJlZTogdHJ1ZSxcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBpZiAodGltZW91dCkgc2V0VGltZW91dCgoKSA9PiByZXMobnVsbCksIHRpbWVvdXQpXHJcbiAgICB9KVxyXG5cclxuZXhwb3J0IGNvbnN0IHRyYXBFbGVtZW50ID0gPEUgZXh0ZW5kcyBFbGVtZW50PihcclxuICAgIHNlbGVjdG9yOiBzdHJpbmcsXHJcbiAgICBjYWxsYmFjazogKGVsOiBFIHwgbnVsbCwgbGFzdEVsOiBFIHwgbnVsbCkgPT4gdm9pZCxcclxuICAgIGxvY2F0aW9uID0gZG9jdW1lbnQuYm9keSxcclxuKSA9PiB7XHJcbiAgICBsZXQgbGFzdEVsOiBFIHwgbnVsbCA9IG51bGxcclxuXHJcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcclxuICAgICAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8RT4oc2VsZWN0b3IpXHJcbiAgICAgICAgaWYgKGVsICE9PSBsYXN0RWwpIGNhbGxiYWNrKGVsLCBsYXN0RWwpXHJcbiAgICAgICAgbGFzdEVsID0gZWxcclxuICAgIH0pXHJcblxyXG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShsb2NhdGlvbiwge1xyXG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcclxuICAgICAgICBzdWJ0cmVlOiB0cnVlLFxyXG4gICAgfSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHNsZWVwID0gKG1zOiBudW1iZXIpID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpXHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UmVhY3RQcm9wcyA9IChlbGVtZW50OiBFbGVtZW50KSA9PlxyXG4gICAgZWxlbWVudFtPYmplY3Qua2V5cyhlbGVtZW50KS5maW5kKGsgPT4gay5zdGFydHNXaXRoKFwiX19yZWFjdFByb3BzJFwiKSkgYXMga2V5b2YgdHlwZW9mIGVsZW1lbnRdXHJcblxyXG5leHBvcnQgY29uc3QgaXNMaWtlZCA9ICh1cmlzOiBTcG90aWZ5VVJJW10pID0+IFNwaWNldGlmeS5QbGF0Zm9ybS5MaWJyYXJ5QVBJLmNvbnRhaW5zKC4uLnVyaXMpIGFzIFByb21pc2U8Ym9vbGVhbltdPlxyXG5cclxuZXhwb3J0IGNvbnN0IHNldExpa2VkID0gKHVyaXM6IFNwb3RpZnlVUklbXSwgbGlrZWQ6IGJvb2xlYW4pID0+XHJcbiAgICBTcGljZXRpZnkuUGxhdGZvcm0uTGlicmFyeUFQSVtsaWtlZCA/IFwiYWRkXCIgOiBcInJlbW92ZVwiXSguLi51cmlzKVxyXG5cclxuZXhwb3J0IGNvbnN0IHRvZ2dsZUxpa2VkID0gYXN5bmMgKHVyaXM6IFNwb3RpZnlVUklbXSkgPT4ge1xyXG4gICAgY29uc3QgbGlrZWQgPSBhd2FpdCBpc0xpa2VkKHVyaXMpXHJcblxyXG4gICAgcmV0dXJuIGF3YWl0IGYucGlwZShcclxuICAgICAgICB1cmlzLFxyXG4gICAgICAgIGEucmVkdWNlV2l0aEluZGV4KFxyXG4gICAgICAgICAgICBbW10gYXMgU3BvdGlmeVVSSVtdLCBbXSBhcyBTcG90aWZ5VVJJW11dIGFzIGNvbnN0LFxyXG4gICAgICAgICAgICAoaSwgYWNjLCB1cmkpID0+IChhY2NbTnVtYmVyKGxpa2VkW2ldKV0ucHVzaCh1cmkpLCBhY2MpLFxyXG4gICAgICAgICksXHJcbiAgICAgICAgKFt0b0FkZCwgdG9SZW1dKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBzID0gW11cclxuICAgICAgICAgICAgaWYgKHRvQWRkLmxlbmd0aCkgcHMucHVzaChzZXRMaWtlZCh0b0FkZCwgdHJ1ZSkpXHJcbiAgICAgICAgICAgIGlmICh0b1JlbS5sZW5ndGgpIHBzLnB1c2goc2V0TGlrZWQodG9SZW0sIGZhbHNlKSlcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHBzKVxyXG4gICAgICAgIH0sXHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVRdWV1ZUl0ZW0gPSAocXVldWVkOiBib29sZWFuKSA9PiAodXJpOiBTcG90aWZ5VVJJKSA9PiAoe1xyXG4gICAgY29udGV4dFRyYWNrOiB7XHJcbiAgICAgICAgdXJpLFxyXG4gICAgICAgIHVpZDogXCJcIixcclxuICAgICAgICBtZXRhZGF0YToge1xyXG4gICAgICAgICAgICBpc19xdWV1ZWQ6IHF1ZXVlZC50b1N0cmluZygpLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlZDogW10sXHJcbiAgICBibG9ja2VkOiBbXSxcclxuICAgIHByb3ZpZGVyOiBxdWV1ZWQgPyBcInF1ZXVlXCIgOiBcImNvbnRleHRcIixcclxufSlcclxuXHJcbmV4cG9ydCBjb25zdCBzZXRRdWV1ZSA9IGFzeW5jIChuZXh0VHJhY2tzOiBBcnJheTxSZXR1cm5UeXBlPFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZVF1ZXVlSXRlbT4+PikgPT4ge1xyXG4gICAgY29uc3QgeyBfcXVldWUsIF9jbGllbnQgfSA9IFNwaWNldGlmeS5QbGF0Zm9ybS5QbGF5ZXJBUEkuX3F1ZXVlXHJcbiAgICBjb25zdCB7IHByZXZUcmFja3MsIHF1ZXVlUmV2aXNpb24gfSA9IF9xdWV1ZVxyXG5cclxuICAgIHJldHVybiBfY2xpZW50LnNldFF1ZXVlKHtcclxuICAgICAgICBuZXh0VHJhY2tzLFxyXG4gICAgICAgIHByZXZUcmFja3MsXHJcbiAgICAgICAgcXVldWVSZXZpc2lvbixcclxuICAgIH0pIGFzIFByb21pc2U8eyBlcnJvcjogbnVtYmVyOyByZWFzb25zOiBzdHJpbmcgfT5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHNldFBsYXlpbmdDb250ZXh0ID0gKHVyaTogU3BvdGlmeVVSSSkgPT4ge1xyXG4gICAgY29uc3QgeyBzZXNzaW9uSWQgfSA9IFNwaWNldGlmeS5QbGF0Zm9ybS5QbGF5ZXJBUEkuZ2V0U3RhdGUoKVxyXG4gICAgcmV0dXJuIFNwaWNldGlmeS5QbGF0Zm9ybS5QbGF5ZXJBUEkudXBkYXRlQ29udGV4dChzZXNzaW9uSWQsIHsgdXJpLCB1cmw6IFwiY29udGV4dDovL1wiICsgdXJpIH0pIGFzIFByb21pc2U8dW5kZWZpbmVkPlxyXG59XHJcbiIsICJpbXBvcnQgeyBjaHVuY2tpZnksIG1lbW9pemUyIH0gZnJvbSBcIi4vZnAudHNcIlxyXG5pbXBvcnQgeyBTcG90aWZ5SUQsIFNwb3RpZnlMb2NPYmosIFNwb3RpZnlVUkksIGVzY2FwZVJlZ2V4IH0gZnJvbSBcIi4vdXRpbC50c1wiXHJcblxyXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgR3JhcGhRTCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoR1FMQWxidW0gPSBhc3luYyAodXJpOiBTcG90aWZ5VVJJLCBvZmZzZXQgPSAwLCBsaW1pdCA9IDQ4NykgPT5cclxuICAgIChcclxuICAgICAgICBhd2FpdCBTcGljZXRpZnkuR3JhcGhRTC5SZXF1ZXN0KFNwaWNldGlmeS5HcmFwaFFMLkRlZmluaXRpb25zLmdldEFsYnVtLCB7XHJcbiAgICAgICAgICAgIHVyaSxcclxuICAgICAgICAgICAgbG9jYWxlOiBTcGljZXRpZnkuTG9jYWxlLmdldExvY2FsZSgpLFxyXG4gICAgICAgICAgICBvZmZzZXQsXHJcbiAgICAgICAgICAgIGxpbWl0LFxyXG4gICAgICAgIH0pXHJcbiAgICApLmRhdGEuYWxidW1VbmlvbiBhcyBmZXRjaEdRTEFsYnVtUmVzXHJcblxyXG50eXBlIGZldGNoQXJ0aXN0R1FMUmVzID0gYW55XHJcbmV4cG9ydCBjb25zdCBmZXRjaEdRTEFydGlzdE92ZXJ2aWV3ID0gYXN5bmMgKHVyaTogU3BvdGlmeVVSSSkgPT5cclxuICAgIChcclxuICAgICAgICBhd2FpdCBTcGljZXRpZnkuR3JhcGhRTC5SZXF1ZXN0KFNwaWNldGlmeS5HcmFwaFFMLkRlZmluaXRpb25zLnF1ZXJ5QXJ0aXN0T3ZlcnZpZXcsIHtcclxuICAgICAgICAgICAgdXJpLFxyXG4gICAgICAgICAgICBsb2NhbGU6IFNwaWNldGlmeS5Mb2NhbGUuZ2V0TG9jYWxlKCksXHJcbiAgICAgICAgICAgIGluY2x1ZGVQcmVyZWxlYXNlOiB0cnVlLFxyXG4gICAgICAgIH0pXHJcbiAgICApLmRhdGEuYXJ0aXN0VW5pb24gYXMgZmV0Y2hBcnRpc3RHUUxSZXNcclxuXHJcbnR5cGUgZmV0Y2hHUUxBcnRpc3REaXNjb2dyYXBoeVJlcyA9IGFueVxyXG5leHBvcnQgY29uc3QgZmV0Y2hHUUxBcnRpc3REaXNjb2dyYXBoeSA9IGFzeW5jICh1cmk6IFNwb3RpZnlVUkksIG9mZnNldCA9IDAsIGxpbWl0ID0gMTE2KSA9PlxyXG4gICAgKFxyXG4gICAgICAgIGF3YWl0IFNwaWNldGlmeS5HcmFwaFFMLlJlcXVlc3QoU3BpY2V0aWZ5LkdyYXBoUUwuRGVmaW5pdGlvbnMucXVlcnlBcnRpc3REaXNjb2dyYXBoeUFsbCwge1xyXG4gICAgICAgICAgICB1cmksXHJcbiAgICAgICAgICAgIG9mZnNldCxcclxuICAgICAgICAgICAgbGltaXQsXHJcbiAgICAgICAgfSlcclxuICAgICkuZGF0YS5hcnRpc3RVbmlvbi5kaXNjb2dyYXBoeS5hbGwuaXRlbXMgYXMgZmV0Y2hHUUxBcnRpc3REaXNjb2dyYXBoeVJlc1xyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoR1FMQXJ0aXN0UmVsYXRlZCA9IGFzeW5jICh1cmk6IFNwb3RpZnlVUkkpID0+XHJcbiAgICAoXHJcbiAgICAgICAgYXdhaXQgU3BpY2V0aWZ5LkdyYXBoUUwuUmVxdWVzdChTcGljZXRpZnkuR3JhcGhRTC5EZWZpbml0aW9ucy5xdWVyeUFydGlzdFJlbGF0ZWQsIHtcclxuICAgICAgICAgICAgdXJpLFxyXG4gICAgICAgICAgICBsb2NhbGU6IFNwaWNldGlmeS5Mb2NhbGUuZ2V0TG9jYWxlKCksXHJcbiAgICAgICAgfSlcclxuICAgICkuZGF0YS5hcnRpc3RVbmlvbi5yZWxhdGVkQ29udGVudC5yZWxhdGVkQXJ0aXN0cy5pdGVtcyBhcyBmZXRjaEdRTEFydGlzdFJlbGF0ZWRSZXNcclxuXHJcbi8qICAgICAgICAgICAgICAgICAgICAgICAgICBTcG90aWZ5IFdlYiBBUEkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlV2ViUGxheWxpc3RUcmFja3MgPSBhc3luYyAocGxheWxpc3Q6IFNwb3RpZnlJRCwgdHJhY2tzOiBTcG90aWZ5VVJJW10pID0+XHJcbiAgICBTcGljZXRpZnkuQ29zbW9zQXN5bmMuZGVsKGBodHRwczovL2FwaS5zcG90aWZ5LmNvbS92MS9wbGF5bGlzdHMvJHtwbGF5bGlzdH0vdHJhY2tzYCwge1xyXG4gICAgICAgIHRyYWNrczogdHJhY2tzLm1hcCh1cmkgPT4gKHsgdXJpIH0pKSxcclxuICAgIH0pXHJcblxyXG5leHBvcnQgY29uc3QgZmV0Y2hXZWJBcnRpc3RzU3BvdCA9IGNodW5ja2lmeSg1MCkoXHJcbiAgICBhc3luYyAoaWRzOiBTcG90aWZ5SURbXSkgPT5cclxuICAgICAgICAoYXdhaXQgU3BpY2V0aWZ5LkNvc21vc0FzeW5jLmdldChgaHR0cHM6Ly9hcGkuc3BvdGlmeS5jb20vdjEvYXJ0aXN0cz9pZHM9JHtpZHMuam9pbihcIixcIil9YCkpXHJcbiAgICAgICAgICAgIC5hcnRpc3RzIGFzIFNwb3RBcGlBcnRpc3RbXSxcclxuKVxyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoV2ViUGxheWxpc3RzU3BvdCA9IGNodW5ja2lmeSgxKShcclxuICAgIC8vIEB0cy1pZ25vcmUgY2h1bmtpZnkgd2lsbCBuZXZlciBjYWxsIHdpdGggZW1wdHkgYXJyYXlcclxuICAgIGFzeW5jIChbaWRdOiBbU3BvdGlmeUlEXSkgPT4gW1xyXG4gICAgICAgIChhd2FpdCBTcGljZXRpZnkuQ29zbW9zQXN5bmMuZ2V0KGBodHRwczovL2FwaS5zcG90aWZ5LmNvbS92MS9wbGF5bGlzdHMvJHtpZH1gKSkgYXMgU3BvdEFwaVBsYXlsaXN0LFxyXG4gICAgXSxcclxuKVxyXG5leHBvcnQgY29uc3QgZmV0Y2hXZWJBbGJ1bXNTcG90ID0gY2h1bmNraWZ5KDUwKShcclxuICAgIGFzeW5jIChpZHM6IFNwb3RpZnlJRFtdKSA9PlxyXG4gICAgICAgIChhd2FpdCBTcGljZXRpZnkuQ29zbW9zQXN5bmMuZ2V0KGBodHRwczovL2FwaS5zcG90aWZ5LmNvbS92MS9hbGJ1bXM/aWRzPSR7aWRzLmpvaW4oXCIsXCIpfWApKVxyXG4gICAgICAgICAgICAuYWxidW1zIGFzIFNwb3RBcGlBbGJ1bVtdLFxyXG4pXHJcblxyXG5leHBvcnQgY29uc3QgZmV0Y2hXZWJUcmFja3NTcG90ID0gY2h1bmNraWZ5KDUwKShcclxuICAgIGFzeW5jIChpZHM6IFNwb3RpZnlJRFtdKSA9PlxyXG4gICAgICAgIChhd2FpdCBTcGljZXRpZnkuQ29zbW9zQXN5bmMuZ2V0KGBodHRwczovL2FwaS5zcG90aWZ5LmNvbS92MS90cmFja3M/aWRzPSR7aWRzLmpvaW4oXCIsXCIpfWApKVxyXG4gICAgICAgICAgICAudHJhY2tzIGFzIFNwb3RBcGlUcmFja1tdLFxyXG4pXHJcblxyXG5leHBvcnQgY29uc3Qgc2VhcmNoV2ViSXRlbVNwb3QgPSBhc3luYyAocTogc3RyaW5nLCB0eXBlOiBzdHJpbmdbXSkgPT5cclxuICAgIFNwaWNldGlmeS5Db3Ntb3NBc3luYy5nZXQoYGh0dHBzOi8vYXBpLnNwb3RpZnkuY29tL3YxL3NlYXJjaD9xPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHEpfSZ0eXBlPSR7dHlwZS5qb2luKFwiLFwiKX1gKVxyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoV2ViU291bmRPZlNwb3RpZnlQbGF5bGlzdCA9IGFzeW5jIChnZW5yZTogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zdCBuYW1lID0gYFRoZSBTb3VuZCBPZiAke2dlbnJlfWBcclxuICAgIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChgXiR7ZXNjYXBlUmVnZXgobmFtZSl9JGAsIFwiaVwiKVxyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgc2VhcmNoV2ViSXRlbVNwb3QobmFtZSwgW1wicGxheWxpc3RcIl0pXHJcbiAgICBjb25zdCBpdGVtID0gcmVzLnBsYXlsaXN0cy5pdGVtc1swXVxyXG4gICAgcmV0dXJuIGl0ZW0/Lm93bmVyLmlkID09PSBcInRoZXNvdW5kc29mc3BvdGlmeVwiICYmIHJlLnRlc3QoaXRlbS5uYW1lKSA/IGl0ZW0udXJpIDogbnVsbFxyXG59XHJcblxyXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgUGxhdGZvcm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoUGxhdExpa2VkVHJhY2tzID0gYXN5bmMgKCkgPT5cclxuICAgIChcclxuICAgICAgICBhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uTGlicmFyeUFQSS5nZXRUcmFja3Moe1xyXG4gICAgICAgICAgICBsaW1pdDogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsXHJcbiAgICAgICAgfSlcclxuICAgICkuaXRlbXMgYXMgZmV0Y2hQbGF0QXJ0aXN0TGlrZWRUcmFja3NSZXNcclxuZXhwb3J0IGNvbnN0IGZldGNoUGxhdEFydGlzdExpa2VkVHJhY2tzID0gYXN5bmMgKHVyaTogU3BvdGlmeVVSSSwgb2Zmc2V0ID0gMCwgbGltaXQgPSAxMDApID0+XHJcbiAgICAoYXdhaXQgU3BpY2V0aWZ5LlBsYXRmb3JtLkxpYnJhcnlBUEkuZ2V0VHJhY2tzKHsgdXJpLCBvZmZzZXQsIGxpbWl0IH0pKS5pdGVtcyBhcyBmZXRjaFBsYXRBcnRpc3RMaWtlZFRyYWNrc1Jlc1xyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoUGxhdFBsYXlsaXN0Q29udGVudHMgPSBhc3luYyAodXJpOiBTcG90aWZ5VVJJKSA9PlxyXG4gICAgKGF3YWl0IFNwaWNldGlmeS5QbGF0Zm9ybS5QbGF5bGlzdEFQSS5nZXRDb250ZW50cyh1cmkpKS5pdGVtcyBhcyBmZXRjaFdlYlBsYXlsaXN0UmVzXHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlUGxhdEZvbGRlciA9IGFzeW5jIChuYW1lOiBzdHJpbmcsIGxvY2F0aW9uOiBTcG90aWZ5TG9jT2JqID0ge30pID0+XHJcbiAgICBhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uUm9vdGxpc3RBUEkuY3JlYXRlRm9sZGVyKG5hbWUsIGxvY2F0aW9uKVxyXG5cclxuZXhwb3J0IGNvbnN0IGxpa2VQbGF0UGxheWxpc3QgPSBhc3luYyAodXJpOiBTcG90aWZ5VVJJKSA9PiBhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uUm9vdGxpc3RBUEkuYWRkKFt1cmldKVxyXG5cclxuLyogUmVwbGFjZWQgYnkgY3JlYXRlU1BQbGF5bGlzdEZyb21UcmFja3MgKi9cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVBsYXRQbGF5bGlzdCA9IGFzeW5jIChuYW1lOiBzdHJpbmcsIGxvY2F0aW9uOiBTcG90aWZ5TG9jT2JqID0ge30pID0+XHJcbiAgICBhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uUm9vdGxpc3RBUEkuY3JlYXRlUGxheWxpc3QobmFtZSwgbG9jYXRpb24pXHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlU1BQbGF5bGlzdEZyb21UcmFja3MgPSAobmFtZTogc3RyaW5nLCB0cmFja3M6IFNwb3RpZnlVUklbXSwgZm9sZGVyPzogU3BvdGlmeVVSSSkgPT5cclxuICAgIFNwaWNldGlmeS5Db3Ntb3NBc3luYy5wb3N0KFwic3A6Ly9jb3JlLXBsYXlsaXN0L3YxL3Jvb3RsaXN0P3Jlc3BvbnNlRm9ybWF0PXByb3RvYnVmSnNvblwiLCB7XHJcbiAgICAgICAgb3BlcmF0aW9uOiBcImNyZWF0ZVwiLFxyXG4gICAgICAgIC4uLihmb2xkZXIgPyB7IGFmdGVyOiBmb2xkZXIgfSA6IHt9KSxcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIHBsYXlsaXN0OiB0cnVlLFxyXG4gICAgICAgIHVyaXM6IHRyYWNrcyxcclxuICAgIH0pXHJcblxyXG5leHBvcnQgY29uc3Qgc2V0UGxhdFBsYXlsaXN0VmlzaWJpbGl0eSA9IGFzeW5jIChwbGF5bGlzdDogU3BvdGlmeVVSSSwgdmlzaWJsZUZvckFsbDogYm9vbGVhbikgPT5cclxuICAgIGF3YWl0IFNwaWNldGlmeS5QbGF0Zm9ybS5QbGF5bGlzdFBlcm1pc3Npb25zQVBJLnNldEJhc2VQZXJtaXNzaW9uKHBsYXlsaXN0LCB2aXNpYmxlRm9yQWxsID8gXCJWSUVXRVJcIiA6IFwiQkxPQ0tFRFwiKVxyXG5leHBvcnQgY29uc3Qgc2V0UGxhdFBsYXlsaXN0UHVibGlzaGVkID0gYXN5bmMgKHBsYXlsaXN0OiBTcG90aWZ5VVJJLCBwdWJsaXNoZWQ6IGJvb2xlYW4pID0+XHJcbiAgICBhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uUm9vdGxpc3RBUEkuc2V0UHVibGlzaGVkU3RhdGUocGxheWxpc3QsIHB1Ymxpc2hlZClcclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaFBsYXRGb2xkZXIgPSBhc3luYyAoZm9sZGVyPzogU3BvdGlmeVVSSSkgPT5cclxuICAgIChhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uUm9vdGxpc3RBUEkuZ2V0Q29udGVudHMoeyBmb2xkZXJVcmk6IGZvbGRlciB9KSkgYXMgZmV0Y2hQbGF0Rm9sZGVyUmVzXHJcbmV4cG9ydCBjb25zdCBmZXRjaFBsYXRSb290Rm9sZGVyID0gKCkgPT4gZmV0Y2hQbGF0Rm9sZGVyKHVuZGVmaW5lZClcclxuXHJcbmV4cG9ydCBjb25zdCBhZGRQbGF0UGxheWxpc3RUcmFja3MgPSBhc3luYyAocGxheWxpc3Q6IFNwb3RpZnlVUkksIHRyYWNrczogU3BvdGlmeVVSSVtdLCBsb2NhdGlvbjogU3BvdGlmeUxvY09iaiA9IHt9KSA9PlxyXG4gICAgYXdhaXQgU3BpY2V0aWZ5LlBsYXRmb3JtLlBsYXlsaXN0QVBJLmFkZChwbGF5bGlzdCwgdHJhY2tzLCBsb2NhdGlvbilcclxuXHJcbmV4cG9ydCBjb25zdCBtb3ZlUGxhdFBsYXlsaXN0VHJhY2tzID0gYXN5bmMgKFxyXG4gICAgcGxheWxpc3Q6IFNwb3RpZnlVUkksXHJcbiAgICB0cmFja3M6IEFycmF5PHsgdWlkOiBzdHJpbmcgfT4sXHJcbiAgICBsb2NhdGlvbjogU3BvdGlmeUxvY09iaiA9IHt9LFxyXG4pID0+IGF3YWl0IFNwaWNldGlmeS5QbGF0Zm9ybS5QbGF5bGlzdEFQSS5tb3ZlKHBsYXlsaXN0LCB0cmFja3MsIGxvY2F0aW9uKVxyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoUGxhdFBsYXlsaXN0RW5oYW5jZWRTb25nczMwMCA9IGFzeW5jICh1cmk6IFNwb3RpZnlVUkksIG9mZnNldCA9IDAsIGxpbWl0ID0gMzAwKSA9PlxyXG4gICAgKGF3YWl0IFNwaWNldGlmeS5QbGF0Zm9ybS5FbmhhbmNlQVBJLmdldFBhZ2UodXJpLCAvKiBpdGVyYXRpb24gKi8gMCwgLyogc2Vzc2lvbklkICovIDAsIG9mZnNldCwgbGltaXQpKS5lbmhhbmNlUGFnZVxyXG4gICAgICAgIC5wYWdlSXRlbXMgYXMgYW55W11cclxuZXhwb3J0IGNvbnN0IGZldGNoUGxhdFBsYXlsaXN0RW5oYW5jZWRTb25ncyA9IGFzeW5jICh1cmk6IFNwb3RpZnlVUkksIG9mZnNldCA9IDApOiBQcm9taXNlPGFueVtdPiA9PiB7XHJcbiAgICBjb25zdCBuZXh0UGFnZUl0ZW1zID0gYXdhaXQgZmV0Y2hQbGF0UGxheWxpc3RFbmhhbmNlZFNvbmdzMzAwKHVyaSwgb2Zmc2V0KVxyXG4gICAgaWYgKG5leHRQYWdlSXRlbXM/Lmxlbmd0aCA8IDMwMCkgcmV0dXJuIG5leHRQYWdlSXRlbXNcclxuICAgIGVsc2UgcmV0dXJuIG5leHRQYWdlSXRlbXMuY29uY2F0KGZldGNoUGxhdFBsYXlsaXN0RW5oYW5jZWRTb25ncyh1cmksIG9mZnNldCArIDMwMCkpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaExvY2FsVHJhY2tzID0gYXN5bmMgKCkgPT4gYXdhaXQgU3BpY2V0aWZ5LlBsYXRmb3JtLkxvY2FsRmlsZXNBUEkuZ2V0VHJhY2tzKClcclxuXHJcbi8qICAgICAgICAgICAgICAgICAgICAgICAgICBOb24gU3BvdGlmeSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXHJcblxyXG5leHBvcnQgY29uc3QgZmV0Y2hUcmFja0xGTUFQSSA9IGFzeW5jIChMRk1BcGlLZXk6IHN0cmluZywgYXJ0aXN0OiBzdHJpbmcsIHRyYWNrTmFtZTogc3RyaW5nLCBsYXN0Rm1Vc2VybmFtZSA9IFwiXCIpID0+IHtcclxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoXCJodHRwczovL3dzLmF1ZGlvc2Nyb2JibGVyLmNvbS8yLjAvXCIpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcIm1ldGhvZFwiLCBcInRyYWNrLmdldEluZm9cIilcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwiYXBpX2tleVwiLCBMRk1BcGlLZXkpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcImFydGlzdFwiLCBhcnRpc3QpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcInRyYWNrXCIsIHRyYWNrTmFtZSlcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwiZm9ybWF0XCIsIFwianNvblwiKVxyXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJ1c2VybmFtZVwiLCBsYXN0Rm1Vc2VybmFtZSlcclxuXHJcbiAgICByZXR1cm4gKGF3YWl0IGZldGNoKHVybCkudGhlbihyZXMgPT4gcmVzLmpzb24oKSkpIGFzIGZldGNoVHJhY2tMRk1BUElSZXNcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoVHJhY2tMRk1BUElNZW1vaXplZCA9IG1lbW9pemUyKGZldGNoVHJhY2tMRk1BUEkpXHJcblxyXG5leHBvcnQgY29uc3Qgc2VhcmNoWW91dHViZSA9IGFzeW5jIChZb3VUdWJlQXBpS2V5OiBzdHJpbmcsIHNlYXJjaFN0cmluZzogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20veW91dHViZS92My9zZWFyY2hcIilcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwicGFydFwiLCBcInNuaXBwZXRcIilcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwibWF4UmVzdWx0c1wiLCBcIjEwXCIpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcInFcIiwgc2VhcmNoU3RyaW5nKVxyXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJ0eXBlXCIsIFwidmlkZW9cIilcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwia2V5XCIsIFlvdVR1YmVBcGlLZXkpXHJcblxyXG4gICAgcmV0dXJuIChhd2FpdCBmZXRjaCh1cmwpLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpKSBhcyBhbnlbXVxyXG59XHJcblxyXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgVHlwZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBmZXRjaEdRTEFsYnVtUmVzIHtcclxuICAgIF9fdHlwZW5hbWU6IFwiYWxidW1cIlxyXG4gICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIGFydGlzdHM6IHtcclxuICAgICAgICB0b3RhbENvdW50OiBudW1iZXJcclxuICAgICAgICBpdGVtczogQXJyYXk8e1xyXG4gICAgICAgICAgICBpZDogc3RyaW5nXHJcbiAgICAgICAgICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgICAgICAgICBwcm9maWxlOiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBzdHJpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2aXN1YWxzOiB7XHJcbiAgICAgICAgICAgICAgICBhdmF0YXJJbWFnZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXM6IFNwb3RBcGlJbWFnZVtdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2hhcmluZ0luZm86IHtcclxuICAgICAgICAgICAgICAgIHNoYXJlVXJsOiBzdHJpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0+XHJcbiAgICB9XHJcbiAgICBjb3ZlckFydDoge1xyXG4gICAgICAgIGV4dHJhY3RlZENvbG9yczoge1xyXG4gICAgICAgICAgICBjb2xvclJhdzoge1xyXG4gICAgICAgICAgICAgICAgaGV4OiBzdHJpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb2xvckxpZ2h0OiB7XHJcbiAgICAgICAgICAgICAgICBoZXg6IHN0cmluZ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbG9yRGFyazoge1xyXG4gICAgICAgICAgICAgICAgaGV4OiBzdHJpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzb3VyY2VzOiBTcG90QXBpSW1hZ2VbXVxyXG4gICAgfVxyXG4gICAgZGlzY3M6IHtcclxuICAgICAgICB0b3RhbENvdW50OiBudW1iZXJcclxuICAgICAgICBpdGVtczogQXJyYXk8e1xyXG4gICAgICAgICAgICBudW1iZXI6IG51bWJlclxyXG4gICAgICAgICAgICB0cmFja3M6IHtcclxuICAgICAgICAgICAgICAgIHRvdGFsQ291bnQ6IG51bWJlclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfT5cclxuICAgIH1cclxuICAgIHJlbGVhc2VzOiB7XHJcbiAgICAgICAgdG90YWxDb3VudDogbnVtYmVyXHJcbiAgICAgICAgaXRlbXM6IEFycmF5PHtcclxuICAgICAgICAgICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICAgICAgICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgICAgIH0+XHJcbiAgICB9XHJcbiAgICB0eXBlOiBzdHJpbmdcclxuICAgIGRhdGU6IHtcclxuICAgICAgICBpc29TdHJpbmc6IHN0cmluZ1xyXG4gICAgICAgIHByZWNpc2lvbjogc3RyaW5nXHJcbiAgICB9XHJcbiAgICBwbGF5YWJpbGl0eToge1xyXG4gICAgICAgIHBsYXlhYmxlOiBib29sZWFuXHJcbiAgICAgICAgcmVhc29uOiBzdHJpbmdcclxuICAgIH1cclxuICAgIGxhYmVsOiBzdHJpbmdcclxuICAgIGNvcHlyaWdodDoge1xyXG4gICAgICAgIHRvdGFsQ291bnQ6IG51bWJlclxyXG4gICAgICAgIGl0ZW1zOiBBcnJheTx7XHJcbiAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gICAgICAgICAgICB0ZXh0OiBzdHJpbmdcclxuICAgICAgICB9PlxyXG4gICAgfVxyXG4gICAgY291cnRlc3lMaW5lOiBzdHJpbmdcclxuICAgIHNhdmVkOiBib29sZWFuXHJcbiAgICBzaGFyaW5nSW5mbzoge1xyXG4gICAgICAgIHNoYXJlVXJsOiBzdHJpbmdcclxuICAgICAgICBzaGFyZUlkOiBzdHJpbmdcclxuICAgIH1cclxuICAgIHRyYWNrczoge1xyXG4gICAgICAgIHRvdGFsQ291bnQ6IG51bWJlclxyXG4gICAgICAgIGl0ZW1zOiBBcnJheTx7XHJcbiAgICAgICAgICAgIHVpZDogc3RyaW5nXHJcbiAgICAgICAgICAgIHRyYWNrOiB7XHJcbiAgICAgICAgICAgICAgICBzYXZlZDogYm9vbGVhblxyXG4gICAgICAgICAgICAgICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgIHBsYXljb3VudDogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICBkaXNjTnVtYmVyOiBudW1iZXJcclxuICAgICAgICAgICAgICAgIHRyYWNrTnVtYmVyOiBudW1iZXJcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRSYXRpbmc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZWxpbmtpbmdJbmZvcm1hdGlvbjogYW55XHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsTWlsbGlzZWNvbmRzOiBudW1iZXJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHBsYXlhYmlsaXR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxheWFibGU6IGJvb2xlYW5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFydGlzdHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtczogQXJyYXk8e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmk6IFNwb3RpZnlVUklcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9PlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfT5cclxuICAgIH1cclxuICAgIG1vcmVBbGJ1bXNCeUFydGlzdDoge1xyXG4gICAgICAgIGl0ZW1zOiBBcnJheTx7XHJcbiAgICAgICAgICAgIGRpc2NvZ3JhcGh5OiB7XHJcbiAgICAgICAgICAgICAgICBwb3B1bGFyUmVsZWFzZXNBbGJ1bXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtczogQXJyYXk8e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVtYmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY292ZXJBcnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXM6IFNwb3RBcGlJbWFnZVtdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWFiaWxpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlhYmxlOiBib29sZWFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJpbmdJbmZvOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFyZUlkOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlVXJsOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICB9PlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfT5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgZmV0Y2hHUUxBcnRpc3RSZWxhdGVkUmVzID0gQXJyYXk8e1xyXG4gICAgaWQ6IHN0cmluZ1xyXG4gICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICBwcm9maWxlOiB7XHJcbiAgICAgICAgbmFtZTogc3RyaW5nXHJcbiAgICB9XHJcbiAgICB2aXN1YWxzOiB7XHJcbiAgICAgICAgYXZhdGFySW1hZ2U6IHtcclxuICAgICAgICAgICAgc291cmNlczogU3BvdEFwaUltYWdlW11cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0+XHJcblxyXG5leHBvcnQgdHlwZSBmZXRjaFBsYXRBcnRpc3RMaWtlZFRyYWNrc1JlcyA9IEFycmF5PHtcclxuICAgIHR5cGU6IHN0cmluZ1xyXG4gICAgdXJpOiBzdHJpbmdcclxuICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgZHVyYXRpb246IFNwb3RBcGlEdXJhdGlvblxyXG4gICAgYWxidW06IFNwb3RBcGlBbGJ1bU1pblxyXG4gICAgYXJ0aXN0czogU3BvdEFwaUFydGlzdE1pbltdXHJcbiAgICBkaXNjTnVtYmVyOiBudW1iZXJcclxuICAgIHRyYWNrTnVtYmVyOiBudW1iZXJcclxuICAgIGlzRXhwbGljaXQ6IGJvb2xlYW5cclxuICAgIGlzUGxheWFibGU6IGJvb2xlYW5cclxuICAgIGlzTG9jYWw6IGJvb2xlYW5cclxuICAgIGlzMTlQbHVzT25seTogYm9vbGVhblxyXG4gICAgYWRkZWRBdDogc3RyaW5nXHJcbn0+XHJcblxyXG5leHBvcnQgdHlwZSBmZXRjaFdlYlBsYXlsaXN0UmVzID0gQXJyYXk8e1xyXG4gICAgdWlkOiBzdHJpbmdcclxuICAgIHBsYXlJbmRleDogbnVsbFxyXG4gICAgYWRkZWRBdDogc3RyaW5nXHJcbiAgICBhZGRlZEJ5OiB7XHJcbiAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAgICAgICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICAgICAgdXNlcm5hbWU6IHN0cmluZ1xyXG4gICAgICAgIGRpc3BsYXlOYW1lOiBzdHJpbmdcclxuICAgICAgICBpbWFnZXM6IFNwb3RBcGlJbWFnZTJbXVxyXG4gICAgfVxyXG4gICAgZm9ybWF0TGlzdEF0dHJpYnV0ZXM6IHt9XHJcbiAgICB0eXBlOiBcInRyYWNrXCJcclxuICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgbmFtZTogc3RyaW5nXHJcbiAgICBhbGJ1bTogU3BvdEFwaUFsYnVtTWluXHJcbiAgICBhcnRpc3RzOiBTcG90QXBpQXJ0aXN0TWluW11cclxuICAgIGRpc2NOdW1iZXI6IG51bWJlclxyXG4gICAgdHJhY2tOdW1iZXI6IG51bWJlclxyXG4gICAgZHVyYXRpb246IFNwb3RBcGlEdXJhdGlvblxyXG4gICAgaXNFeHBsaWNpdDogYm9vbGVhblxyXG4gICAgaXNMb2NhbDogYm9vbGVhblxyXG4gICAgaXNQbGF5YWJsZTogYm9vbGVhblxyXG4gICAgaXMxOVBsdXNPbmx5OiBib29sZWFuXHJcbn0+XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIGZldGNoVHJhY2tMRk1BUElSZXMge1xyXG4gICAgdHJhY2s6IHtcclxuICAgICAgICBuYW1lOiBzdHJpbmdcclxuICAgICAgICBtYmlkOiBzdHJpbmdcclxuICAgICAgICB1cmw6IHN0cmluZ1xyXG4gICAgICAgIGR1cmF0aW9uOiBzdHJpbmdcclxuICAgICAgICBzdHJlYW1hYmxlOiB7XHJcbiAgICAgICAgICAgIFwiI3RleHRcIjogc3RyaW5nXHJcbiAgICAgICAgICAgIGZ1bGx0cmFjazogc3RyaW5nXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpc3RlbmVyczogc3RyaW5nXHJcbiAgICAgICAgcGxheWNvdW50OiBzdHJpbmdcclxuICAgICAgICBhcnRpc3Q6IHtcclxuICAgICAgICAgICAgbmFtZTogc3RyaW5nXHJcbiAgICAgICAgICAgIG1iaWQ6IHN0cmluZ1xyXG4gICAgICAgICAgICB1cmw6IHN0cmluZ1xyXG4gICAgICAgIH1cclxuICAgICAgICBhbGJ1bToge1xyXG4gICAgICAgICAgICBhcnRpc3Q6IHN0cmluZ1xyXG4gICAgICAgICAgICB0aXRsZTogc3RyaW5nXHJcbiAgICAgICAgICAgIG1iaWQ6IHN0cmluZ1xyXG4gICAgICAgICAgICB1cmw6IHN0cmluZ1xyXG4gICAgICAgICAgICBpbWFnZTogQXJyYXk8e1xyXG4gICAgICAgICAgICAgICAgXCIjdGV4dFwiOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgIHNpemU6IHN0cmluZ1xyXG4gICAgICAgICAgICB9PlxyXG4gICAgICAgICAgICBcIkBhdHRyXCI6IHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBzdHJpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB1c2VycGxheWNvdW50OiBzdHJpbmdcclxuICAgICAgICB1c2VybG92ZWQ6IHN0cmluZ1xyXG4gICAgICAgIHRvcHRhZ3M6IHtcclxuICAgICAgICAgICAgdGFnOiBBcnJheTx7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgIHVybDogc3RyaW5nXHJcbiAgICAgICAgICAgIH0+XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdpa2k6IHtcclxuICAgICAgICAgICAgcHVibGlzaGVkOiBzdHJpbmdcclxuICAgICAgICAgICAgc3VtbWFyeTogc3RyaW5nXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHN0cmluZ1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy9cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUFsYnVtTWluIHtcclxuICAgIHR5cGU6IFwiYWxidW1cIlxyXG4gICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIGFydGlzdDogU3BvdEFwaUFydGlzdE1pblxyXG4gICAgaW1hZ2VzOiBTcG90QXBpSW1hZ2UyW11cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTcG90QXBpSW1hZ2UyIHtcclxuICAgIHVybDogc3RyaW5nXHJcbiAgICBsYWJlbDogXCJzbWFsbFwiIHwgXCJzdGFuZGFyZFwiIHwgXCJsYXJnZVwiIHwgXCJ4bGFyZ2VcIlxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RBcGlUcmFjayB7XHJcbiAgICBhbGJ1bTogU3BvdEFwaUFsYnVtXHJcbiAgICBhcnRpc3RzOiBTcG90QXBpQXJ0aXN0W11cclxuICAgIGF2YWlsYWJsZV9tYXJrZXRzOiBzdHJpbmdbXVxyXG4gICAgZGlzY19udW1iZXI6IG51bWJlclxyXG4gICAgZHVyYXRpb25fbXM6IG51bWJlclxyXG4gICAgZXhwbGljaXQ6IGJvb2xlYW5cclxuICAgIGV4dGVybmFsX2lkczogU3BvdEFwaUVJRHNcclxuICAgIGV4dGVybmFsX3VybHM6IFNwb3RBcGlFVXJsc1xyXG4gICAgaHJlZjogc3RyaW5nXHJcbiAgICBpZDogc3RyaW5nXHJcbiAgICBpc19wbGF5YWJsZTogYm9vbGVhblxyXG4gICAgbGlua2VkX2Zyb206IHt9XHJcbiAgICByZXN0cmljdGlvbnM6IFNwb3RBcGlSZXN0cmljdGlvbnNcclxuICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgcG9wdWxhcml0eTogbnVtYmVyXHJcbiAgICBwcmV2aWV3X3VybDogc3RyaW5nXHJcbiAgICB0cmFja19udW1iZXI6IG51bWJlclxyXG4gICAgdHlwZTogc3RyaW5nXHJcbiAgICB1cmk6IFNwb3RpZnlVUklcclxuICAgIGlzX2xvY2FsOiBib29sZWFuXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUFydGlzdCB7XHJcbiAgICBleHRlcm5hbF91cmxzOiBTcG90QXBpRVVybHNcclxuICAgIGZvbGxvd2VyczogU3BvdEFwaUZvbGxvd2Vyc1xyXG4gICAgZ2VucmVzOiBzdHJpbmdbXVxyXG4gICAgaHJlZjogc3RyaW5nXHJcbiAgICBpZDogc3RyaW5nXHJcbiAgICBpbWFnZXM6IFNwb3RBcGlJbWFnZVtdXHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIHBvcHVsYXJpdHk6IG51bWJlclxyXG4gICAgdHlwZTogc3RyaW5nXHJcbiAgICB1cmk6IFNwb3RpZnlVUklcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTcG90QXBpQXJ0aXN0TWluIHtcclxuICAgIHR5cGU6IFwiYXJ0aXN0XCJcclxuICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgbmFtZTogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUFsYnVtIHtcclxuICAgIGFsYnVtX3R5cGU6IHN0cmluZ1xyXG4gICAgdG90YWxfdHJhY2tzOiBudW1iZXJcclxuICAgIGF2YWlsYWJsZV9tYXJrZXRzOiBzdHJpbmdbXVxyXG4gICAgZXh0ZXJuYWxfdXJsczogU3BvdEFwaUVVcmxzXHJcbiAgICBocmVmOiBzdHJpbmdcclxuICAgIGlkOiBzdHJpbmdcclxuICAgIGltYWdlczogU3BvdEFwaUltYWdlW11cclxuICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgcmVsZWFzZV9kYXRlOiBzdHJpbmdcclxuICAgIHJlbGVhc2VfZGF0ZV9wcmVjaXNpb246IHN0cmluZ1xyXG4gICAgcmVzdHJpY3Rpb25zOiBTcG90QXBpUmVzdHJpY3Rpb25zXHJcbiAgICB0eXBlOiBzdHJpbmdcclxuICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgY29weXJpZ2h0czogQXJyYXk8e1xyXG4gICAgICAgIHRleHQ6IHN0cmluZ1xyXG4gICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gICAgfT5cclxuICAgIGV4dGVybmFsX2lkczogU3BvdEFwaUVJRHNcclxuICAgIGdlbnJlczogc3RyaW5nW11cclxuICAgIGxhYmVsOiBzdHJpbmdcclxuICAgIHBvcHVsYXJpdHk6IG51bWJlclxyXG4gICAgYWxidW1fZ3JvdXA6IHN0cmluZ1xyXG4gICAgYXJ0aXN0czogQXJyYXk8e1xyXG4gICAgICAgIGV4dGVybmFsX3VybHM6IFNwb3RBcGlFVXJsc1xyXG4gICAgICAgIGhyZWY6IHN0cmluZ1xyXG4gICAgICAgIGlkOiBzdHJpbmdcclxuICAgICAgICBuYW1lOiBzdHJpbmdcclxuICAgICAgICB0eXBlOiBzdHJpbmdcclxuICAgICAgICB1cmk6IFNwb3RpZnlVUklcclxuICAgIH0+XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUVVcmxzIHtcclxuICAgIHNwb3RpZnk6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RBcGlFSURzIHtcclxuICAgIGlzcmM6IHN0cmluZ1xyXG4gICAgZWFuOiBzdHJpbmdcclxuICAgIHVwYzogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUltYWdlIHtcclxuICAgIHVybDogc3RyaW5nXHJcbiAgICB3aWR0aDogbnVtYmVyXHJcbiAgICBoZWlnaHQ6IG51bWJlclxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RBcGlSZXN0cmljdGlvbnMge1xyXG4gICAgcmVhc29uOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTcG90QXBpRm9sbG93ZXJzIHtcclxuICAgIGhyZWY6IHN0cmluZ1xyXG4gICAgdG90YWw6IG51bWJlclxyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUR1cmF0aW9uIHtcclxuICAgIG1pbGxpc2Vjb25kczogbnVtYmVyXHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBTcG90QXBpUGxheWxpc3Qge1xyXG4gICAgY29sbGFib3JhdGl2ZTogYm9vbGVhblxyXG4gICAgZGVzY3JpcHRpb246IHN0cmluZ1xyXG4gICAgZXh0ZXJuYWxfdXJsczogU3BvdEFwaUVVcmxzXHJcbiAgICBmb2xsb3dlcnM6IHtcclxuICAgICAgICBocmVmOiBzdHJpbmdcclxuICAgICAgICB0b3RhbDogbnVtYmVyXHJcbiAgICB9XHJcbiAgICBocmVmOiBzdHJpbmdcclxuICAgIGlkOiBTcG90aWZ5SURcclxuICAgIGltYWdlczogU3BvdEFwaUltYWdlW11cclxuICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgb3duZXI6IFNwb3RBcGlPd25lclxyXG4gICAgcHVibGljOiBib29sZWFuXHJcbiAgICBzbmFwc2hvdF9pZDogc3RyaW5nXHJcbiAgICB0cmFja3M6IHtcclxuICAgICAgICBocmVmOiBzdHJpbmdcclxuICAgICAgICBsaW1pdDogbnVtYmVyXHJcbiAgICAgICAgbmV4dDogc3RyaW5nXHJcbiAgICAgICAgb2Zmc2V0OiBudW1iZXJcclxuICAgICAgICBwcmV2aW91czogc3RyaW5nXHJcbiAgICAgICAgdG90YWw6IG51bWJlclxyXG4gICAgICAgIGl0ZW1zOiBBcnJheTx7XHJcbiAgICAgICAgICAgIGFkZGVkX2F0OiBzdHJpbmdcclxuICAgICAgICAgICAgYWRkZWRfYnk6IFNwb3RBcGlPd25lclxyXG4gICAgICAgICAgICBpc19sb2NhbDogYm9vbGVhblxyXG4gICAgICAgICAgICB0cmFjazogU3BvdEFwaVRyYWNrXHJcbiAgICAgICAgfT5cclxuICAgIH1cclxuICAgIHR5cGU6IHN0cmluZ1xyXG4gICAgdXJpOiBTcG90aWZ5VVJJXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaU93bmVyIHtcclxuICAgIGV4dGVybmFsX3VybHM6IFNwb3RBcGlFVXJsc1xyXG4gICAgZm9sbG93ZXJzPzoge1xyXG4gICAgICAgIGhyZWY6IHN0cmluZ1xyXG4gICAgICAgIHRvdGFsOiBudW1iZXJcclxuICAgIH1cclxuICAgIGhyZWY6IHN0cmluZ1xyXG4gICAgaWQ6IFNwb3RpZnlJRFxyXG4gICAgdHlwZTogc3RyaW5nXHJcbiAgICB1cmk6IFNwb3RpZnlVUklcclxuICAgIGRpc3BsYXlfbmFtZT86IHN0cmluZ1xyXG4gICAgbmFtZT86IHN0cmluZ1xyXG59XHJcblxyXG4vL1RPRE86IEJldHRlciBUUyBpbnRlcmZhY2UgZm9yIHJlY3Vyc2l2ZSBmZXRjaFBsYXRGb2xkZXJSZXNcclxuZXhwb3J0IGludGVyZmFjZSBmZXRjaFBsYXRGb2xkZXJSZXMge1xyXG4gICAgdHlwZTogXCJmb2xkZXJcIiB8IFwicGxhY2Vob2xkZXJcIiB8IFwicGxheWxpc3RcIlxyXG4gICAgYWRkZWRBdDogc3RyaW5nXHJcbiAgICBpdGVtcz86IEFycmF5PGZldGNoUGxhdEZvbGRlclJlcz5cclxuICAgIG5hbWU/OiBzdHJpbmdcclxuICAgIHVyaTogc3RyaW5nXHJcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZ1xyXG4gICAgaW1hZ2VzPzogU3BvdEFwaUltYWdlMltdXHJcbiAgICBtYWRlRm9yPzogbnVsbFxyXG4gICAgb3duZXI/OiB7XHJcbiAgICAgICAgdHlwZTogXCJ1c2VyXCJcclxuICAgICAgICB1cmk6IHN0cmluZ1xyXG4gICAgICAgIHVzZXJuYW1lOiBzdHJpbmdcclxuICAgICAgICBkaXNwbGF5TmFtZTogc3RyaW5nXHJcbiAgICAgICAgaW1hZ2VzOiBhbnlbXVxyXG4gICAgfVxyXG4gICAgdG90YWxMZW5ndGg/OiBudW1iZXJcclxuICAgIHVuZmlsdGVyZWRUb3RhbExlbmd0aD86IG51bWJlclxyXG4gICAgdG90YWxMaWtlcz86IG51bGxcclxuICAgIGR1cmF0aW9uPzogbnVsbFxyXG4gICAgaXNDb2xsYWJvcmF0aXZlPzogYm9vbGVhblxyXG4gICAgaXNMb2FkZWQ/OiBib29sZWFuXHJcbiAgICBpc093bmVkQnlTZWxmPzogYm9vbGVhblxyXG4gICAgaXNQdWJsaXNoZWQ/OiBib29sZWFuXHJcbiAgICBoYXNFcGlzb2Rlcz86IG51bGxcclxuICAgIGhhc1Nwb3RpZnlUcmFja3M/OiBudWxsXHJcbiAgICBoYXNTcG90aWZ5QXVkaW9ib29rcz86IG51bGxcclxuICAgIGNhbkFkZD86IGJvb2xlYW5cclxuICAgIGNhblJlbW92ZT86IGJvb2xlYW5cclxuICAgIGNhblBsYXk/OiBudWxsXHJcbiAgICBmb3JtYXRMaXN0RGF0YT86IHtcclxuICAgICAgICB0eXBlOiBzdHJpbmdcclxuICAgICAgICBhdHRyaWJ1dGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9XHJcbiAgICB9IHwgbnVsbFxyXG4gICAgY2FuUmVwb3J0QW5ub3RhdGlvbkFidXNlPzogYm9vbGVhblxyXG4gICAgaGFzRGF0ZUFkZGVkPzogYm9vbGVhblxyXG4gICAgcGVybWlzc2lvbnM/OiBudWxsXHJcbiAgICBjb2xsYWJvcmF0b3JzPzoge1xyXG4gICAgICAgIGNvdW50OiBudW1iZXJcclxuICAgICAgICBpdGVtczogYW55W11cclxuICAgIH1cclxuICAgIGlzTm90Rm91bmQ/OiBib29sZWFuXHJcbiAgICBpc0ZvcmJpZGRlbj86IGJvb2xlYW5cclxufVxyXG4iLCAiaW1wb3J0IHsgYXJyYXkgYXMgYSwgc3RyaW5nIGFzIHN0ciwgZnVuY3Rpb24gYXMgZiB9IGZyb20gXCJodHRwczovL2VzbS5zaC9mcC10c1wiXHJcbmltcG9ydCB7IHByZXBlbmQgfSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvZnAtdHMtc3RkL1N0cmluZ1wiXHJcbmltcG9ydCB7IGZldGNoR1FMQXJ0aXN0UmVsYXRlZCwgZmV0Y2hXZWJBcnRpc3RzU3BvdCwgZmV0Y2hXZWJTb3VuZE9mU3BvdGlmeVBsYXlsaXN0IH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9hcGkudHNcIlxyXG5pbXBvcnQgeyBwTWNoYWluIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9mcC50c1wiXHJcbmltcG9ydCB7IFNwb3RpZnlVUkksIHRpdGxlQ2FzZSwgd2FpdEZvckVsZW1lbnQgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3V0aWwudHNcIlxyXG5cclxuY29uc3QgeyBVUkkgfSA9IFNwaWNldGlmeVxyXG5cclxuZXhwb3J0IGNvbnN0IHVwZGF0ZUFydGlzdFBhZ2UgPSBhc3luYyAoeyBwYXRobmFtZSB9OiB7IHBhdGhuYW1lOiBzdHJpbmcgfSkgPT4ge1xyXG4gICAgY29uc3QgdXJpID0gVVJJLmZyb21TdHJpbmcocGF0aG5hbWUpXHJcblxyXG4gICAgaWYgKCFVUkkuaXNBcnRpc3QodXJpISkpIHJldHVyblxyXG5cclxuICAgIC8vIHByZXBhcmUgbmV3IGdlbnJlQ29udGFpbmVyXHJcbiAgICBjb25zdCBnZW5yZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcclxuICAgIGdlbnJlQ29udGFpbmVyLmNsYXNzTmFtZSA9IFwibWFpbi1lbnRpdHlIZWFkZXItZGV0YWlsc1RleHQgZ2VucmUtY29udGFpbmVyXCJcclxuICAgIGdlbnJlQ29udGFpbmVyLmlubmVySFRNTCA9IGF3YWl0IGYucGlwZShcclxuICAgICAgICBhd2FpdCBnZXRBcnRpc3RzR2VucmVzT3JSZWxhdGVkKFtgJHt1cml9YF0pLFxyXG4gICAgICAgIGEudGFrZUxlZnQoNSksXHJcbiAgICAgICAgYS5tYXAoYXN5bmMgZ2VucmUgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB1cmkgPSBhd2FpdCBmZXRjaFdlYlNvdW5kT2ZTcG90aWZ5UGxheWxpc3QoZ2VucmUpXHJcbiAgICAgICAgICAgIHJldHVybiBgPGEgY2xhc3M9XCJtYWluLWVudGl0eUhlYWRlci1nZW5yZUxpbmtcIiAke1xyXG4gICAgICAgICAgICAgICAgdXJpID09PSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgPyBgaHJlZj1cIiNcIiBkYXRhLXZhbHVlPVwiJHtnZW5yZX1cIiBvbmNsaWNrPVwic2VhcmNoUGxheWxpc3QodGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSlgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBgaHJlZj1cIiR7dXJpfVwiYFxyXG4gICAgICAgICAgICB9IHN0eWxlPVwiY29sb3I6IHZhcigtLXNwaWNlLXN1YnRleHQpOyBmb250LXNpemU6IDFyZW1cIj4ke3RpdGxlQ2FzZShnZW5yZSl9PC9hPmBcclxuICAgICAgICB9KSxcclxuICAgICAgICBwcyA9PiBQcm9taXNlLmFsbChwcyksXHJcbiAgICAgICAgcE1jaGFpbihhLmludGVyY2FsYXRlKHN0ci5Nb25vaWQpKGA8c3Bhbj4sIDwvc3Bhbj5gKSksXHJcbiAgICAgICAgcE1jaGFpbihwcmVwZW5kKGA8c3Bhbj5BcnRpc3QgR2VucmVzIDogPC9zcGFuPmApKSxcclxuICAgIClcclxuXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmdlbnJlLWNvbnRhaW5lclwiKT8ucmVtb3ZlKClcclxuXHJcbiAgICBjb25zdCBlbnRpdHlIZWFkZXJUZXh0ID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoXCJkaXYubWFpbi1lbnRpdHlIZWFkZXItaGVhZGVyVGV4dFwiKVxyXG4gICAgZW50aXR5SGVhZGVyVGV4dD8uaW5zZXJ0QmVmb3JlKGdlbnJlQ29udGFpbmVyLCBhd2FpdCB3YWl0Rm9yRWxlbWVudChcInNwYW4ubWFpbi1lbnRpdHlIZWFkZXItZGV0YWlsc1RleHRcIikpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRBcnRpc3RzR2VucmVzT3JSZWxhdGVkID0gYXN5bmMgKGFydGlzdHNVcmlzOiBTcG90aWZ5VVJJW10sIHNyYyA9IG51bGwpID0+IHtcclxuICAgIGNvbnN0IGdldEFydGlzdHNHZW5yZXM6IChhcnRpc3RzVXJpczogU3BvdGlmeVVSSVtdKSA9PiBQcm9taXNlPHN0cmluZ1tdPiA9IGYuZmxvdyhcclxuICAgICAgICBhLm1hcCh1cmkgPT4gVVJJLmZyb21TdHJpbmcodXJpKSEuaWQhKSxcclxuICAgICAgICBmZXRjaFdlYkFydGlzdHNTcG90LFxyXG4gICAgICAgIHBNY2hhaW4oYS5mbGF0TWFwKGFydGlzdCA9PiBhcnRpc3QuZ2VucmVzKSksXHJcbiAgICAgICAgcE1jaGFpbihhLnVuaXEoc3RyLkVxKSksXHJcbiAgICApXHJcblxyXG4gICAgY29uc3QgYWxsR2VucmVzID0gYXdhaXQgZ2V0QXJ0aXN0c0dlbnJlcyhhcnRpc3RzVXJpcylcclxuXHJcbiAgICByZXR1cm4gYWxsR2VucmVzLmxlbmd0aFxyXG4gICAgICAgID8gYWxsR2VucmVzXHJcbiAgICAgICAgOiBhd2FpdCBmLnBpcGUoXHJcbiAgICAgICAgICAgICAgYXJ0aXN0c1VyaXNbMF0sXHJcbiAgICAgICAgICAgICAgZmV0Y2hHUUxBcnRpc3RSZWxhdGVkLFxyXG4gICAgICAgICAgICAgIHBNY2hhaW4oYS5tYXAoYSA9PiBhLnVyaSkpLFxyXG4gICAgICAgICAgICAgIHBNY2hhaW4oYS5jaHVua3NPZig1KSksXHJcbiAgICAgICAgICAgICAgcE1jaGFpbihcclxuICAgICAgICAgICAgICAgICAgYS5yZWR1Y2UoUHJvbWlzZS5yZXNvbHZlKFtdIGFzIHN0cmluZ1tdKSwgYXN5bmMgKGFjYywgYXJyNXVyaXMpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAoYXdhaXQgYWNjKS5sZW5ndGggPyBhd2FpdCBhY2MgOiBhd2FpdCBnZXRBcnRpc3RzR2VucmVzKGFycjV1cmlzKSxcclxuICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgKVxyXG59XHJcbiIsICJpbXBvcnQgeyB0YXNrIH0gZnJvbSBcImh0dHBzOi8vZXNtLnNoL2ZwLXRzXCJcclxuaW1wb3J0IHsgZmV0Y2hXZWJTb3VuZE9mU3BvdGlmeVBsYXlsaXN0IH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9hcGkudHNcIlxyXG5pbXBvcnQgeyB0aXRsZUNhc2UgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3V0aWwudHNcIlxyXG5pbXBvcnQgeyBsYXN0Rm1UYWdzLCBzcG90aWZ5R2VucmVzIH0gZnJvbSBcIi4vYXBwLnRzXCJcclxuXHJcbmNvbnN0IHsgUmVhY3QgfSA9IFNwaWNldGlmeVxyXG5cclxuZXhwb3J0IGNvbnN0IGdlbnJlUG9wdXAgPSAoZ2xvYmFsVGhpcy5nZW5yZVBvcHVwID0gKCkgPT4ge1xyXG4gICAgU3BpY2V0aWZ5LlBvcHVwTW9kYWwuZGlzcGxheSh7XHJcbiAgICAgICAgdGl0bGU6IGBHZW5yZXMgb2Y6ICR7U3BpY2V0aWZ5LlBsYXllci5kYXRhLnRyYWNrPy5tZXRhZGF0YT8udGl0bGV9YCxcclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBjb250ZW50J3MgdHlwZSBzaG91bGQgYWxsb3cgcmVhY3QgZWxlbWVudHNcclxuICAgICAgICBjb250ZW50OiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2VucmVzLXBvcHVwXCI+XHJcbiAgICAgICAgICAgICAgICB7c3BvdGlmeUdlbnJlcy5sZW5ndGggPT09IDAgPyA8PjwvPiA6IDxTcG90aWZ5R2VucmVzQ29udGFpbmVyIC8+fVxyXG4gICAgICAgICAgICAgICAge2xhc3RGbVRhZ3MubGVuZ3RoID09PSAwID8gPD48Lz4gOiA8TGFzdEZtVGFnc0NvbnRhaW5lciAvPn1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKSxcclxuICAgICAgICBpc0xhcmdlOiB0cnVlLFxyXG4gICAgfSlcclxufSlcclxuXHJcbmNvbnN0IEJ1dHRvbkVsZW1lbnQgPSAoeyBuYW1lID0gXCJcIiwgY29sb3IgPSBcIlwiLCBvbkNsaWNrID0gdGFzay5vZih1bmRlZmluZWQpIGFzIHRhc2suVGFzazx2b2lkPiB9KSA9PiAoXHJcbiAgICA8YnV0dG9uIGNsYXNzTmFtZT17YGxvZ2luLWJ1dHRvbiR7Y29sb3J9YH0gb25DbGljaz17b25DbGlja30+XHJcbiAgICAgICAge25hbWV9XHJcbiAgICA8L2J1dHRvbj5cclxuKVxyXG5cclxuY29uc3QgU3BvdGlmeUdlbnJlc0NvbnRhaW5lciA9ICgpID0+IHtcclxuICAgIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGUoc3BvdGlmeUdlbnJlcylcclxuXHJcbiAgICBTcGljZXRpZnkuUGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoXCJzb25nY2hhbmdlXCIsICgpID0+IHNldFRpbWVvdXQoKCkgPT4gc2V0VmFsdWUoc3BvdGlmeUdlbnJlcyksIDUwMCkpXHJcblxyXG4gICAgY29uc3Qgb3BlblNvdW5kT2ZQbGF5bGlzdE9yU2VhcmNoUmVzdWx0cyA9IChxdWVyeTogc3RyaW5nKSA9PiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJpID0gYXdhaXQgZmV0Y2hXZWJTb3VuZE9mU3BvdGlmeVBsYXlsaXN0KHF1ZXJ5KVxyXG4gICAgICAgIGlmICh1cmkgPT09IG51bGwpIFNwaWNldGlmeS5QbGF0Zm9ybS5IaXN0b3J5LnB1c2goYC9zZWFyY2gvJHtxdWVyeX0vcGxheWxpc3RzYClcclxuICAgICAgICBlbHNlIFNwaWNldGlmeS5QbGF0Zm9ybS5IaXN0b3J5LnB1c2goYC9wbGF5bGlzdC8ke3VyaS5zcGxpdChcIjpcIilbMl19YClcclxuXHJcbiAgICAgICAgU3BpY2V0aWZ5LlBvcHVwTW9kYWwuaGlkZSgpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlZC1kb3duXCI+XHJcbiAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJ0aXRsZVwiPlNwb3RpZnkgR2VucmVzPC9oMT5cclxuICAgICAgICAgICAge3ZhbHVlLm1hcChuID0+IChcclxuICAgICAgICAgICAgICAgIDxCdXR0b25FbGVtZW50IG5hbWU9e3RpdGxlQ2FzZShuKX0gb25DbGljaz17b3BlblNvdW5kT2ZQbGF5bGlzdE9yU2VhcmNoUmVzdWx0cyhuKX0gLz5cclxuICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuXHJcbmNvbnN0IExhc3RGbVRhZ3NDb250YWluZXIgPSAoKSA9PiB7XHJcbiAgICBpZiAobGFzdEZtVGFncy5sZW5ndGggPT0gMCkgcmV0dXJuIDw+PC8+XHJcbiAgICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKGxhc3RGbVRhZ3MpXHJcblxyXG4gICAgU3BpY2V0aWZ5LlBsYXllci5hZGRFdmVudExpc3RlbmVyKFwic29uZ2NoYW5nZVwiLCAoKSA9PiBzZXRUaW1lb3V0KCgpID0+IHNldFZhbHVlKGxhc3RGbVRhZ3MpLCAxMDApKVxyXG5cclxuICAgIGNvbnN0IG9wZW5QbGF5bGlzdFNlYXJjaFJlc3VsdHMgPSAocXVlcnk6IHN0cmluZykgPT4gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIFNwaWNldGlmeS5QbGF0Zm9ybS5IaXN0b3J5LnB1c2goYC9zZWFyY2gvJHtxdWVyeX0vcGxheWxpc3RzYClcclxuICAgICAgICBTcGljZXRpZnkuUG9wdXBNb2RhbC5oaWRlKClcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2VkLWRvd25cIj5cclxuICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRpdGxlXCI+TGFzdCBGTSBUYWdzPC9oMT5cclxuICAgICAgICAgICAge3ZhbHVlLm1hcChuID0+IChcclxuICAgICAgICAgICAgICAgIDxCdXR0b25FbGVtZW50IG5hbWU9e3RpdGxlQ2FzZShuKX0gb25DbGljaz17b3BlblBsYXlsaXN0U2VhcmNoUmVzdWx0cyhuKX0gLz5cclxuICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuIiwgImltcG9ydCB7IHRhc2sgfSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvZnAtdHNcIlxyXG5pbXBvcnQgeyBTZXR0aW5nc1NlY3Rpb24gfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3NldHRpbmdzLnRzeFwiXHJcblxyXG5jb25zdCBzZXR0aW5ncyA9IG5ldyBTZXR0aW5nc1NlY3Rpb24oXCJTaG93IFRoZSBHZW5yZXNcIiwgXCJzaG93LXRoZS1nZW5yZXNcIikuYWRkSW5wdXQoXHJcbiAgICBcIkxGTUFwaUtleVwiLFxyXG4gICAgXCJMYXN0LmZtIEFQSSBLZXlcIixcclxuICAgIHRhc2sub2YoXCI0NDY1NGVhMDQ3Nzg2ZDkwMzM4YzE3MzMxYTVmNWQ5NVwiKSxcclxuKVxyXG5cclxuc2V0dGluZ3MucHVzaFNldHRpbmdzKClcclxuXHJcbmV4cG9ydCBjb25zdCBDT05GSUcgPSBzZXR0aW5ncy50b09iamVjdCgpIGFzIHtcclxuICAgIExGTUFwaUtleTogc3RyaW5nXHJcbn1cclxuIiwgImltcG9ydCB7IHRhc2sgfSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvZnAtdHNcIlxyXG5pbXBvcnQgeyBjb25zdFZvaWQgfSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvZnAtdHMvZnVuY3Rpb25cIlxyXG5pbXBvcnQgeyBndWFyZDQsIGlzIH0gZnJvbSBcIi4vZnAudHNcIlxyXG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gXCIuL3V0aWwudHNcIlxyXG5cclxuY29uc3QgeyBSZWFjdCwgUmVhY3RET00gfSA9IFNwaWNldGlmeVxyXG5cclxuZXhwb3J0IGNsYXNzIFNldHRpbmdzU2VjdGlvbiB7XHJcbiAgICBwcml2YXRlIHN0b3BIaXN0b3J5TGlzdGVuZXI6IGFueVxyXG4gICAgcHJpdmF0ZSBzZXRSZXJlbmRlcjogRnVuY3Rpb24gfCBudWxsID0gbnVsbFxyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgcHVibGljIHNlY3Rpb25JZDogc3RyaW5nLFxyXG4gICAgICAgIHB1YmxpYyBzZWN0aW9uRmllbGRzOiB7IFtrZXk6IHN0cmluZ106IFNldHRpbmdzRmllbGQgfSA9IHt9LFxyXG4gICAgKSB7fVxyXG5cclxuICAgIHN0YXRpYyB3YWl0Rm9yUmVhY3QgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgd2hpbGUgKCEoU3BpY2V0aWZ5LlJlYWN0ICYmIFNwaWNldGlmeS5SZWFjdERPTSkpIHNsZWVwKDEwMClcclxuICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG5cclxuICAgIHB1c2hTZXR0aW5ncyA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICB3aGlsZSAoIVNwaWNldGlmeT8uUGxhdGZvcm0/Lkhpc3Rvcnk/Lmxpc3RlbikgYXdhaXQgc2xlZXAoMTAwKVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zdG9wSGlzdG9yeUxpc3RlbmVyKSB0aGlzLnN0b3BIaXN0b3J5TGlzdGVuZXIoKVxyXG5cclxuICAgICAgICB0aGlzLnN0b3BIaXN0b3J5TGlzdGVuZXIgPSBTcGljZXRpZnkuUGxhdGZvcm0uSGlzdG9yeS5saXN0ZW4oKHsgcGF0aG5hbWUgPSBcIlwiIH0pID0+IHtcclxuICAgICAgICAgICAgaWYgKHBhdGhuYW1lID09PSBcIi9wcmVmZXJlbmNlc1wiKSB0aGlzLnJlbmRlcigpXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgaWYgKFNwaWNldGlmeS5QbGF0Zm9ybS5IaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lID09PSBcIi9wcmVmZXJlbmNlc1wiKSBhd2FpdCB0aGlzLnJlbmRlcigpXHJcbiAgICB9XHJcblxyXG4gICAgdG9PYmplY3QgPSAoKSA9PlxyXG4gICAgICAgIG5ldyBQcm94eShcclxuICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGdldDogKHRhcmdldCwgcHJvcCkgPT4gU2V0dGluZ3NTZWN0aW9uLmdldEZpZWxkVmFsdWUodGhpcy5nZXRJZChwcm9wLnRvU3RyaW5nKCkpKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICApXHJcblxyXG4gICAgcmVyZW5kZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0UmVyZW5kZXIpIHRoaXMuc2V0UmVyZW5kZXIoTWF0aC5yYW5kb20oKSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlciA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICB3aGlsZSAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGVza3RvcC5zZXR0aW5ncy5zZWxlY3RMYW5ndWFnZVwiKSkge1xyXG4gICAgICAgICAgICBpZiAoU3BpY2V0aWZ5LlBsYXRmb3JtLkhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUgIT09IFwiL3ByZWZlcmVuY2VzXCIpIHJldHVyblxyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcCgxMDApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBhbGxTZXR0aW5nc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIueC1zZXR0aW5ncy1jb250YWluZXJcIikhXHJcblxyXG4gICAgICAgIGxldCBwbHVnaW5TZXR0aW5nc0NvbnRhaW5lciA9IEFycmF5LmZyb20oYWxsU2V0dGluZ3NDb250YWluZXIuY2hpbGRyZW4pLmZpbmQoKHsgaWQgfSkgPT4gaWQgPT09IHRoaXMuc2VjdGlvbklkKVxyXG5cclxuICAgICAgICBpZiAoIXBsdWdpblNldHRpbmdzQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHBsdWdpblNldHRpbmdzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG4gICAgICAgICAgICBwbHVnaW5TZXR0aW5nc0NvbnRhaW5lci5pZCA9IHRoaXMuc2VjdGlvbklkXHJcbiAgICAgICAgICAgIHBsdWdpblNldHRpbmdzQ29udGFpbmVyLmNsYXNzTmFtZSA9IFwic2V0dGluZ3NDb250YWluZXJcIlxyXG4gICAgICAgICAgICBhbGxTZXR0aW5nc0NvbnRhaW5lci5hcHBlbmRDaGlsZChwbHVnaW5TZXR0aW5nc0NvbnRhaW5lcilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFJlYWN0RE9NLnJlbmRlcig8dGhpcy5GaWVsZHNDb250YWluZXIgLz4sIHBsdWdpblNldHRpbmdzQ29udGFpbmVyKVxyXG4gICAgfVxyXG5cclxuICAgIGFkZEJ1dHRvbiA9IChcclxuICAgICAgICBuYW1lSWQ6IHN0cmluZyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogc3RyaW5nLFxyXG4gICAgICAgIHRleHQ6IHN0cmluZyxcclxuICAgICAgICBvbkNsaWNrOiAoZTogUmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudCwgTW91c2VFdmVudD4pID0+IHZvaWQgPSBjb25zdFZvaWQsXHJcbiAgICAgICAgZXZlbnRzOiBCdXR0b25GaWVsZFtcImV2ZW50c1wiXSA9IHt9LFxyXG4gICAgKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmdldElkKG5hbWVJZClcclxuXHJcbiAgICAgICAgZXZlbnRzLm9uQ2xpY2sgPSBvbkNsaWNrXHJcblxyXG4gICAgICAgIHRoaXMuc2VjdGlvbkZpZWxkc1tuYW1lSWRdID0ge1xyXG4gICAgICAgICAgICBpZCxcclxuICAgICAgICAgICAgdHlwZTogRmllbGRUeXBlLkJVVFRPTixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgIHRleHQsXHJcbiAgICAgICAgICAgIGV2ZW50cyxcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuXHJcbiAgICBhZGRUb2dnbGUgPSAoXHJcbiAgICAgICAgbmFtZUlkOiBzdHJpbmcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcclxuICAgICAgICBkZWZhdWx0VmFsdWUgPSB0YXNrLm9mKHRydWUpLFxyXG4gICAgICAgIG9uQ2hhbmdlOiAoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQgPSBjb25zdFZvaWQsXHJcbiAgICAgICAgZXZlbnRzOiBUb2dnbGVGaWVsZFtcImV2ZW50c1wiXSA9IHt9LFxyXG4gICAgKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmdldElkKG5hbWVJZClcclxuXHJcbiAgICAgICAgU2V0dGluZ3NTZWN0aW9uLnNldERlZmF1bHRGaWVsZFZhbHVlKGlkLCBkZWZhdWx0VmFsdWUpXHJcblxyXG4gICAgICAgIGV2ZW50cy5vbkNoYW5nZSA9IG9uQ2hhbmdlXHJcbiAgICAgICAgdGhpcy5zZWN0aW9uRmllbGRzW25hbWVJZF0gPSB7XHJcbiAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICB0eXBlOiBGaWVsZFR5cGUuVE9HR0xFLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgZXZlbnRzLFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG5cclxuICAgIGFkZElucHV0ID0gKFxyXG4gICAgICAgIG5hbWVJZDogc3RyaW5nLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXHJcbiAgICAgICAgZGVmYXVsdFZhbHVlOiB0YXNrLlRhc2s8c3RyaW5nPixcclxuICAgICAgICBvbkNoYW5nZTogKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkID0gY29uc3RWb2lkLFxyXG4gICAgICAgIGlucHV0VHlwZSA9IFwidGV4dFwiLFxyXG4gICAgICAgIGV2ZW50czogSW5wdXRGaWVsZFtcImV2ZW50c1wiXSA9IHt9LFxyXG4gICAgKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmdldElkKG5hbWVJZClcclxuXHJcbiAgICAgICAgU2V0dGluZ3NTZWN0aW9uLnNldERlZmF1bHRGaWVsZFZhbHVlKGlkLCBkZWZhdWx0VmFsdWUpXHJcblxyXG4gICAgICAgIGV2ZW50cy5vbkNoYW5nZSA9IG9uQ2hhbmdlXHJcbiAgICAgICAgdGhpcy5zZWN0aW9uRmllbGRzW25hbWVJZF0gPSB7XHJcbiAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICB0eXBlOiBGaWVsZFR5cGUuSU5QVVQsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICBpbnB1dFR5cGUsXHJcbiAgICAgICAgICAgIGV2ZW50cyxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcblxyXG4gICAgYWRkRHJvcERvd24gPSAoXHJcbiAgICAgICAgbmFtZUlkOiBzdHJpbmcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcclxuICAgICAgICBvcHRpb25zOiBzdHJpbmdbXSxcclxuICAgICAgICBkZWZhdWx0VmFsdWUgPSB0YXNrLm9mKDApLFxyXG4gICAgICAgIG9uQ2hhbmdlOiAoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTFNlbGVjdEVsZW1lbnQ+KSA9PiB2b2lkID0gY29uc3RWb2lkLFxyXG4gICAgICAgIGV2ZW50czogRHJvcGRvd25GaWVsZFtcImV2ZW50c1wiXSA9IHt9LFxyXG4gICAgKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmdldElkKG5hbWVJZClcclxuXHJcbiAgICAgICAgU2V0dGluZ3NTZWN0aW9uLnNldERlZmF1bHRGaWVsZFZhbHVlKGlkLCBkZWZhdWx0VmFsdWUpXHJcblxyXG4gICAgICAgIGV2ZW50cy5vbkNoYW5nZSA9IG9uQ2hhbmdlXHJcbiAgICAgICAgdGhpcy5zZWN0aW9uRmllbGRzW25hbWVJZF0gPSB7XHJcbiAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICB0eXBlOiBGaWVsZFR5cGUuRFJPUERPV04sXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICBvcHRpb25zLFxyXG4gICAgICAgICAgICBldmVudHMsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcblxyXG4gICAgYWRkSGlkZGVuID0gKG5hbWVJZDogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IGFueSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5nZXRJZChuYW1lSWQpXHJcblxyXG4gICAgICAgIFNldHRpbmdzU2VjdGlvbi5zZXREZWZhdWx0RmllbGRWYWx1ZShpZCwgZGVmYXVsdFZhbHVlKVxyXG5cclxuICAgICAgICB0aGlzLnNlY3Rpb25GaWVsZHNbbmFtZUlkXSA9IHtcclxuICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgIHR5cGU6IEZpZWxkVHlwZS5ISURERU4sXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG5cclxuICAgIGdldElkID0gKG5hbWVJZDogc3RyaW5nKSA9PiBgZXh0ZW5zaW9uczoke3RoaXMuc2VjdGlvbklkfToke25hbWVJZH1gXHJcblxyXG4gICAgcHJpdmF0ZSB1c2VTdGF0ZUZvciA9IDxBLD4oaWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZShTZXR0aW5nc1NlY3Rpb24uZ2V0RmllbGRWYWx1ZTxBPihpZCkpXHJcblxyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICAobmV3VmFsdWU6IEEpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWVTdGF0ZShuZXdWYWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICBTZXR0aW5nc1NlY3Rpb24uc2V0RmllbGRWYWx1ZShpZCEsIG5ld1ZhbHVlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF0gYXMgY29uc3RcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0RmllbGRWYWx1ZSA9IDxSLD4oaWQ6IHN0cmluZyk6IFIgPT4ge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKFNwaWNldGlmeS5Mb2NhbFN0b3JhZ2UuZ2V0KGlkKSA/PyBcIm51bGxcIikgLy8gXCJudWxsXCIgaXMgcGFyc2VkIGFzIG51bGwsIHRoZSBtb3JlIHlvdSBrbm93XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHNldEZpZWxkVmFsdWUgPSAoaWQ6IHN0cmluZywgbmV3VmFsdWU6IGFueSkgPT4ge1xyXG4gICAgICAgIFNwaWNldGlmeS5Mb2NhbFN0b3JhZ2Uuc2V0KGlkLCBKU09OLnN0cmluZ2lmeShuZXdWYWx1ZSkpXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgc2V0RGVmYXVsdEZpZWxkVmFsdWUgPSBhc3luYyAoaWQ6IHN0cmluZywgZGVmYXVsdFZhbHVlOiB0YXNrLlRhc2s8YW55PikgPT4ge1xyXG4gICAgICAgIGlmIChTZXR0aW5nc1NlY3Rpb24uZ2V0RmllbGRWYWx1ZShpZCkgPT09IG51bGwpIFNldHRpbmdzU2VjdGlvbi5zZXRGaWVsZFZhbHVlKGlkLCBhd2FpdCBkZWZhdWx0VmFsdWUoKSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIEZpZWxkc0NvbnRhaW5lciA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBbcmVyZW5kZXIsIHNldFJlcmVuZGVyXSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4oMClcclxuICAgICAgICB0aGlzLnNldFJlcmVuZGVyID0gc2V0UmVyZW5kZXJcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ4LXNldHRpbmdzLXNlY3Rpb25cIiBrZXk9e3JlcmVuZGVyfT5cclxuICAgICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJUeXBlX19UeXBlRWxlbWVudC1zYy1nb2xpM2otMCBUeXBlRWxlbWVudC1jZWxsby10ZXh0QmFzZS10eXBlXCI+e3RoaXMubmFtZX08L2gyPlxyXG4gICAgICAgICAgICAgICAge09iamVjdC5lbnRyaWVzKHRoaXMuc2VjdGlvbkZpZWxkcykubWFwKChbbmFtZUlkLCBmaWVsZF0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gPHRoaXMuRmllbGQgZmllbGQ9e2ZpZWxkfSAvPlxyXG4gICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIEZpZWxkID0gKHsgZmllbGQgfTogeyBmaWVsZDogU2V0dGluZ3NGaWVsZCB9KSA9PiB7XHJcbiAgICAgICAgY29uc3QgaXNUeXBlID0gaXM8U2V0dGluZ3NGaWVsZD4oXCJ0eXBlXCIpXHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwieC1zZXR0aW5ncy1yb3dcIj5cclxuICAgICAgICAgICAgICAgIDx0aGlzLlNldHRpbmdEZXNjcmlwdGlvbiBpZD17ZmllbGQuaWR9IGRlc2NyaXB0aW9uPXtmaWVsZC5kZXNjcmlwdGlvbn0gLz5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwieC1zZXR0aW5ncy1zZWNvbmRDb2x1bW5cIj5cclxuICAgICAgICAgICAgICAgICAgICB7Z3VhcmQ0KFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2lzVHlwZTxJbnB1dEZpZWxkPihGaWVsZFR5cGUuSU5QVVQpLCB0aGlzLlNldHRpbmdJbnB1dEZpZWxkXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2lzVHlwZShGaWVsZFR5cGUuQlVUVE9OKSwgdGhpcy5TZXR0aW5nQnV0dG9uRmllbGRdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbaXNUeXBlKEZpZWxkVHlwZS5UT0dHTEUpLCB0aGlzLlNldHRpbmdUb2dnbGVGaWVsZF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFtpc1R5cGUoRmllbGRUeXBlLkRST1BET1dOKSwgdGhpcy5TZXR0aW5nRHJvcGRvd25GaWVsZF0sXHJcbiAgICAgICAgICAgICAgICAgICAgXSkodGhpcy5TZXR0aW5nSGlkZGVuKShmaWVsZCl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgU2V0dGluZ0Rlc2NyaXB0aW9uID0gKHsgaWQsIGRlc2NyaXB0aW9uIH06IHsgaWQ6IHN0cmluZzsgZGVzY3JpcHRpb246IHN0cmluZyB9KSA9PiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ4LXNldHRpbmdzLWZpcnN0Q29sdW1uXCI+XHJcbiAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJUeXBlX19UeXBlRWxlbWVudC1zYy1nb2xpM2otMCBUeXBlRWxlbWVudC12aW9sYS10ZXh0U3ViZHVlZC10eXBlXCIgaHRtbEZvcj17aWR9PlxyXG4gICAgICAgICAgICAgICAge2Rlc2NyaXB0aW9ufVxyXG4gICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG5cclxuICAgIHByaXZhdGUgU2V0dGluZ0J1dHRvbkZpZWxkID0gKGZpZWxkOiBCdXR0b25GaWVsZCkgPT4gKFxyXG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIlwiPlxyXG4gICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICBpZD17ZmllbGQuaWR9XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJCdXR0b24tc2MteTBndGJ4LTAgQnV0dG9uLXNtLWJ1dHRvblNlY29uZGFyeS11c2VCcm93c2VyRGVmYXVsdEZvY3VzU3R5bGUgeC1zZXR0aW5ncy1idXR0b25cIlxyXG4gICAgICAgICAgICAgICAgey4uLmZpZWxkLmV2ZW50c31cclxuICAgICAgICAgICAgICAgIHR5cGU9e2ZpZWxkLnR5cGV9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHtmaWVsZC50ZXh0fVxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8L3NwYW4+XHJcbiAgICApXHJcblxyXG4gICAgcHJpdmF0ZSBTZXR0aW5nVG9nZ2xlRmllbGQgPSAoZmllbGQ6IFRvZ2dsZUZpZWxkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB0aGlzLnVzZVN0YXRlRm9yPGJvb2xlYW4+KGZpZWxkLmlkKVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwieC1zZXR0aW5ncy1zZWNvbmRDb2x1bW4geC10b2dnbGUtd3JhcHBlclwiPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9e2ZpZWxkLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIngtdG9nZ2xlLWlucHV0XCJcclxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e1NldHRpbmdzU2VjdGlvbi5nZXRGaWVsZFZhbHVlKGZpZWxkLmlkKX1cclxuICAgICAgICAgICAgICAgICAgICB7Li4uZmllbGQuZXZlbnRzfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoZS5jdXJyZW50VGFyZ2V0LmNoZWNrZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLmV2ZW50cy5vbkNoYW5nZT8uKGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ4LXRvZ2dsZS1pbmRpY2F0b3JXcmFwcGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwieC10b2dnbGUtaW5kaWNhdG9yXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIFNldHRpbmdJbnB1dEZpZWxkID0gKGZpZWxkOiBJbnB1dEZpZWxkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB0aGlzLnVzZVN0YXRlRm9yPHN0cmluZz4oZmllbGQuaWQpXHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwieC1zZXR0aW5ncy1pbnB1dFwiXHJcbiAgICAgICAgICAgICAgICBpZD17ZmllbGQuaWR9XHJcbiAgICAgICAgICAgICAgICBkaXI9XCJsdHJcIlxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e1NldHRpbmdzU2VjdGlvbi5nZXRGaWVsZFZhbHVlKGZpZWxkLmlkKX1cclxuICAgICAgICAgICAgICAgIHR5cGU9e2ZpZWxkLmlucHV0VHlwZX1cclxuICAgICAgICAgICAgICAgIHsuLi5maWVsZC5ldmVudHN9XHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoZS5jdXJyZW50VGFyZ2V0LnZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkLmV2ZW50cy5vbkNoYW5nZT8uKGUpXHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIClcclxuICAgIH1cclxuICAgIHByaXZhdGUgU2V0dGluZ0Ryb3Bkb3duRmllbGQgPSAoZmllbGQ6IERyb3Bkb3duRmllbGQpID0+IHtcclxuICAgICAgICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IHRoaXMudXNlU3RhdGVGb3I8bnVtYmVyPihmaWVsZC5pZClcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHNlbGVjdFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibWFpbi1kcm9wRG93bi1kcm9wRG93blwiXHJcbiAgICAgICAgICAgICAgICBpZD17ZmllbGQuaWR9XHJcbiAgICAgICAgICAgICAgICB7Li4uZmllbGQuZXZlbnRzfVxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKGUuY3VycmVudFRhcmdldC5zZWxlY3RlZEluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkLmV2ZW50cy5vbkNoYW5nZT8uKGUpXHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7ZmllbGQub3B0aW9ucy5tYXAoKG9wdGlvbiwgaSkgPT4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gc2VsZWN0ZWQ9e2kgPT09IFNldHRpbmdzU2VjdGlvbi5nZXRGaWVsZFZhbHVlKGZpZWxkLmlkKX0gdmFsdWU9e2kgKyAxfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge29wdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBTZXR0aW5nSGlkZGVuID0gKCkgPT4gPD48Lz5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGVudW0gRmllbGRUeXBlIHtcclxuICAgIEhJRERFTiA9IFwiaGlkZGVuXCIsXHJcbiAgICBJTlBVVCA9IFwiaW5wdXRcIixcclxuICAgIERST1BET1dOID0gXCJkcm9wZG93blwiLFxyXG4gICAgQlVUVE9OID0gXCJidXR0b25cIixcclxuICAgIFRPR0dMRSA9IFwidG9nZ2xlXCIsXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUZpZWxkPEE+IHtcclxuICAgIGlkOiBzdHJpbmdcclxuICAgIHR5cGU6IEZpZWxkVHlwZVxyXG4gICAgZGVzY3JpcHRpb246IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJ1dHRvbkZpZWxkIGV4dGVuZHMgQmFzZUZpZWxkPG5ldmVyPiB7XHJcbiAgICB0eXBlOiBGaWVsZFR5cGUuQlVUVE9OXHJcbiAgICB0ZXh0OiBzdHJpbmdcclxuICAgIGV2ZW50czogUGFydGlhbDxSZWFjdC5CdXR0b25IVE1MQXR0cmlidXRlczxIVE1MQnV0dG9uRWxlbWVudD4+XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVG9nZ2xlRmllbGQgZXh0ZW5kcyBCYXNlRmllbGQ8Ym9vbGVhbj4ge1xyXG4gICAgdHlwZTogRmllbGRUeXBlLlRPR0dMRVxyXG4gICAgZXZlbnRzOiBQYXJ0aWFsPFJlYWN0LklucHV0SFRNTEF0dHJpYnV0ZXM8SFRNTElucHV0RWxlbWVudD4+XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRGaWVsZCBleHRlbmRzIEJhc2VGaWVsZDxzdHJpbmc+IHtcclxuICAgIHR5cGU6IEZpZWxkVHlwZS5JTlBVVFxyXG4gICAgaW5wdXRUeXBlOiBzdHJpbmdcclxuICAgIGV2ZW50czogUGFydGlhbDxSZWFjdC5JbnB1dEhUTUxBdHRyaWJ1dGVzPEhUTUxJbnB1dEVsZW1lbnQ+PlxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERyb3Bkb3duRmllbGQgZXh0ZW5kcyBCYXNlRmllbGQ8bnVtYmVyPiB7XHJcbiAgICB0eXBlOiBGaWVsZFR5cGUuRFJPUERPV05cclxuICAgIG9wdGlvbnM6IHN0cmluZ1tdXHJcbiAgICBldmVudHM6IFBhcnRpYWw8UmVhY3QuU2VsZWN0SFRNTEF0dHJpYnV0ZXM8SFRNTFNlbGVjdEVsZW1lbnQ+PlxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEhpZGRlbkZpZWxkIGV4dGVuZHMgQmFzZUZpZWxkPGFueT4ge1xyXG4gICAgdHlwZTogRmllbGRUeXBlLkhJRERFTlxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBTZXR0aW5nc0ZpZWxkID0gSGlkZGVuRmllbGQgfCBEcm9wZG93bkZpZWxkIHwgSW5wdXRGaWVsZCB8IEJ1dHRvbkZpZWxkIHwgVG9nZ2xlRmllbGRcclxuIl0sCiAgIm1hcHBpbmdzIjogIkFBQUEsT0FBUyxTQUFTQSxFQUFHLFVBQVVDLEdBQUssWUFBWUMsTUFBUyx1QkNBekQsT0FDSSxTQUFTQyxFQUNULE1BQUFDLEVBQ0EsVUFBVUMsRUFDVixVQUFVQyxHQUVWLGFBQWFDLEdBQ2IsWUFBWUMsTUFDVCx1QkFDUCxPQUFTLFNBQUFDLEVBQU8sV0FBQUMsTUFBZSxvQ0FReEIsSUFBTUMsRUFDVEMsR0FFQUMsRUFDSUQsQ0FNSixFQTJCRyxJQUFNRSxFQUNGQyxHQUNQLE1BQU9DLEdBQ0hELEVBQUUsTUFBTUMsQ0FBRSxFQUVMQyxFQUNMQyxHQUNVQyxHQUNiQyxHQUNHQSxFQUFNRixDQUFDLElBQU1DLEVBU2QsSUFBTUUsRUFDUkMsR0FDTUMsR0FDSEMsRUFBRSxLQUFLQyxFQUFHLFNBQVNILENBQUMsRUFBTUcsRUFBRyxJQUFJRixDQUFDLEVBQUdHLEdBQU0sUUFBUSxJQUFJQSxDQUFFLEVBQUdDLEVBQVFGLEVBQUcsT0FBTyxDQUFDLEVBZ0JoRixJQUFNRyxFQUFnQ0MsR0FDekNDLEVBQUUsS0FBS0QsRUFBSUMsRUFBRSxPQUFRQyxFQUFXQyxFQUFHLFVBQVUsS0FBSyxTQUFTLEVBQUVDLEVBQUksRUFBRSxDQUFDLEVBQUdILEVBQUUsUUFBUSxFQ3ZGckYsT0FBUyxTQUFTSSxHQUFHLFlBQVlDLE1BQVMsdUJBVW5DLElBQU1DLEdBQWEsQ0FDdEIsT0FBUSxDQUNKLE1BQU9ELEVBQUUsU0FBUyxDQUFFLE9BQVEsT0FBUSxDQUFr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QyxFQUFlLFNBQVksQ0FDN0IsSUFBTUMsRUFBYUgsR0FBOEIsRUFDakR0QixFQUFnQixNQUFNMEIsRUFBMEJELENBQVUsRUFFMUQsTUFBTVosR0FBZWIsRUFBYyxNQUFNLEVBQUcsQ0FBQyxDQUFDLENBQ2xELEVBRU1JLEVBQWlCLFNBQVMsY0FBYyxLQUFLLEVBQ25EQSxFQUFlLFVBQVksMkRBQzNCQSxFQUFlLE1BQU0sU0FBVyxTQUNoQ0EsRUFBZSxpQkFBaUIsY0FBZXVCLENBQVUsRUFFekQsVUFBVSxPQUFPLGlCQUFpQixhQUFjSCxDQUFZLEVBQzVEQSxFQUFhLEVBRWIsVUFBVSxTQUFTLFFBQVEsT0FBT0ksQ0FBZ0IsRUFDbERBLEVBQWlCLFVBQVUsU0FBUyxRQUFRLFFBQVEiLAogICJuYW1lcyI6IFsiYSIsICJzdHIiLCAiZiIsICJhciIsICJlcSIsICJzdHIiLCAicmVjIiwgInNnIiwgImYiLCAiZ3VhcmQiLCAibWVtb2l6ZSIsICJndWFyZDQiLCAiYnJhbmNoZXMiLCAiZ3VhcmQiLCAicE1jaGFpbiIsICJmIiwgImZhIiwgImlzIiwgImMiLCAiYSIsICJmaWVsZCIsICJjaHVuY2tpZnkiLCAibiIsICJnIiwgImYiLCAiYXIiLCAicHMiLCAicE1jaGFpbiIsICJtZW1vaXplMiIsICJmbiIsICJmIiwgIm1lbW9pemUiLCAiZXEiLCAic3RyIiwgImEiLCAiZiIsICJTcG90aWZ5TG9jIiwgInVyaSIsICJ1aWQiLCAiZXNjYXBlUmVnZXgiLCAic3RyIiwgInRpdGxlQ2FzZSIsICJsIiwgIndhaXRGb3JFbGVtZW50IiwgInNlbGVjdG9yIiwgInRpbWVvdXQiLCAibG9jYXRpb24iLCAibm90RWwiLCAicmVzb2x2ZSIsICJyZXMiLCAidiIsICJvYnNlcnZlciIsICJlbCIsICJzbGVlcCIsICJtcyIsICJyZXNvbHZlIiwgImZldGNoR1FMQXJ0aXN0UmVsYXRlZCIsICJ1cmkiLCAiZmV0Y2hXZWJBcnRpc3RzU3BvdCIsICJjaHVuY2tpZnkiLCAiaWRzIiwgImZldGNoV2ViUGxheWxpc3RzU3BvdCIsICJpZCIsICJmZXRjaFdlYkFsYnVtc1Nwb3QiLCAiZmV0Y2hXZWJUcmFja3NTcG90IiwgInNlYXJjaFdlYkl0ZW1TcG90IiwgInEiLCAidHlwZSIsICJmZXRjaFdlYlNvdW5kT2ZTcG90aWZ5UGxheWxpc3QiLCAiZ2VucmUiLCAibmFtZSIsICJyZSIsICJlc2NhcGVSZWdleCIsICJpdGVtIiwgImZldGNoVHJhY2tMRk1BUEkiLCAiTEZNQXBpS2V5IiwgImFydGlzdCIsICJ0cmFja05hbWUiLCAibGFzdEZtVXNlcm5hbWUiLCAidXJsIiwgInJlcyIsICJmZXRjaFRyYWNrTEZNQVBJTWVtb2l6ZWQiLCAibWVtb2l6ZTIiLCAiYSIsICJzdHIiLCAiZiIsICJwcmVwZW5kIiwgIlVSSSIsICJ1cGRhdGVBcnRpc3RQYWdlIiwgInBhdGhuYW1lIiwgInVyaSIsICJnZW5yZUNvbnRhaW5lciIsICJmIiwgImdldEFydGlzdHNHZW5yZXNPclJlbGF0ZWQiLCAiYSIsICJnZW5yZSIsICJmZXRjaFdlYlNvdW5kT2ZTcG90aWZ5UGxheWxpc3QiLCAidGl0bGVDYXNlIiwgInBzIiwgInBNY2hhaW4iLCAic3RyIiwgInByZXBlbmQiLCAid2FpdEZvckVsZW1lbnQiLCAiYXJ0aXN0c1VyaXMiLCAic3JjIiwgImdldEFydGlzdHNHZW5yZXMiLCAiZmV0Y2hXZWJBcnRpc3RzU3BvdCIsICJhcnRpc3QiLCAiYWxsR2VucmVzIiwgImZldGNoR1FMQXJ0aXN0UmVsYXRlZCIsICJhY2MiLCAiYXJyNXVyaXMiLCAidGFzayIsICJSZWFjdCIsICJnZW5yZVBvcHVwIiwgInNwb3RpZnlHZW5yZXMiLCAiU3BvdGlmeUdlbnJlc0NvbnRhaW5lciIsICJsYXN0Rm1UYWdzIiwgIkxhc3RGbVRhZ3NDb250YWluZXIiLCAiQnV0dG9uRWxlbWVudCIsICJuYW1lIiwgImNvbG9yIiwgIm9uQ2xpY2siLCAidGFzayIsICJ2YWx1ZSIsICJzZXRWYWx1ZSIsICJvcGVuU291bmRPZlBsYXlsaXN0T3JTZWFyY2hSZXN1bHRzIiwgInF1ZXJ5IiwgInVyaSIsICJmZXRjaFdlYlNvdW5kT2ZTcG90aWZ5UGxheWxpc3QiLCAibiIsICJ0aXRsZUNhc2UiLCAib3BlblBsYXlsaXN0U2VhcmNoUmVzdWx0cyIsICJ0YXNrIiwgInRhc2siLCAiY29uc3RWb2lkIiwgIlJlYWN0IiwgIlJlYWN0RE9NIiwgIlNldHRpbmdzU2VjdGlvbiIsICJfU2V0dGluZ3NTZWN0aW9uIiwgIm5hbWUiLCAic2VjdGlvbklkIiwgInNlY3Rpb25GaWVsZHMiLCAic2xlZXAiLCAicGF0aG5hbWUiLCAidGFyZ2V0IiwgInByb3AiLCAiYWxsU2V0dGluZ3NDb250YWluZXIiLCAicGx1Z2luU2V0dGluZ3NDb250YWluZXIiLCAiaWQiLCAibmFtZUlkIiwgImRlc2NyaXB0aW9uIiwgInRleHQiLCAib25DbGljayIsICJjb25zdFZvaWQiLCAiZXZlbnRzIiwgImRlZmF1bHRWYWx1ZSIsICJ0YXNrIiwgIm9uQ2hhbmdlIiwgImlucHV0VHlwZSIsICJvcHRpb25zIiwgInZhbHVlIiwgInNldFZhbHVlU3RhdGUiLCAibmV3VmFsdWUiLCAicmVyZW5kZXIiLCAic2V0UmVyZW5kZXIiLCAiZmllbGQiLCAiaXNUeXBlIiwgImlzIiwgImd1YXJkNCIsICJzZXRWYWx1ZSIsICJlIiwgIm9wdGlvbiIsICJpIiwgInNldHRpbmdzIiwgIlNldHRpbmdzU2VjdGlvbiIsICJ0YXNrIiwgIkNPTkZJRyIsICJzZWFyY2hQbGF5bGlzdCIsICJxdWVyeSIsICJzcG90aWZ5R2VucmVzIiwgImxhc3RGbVRhZ3MiLCAidXBkYXRlR2VucmVDb250YWluZXIiLCAiZ2VucmVzIiwgImdlbnJlQ29udGFpbmVyIiwgImYiLCAiYSIsICJnZW5yZSIsICJmZXRjaFdlYlNvdW5kT2ZTcG90aWZ5UGxheWxpc3QiLCAidGl0bGVDYXNlIiwgInBzIiwgInBNY2hhaW4iLCAic3RyIiwgInVwZGF0ZUdlbnJlc1VJIiwgInRyYWNrSW5mb0NvbnRhaW5lciIsICJ3YWl0Rm9yRWxlbWVudCIsICJ1cmkiLCAibWV0YWRhdGEiLCAiZmV0Y2hUcmFja0xGTUFQSSIsICJDT05GSUciLCAidHJhY2siLCAibmFtZSIsICJnZXRBcnRpc3RVcmlzRnJvbUN1cnJlbnRUcmFjayIsICJrIiwgInVwZGF0ZUdlbnJlcyIsICJhcnRpc3RVcmlzIiwgImdldEFydGlzdHNHZW5yZXNPclJlbGF0ZWQiLCAiZ2VucmVQb3B1cCIsICJ1cGRhdGVBcnRpc3RQYWdlIl0KfQo=
(async () => {
    if (!document.getElementById("show-the-genres-css")) {
        const el = document.createElement("style")
        el.id = "show-the-genres-css"
        
        el.textContent = ".genres-popup:after{content:\"\";display:table;clear:both}.genres-popup .title{color:var(--spice-text)}.genres-popup .spaced-down{margin-bottom:20px}.genres-popup .login-button{background-color:var(--spice-button);border-radius:8px;border-style:none;color:var(--spice-text);cursor:pointer;font-size:14px;height:40px;margin:10px;padding:5px 10px;text-align:center}.genres-popup .login-button:hover{background-color:var(--spice-button-active)}.main-nowPlayingWidget-trackInfo.main-trackInfo-container{grid-template:\"title title\" \"badges subtitle\" \"genres genres\"/auto 1fr auto}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vZXh0ZW5zaW9ucy9zaG93LXRoZS1nZW5yZXMvYXNzZXRzL3N0eWxlcy5jc3MiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi5nZW5yZXMtcG9wdXA6OmFmdGVye2NvbnRlbnQ6XCJcIjtkaXNwbGF5OnRhYmxlO2NsZWFyOmJvdGh9LmdlbnJlcy1wb3B1cCAudGl0bGV7Y29sb3I6dmFyKC0tc3BpY2UtdGV4dCl9LmdlbnJlcy1wb3B1cCAuc3BhY2VkLWRvd257bWFyZ2luLWJvdHRvbToyMHB4fS5nZW5yZXMtcG9wdXAgLmxvZ2luLWJ1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwaWNlLWJ1dHRvbik7Ym9yZGVyLXJhZGl1czo4cHg7Ym9yZGVyLXN0eWxlOm5vbmU7Y29sb3I6dmFyKC0tc3BpY2UtdGV4dCk7Y3Vyc29yOnBvaW50ZXI7Zm9udC1zaXplOjE0cHg7aGVpZ2h0OjQwcHg7bWFyZ2luOjEwcHg7cGFkZGluZzo1cHggMTBweDt0ZXh0LWFsaWduOmNlbnRlcn0uZ2VucmVzLXBvcHVwIC5sb2dpbi1idXR0b246aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGljZS1idXR0b24tYWN0aXZlKX0ubWFpbi1ub3dQbGF5aW5nV2lkZ2V0LXRyYWNrSW5mby5tYWluLXRyYWNrSW5mby1jb250YWluZXJ7Z3JpZC10ZW1wbGF0ZTpcInRpdGxlIHRpdGxlXCIgXCJiYWRnZXMgc3VidGl0bGVcIiBcImdlbnJlcyBnZW5yZXNcIi9hdXRvIDFmciBhdXRvfSJdLAogICJtYXBwaW5ncyI6ICJBQUFBLENBQUMsWUFBWSxPQUFRLFFBQVEsR0FBRyxRQUFRLE1BQU0sTUFBTSxJQUFJLENBQUMsQ0FBeEQsYUFBc0UsQ0FBQyxNQUFNLE1BQU0sSUFBSSxhQUFhLENBQUMsQ0FBckcsYUFBbUgsQ0FBQyxZQUFZLGNBQWMsSUFBSSxDQUFDLENBQW5KLGFBQWlLLENBQUMsYUFBYSxpQkFBaUIsSUFBSSxnQkFBck0sY0FBbU8sSUFBSSxhQUFhLEtBQUssTUFBTSxJQUFJLGNBQWMsT0FBTyxRQUFRLFVBQVUsS0FBSyxPQUFPLEtBQXRULE9BQWtVLEtBQWxVLFFBQStVLElBQUksS0FBSyxXQUFXLE1BQU0sQ0FBQyxDQUF6VyxhQUF1WCxDQUFyTixZQUFrTyxPQUFPLGlCQUFpQixJQUFJLHNCQUFzQixDQUFDLENBQUMsK0JBQStCLENBQUMseUJBQXlCLGNBQWMsY0FBYyxrQkFBa0IsZUFBZSxDQUFDLEtBQUssSUFBSSxJQUFJIiwKICAibmFtZXMiOiBbXQp9Cg== */\n"
        document.head.appendChild(el)
    }
})()