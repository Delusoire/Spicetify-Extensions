{
  "version": 3,
  "sources": ["../../shared/fp.ts", "../../shared/util.ts", "../../shared/api.ts", "../../shared/modules.ts", "../../shared/settings.tsx", "../../extensions/vaultify/settings.ts", "../../extensions/vaultify/app.ts"],
  "sourcesContent": ["import {\r\n    array as ar,\r\n    eq,\r\n    string as str,\r\n    record as rec,\r\n    refinement as ref,\r\n    semigroup as sg,\r\n    function as f,\r\n} from \"https://esm.sh/fp-ts\"\r\nimport { guard, memoize } from \"https://esm.sh/fp-ts-std/Function\"\r\n\r\ntype refineBranch<A, B extends A, R> = [ref.Refinement<A, B>, (x: B) => R]\r\nexport const guard2 = <A, A1 extends A, A2 extends A, R>(branches: [refineBranch<A, A1, R>, refineBranch<A, A2, R>]) =>\r\n    guard(branches as unknown as [refineBranch<A, A, R>, refineBranch<A, A, R>])\r\nexport const guard3 = <A, A1 extends A, A2 extends A, A3 extends A, R>(\r\n    branches: [refineBranch<A, A1, R>, refineBranch<A, A2, R>, refineBranch<A, A3, R>],\r\n) => guard(branches as unknown as [refineBranch<A, A, R>, refineBranch<A, A, R>, refineBranch<A, A, R>])\r\n\r\nexport const objConcat2 = <A1, A2>() => rec.getUnionSemigroup(sg.first<any>()).concat as (x: A1, y: A2) => A1 & A2\r\nexport const objConcat = <A>() => ar.reduce({} as A, objConcat2<A, A>())\r\n\r\ntype async = {\r\n    <A, B>(f: (a: A) => Promise<B>): (fa: Promise<A>) => Promise<B>\r\n    <A, B>(f: (a: A) => B): (fa: Promise<A>) => Promise<B>\r\n}\r\nexport const pMchain: async =\r\n    <A, R>(f: (a: A) => R) =>\r\n    async (fa: A) =>\r\n        f(await fa)\r\n\r\nexport const is =\r\n    <A>(c: keyof A) =>\r\n    <B extends A>(a: A[typeof c]) =>\r\n    (field: A): field is B =>\r\n        field[c] === a\r\n\r\nexport const tapAny =\r\n    <A>(f: (a: A) => void) =>\r\n    (fa: A) => {\r\n        f(fa)\r\n        return fa\r\n    }\r\n\r\nexport const chunckify =\r\n    (n: number) =>\r\n    <A, R>(g: (a: A[]) => Promise<R[]>) =>\r\n        f.flow(ar.chunksOf(n)<A>, ar.map(g), ps => Promise.all(ps), pMchain(ar.flatten))\r\n\r\nexport const withProgress =\r\n    <F extends (f: (...a: any) => any) => (fa: any) => any>(map: F) =>\r\n    (f: Parameters<F>[0]) =>\r\n    (fa: Parameters<ReturnType<F>>[0]): ReturnType<ReturnType<F>> => {\r\n        let i = 0\r\n        return map(async (...a: Parameters<Parameters<F>[0]>) => {\r\n            // @ts-expect-error: Fuck me\r\n            const ret = await f(...a)\r\n            const progress = Math.round((i++ / Object.values(fa).length) * 100)\r\n            Spicetify.showNotification(`Loading: ${progress}%`, false, 200)\r\n            return ret\r\n        })(fa)\r\n    }\r\n\r\nexport const memoize2 = <A extends any[], R>(fn: (...args: A) => R) =>\r\n    f.pipe(fn, f.tupled, memoize<A>(eq.contramap(JSON.stringify)(str.Eq)), f.untupled)\r\n", "import { array as a, function as f } from \"https://esm.sh/fp-ts\"\r\n\r\nexport type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nexport type SpotifyLocObj = {\r\n    before?: \"start\" | { uri: SpotifyURI } | { uid: string }\r\n    after?: \"end\" | { uri: SpotifyURI } | { uid: string }\r\n}\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: f.constant({ before: \"start\" } as SpotifyLocObj),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: f.constant({ after: \"end\" } as SpotifyLocObj),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const escapeRegex = (str: string) => str.replace(/[.*+?^${}()|[\\]\\\\]/g, `\\\\$&`)\r\n\r\nexport const titleCase = (str: string) => str.replace(/\\b\\w/g, l => l.toUpperCase())\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 1000,\r\n    location = document.body,\r\n    notEl?: E,\r\n) =>\r\n    new Promise((resolve: (value: Element) => void, reject) => {\r\n        const onMutation = () => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el) {\r\n                if (notEl && el === notEl) {\r\n                } else {\r\n                    observer.disconnect()\r\n                    return resolve(el)\r\n                }\r\n            }\r\n        }\r\n\r\n        const observer = new MutationObserver(onMutation)\r\n        onMutation()\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout)\r\n            setTimeout(() => {\r\n                observer.disconnect()\r\n                reject()\r\n            }, timeout)\r\n    })\r\n\r\nexport const trapElement = <E extends Element>(\r\n    selector: string,\r\n    callback: (el: E | null, lastEl: E | null) => void,\r\n    location = document.body,\r\n) => {\r\n    let lastEl: E | null = null\r\n\r\n    const observer = new MutationObserver(() => {\r\n        const el = document.querySelector<E>(selector)\r\n        if (el !== lastEl) callback(el, lastEl)\r\n        lastEl = el\r\n    })\r\n\r\n    observer.observe(location, {\r\n        childList: true,\r\n        subtree: true,\r\n    })\r\n}\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const getReactProps = (element: Element) =>\r\n    element[Object.keys(element).find(k => k.startsWith(\"__reactProps$\")) as keyof typeof element]\r\n\r\nexport const createQueueItem = (queued: boolean) => (uri: SpotifyURI) => ({\r\n    contextTrack: {\r\n        uri,\r\n        uid: \"\",\r\n        metadata: {\r\n            is_queued: queued.toString(),\r\n        },\r\n    },\r\n    removed: [],\r\n    blocked: [],\r\n    provider: queued ? \"queue\" : \"context\",\r\n})\r\n\r\nexport const setQueue = async (nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>) => {\r\n    const { _queue, _client } = Spicetify.Platform.PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    return _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    }) as Promise<{ error: number; reasons: string }>\r\n}\r\n\r\nexport const setPlayingContext = (uri: SpotifyURI) => {\r\n    const { sessionId } = Spicetify.Platform.PlayerAPI.getState()\r\n    return Spicetify.Platform.PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri }) as Promise<undefined>\r\n}\r\n\r\nexport const onHistoryChanged = (\r\n    toMatchTo: string | RegExp | ((location: string) => boolean),\r\n    callback: (uri: SpotifyURI) => void,\r\n    dropDuplicates = true,\r\n) => {\r\n    const createMatchFn = (toMatchTo: string | RegExp | ((input: string) => boolean)) => {\r\n        switch (typeof toMatchTo) {\r\n            case \"string\":\r\n                return (input: string) => input?.startsWith(toMatchTo) ?? false\r\n\r\n            case \"function\":\r\n                return toMatchTo\r\n\r\n            default:\r\n                return (input: string) => toMatchTo.test(input)\r\n        }\r\n    }\r\n\r\n    let lastPathname = \"\"\r\n    const matchFn = createMatchFn(toMatchTo)\r\n\r\n    const historyChanged = ({ pathname }: any) => {\r\n        if (matchFn(pathname)) {\r\n            if (dropDuplicates && lastPathname === pathname) {\r\n            } else callback(Spicetify.URI.fromString(pathname).toString())\r\n        }\r\n        lastPathname = pathname\r\n    }\r\n\r\n    historyChanged(Spicetify.Platform.History.location ?? {})\r\n    Spicetify.Platform.History.listen(historyChanged)\r\n}\r\n\r\nexport const onSongChanged = (callback: (data?: Spicetify.PlayerState) => void) => {\r\n    callback(Spicetify.Player.data)\r\n    Spicetify.Player.addEventListener(\"songchange\", event => callback(event!.data))\r\n}\r\n", "import { chunckify, memoize2 } from \"./fp.ts\"\r\nimport { SpotifyID, SpotifyLocObj, SpotifyURI, escapeRegex } from \"./util.ts\"\r\nimport { array as a, function as f } from \"https://esm.sh/fp-ts\"\r\n\r\n/*                          GraphQL                                           */\r\n\r\nexport const fetchGQLAlbum = async (uri: SpotifyURI, offset = 0, limit = 487) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.getAlbum, {\r\n            uri,\r\n            locale: Spicetify.Locale.getLocale(),\r\n            offset,\r\n            limit,\r\n        })\r\n    ).data.albumUnion as fetchGQLAlbumRes\r\n\r\ntype fetchArtistGQLRes = any\r\nexport const fetchGQLArtistOverview = async (uri: SpotifyURI) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistOverview, {\r\n            uri,\r\n            locale: Spicetify.Locale.getLocale(),\r\n            includePrerelease: true,\r\n        })\r\n    ).data.artistUnion as fetchArtistGQLRes\r\n\r\ntype fetchGQLArtistDiscographyRes = any\r\nexport const fetchGQLArtistDiscography = async (uri: SpotifyURI, offset = 0, limit = 116) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistDiscographyAll, {\r\n            uri,\r\n            offset,\r\n            limit,\r\n        })\r\n    ).data.artistUnion.discography.all.items as fetchGQLArtistDiscographyRes\r\n\r\nexport const fetchGQLArtistRelated = async (uri: SpotifyURI) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistRelated, {\r\n            uri,\r\n            locale: Spicetify.Locale.getLocale(),\r\n        })\r\n    ).data.artistUnion.relatedContent.relatedArtists.items as fetchGQLArtistRelatedRes\r\n\r\n/*                          Spotify Web API                                   */\r\n\r\nexport const removeWebPlaylistTracks = async (playlist: SpotifyID, tracks: SpotifyURI[]) =>\r\n    Spicetify.CosmosAsync.del(`https://api.spotify.com/v1/playlists/${playlist}/tracks`, {\r\n        tracks: tracks.map(uri => ({ uri })),\r\n    })\r\n\r\nexport const fetchWebArtistsSpot = chunckify(50)(\r\n    async (ids: SpotifyID[]) =>\r\n        (await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${ids.join(\",\")}`))\r\n            .artists as SpotApiArtist[],\r\n)\r\n\r\nexport const fetchWebPlaylistsSpot = chunckify(1)(\r\n    // @ts-ignore chunkify will never call with empty array\r\n    async ([id]: [SpotifyID]) => [\r\n        (await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${id}`)) as SpotApiPlaylist,\r\n    ],\r\n)\r\nexport const fetchWebAlbumsSpot = chunckify(50)(\r\n    async (ids: SpotifyID[]) =>\r\n        (await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${ids.join(\",\")}`))\r\n            .albums as SpotApiAlbum[],\r\n)\r\n\r\nexport const fetchWebTracksSpot = chunckify(50)(\r\n    async (ids: SpotifyID[]) =>\r\n        (await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${ids.join(\",\")}`))\r\n            .tracks as SpotApiTrack[],\r\n)\r\n\r\nexport const searchWebItemSpot = async (q: string, type: string[]) =>\r\n    Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/search?q=${encodeURIComponent(q)}&type=${type.join(\",\")}`)\r\n\r\nexport const fetchWebSoundOfSpotifyPlaylist = async (genre: string) => {\r\n    const name = `The Sound Of ${genre}`\r\n    const re = new RegExp(`^${escapeRegex(name)}$`, \"i\")\r\n    const res = await searchWebItemSpot(name, [\"playlist\"])\r\n    const item = res.playlists.items[0]\r\n    return item?.owner.id === \"thesoundsofspotify\" && re.test(item.name) ? item.uri : null\r\n}\r\n\r\n/*                          Platform                                          */\r\n\r\nexport const isPlatTrackLiked = (uris: SpotifyURI[]) =>\r\n    Spicetify.Platform.LibraryAPI.contains(...uris) as Promise<boolean[]>\r\n\r\nexport const setPlatTrackLiked = (uris: SpotifyURI[], liked: boolean) =>\r\n    Spicetify.Platform.LibraryAPI[liked ? \"add\" : \"remove\"]({ uris })\r\n\r\nexport const togglePlatTrackLiked = async (uris: SpotifyURI[]) => {\r\n    const liked = await isPlatTrackLiked(uris)\r\n\r\n    return await f.pipe(\r\n        uris,\r\n        a.reduceWithIndex(\r\n            [[] as SpotifyURI[], [] as SpotifyURI[]] as const,\r\n            (i, acc, uri) => (acc[Number(liked[i])].push(uri), acc),\r\n        ),\r\n        ([toAdd, toRem]) => {\r\n            const ps = []\r\n            if (toAdd.length) ps.push(setPlatTrackLiked(toAdd, true))\r\n            if (toRem.length) ps.push(setPlatTrackLiked(toRem, false))\r\n            return Promise.all(ps)\r\n        },\r\n    )\r\n}\r\n\r\nexport const fetchPlatLikedTracks = async () =>\r\n    (\r\n        await Spicetify.Platform.LibraryAPI.getTracks({\r\n            limit: Number.MAX_SAFE_INTEGER,\r\n        })\r\n    ).items as fetchPlatArtistLikedTracksRes\r\nexport const fetchPlatArtistLikedTracks = async (uri: SpotifyURI, offset = 0, limit = 100) =>\r\n    (await Spicetify.Platform.LibraryAPI.getTracks({ uri, offset, limit })).items as fetchPlatArtistLikedTracksRes\r\n\r\nexport const fetchPlatPlaylistContents = async (uri: SpotifyURI) =>\r\n    (await Spicetify.Platform.PlaylistAPI.getContents(uri)).items as fetchWebPlaylistRes\r\n\r\nexport const createPlatFolder = async (name: string, location: SpotifyLocObj = {}) =>\r\n    await Spicetify.Platform.RootlistAPI.createFolder(name, location)\r\n\r\nexport const addPlatPlaylist = async (playlist: SpotifyURI, folder?: SpotifyURI, addedAt = new Date()) =>\r\n    await Spicetify.Platform.RootlistAPI.add([playlist], { after: { type: \"folder\", addedAt, uri: folder } })\r\n\r\n/* Replaced by createSPPlaylistFromTracks */\r\nexport const createPlatPlaylist = async (name: string, location: SpotifyLocObj = {}) =>\r\n    await Spicetify.Platform.RootlistAPI.createPlaylist(name, location)\r\n\r\nexport const createSPPlaylistFromTracks = (name: string, tracks: SpotifyURI[], folder?: SpotifyURI) =>\r\n    Spicetify.CosmosAsync.post(\"sp://core-playlist/v1/rootlist?responseFormat=protobufJson\", {\r\n        operation: \"create\",\r\n        ...(folder ? { after: folder } : {}),\r\n        name,\r\n        playlist: true,\r\n        uris: tracks,\r\n    })\r\n\r\nexport const setPlatPlaylistVisibility = async (playlist: SpotifyURI, visibleForAll: boolean) =>\r\n    await Spicetify.Platform.PlaylistPermissionsAPI.setBasePermission(playlist, visibleForAll ? \"VIEWER\" : \"BLOCKED\")\r\nexport const setPlatPlaylistPublished = async (playlist: SpotifyURI, published: boolean) =>\r\n    await Spicetify.Platform.RootlistAPI.setPublishedState(playlist, published)\r\n\r\nexport const fetchPlatFolder = async (folder?: SpotifyURI) =>\r\n    (await Spicetify.Platform.RootlistAPI.getContents({ folderUri: folder })) as fetchPlatFolderRes\r\nexport const fetchPlatRootFolder = () => fetchPlatFolder(undefined)\r\n\r\nexport const addPlatPlaylistTracks = async (playlist: SpotifyURI, tracks: SpotifyURI[], location: SpotifyLocObj = {}) =>\r\n    await Spicetify.Platform.PlaylistAPI.add(playlist, tracks, location)\r\n\r\nexport const movePlatPlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    tracks: Array<{ uid: string }>,\r\n    location: SpotifyLocObj = {},\r\n) => await Spicetify.Platform.PlaylistAPI.move(playlist, tracks, location)\r\n\r\nexport const removePlatPlaylistTracks = async (playlist: SpotifyURI, tracks: Array<{ uid: string }>) =>\r\n    Spicetify.Platform.PlaylistAPI.remove(playlist, tracks)\r\n\r\nexport const fetchPlatPlaylistEnhancedSongs300 = async (uri: SpotifyURI, offset = 0, limit = 300) =>\r\n    (await Spicetify.Platform.EnhanceAPI.getPage(uri, /* iteration */ 0, /* sessionId */ 0, offset, limit)).enhancePage\r\n        .pageItems as any[]\r\nexport const fetchPlatPlaylistEnhancedSongs = async (uri: SpotifyURI, offset = 0): Promise<any[]> => {\r\n    const nextPageItems = await fetchPlatPlaylistEnhancedSongs300(uri, offset)\r\n    if (nextPageItems?.length < 300) return nextPageItems\r\n    else return nextPageItems.concat(fetchPlatPlaylistEnhancedSongs(uri, offset + 300))\r\n}\r\n\r\nexport const fetchLocalTracks = async () => await Spicetify.Platform.LocalFilesAPI.getTracks()\r\n\r\n/*                          Non Spotify                                       */\r\n\r\nexport const fetchTrackLFMAPI = async (LFMApiKey: string, artist: string, trackName: string, lastFmUsername = \"\") => {\r\n    const url = new URL(\"https://ws.audioscrobbler.com/2.0/\")\r\n    url.searchParams.append(\"method\", \"track.getInfo\")\r\n    url.searchParams.append(\"api_key\", LFMApiKey)\r\n    url.searchParams.append(\"artist\", artist)\r\n    url.searchParams.append(\"track\", trackName)\r\n    url.searchParams.append(\"format\", \"json\")\r\n    url.searchParams.append(\"username\", lastFmUsername)\r\n\r\n    return (await fetch(url).then(res => res.json())) as fetchTrackLFMAPIRes\r\n}\r\n\r\nexport const fetchTrackLFMAPIMemoized = memoize2(fetchTrackLFMAPI)\r\n\r\nexport const searchYoutube = async (YouTubeApiKey: string, searchString: string) => {\r\n    const url = new URL(\"https://www.googleapis.com/youtube/v3/search\")\r\n    url.searchParams.append(\"part\", \"snippet\")\r\n    url.searchParams.append(\"maxResults\", \"10\")\r\n    url.searchParams.append(\"q\", searchString)\r\n    url.searchParams.append(\"type\", \"video\")\r\n    url.searchParams.append(\"key\", YouTubeApiKey)\r\n\r\n    return (await fetch(url).then(res => res.json())) as any[]\r\n}\r\n\r\n/*                          Types                                             */\r\n\r\nexport interface fetchGQLAlbumRes {\r\n    __typename: \"album\"\r\n    uri: SpotifyURI\r\n    name: string\r\n    artists: {\r\n        totalCount: number\r\n        items: Array<{\r\n            id: string\r\n            uri: SpotifyURI\r\n            profile: {\r\n                name: string\r\n            }\r\n            visuals: {\r\n                avatarImage: {\r\n                    sources: SpotApiImage[]\r\n                }\r\n            }\r\n            sharingInfo: {\r\n                shareUrl: string\r\n            }\r\n        }>\r\n    }\r\n    coverArt: {\r\n        extractedColors: {\r\n            colorRaw: {\r\n                hex: string\r\n            }\r\n            colorLight: {\r\n                hex: string\r\n            }\r\n            colorDark: {\r\n                hex: string\r\n            }\r\n        }\r\n        sources: SpotApiImage[]\r\n    }\r\n    discs: {\r\n        totalCount: number\r\n        items: Array<{\r\n            number: number\r\n            tracks: {\r\n                totalCount: number\r\n            }\r\n        }>\r\n    }\r\n    releases: {\r\n        totalCount: number\r\n        items: Array<{\r\n            uri: SpotifyURI\r\n            name: string\r\n        }>\r\n    }\r\n    type: string\r\n    date: {\r\n        isoString: string\r\n        precision: string\r\n    }\r\n    playability: {\r\n        playable: boolean\r\n        reason: string\r\n    }\r\n    label: string\r\n    copyright: {\r\n        totalCount: number\r\n        items: Array<{\r\n            type: string\r\n            text: string\r\n        }>\r\n    }\r\n    courtesyLine: string\r\n    saved: boolean\r\n    sharingInfo: {\r\n        shareUrl: string\r\n        shareId: string\r\n    }\r\n    tracks: {\r\n        totalCount: number\r\n        items: Array<{\r\n            uid: string\r\n            track: {\r\n                saved: boolean\r\n                uri: SpotifyURI\r\n                name: string\r\n                playcount: string\r\n                discNumber: number\r\n                trackNumber: number\r\n                contentRating: {\r\n                    label: string\r\n                }\r\n                relinkingInformation: any\r\n                duration: {\r\n                    totalMilliseconds: number\r\n                }\r\n                playability: {\r\n                    playable: boolean\r\n                }\r\n                artists: {\r\n                    items: Array<{\r\n                        uri: SpotifyURI\r\n                        profile: {\r\n                            name: string\r\n                        }\r\n                    }>\r\n                }\r\n            }\r\n        }>\r\n    }\r\n    moreAlbumsByArtist: {\r\n        items: Array<{\r\n            discography: {\r\n                popularReleasesAlbums: {\r\n                    items: Array<{\r\n                        id: string\r\n                        uri: SpotifyURI\r\n                        name: string\r\n                        date: {\r\n                            year: number\r\n                        }\r\n                        coverArt: {\r\n                            sources: SpotApiImage[]\r\n                        }\r\n                        playability: {\r\n                            playable: boolean\r\n                            reason: string\r\n                        }\r\n                        sharingInfo: {\r\n                            shareId: string\r\n                            shareUrl: string\r\n                        }\r\n                        type: string\r\n                    }>\r\n                }\r\n            }\r\n        }>\r\n    }\r\n}\r\n\r\nexport type fetchGQLArtistRelatedRes = Array<{\r\n    id: string\r\n    uri: SpotifyURI\r\n    profile: {\r\n        name: string\r\n    }\r\n    visuals: {\r\n        avatarImage: {\r\n            sources: SpotApiImage[]\r\n        }\r\n    }\r\n}>\r\n\r\nexport type fetchPlatArtistLikedTracksRes = Array<{\r\n    type: string\r\n    uri: string\r\n    name: string\r\n    duration: SpotApiDuration\r\n    album: SpotApiAlbumMin\r\n    artists: SpotApiArtistMin[]\r\n    discNumber: number\r\n    trackNumber: number\r\n    isExplicit: boolean\r\n    isPlayable: boolean\r\n    isLocal: boolean\r\n    is19PlusOnly: boolean\r\n    addedAt: string\r\n}>\r\n\r\nexport type fetchWebPlaylistRes = Array<{\r\n    uid: string\r\n    playIndex: null\r\n    addedAt: string\r\n    addedBy: {\r\n        type: string\r\n        uri: SpotifyURI\r\n        username: string\r\n        displayName: string\r\n        images: SpotApiImage2[]\r\n    }\r\n    formatListAttributes: {}\r\n    type: \"track\"\r\n    uri: SpotifyURI\r\n    name: string\r\n    album: SpotApiAlbumMin\r\n    artists: SpotApiArtistMin[]\r\n    discNumber: number\r\n    trackNumber: number\r\n    duration: SpotApiDuration\r\n    isExplicit: boolean\r\n    isLocal: boolean\r\n    isPlayable: boolean\r\n    is19PlusOnly: boolean\r\n}>\r\n\r\nexport interface fetchTrackLFMAPIRes {\r\n    track: {\r\n        name: string\r\n        mbid: string\r\n        url: string\r\n        duration: string\r\n        streamable: {\r\n            \"#text\": string\r\n            fulltrack: string\r\n        }\r\n        listeners: string\r\n        playcount: string\r\n        artist: {\r\n            name: string\r\n            mbid: string\r\n            url: string\r\n        }\r\n        album: {\r\n            artist: string\r\n            title: string\r\n            mbid: string\r\n            url: string\r\n            image: Array<{\r\n                \"#text\": string\r\n                size: string\r\n            }>\r\n            \"@attr\": {\r\n                position: string\r\n            }\r\n        }\r\n        userplaycount: string\r\n        userloved: string\r\n        toptags: {\r\n            tag: Array<{\r\n                name: string\r\n                url: string\r\n            }>\r\n        }\r\n        wiki: {\r\n            published: string\r\n            summary: string\r\n            content: string\r\n        }\r\n    }\r\n}\r\n\r\n//\r\n\r\nexport interface SpotApiAlbumMin {\r\n    type: \"album\"\r\n    uri: SpotifyURI\r\n    name: string\r\n    artist: SpotApiArtistMin\r\n    images: SpotApiImage2[]\r\n}\r\n\r\nexport interface SpotApiImage2 {\r\n    url: string\r\n    label: \"small\" | \"standard\" | \"large\" | \"xlarge\"\r\n}\r\n\r\nexport interface SpotApiTrack {\r\n    album: SpotApiAlbum\r\n    artists: SpotApiArtist[]\r\n    available_markets: string[]\r\n    disc_number: number\r\n    duration_ms: number\r\n    explicit: boolean\r\n    external_ids: SpotApiEIDs\r\n    external_urls: SpotApiEUrls\r\n    href: string\r\n    id: string\r\n    is_playable: boolean\r\n    linked_from: {}\r\n    restrictions: SpotApiRestrictions\r\n    name: string\r\n    popularity: number\r\n    preview_url: string\r\n    track_number: number\r\n    type: string\r\n    uri: SpotifyURI\r\n    is_local: boolean\r\n}\r\n\r\nexport interface SpotApiArtist {\r\n    external_urls: SpotApiEUrls\r\n    followers: SpotApiFollowers\r\n    genres: string[]\r\n    href: string\r\n    id: string\r\n    images: SpotApiImage[]\r\n    name: string\r\n    popularity: number\r\n    type: string\r\n    uri: SpotifyURI\r\n}\r\n\r\nexport interface SpotApiArtistMin {\r\n    type: \"artist\"\r\n    uri: SpotifyURI\r\n    name: string\r\n}\r\n\r\nexport interface SpotApiAlbum {\r\n    album_type: string\r\n    total_tracks: number\r\n    available_markets: string[]\r\n    external_urls: SpotApiEUrls\r\n    href: string\r\n    id: string\r\n    images: SpotApiImage[]\r\n    name: string\r\n    release_date: string\r\n    release_date_precision: string\r\n    restrictions: SpotApiRestrictions\r\n    type: string\r\n    uri: SpotifyURI\r\n    copyrights: Array<{\r\n        text: string\r\n        type: string\r\n    }>\r\n    external_ids: SpotApiEIDs\r\n    genres: string[]\r\n    label: string\r\n    popularity: number\r\n    album_group: string\r\n    artists: Array<{\r\n        external_urls: SpotApiEUrls\r\n        href: string\r\n        id: string\r\n        name: string\r\n        type: string\r\n        uri: SpotifyURI\r\n    }>\r\n}\r\n\r\nexport interface SpotApiEUrls {\r\n    spotify: string\r\n}\r\n\r\nexport interface SpotApiEIDs {\r\n    isrc: string\r\n    ean: string\r\n    upc: string\r\n}\r\n\r\nexport interface SpotApiImage {\r\n    url: string\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport interface SpotApiRestrictions {\r\n    reason: string\r\n}\r\n\r\nexport interface SpotApiFollowers {\r\n    href: string\r\n    total: number\r\n}\r\nexport interface SpotApiDuration {\r\n    milliseconds: number\r\n}\r\nexport interface SpotApiPlaylist {\r\n    collaborative: boolean\r\n    description: string\r\n    external_urls: SpotApiEUrls\r\n    followers: {\r\n        href: string\r\n        total: number\r\n    }\r\n    href: string\r\n    id: SpotifyID\r\n    images: SpotApiImage[]\r\n    name: string\r\n    owner: SpotApiOwner\r\n    public: boolean\r\n    snapshot_id: string\r\n    tracks: {\r\n        href: string\r\n        limit: number\r\n        next: string\r\n        offset: number\r\n        previous: string\r\n        total: number\r\n        items: Array<{\r\n            added_at: string\r\n            added_by: SpotApiOwner\r\n            is_local: boolean\r\n            track: SpotApiTrack\r\n        }>\r\n    }\r\n    type: string\r\n    uri: SpotifyURI\r\n}\r\n\r\nexport interface SpotApiOwner {\r\n    external_urls: SpotApiEUrls\r\n    followers?: {\r\n        href: string\r\n        total: number\r\n    }\r\n    href: string\r\n    id: SpotifyID\r\n    type: string\r\n    uri: SpotifyURI\r\n    display_name?: string\r\n    name?: string\r\n}\r\n\r\n//TODO: Better TS interface for recursive fetchPlatFolderRes\r\nexport interface fetchPlatFolderRes {\r\n    type: \"folder\" | \"placeholder\" | \"playlist\"\r\n    addedAt: string\r\n    items?: Array<fetchPlatFolderRes>\r\n    name?: string\r\n    uri: string\r\n    description?: string\r\n    images?: SpotApiImage2[]\r\n    madeFor?: null\r\n    owner?: {\r\n        type: \"user\"\r\n        uri: string\r\n        username: string\r\n        displayName: string\r\n        images: any[]\r\n    }\r\n    totalLength?: number\r\n    unfilteredTotalLength?: number\r\n    totalLikes?: null\r\n    duration?: null\r\n    isCollaborative?: boolean\r\n    isLoaded?: boolean\r\n    isOwnedBySelf?: boolean\r\n    isPublished?: boolean\r\n    hasEpisodes?: null\r\n    hasSpotifyTracks?: null\r\n    hasSpotifyAudiobooks?: null\r\n    canAdd?: boolean\r\n    canRemove?: boolean\r\n    canPlay?: null\r\n    formatListData?: {\r\n        type: string\r\n        attributes: { [key: string]: string }\r\n    } | null\r\n    canReportAnnotationAbuse?: boolean\r\n    hasDateAdded?: boolean\r\n    permissions?: null\r\n    collaborators?: {\r\n        count: number\r\n        items: any[]\r\n    }\r\n    isNotFound?: boolean\r\n    isForbidden?: boolean\r\n}\r\n", "import { allPass } from \"https://esm.sh/fp-ts-std@0.18.0/Predicate\"\r\n\r\n// @ts-expect-error webpackChunkOpen is only defined in the browser\r\nconst require = webpackChunkopen.push([[Symbol(\"Dummy module to extract require method\")], {}, re => re])\r\nconst cache = Object.keys(require.m).map(id => require(id))\r\nexport const modules = cache\r\n    .filter((module): module is Object => typeof module === \"object\")\r\n    .flatMap(module => Object.values(module))\r\nexport const functionModules = modules.filter((module): module is Function => typeof module === \"function\")\r\n\r\nexport const reactObjects = modules.filter(m => m?.$$typeof)\r\nconst reactMemoSymbol = Spicetify.React.memo().$$typeof\r\nexport const reactMemos = reactObjects.filter(m => m.$$typeof === reactMemoSymbol)\r\n\r\nconst findModuleByStrings = (modules: Array<any>, ...filters: Array<string | RegExp>) =>\r\n    modules.find(f =>\r\n        allPass(\r\n            filters.map(filter =>\r\n                typeof filter === \"string\" ? (s: string) => s.includes(filter) : (s: string) => filter.test(s),\r\n            ),\r\n        )(f.toString()),\r\n    ) as any\r\n\r\nexport const CheckedPlaylistButtonIcon = findModuleByStrings(\r\n    functionModules,\r\n    \"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z\",\r\n)\r\n\r\nexport const SettingSection = findModuleByStrings(\r\n    functionModules,\r\n    \"function m(e){return(0,d.jsx)(r.k,{children:(0,d.jsx)(u,{...e})})}\",\r\n)\r\nexport const SectionTitle = findModuleByStrings(functionModules, \"textToHighlight\", \"semanticColor\")\r\nexport const SettingColumn = findModuleByStrings(functionModules, \"setSectionFilterMatchQueryValue\", \"filterMatchQuery\")\r\nexport const SettingText = findModuleByStrings(functionModules, \"textSubdued\", \"viola\")\r\nexport const SettingToggle = findModuleByStrings(functionModules, \"condensed\", \"onSelected\")\r\n\r\nexport const curationButtonClass = modules.find(m => m?.curationButton)!.curationButton\r\n", "import { task } from \"https://esm.sh/fp-ts\"\r\nimport { guard3, is } from \"./fp.ts\"\r\nimport { sleep } from \"./util.ts\"\r\nimport { SettingSection, SettingColumn, SettingText, SettingToggle, SectionTitle } from \"./modules.ts\"\r\n\r\nconst { React, ReactDOM } = Spicetify\r\nconst { ButtonSecondary } = Spicetify.ReactComponent as any\r\n\r\ntype FieldToProps<A> = Omit<A, \"type\">\r\n\r\nexport const enum FieldType {\r\n    BUTTON = \"button\",\r\n    TOGGLE = \"toggle\",\r\n    INPUT = \"input\",\r\n    HIDDEN = \"hidden\",\r\n}\r\n\r\nexport interface BaseField {\r\n    id: string\r\n    type: FieldType\r\n    desc: string\r\n}\r\n\r\nexport type SettingsField = HiddenField | InputField | ButtonField | ToggleField\r\n\r\nexport interface ButtonField extends BaseField {\r\n    type: FieldType.BUTTON\r\n    text: string\r\n    onClick?: () => void\r\n}\r\nexport interface ToggleField extends BaseField {\r\n    type: FieldType.TOGGLE\r\n    onSelected?: (checked: boolean) => void\r\n}\r\n\r\nexport interface InputField extends BaseField {\r\n    type: FieldType.INPUT\r\n    inputType: string\r\n    onChange?: (value: string) => void\r\n}\r\n\r\nexport interface HiddenField extends BaseField {\r\n    type: FieldType.HIDDEN\r\n}\r\n\r\nexport class SettingsSection {\r\n    private stopHistoryListener: any\r\n\r\n    constructor(public name: string, public id: string, public sectionFields: { [key: string]: SettingsField } = {}) {}\r\n\r\n    pushSettings = () => {\r\n        if (this.stopHistoryListener) this.stopHistoryListener()\r\n\r\n        this.stopHistoryListener = Spicetify.Platform.History.listen(() => this.render())\r\n        this.render()\r\n    }\r\n\r\n    toObject = () =>\r\n        new Proxy(\r\n            {},\r\n            {\r\n                get: (target, prop) => SettingsSection.getFieldValue(this.getId(prop.toString())),\r\n            },\r\n        )\r\n\r\n    private render = async () => {\r\n        while (!document.getElementById(\"desktop.settings.selectLanguage\")) {\r\n            if (Spicetify.Platform.History.location.pathname !== \"/preferences\") return\r\n            await sleep(100)\r\n        }\r\n\r\n        const allSettingsContainer = document.querySelector(\".x-settings-container\")!\r\n\r\n        let pluginSettingsContainer = Array.from(allSettingsContainer.children).find(({ id }) => id === this.id)\r\n\r\n        if (!pluginSettingsContainer) {\r\n            pluginSettingsContainer = document.createElement(\"div\")\r\n            pluginSettingsContainer.id = this.id\r\n            pluginSettingsContainer.className = \"settingsContainer\"\r\n            allSettingsContainer.appendChild(pluginSettingsContainer)\r\n        }\r\n\r\n        ReactDOM.render(<this.SettingsSection />, pluginSettingsContainer)\r\n    }\r\n\r\n    addButton = (props: FieldToProps<ButtonField>) => {\r\n        this.addField(FieldType.BUTTON, props)\r\n        return this\r\n    }\r\n\r\n    addToggle = (props: FieldToProps<ToggleField>, defaultValue = task.of(false)) => {\r\n        this.addField(FieldType.TOGGLE, props, defaultValue)\r\n        return this\r\n    }\r\n\r\n    addInput = (props: FieldToProps<InputField>, defaultValue = task.of(\"\")) => {\r\n        this.addField(FieldType.INPUT, props, defaultValue)\r\n        return this\r\n    }\r\n\r\n    private addField(type: FieldType, opts: FieldToProps<SettingsField>, defaultValue?: any) {\r\n        if (defaultValue !== undefined) {\r\n            const settingId = this.getId(opts.id)\r\n            SettingsSection.setDefaultFieldValue(settingId, defaultValue)\r\n        }\r\n        const field = Object.assign({}, opts, { type }) as SettingsField\r\n        this.sectionFields[opts.id] = field\r\n    }\r\n\r\n    getId = (nameId: string) => [\"extensions\", this.id, nameId].join(\":\")\r\n\r\n    private useStateFor = <A,>(id: string) => {\r\n        const [value, setValueState] = React.useState(SettingsSection.getFieldValue<A>(id))\r\n\r\n        return [\r\n            value,\r\n            (newValue: A) => {\r\n                if (newValue !== undefined) {\r\n                    setValueState(newValue)\r\n                    SettingsSection.setFieldValue(id!, newValue)\r\n                }\r\n            },\r\n        ] as const\r\n    }\r\n\r\n    static getFieldValue = <R,>(id: string): R => JSON.parse(Spicetify.LocalStorage.get(id) ?? \"null\")\r\n\r\n    static setFieldValue = (id: string, newValue: any) => Spicetify.LocalStorage.set(id, JSON.stringify(newValue))\r\n\r\n    private static setDefaultFieldValue = async (id: string, defaultValue: task.Task<any>) => {\r\n        if (SettingsSection.getFieldValue(id) === null) SettingsSection.setFieldValue(id, await defaultValue())\r\n    }\r\n\r\n    private SettingsSection = () => (\r\n        <SettingSection filterMatchQuery={this.name}>\r\n            <SectionTitle>{this.name}</SectionTitle>\r\n            {Object.values(this.sectionFields).map(field => {\r\n                const isType = is<SettingsField>(\"type\")\r\n\r\n                return guard3([\r\n                    [isType<InputField>(FieldType.INPUT), this.InputField],\r\n                    [isType(FieldType.BUTTON), this.ButtonField],\r\n                    [isType(FieldType.TOGGLE), this.ToggleField],\r\n                ])(() => <></>)(field)\r\n            })}\r\n        </SettingSection>\r\n    )\r\n\r\n    SettingField = ({ field, children }: { field: SettingsField; children?: any }) => (\r\n        <SettingColumn filterMatchQuery={field.id}>\r\n            <div className=\"x-settings-firstColumn\">\r\n                <SettingText htmlFor={field.id}>{field.desc}</SettingText>\r\n            </div>\r\n            <div className=\"x-settings-secondColumn\">{children}</div>\r\n        </SettingColumn>\r\n    )\r\n\r\n    ButtonField = (field: ButtonField) => (\r\n        <this.SettingField field={field}>\r\n            <ButtonSecondary id={field.id} buttonSize=\"sm\" onClick={field.onClick} className=\"x-settings-button\">\r\n                {field.text}\r\n            </ButtonSecondary>\r\n        </this.SettingField>\r\n    )\r\n\r\n    ToggleField = (field: ToggleField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<boolean>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <SettingToggle\r\n                    id={field.id}\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    onSelected={(checked: boolean) => {\r\n                        setValue(checked)\r\n                        field.onSelected?.(checked)\r\n                    }}\r\n                    className=\"x-settings-button\"\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n\r\n    InputField = (field: InputField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<string>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <input\r\n                    className=\"x-settings-input\"\r\n                    id={field.id}\r\n                    dir=\"ltr\"\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    type={field.inputType}\r\n                    onChange={e => {\r\n                        const value = e.currentTarget.value\r\n                        setValue(value)\r\n                        field.onChange?.(value)\r\n                    }}\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n}\r\n", "import { SettingsSection } from \"../../shared/settings.tsx\"\r\nimport { backup, restore } from \"./app.ts\"\r\n\r\nconst settings = new SettingsSection(\"Vaultify\", \"vaultify\")\r\n    .addButton({\r\n        id: \"backup\",\r\n        desc: \"Backup Library, Extensions and Settings\",\r\n        text: \"Backup to clipboard\",\r\n        onClick: backup,\r\n    })\r\n    .addButton({\r\n        id: \"restoreLibrary\",\r\n        desc: \"Restore Library\",\r\n        text: \"Restore from clipboard\",\r\n        onClick: restore(\"library\"),\r\n    })\r\n    .addButton({\r\n        id: \"restoreExtensions\",\r\n        desc: \"Restore Extensions\",\r\n        text: \"Restore from clipboard\",\r\n        onClick: restore(\"extensions\"),\r\n    })\r\n    .addButton({\r\n        id: \"restoreSettings\",\r\n        desc: \"Restore Settings\",\r\n        text: \"Restore from clipboard\",\r\n        onClick: restore(\"settings\"),\r\n    })\r\n\r\nsettings.pushSettings()\r\n", "import { array as ar, function as f, record as rec, task } from \"https://esm.sh/fp-ts\"\r\nimport {\r\n    addPlatPlaylist,\r\n    createPlatFolder,\r\n    createSPPlaylistFromTracks,\r\n    fetchPlatPlaylistContents,\r\n    fetchPlatRootFolder,\r\n    setPlatTrackLiked,\r\n} from \"../../shared/api.ts\"\r\nimport { guard2, is, pMchain } from \"../../shared/fp.ts\"\r\nimport { SpotifyLoc, SpotifyURI, getReactProps } from \"../../shared/util.ts\"\r\nimport { Folder, Playlist, PoF } from \"./util.ts\"\r\n\r\nconst isType = is<PoF>(\"type\")\r\nconst extractLikedPlaylistTreeRecur = (leaf: PoF) =>\r\n    guard2<PoF, Playlist, Folder, Promise<{}>>([\r\n        [\r\n            isType(\"playlist\"),\r\n            async playlist => ({\r\n                [playlist.name]: playlist.isOwnedBySelf\r\n                    ? await f.pipe(playlist.uri, fetchPlatPlaylistContents, pMchain(ar.map(x => x.uri)))\r\n                    : playlist.uri,\r\n            }),\r\n        ],\r\n        [\r\n            isType(\"folder\"),\r\n            async (folder): Promise<{}> => ({\r\n                [folder.name]: await f.pipe(folder.items, ar.map(extractLikedPlaylistTreeRecur), ps => Promise.all(ps)),\r\n            }),\r\n        ],\r\n    ])(task.of({}))(leaf)\r\n\r\ntype SpotifyTrackUri = SpotifyURI & { _: \"track\" }\r\ntype SpotifyPlaylistUri = SpotifyURI & { _: \"playlist\" }\r\n\r\ntype name = string\r\ntype namedProp<A> = Record<name, A>\r\ntype LikedPlaylist = namedProp<SpotifyPlaylistUri>\r\ntype PersonalPlaylist = namedProp<SpotifyTrackUri[]>\r\ntype PersonalFolder = namedProp<Array<LikedPlaylist | PersonalPlaylist | PersonalFolder>>\r\n\r\nconst isContentOfPersonalPlaylist = (\r\n    subleaf: PersonalFolder[\"\"] | PersonalPlaylist[\"\"],\r\n): subleaf is PersonalPlaylist[\"\"] => typeof subleaf[0] === \"string\" && Spicetify.URI.isTrack(subleaf[0])\r\n\r\nconst restorePlaylistseRecur = async (leaf: PersonalFolder | PersonalPlaylist | LikedPlaylist, folder?: SpotifyURI) =>\r\n    await Promise.all(\r\n        Object.keys(leaf).map(async name => {\r\n            const subleaf = leaf[name]\r\n\r\n            // isPlaylist\r\n            if (!Array.isArray(subleaf)) return void addPlatPlaylist(subleaf, folder)\r\n            if (subleaf.length === 0) return\r\n\r\n            //isCollectionOfTracks\r\n            if (isContentOfPersonalPlaylist(subleaf)) return void createSPPlaylistFromTracks(name, subleaf, folder)\r\n\r\n            //isFolder\r\n            const { success, uri } = await createPlatFolder(name, SpotifyLoc.after.fromUri(folder))\r\n            if (!success) return\r\n\r\n            subleaf.forEach(leaf => restorePlaylistseRecur(leaf, uri))\r\n        }),\r\n    )\r\n\r\nconst allowedExtDataRegex = /^(?:marketplace:)|(?:extensions:)|(?:spicetify)/\r\nexport const backup = async () => {\r\n    const extractItemsUris = (a: any) => a.items.map((item: any) => item.uri)\r\n\r\n    const rawLibraryTracks = await Spicetify.Platform.LibraryAPI.getTracks({\r\n        limit: -1,\r\n        sort: { field: \"ADDED_AT\", order: \"ASC\" },\r\n    })\r\n    const libraryTracks = extractItemsUris(rawLibraryTracks)\r\n\r\n    const rawLibraryAlbums = await Spicetify.Platform.LibraryAPI.getAlbums({\r\n        limit: 2 ** 30,\r\n        sort: { field: \"ADDED_AT\" },\r\n    })\r\n    const libraryAlbums = extractItemsUris(rawLibraryAlbums)\r\n\r\n    const rawLibraryArtists = await Spicetify.Platform.LibraryAPI.getArtists({\r\n        limit: 2 ** 30,\r\n        sort: {\r\n            field: \"ADDED_AT\",\r\n        },\r\n    })\r\n    const libraryArtists = extractItemsUris(rawLibraryArtists)\r\n\r\n    const playlists = await f.pipe((await fetchPlatRootFolder()) as any, extractLikedPlaylistTreeRecur)\r\n\r\n    const localStore = f.pipe(\r\n        localStorage,\r\n        rec.toUnfoldable(ar),\r\n        ar.filter<[string, string]>(([key]) => allowedExtDataRegex.test(key)),\r\n    )\r\n\r\n    const { items, namespace } = Spicetify.Platform.LocalStorageAPI\r\n\r\n    const localStoreAPI = f.pipe(\r\n        items,\r\n        rec.toUnfoldable(ar),\r\n        ar.filter<[string, string]>(([key]) => key.startsWith(namespace)),\r\n        ar.map(([key, value]) => [key.split(\":\")[1], value]),\r\n    )\r\n\r\n    const settings = f.pipe(\r\n        document.querySelectorAll(`[id^=\"settings.\"],[id^=\"desktop.\"],[class^=\"network.\"]`) as NodeListOf<HTMLElement>,\r\n        Array.from<HTMLElement>,\r\n        ar.flatMap(setting => {\r\n            const id = setting.getAttribute(\"id\")\r\n\r\n            if (setting instanceof HTMLInputElement) {\r\n                const type = setting.getAttribute(\"type\")\r\n\r\n                if (type === \"checkbox\") return [[id, \"checkbox\", setting.checked]]\r\n                else if (type === \"text\") return [[id, \"text\", setting.value]]\r\n            } else if (setting instanceof HTMLSelectElement) return [[id, \"select\", setting.value]]\r\n\r\n            return []\r\n        }),\r\n    )\r\n\r\n    await Spicetify.Platform.ClipboardAPI.copy(\r\n        JSON.stringify({\r\n            libraryTracks,\r\n            libraryAlbums,\r\n            libraryArtists,\r\n            playlists,\r\n            localStore,\r\n            localStoreAPI,\r\n            settings,\r\n        } as Vault),\r\n    )\r\n    Spicetify.showNotification(\"Backed up Playlists, Extensions and Settings\")\r\n}\r\n\r\ntype Vault = {\r\n    libraryTracks: Array<SpotifyURI>\r\n    libraryAlbums: Array<SpotifyURI>\r\n    libraryArtists: Array<SpotifyURI>\r\n    playlists: PersonalFolder\r\n    localStore: Array<[string, string]>\r\n    localStoreAPI: Array<[string, string]>\r\n    settings: Array<[string, string, any]>\r\n}\r\nexport const restore = (mode: \"library\" | \"extensions\" | \"settings\") => async () => {\r\n    let vault = JSON.parse(await Spicetify.Platform.ClipboardAPI.paste()) as Vault\r\n\r\n    if (mode === \"library\") {\r\n        setPlatTrackLiked(vault.libraryTracks, true)\r\n        setPlatTrackLiked(vault.libraryAlbums, true)\r\n        setPlatTrackLiked(vault.libraryArtists, true)\r\n        await restorePlaylistseRecur(vault.playlists)\r\n        Spicetify.showNotification(\"Restored Library\")\r\n    }\r\n    if (mode === \"extensions\") {\r\n        ar.map(f.tupled(Spicetify.LocalStorage.set))(vault.localStore)\r\n        ar.map(f.tupled(Spicetify.Platform.LocalStorageAPI.setItem))(vault.localStoreAPI)\r\n        Spicetify.showNotification(\"Restored Extensions\")\r\n    }\r\n    if (mode === \"settings\") {\r\n        vault.settings.map(([id, type, value]) => {\r\n            const setting = document.querySelector<any>(`[id=\"${id}\"]`)\r\n            if (!setting) return console.warn(`Setting for ${id} wasn't found`)\r\n\r\n            if (type === \"text\") setting.value = value\r\n            else if (type === \"checkbox\") setting.checked = value\r\n            else if (type === \"select\") setting.value = value\r\n            else return\r\n\r\n            const settingReactProps = getReactProps(setting) as any\r\n            settingReactProps.onChange({ target: setting })\r\n        })\r\n        Spicetify.showNotification(\"Restored Settings\")\r\n    }\r\n}\r\n\r\nimport(\"./settings.ts\")\r\n"],
  "mappings": "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",
  "names": ["f", "a", "f", "a", "f", "require", "modules", "f", "isType", "value", "init_settings", "ar", "f", "rec", "task", "leaf", "a", "settings"]
}
