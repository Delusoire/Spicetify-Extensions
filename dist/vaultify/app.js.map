{
  "version": 3,
  "sources": ["../../shared/util.ts", "../../shared/platformApi.ts", "../../shared/deps.ts", "../../shared/modules.ts", "../../shared/settings.tsx", "../../extensions/vaultify/settings.ts", "../../extensions/vaultify/app.ts"],
  "sourcesContent": ["export type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nconst { Player, URI } = Spicetify\r\nconst { PlayerAPI, History } = Spicetify.Platform\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: () => ({ before: \"start\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: () => ({ after: \"end\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const escapeRegex = (str: string) => str.replace(/[.*+?^${}()|[\\]\\\\]/g, `\\\\$&`)\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 1000,\r\n    location = document.body,\r\n    notEl?: E | null,\r\n) =>\r\n    new Promise((resolve: (value: Element) => void, reject) => {\r\n        const onMutation = () => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el) {\r\n                if (notEl && el === notEl) {\r\n                } else {\r\n                    observer.disconnect()\r\n                    return resolve(el)\r\n                }\r\n            }\r\n        }\r\n\r\n        const observer = new MutationObserver(onMutation)\r\n        onMutation()\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout)\r\n            setTimeout(() => {\r\n                observer.disconnect()\r\n                reject()\r\n            }, timeout)\r\n    })\r\n\r\nexport const trapElement = <E extends Element>(\r\n    selector: string,\r\n    callback: (el: E | null, lastEl: E | null) => void,\r\n    location = document.body,\r\n) => {\r\n    let lastEl: E | null = null\r\n\r\n    const observer = new MutationObserver(() => {\r\n        const el = document.querySelector<E>(selector)\r\n        if (el !== lastEl) callback(el, lastEl)\r\n        lastEl = el\r\n    })\r\n\r\n    observer.observe(location, {\r\n        childList: true,\r\n        subtree: true,\r\n    })\r\n}\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const getReactProps = (element: Element) =>\r\n    element[Object.keys(element).find(k => k.startsWith(\"__reactProps$\")) as keyof typeof element] as any\r\n\r\nexport const createQueueItem = (queued: boolean) => (uri: SpotifyURI) => ({\r\n    contextTrack: {\r\n        uri,\r\n        uid: \"\",\r\n        metadata: {\r\n            is_queued: queued.toString(),\r\n        },\r\n    },\r\n    removed: [],\r\n    blocked: [],\r\n    provider: queued ? (\"queue\" as const) : (\"context\" as const),\r\n})\r\n\r\nexport const setQueue = async (nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>) => {\r\n    const { _queue, _client } = PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    return _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    }) as Promise<{ error: number; reasons: string }>\r\n}\r\n\r\nexport const setPlayingContext = (uri: SpotifyURI) => {\r\n    const { sessionId } = PlayerAPI._state\r\n    return PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri })\r\n}\r\n\r\nexport const onHistoryChanged = (\r\n    toMatchTo: string | RegExp | ((location: string) => boolean),\r\n    callback: (uri: SpotifyURI) => void,\r\n    dropDuplicates = true,\r\n) => {\r\n    const createMatchFn = (toMatchTo: string | RegExp | ((input: string) => boolean)) => {\r\n        switch (typeof toMatchTo) {\r\n            case \"string\":\r\n                return (input: string) => input?.startsWith(toMatchTo) ?? false\r\n\r\n            case \"function\":\r\n                return toMatchTo\r\n\r\n            default:\r\n                return (input: string) => toMatchTo.test(input)\r\n        }\r\n    }\r\n\r\n    let lastPathname = \"\"\r\n    const matchFn = createMatchFn(toMatchTo)\r\n\r\n    const historyChanged = ({ pathname }: any) => {\r\n        if (matchFn(pathname)) {\r\n            if (dropDuplicates && lastPathname === pathname) {\r\n            } else callback(URI.fromString(pathname).toString())\r\n        }\r\n        lastPathname = pathname\r\n    }\r\n\r\n    historyChanged(History.location ?? {})\r\n    return History.listen(historyChanged)\r\n}\r\n\r\nexport const onSongChanged = (callback: (state?: Spicetify.PlayerState) => void) => {\r\n    callback(Player.data)\r\n    Player.addEventListener(\"songchange\", event => callback(event!.data))\r\n}\r\n", "import { SpotifyLoc, SpotifyURI } from \"./util.ts\"\r\n\r\nconst { CosmosAsync } = Spicetify\r\nconst { LibraryAPI, PlaylistAPI, RootlistAPI, PlaylistPermissionsAPI, EnhanceAPI, LocalFilesAPI } = Spicetify.Platform\r\n\r\nexport const isTrackLiked = (uris: SpotifyURI[]) => LibraryAPI.contains(...uris)\r\n\r\nexport const setTrackLiked = (uris: SpotifyURI[], liked: boolean) => LibraryAPI[liked ? \"add\" : \"remove\"]({ uris })\r\n\r\nexport const toggleTrackLiked = async (uris: SpotifyURI[]) => {\r\n    const liked = await isTrackLiked(uris)\r\n\r\n    const urisByLiked = Object.groupBy(uris, (_, index) => (liked[index] ? \"liked\" : \"notLiked\"))\r\n\r\n    const ps = []\r\n    urisByLiked.liked.length && ps.push(setTrackLiked(urisByLiked.liked, false))\r\n    urisByLiked.notLiked.length && ps.push(setTrackLiked(urisByLiked.notLiked, true))\r\n\r\n    return Promise.all(ps)\r\n}\r\n\r\nexport const fetchLikedTracks = async () =>\r\n    (\r\n        await LibraryAPI.getTracks({\r\n            limit: Number.MAX_SAFE_INTEGER,\r\n        })\r\n    ).items\r\nexport const fetchArtistLikedTracks = async (uri: SpotifyURI, offset = 0, limit = 100) =>\r\n    (await LibraryAPI.getTracks({ uri, offset, limit })).items\r\n\r\nexport const fetchPlaylistContents = async (uri: SpotifyURI) => (await PlaylistAPI.getContents(uri)).items\r\n\r\nexport const createFolder = async (name: string, location: Spicetify.Platform.RootlistAPI.Location = {}) =>\r\n    await RootlistAPI.createFolder(name, location)\r\n\r\nexport const addPlaylist = async (playlist: SpotifyURI, folder?: SpotifyURI) =>\r\n    await RootlistAPI.add([playlist], folder ? SpotifyLoc.after.fromUri(folder) : {})\r\n\r\n/* Replaced by createPlaylistFromTracks */\r\nexport const createPlaylist = async (name: string, location: Spicetify.Platform.RootlistAPI.Location = {}) =>\r\n    await RootlistAPI.createPlaylist(name, location)\r\n\r\nexport const createPlaylistFromTracks = (name: string, tracks: SpotifyURI[], folder?: SpotifyURI) =>\r\n    CosmosAsync.post(\"sp://core-playlist/v1/rootlist?responseFormat=protobufJson\", {\r\n        operation: \"create\",\r\n        ...(folder ? { after: folder } : {}),\r\n        name,\r\n        playlist: true,\r\n        uris: tracks,\r\n    })\r\n\r\nexport const setPlaylistVisibility = async (playlist: SpotifyURI, visibleForAll: boolean) =>\r\n    await PlaylistPermissionsAPI.setBasePermission(playlist, visibleForAll ? \"VIEWER\" : \"BLOCKED\")\r\nexport const setPlaylistPublished = async (playlist: SpotifyURI, published: boolean) =>\r\n    await RootlistAPI.setPublishedState(playlist, published)\r\n\r\nexport const fetchFolder = async (folder?: SpotifyURI) => await RootlistAPI.getContents({ folderUri: folder })\r\nexport const fetchRootFolder = () => fetchFolder(undefined)\r\n\r\nexport const addPlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    tracks: SpotifyURI[],\r\n    location: Spicetify.Platform.RootlistAPI.Location = {},\r\n) => await PlaylistAPI.add(playlist, tracks, location)\r\n\r\nexport const movePlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    tracks: Array<{ uid: string }>,\r\n    location: Spicetify.Platform.RootlistAPI.Location = {},\r\n) => await PlaylistAPI.move(playlist, tracks, location)\r\n\r\nexport const removePlaylistTracks = async (playlist: SpotifyURI, tracks: Array<{ uid: string }>) =>\r\n    PlaylistAPI.remove(playlist, tracks)\r\n\r\nexport const fetchPlaylistEnhancedSongs300 = async (uri: SpotifyURI, offset = 0, limit = 300) =>\r\n    (await EnhanceAPI.getPage(uri, /* iteration */ 0, /* sessionId */ 0, offset, limit)).enhancePage.pageItems\r\nexport const fetchPlaylistEnhancedSongs = async (\r\n    uri: SpotifyURI,\r\n    offset = 0,\r\n): Promise<Array<Spicetify.Platform.EnhanceAPI.EnhanceItem>> => {\r\n    const nextPageItems = await fetchPlaylistEnhancedSongs300(uri, offset)\r\n    if (nextPageItems?.length < 300) return nextPageItems\r\n    else return nextPageItems.concat(await fetchPlaylistEnhancedSongs(uri, offset + 300))\r\n}\r\n\r\nexport const fetchLocalTracks = async () => await LocalFilesAPI.getTracks()\r\n", "// @deno-types=\"npm:@types/lodash\"\r\nimport { default as ld } from \"https://esm.sh/lodash\"\r\nexport const _ = ld\r\n\r\n// @deno-types=\"npm:@types/lodash/fp\"\r\nimport { default as ld_fp } from \"https://esm.sh/lodash/fp\"\r\nexport const fp = ld_fp\r\n", "import { _ } from \"./deps.ts\"\r\n\r\n// @ts-expect-error webpackChunkOpen is only defined in the browser\r\nconst require = webpackChunkopen.push([[Symbol(\"Dummy module to extract require method\")], {}, re => re])\r\nconst cache = Object.keys(require.m).map(id => require(id))\r\nexport const modules = cache\r\n    .filter((module): module is Object => typeof module === \"object\")\r\n    .flatMap(module => Object.values(module))\r\nexport const functionModules = modules.filter((module): module is Function => typeof module === \"function\")\r\n\r\n// const reactObjects = modules.filter(m => m?.$$typeof)\r\n\r\n// const reactForwardRefSymbol = Spicetify.React.forwardRef().$$typeof\r\n// const reactForwardRefs = reactObjects.filter(m => m.$$typeof === reactForwardRefSymbol)\r\n\r\n// const reactMemoSymbol = Spicetify.React.memo().$$typeof\r\n// const reactMemos = reactObjects.filter(m => m.$$typeof === reactMemoSymbol)\r\n\r\nconst findModuleByStrings = (modules: Array<any>, ...filters: Array<string | RegExp>) =>\r\n    modules.find(f =>\r\n        _.overEvery(\r\n            filters.map(filter =>\r\n                typeof filter === \"string\" ? (s: string) => s.includes(filter) : (s: string) => filter.test(s),\r\n            ),\r\n        )(f.toString()),\r\n    )\r\n\r\nexport const CheckedPlaylistButtonIcon = findModuleByStrings(\r\n    functionModules,\r\n    \"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z\",\r\n)\r\n\r\nexport const SettingSection = findModuleByStrings(\r\n    functionModules,\r\n    \"function m(e){return(0,d.jsx)(r.k,{children:(0,d.jsx)(u,{...e})})}\",\r\n)\r\nexport const SectionTitle = findModuleByStrings(functionModules, \"textToHighlight\", \"textBase\")\r\nexport const SettingColumn = findModuleByStrings(functionModules, \"setSectionFilterMatchQueryValue\", \"filterMatchQuery\")\r\nexport const SettingText = findModuleByStrings(functionModules, \"textSubdued\", \"viola\")\r\nexport const SettingToggle = findModuleByStrings(functionModules, \"condensed\", \"onSelected\")\r\n\r\nexport const curationButtonClass = modules.find(m => m?.curationButton)!.curationButton\r\n", "import { task } from \"https://esm.sh/fp-ts\"\r\nimport { SectionTitle, SettingColumn, SettingSection, SettingText, SettingToggle } from \"./modules.ts\"\r\nimport { sleep } from \"./util.ts\"\r\n\r\nconst { React, ReactDOM, LocalStorage } = Spicetify\r\nconst { ButtonSecondary } = Spicetify.ReactComponent\r\nconst { History } = Spicetify.Platform\r\n\r\ntype FieldToProps<A> = Omit<A, \"type\">\r\n\r\nexport const enum FieldType {\r\n    BUTTON = \"button\",\r\n    TOGGLE = \"toggle\",\r\n    INPUT = \"input\",\r\n    HIDDEN = \"hidden\",\r\n}\r\n\r\nexport interface BaseField {\r\n    id: string\r\n    type: FieldType\r\n    desc: string\r\n}\r\n\r\nexport type SettingsField = HiddenField | InputField | ButtonField | ToggleField\r\n\r\nexport interface ButtonField extends BaseField {\r\n    type: FieldType.BUTTON\r\n    text: string\r\n    onClick?: () => void\r\n}\r\nexport interface ToggleField extends BaseField {\r\n    type: FieldType.TOGGLE\r\n    onSelected?: (checked: boolean) => void\r\n}\r\n\r\nexport interface InputField extends BaseField {\r\n    type: FieldType.INPUT\r\n    inputType: string\r\n    onChange?: (value: string) => void\r\n}\r\n\r\nexport interface HiddenField extends BaseField {\r\n    type: FieldType.HIDDEN\r\n}\r\n\r\nexport class SettingsSection {\r\n    private stopHistoryListener: any\r\n\r\n    constructor(public name: string, public id: string, public sectionFields: { [key: string]: SettingsField } = {}) {}\r\n\r\n    pushSettings = () => {\r\n        if (this.stopHistoryListener) this.stopHistoryListener()\r\n\r\n        this.stopHistoryListener = History.listen(() => this.render())\r\n        this.render()\r\n    }\r\n\r\n    toObject = () =>\r\n        new Proxy(\r\n            {},\r\n            {\r\n                get: (target, prop) => SettingsSection.getFieldValue(this.getId(prop.toString())),\r\n            },\r\n        )\r\n\r\n    private render = async () => {\r\n        while (!document.getElementById(\"desktop.settings.selectLanguage\")) {\r\n            if (History.location.pathname !== \"/preferences\") return\r\n            await sleep(100)\r\n        }\r\n\r\n        const allSettingsContainer = document.querySelector(\".x-settings-container\")!\r\n\r\n        let pluginSettingsContainer = Array.from(allSettingsContainer.children).find(({ id }) => id === this.id)\r\n\r\n        if (!pluginSettingsContainer) {\r\n            pluginSettingsContainer = document.createElement(\"div\")\r\n            pluginSettingsContainer.id = this.id\r\n            pluginSettingsContainer.className = \"settingsContainer\"\r\n            allSettingsContainer.appendChild(pluginSettingsContainer)\r\n        }\r\n\r\n        ReactDOM.render(<this.SettingsSection />, pluginSettingsContainer)\r\n    }\r\n\r\n    addButton = (props: FieldToProps<ButtonField>) => {\r\n        this.addField(FieldType.BUTTON, props)\r\n        return this\r\n    }\r\n\r\n    addToggle = (props: FieldToProps<ToggleField>, defaultValue = task.of(false)) => {\r\n        this.addField(FieldType.TOGGLE, props, defaultValue)\r\n        return this\r\n    }\r\n\r\n    addInput = (props: FieldToProps<InputField>, defaultValue = task.of(\"\")) => {\r\n        this.addField(FieldType.INPUT, props, defaultValue)\r\n        return this\r\n    }\r\n\r\n    private addField(type: FieldType, opts: FieldToProps<SettingsField>, defaultValue?: any) {\r\n        if (defaultValue !== undefined) {\r\n            const settingId = this.getId(opts.id)\r\n            SettingsSection.setDefaultFieldValue(settingId, defaultValue)\r\n        }\r\n        const field = Object.assign({}, opts, { type }) as SettingsField\r\n        this.sectionFields[opts.id] = field\r\n    }\r\n\r\n    getId = (nameId: string) => [\"extensions\", this.id, nameId].join(\":\")\r\n\r\n    private useStateFor = <A,>(id: string) => {\r\n        const [value, setValueState] = React.useState(SettingsSection.getFieldValue<A>(id))\r\n\r\n        return [\r\n            value,\r\n            (newValue: A) => {\r\n                if (newValue !== undefined) {\r\n                    setValueState(newValue)\r\n                    SettingsSection.setFieldValue(id!, newValue)\r\n                }\r\n            },\r\n        ] as const\r\n    }\r\n\r\n    static getFieldValue = <R,>(id: string): R => JSON.parse(LocalStorage.get(id) ?? \"null\")\r\n\r\n    static setFieldValue = (id: string, newValue: any) => LocalStorage.set(id, JSON.stringify(newValue))\r\n\r\n    private static setDefaultFieldValue = async (id: string, defaultValue: task.Task<any>) => {\r\n        if (SettingsSection.getFieldValue(id) === null) SettingsSection.setFieldValue(id, await defaultValue())\r\n    }\r\n\r\n    private toReactComponent = (field: SettingsField) => {\r\n        switch (field.type) {\r\n            case FieldType.BUTTON:\r\n                return this.ButtonField(field)\r\n            case FieldType.TOGGLE:\r\n                return this.ToggleField(field)\r\n            case FieldType.INPUT:\r\n                return this.InputField(field)\r\n            default:\r\n                return <></>\r\n        }\r\n    }\r\n\r\n    private SettingsSection = () => (\r\n        <SettingSection filterMatchQuery={this.name}>\r\n            <SectionTitle>{this.name}</SectionTitle>\r\n            {Object.values(this.sectionFields).map(this.toReactComponent)}\r\n        </SettingSection>\r\n    )\r\n\r\n    SettingField = ({ field, children }: { field: SettingsField; children?: any }) => (\r\n        <SettingColumn filterMatchQuery={field.id}>\r\n            <div className=\"x-settings-firstColumn\">\r\n                <SettingText htmlFor={field.id}>{field.desc}</SettingText>\r\n            </div>\r\n            <div className=\"x-settings-secondColumn\">{children}</div>\r\n        </SettingColumn>\r\n    )\r\n\r\n    ButtonField = (field: ButtonField) => (\r\n        <this.SettingField field={field}>\r\n            <ButtonSecondary id={field.id} buttonSize=\"sm\" onClick={field.onClick} className=\"x-settings-button\">\r\n                {field.text}\r\n            </ButtonSecondary>\r\n        </this.SettingField>\r\n    )\r\n\r\n    ToggleField = (field: ToggleField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<boolean>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <SettingToggle\r\n                    id={field.id}\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    onSelected={(checked: boolean) => {\r\n                        setValue(checked)\r\n                        field.onSelected?.(checked)\r\n                    }}\r\n                    className=\"x-settings-button\"\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n\r\n    InputField = (field: InputField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<string>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <input\r\n                    className=\"x-settings-input\"\r\n                    id={field.id}\r\n                    dir=\"ltr\"\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    type={field.inputType}\r\n                    onChange={e => {\r\n                        const value = e.currentTarget.value\r\n                        setValue(value)\r\n                        field.onChange?.(value)\r\n                    }}\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n}\r\n", "import { SettingsSection } from \"../../shared/settings.tsx\"\r\nimport { backup, restore } from \"./app.ts\"\r\n\r\nconst settings = new SettingsSection(\"Vaultify\", \"vaultify\")\r\n    .addButton({\r\n        id: \"backup\",\r\n        desc: \"Backup Library, Extensions and Settings\",\r\n        text: \"Backup to clipboard\",\r\n        onClick: backup,\r\n    })\r\n    .addButton({\r\n        id: \"restoreLibrary\",\r\n        desc: \"Restore Library\",\r\n        text: \"Restore from clipboard\",\r\n        onClick: restore(\"library\"),\r\n    })\r\n    .addButton({\r\n        id: \"restoreExtensions\",\r\n        desc: \"Restore Extensions\",\r\n        text: \"Restore from clipboard\",\r\n        onClick: restore(\"extensions\"),\r\n    })\r\n    .addButton({\r\n        id: \"restoreSettings\",\r\n        desc: \"Restore Settings\",\r\n        text: \"Restore from clipboard\",\r\n        onClick: restore(\"settings\"),\r\n    })\r\n\r\nsettings.pushSettings()\r\n", "import { array as ar, function as f } from \"https://esm.sh/fp-ts\"\r\n\r\nimport {\r\n    addPlaylist,\r\n    createFolder,\r\n    createPlaylistFromTracks,\r\n    fetchPlaylistContents,\r\n    fetchRootFolder,\r\n    setTrackLiked,\r\n} from \"../../shared/platformApi.ts\"\r\nimport { SpotifyLoc, SpotifyURI, getReactProps } from \"../../shared/util.ts\"\r\n\r\nconst { LocalStorage, URI } = Spicetify\r\nconst { ClipboardAPI, LibraryAPI, LocalStorageAPI } = Spicetify.Platform\r\n\r\nexport type PoF = Playlist | Folder\r\n\r\nexport interface Playlist {\r\n    type: \"playlist\"\r\n    name: string\r\n    isOwnedBySelf: boolean\r\n    uri: SpotifyURI\r\n}\r\n\r\nexport interface Folder {\r\n    type: \"folder\"\r\n    name: string\r\n    items: PoF[]\r\n}\r\n\r\nconst extractLikedPlaylistTreeRecur = async (leaf: PoF): Promise<PersonalFolder | PersonalPlaylist | LikedPlaylist> => {\r\n    switch (leaf.type) {\r\n        case \"playlist\": {\r\n            const getPlaylistContents = (uri: SpotifyURI) =>\r\n                fetchPlaylistContents(uri).then(tracks => tracks.map(track => track.uri as SpotifyTrackUri))\r\n\r\n            return {\r\n                [leaf.name]: leaf.isOwnedBySelf\r\n                    ? await getPlaylistContents(leaf.uri)\r\n                    : (leaf.uri as SpotifyPlaylistUri),\r\n            } as PersonalPlaylist | LikedPlaylist\r\n        }\r\n        case \"folder\": {\r\n            const a = leaf.items.map(extractLikedPlaylistTreeRecur)\r\n            return {\r\n                [leaf.name]: await Promise.all(a),\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ntype SpotifyTrackUri = SpotifyURI & { _: \"track\" }\r\ntype SpotifyPlaylistUri = SpotifyURI & { _: \"playlist\" }\r\n\r\ntype name = string\r\ntype namedProp<A> = Record<name, A>\r\ntype LikedPlaylist = namedProp<SpotifyPlaylistUri>\r\ntype PersonalPlaylist = namedProp<SpotifyTrackUri[]>\r\ntype PersonalFolder = namedProp<Array<LikedPlaylist | PersonalPlaylist | PersonalFolder>>\r\n\r\nconst isContentOfPersonalPlaylist = (\r\n    subleaf: PersonalFolder[\"\"] | PersonalPlaylist[\"\"],\r\n): subleaf is PersonalPlaylist[\"\"] => typeof subleaf[0] === \"string\" && URI.isTrack(subleaf[0])\r\n\r\nconst restorePlaylistseRecur = async (\r\n    leaf: PersonalFolder | PersonalPlaylist | LikedPlaylist,\r\n    folder: SpotifyURI = \"\",\r\n) =>\r\n    await Promise.all(\r\n        Object.keys(leaf).map(async name => {\r\n            const subleaf = leaf[name]\r\n\r\n            // isPlaylist\r\n            if (!Array.isArray(subleaf)) return void addPlaylist(subleaf, folder)\r\n            if (subleaf.length === 0) return\r\n\r\n            //isCollectionOfTracks\r\n            if (isContentOfPersonalPlaylist(subleaf)) return void createPlaylistFromTracks(name, subleaf, folder)\r\n\r\n            //isFolder\r\n            const { success, uri } = await createFolder(name, SpotifyLoc.after.fromUri(folder))\r\n            if (!success) return\r\n\r\n            subleaf.forEach(leaf => restorePlaylistseRecur(leaf, uri))\r\n        }),\r\n    )\r\n\r\nconst allowedExtDataRegex = /^(?:marketplace:)|(?:extensions:)|(?:spicetify)/\r\nexport const backup = async () => {\r\n    const extractItemsUris = (a: Spicetify.Platform.LibraryAPI.Paged<{ uri: string }>) => a.items.map(item => item.uri)\r\n\r\n    const rawLibraryTracks = await LibraryAPI.getTracks({\r\n        limit: -1,\r\n        sort: { field: \"ADDED_AT\", order: \"ASC\" },\r\n    })\r\n    const libraryTracks = extractItemsUris(rawLibraryTracks)\r\n\r\n    const rawLibraryAlbums = await LibraryAPI.getAlbums({\r\n        limit: 2 ** 30,\r\n        sort: { field: \"ADDED_AT\" },\r\n    })\r\n    const libraryAlbums = extractItemsUris(rawLibraryAlbums)\r\n\r\n    const rawLibraryArtists = await LibraryAPI.getArtists({\r\n        limit: 2 ** 30,\r\n        sort: {\r\n            field: \"ADDED_AT\",\r\n        },\r\n    })\r\n    const libraryArtists = extractItemsUris(rawLibraryArtists)\r\n\r\n    const playlists = await f.pipe(await fetchRootFolder(), extractLikedPlaylistTreeRecur)\r\n\r\n    const localStore = Object.entries(localStorage).filter(([key]) => allowedExtDataRegex.test(key))\r\n\r\n    const { items, namespace } = LocalStorageAPI\r\n\r\n    const localStoreAPI = Object.entries(items)\r\n        .filter(([key]) => key.startsWith(namespace))\r\n        .map(([key, value]) => [key.split(\":\")[1], value])\r\n\r\n    const settings = f.pipe(\r\n        document.querySelectorAll(`[id^=\"settings.\"],[id^=\"desktop.\"],[class^=\"network.\"]`) as NodeListOf<HTMLElement>,\r\n        Array.from<HTMLElement>,\r\n        ar.flatMap(setting => {\r\n            const id = setting.getAttribute(\"id\")\r\n\r\n            if (setting instanceof HTMLInputElement) {\r\n                const type = setting.getAttribute(\"type\")\r\n\r\n                if (type === \"checkbox\") return [[id, \"checkbox\", setting.checked]]\r\n                else if (type === \"text\") return [[id, \"text\", setting.value]]\r\n            } else if (setting instanceof HTMLSelectElement) return [[id, \"select\", setting.value]]\r\n\r\n            return []\r\n        }),\r\n    )\r\n\r\n    await ClipboardAPI.copy(\r\n        JSON.stringify({\r\n            libraryTracks,\r\n            libraryAlbums,\r\n            libraryArtists,\r\n            playlists,\r\n            localStore,\r\n            localStoreAPI,\r\n            settings,\r\n        } as Vault),\r\n    )\r\n    Spicetify.showNotification(\"Backed up Playlists, Extensions and Settings\")\r\n}\r\n\r\ntype Vault = {\r\n    libraryTracks: Array<SpotifyURI>\r\n    libraryAlbums: Array<SpotifyURI>\r\n    libraryArtists: Array<SpotifyURI>\r\n    playlists: PersonalFolder\r\n    localStore: Array<[string, string]>\r\n    localStoreAPI: Array<[string, string]>\r\n    settings: Array<[string, string, any]>\r\n}\r\nexport const restore = (mode: \"library\" | \"extensions\" | \"settings\") => async () => {\r\n    const vault = JSON.parse(await ClipboardAPI.paste()) as Vault\r\n\r\n    if (mode === \"library\") {\r\n        setTrackLiked(vault.libraryTracks, true)\r\n        setTrackLiked(vault.libraryAlbums, true)\r\n        setTrackLiked(vault.libraryArtists, true)\r\n        await restorePlaylistseRecur(vault.playlists)\r\n        Spicetify.showNotification(\"Restored Library\")\r\n    }\r\n    if (mode === \"extensions\") {\r\n        f.pipe(\r\n            vault.localStore,\r\n            ar.map(([a, b]) => LocalStorage.set(a, b)),\r\n        )\r\n        f.pipe(\r\n            vault.localStoreAPI,\r\n            ar.map(([a, b]) => LocalStorageAPI.setItem(a, b)),\r\n        )\r\n        Spicetify.showNotification(\"Restored Extensions\")\r\n    }\r\n    if (mode === \"settings\") {\r\n        vault.settings.map(([id, type, value]) => {\r\n            const setting = document.querySelector<any>(`[id=\"${id}\"]`)\r\n            if (!setting) return console.warn(`Setting for ${id} wasn't found`)\r\n\r\n            if (type === \"text\") setting.value = value\r\n            else if (type === \"checkbox\") setting.checked = value\r\n            else if (type === \"select\") setting.value = value\r\n            else return\r\n\r\n            const settingReactProps = getReactProps(setting)\r\n            settingReactProps.onChange({ target: setting })\r\n        })\r\n        Spicetify.showNotification(\"Restored Settings\")\r\n    }\r\n}\r\n\r\nimport(\"./settings.ts\")\r\n"],
  "mappings": "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",
  "names": ["require", "modules", "f", "History", "value", "init_settings", "LocalStorage", "URI", "LibraryAPI", "leaf", "settings"]
}
