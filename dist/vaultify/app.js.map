{
  "version": 3,
  "sources": ["../../shared/util.ts", "../../shared/platformApi.ts", "../../shared/deps.ts", "../../extensions/vaultify/util.ts", "../../extensions/vaultify/backup.ts", "../../extensions/vaultify/restore.ts", "../../shared/modules.ts", "../../shared/settings.tsx", "../../extensions/vaultify/settings.ts", "../../extensions/vaultify/app.ts"],
  "sourcesContent": ["export type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nconst { URI } = Spicetify\r\nconst { PlayerAPI } = Spicetify.Platform\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: () => ({ before: \"start\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: () => ({ after: \"end\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport class PermanentMutationObserver extends MutationObserver {\r\n    target: HTMLElement | null = null\r\n\r\n    constructor(\r\n        targetSelector: string,\r\n        callback: MutationCallback,\r\n        opts: MutationObserverInit = {\r\n            childList: true,\r\n            subtree: true,\r\n        },\r\n    ) {\r\n        super(callback)\r\n        new MutationObserver(() => {\r\n            const nextTarget = document.querySelector<HTMLElement>(targetSelector)\r\n            if (nextTarget && !nextTarget.isEqualNode(this.target)) {\r\n                this.target && this.disconnect()\r\n                this.target = nextTarget\r\n                this.observe(this.target, opts)\r\n            }\r\n        }).observe(document.body, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n    }\r\n}\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 5000,\r\n    location = document.body,\r\n    notEl?: E | null,\r\n) =>\r\n    new Promise((resolve: (value: E) => void, reject) => {\r\n        const onMutation = () => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el) {\r\n                if (notEl && el === notEl) {\r\n                } else {\r\n                    observer.disconnect()\r\n                    return resolve(el)\r\n                }\r\n            }\r\n        }\r\n\r\n        const observer = new MutationObserver(onMutation)\r\n        onMutation()\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout)\r\n            setTimeout(() => {\r\n                observer.disconnect()\r\n                console.debug(\"waitForElement: timed out waiting for\", selector)\r\n                reject()\r\n            }, timeout)\r\n    })\r\n\r\nexport const formatUri = (uri: string) => URI.fromString(uri).toURI()\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const mainElement = document.querySelector(\"main\")!\r\nexport const [REACT_FIBER, REACT_PROPS] = Object.keys(mainElement)\r\n\r\nexport const createQueueItem =\r\n    (queued: boolean) =>\r\n    ({ uri, uid = \"\" }: { uri: string; uid?: string }) => ({\r\n        contextTrack: {\r\n            uri,\r\n            uid,\r\n            metadata: {\r\n                is_queued: queued.toString(),\r\n            },\r\n        },\r\n        removed: [],\r\n        blocked: [],\r\n        provider: queued ? (\"queue\" as const) : (\"context\" as const),\r\n    })\r\n\r\nexport const setQueue = async (\r\n    nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>,\r\n    contextUri?: string,\r\n) => {\r\n    const { _queue, _client } = PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    const res = await _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    })\r\n\r\n    await PlayerAPI.skipToNext()\r\n\r\n    if (contextUri) {\r\n        await new Promise<void>(resolve => {\r\n            PlayerAPI.getEvents().addListener(\"queue_update\", () => resolve(), { once: true })\r\n        })\r\n        await setPlayingContext(contextUri)\r\n    }\r\n\r\n    return res\r\n}\r\n\r\nexport const setPlayingContext = (uri: string) => {\r\n    const { sessionId } = PlayerAPI._state\r\n    return PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri })\r\n}\r\n", "import { SpotifyLoc, SpotifyURI } from \"./util.ts\"\r\n\r\nconst { CosmosAsync } = Spicetify\r\nconst { LibraryAPI, PlaylistAPI, RootlistAPI, PlaylistPermissionsAPI, EnhanceAPI, LocalFilesAPI } = Spicetify.Platform\r\n\r\nexport const areTracksLiked = (uris: SpotifyURI[]) => LibraryAPI.contains(...uris)\r\n\r\nexport const setTracksLiked = (uris: SpotifyURI[], liked: boolean) => LibraryAPI[liked ? \"add\" : \"remove\"]({ uris })\r\n\r\nexport const toggleTracksLiked = async (uris: SpotifyURI[]) => {\r\n    const liked = await areTracksLiked(uris)\r\n\r\n    const urisByLiked = Object.groupBy(uris, (_, index) => (liked[index] ? \"liked\" : \"notLiked\"))\r\n\r\n    const ps = []\r\n    urisByLiked.liked?.length && ps.push(setTracksLiked(urisByLiked.liked, false))\r\n    urisByLiked.notLiked?.length && ps.push(setTracksLiked(urisByLiked.notLiked, true))\r\n\r\n    return Promise.all(ps)\r\n}\r\n\r\nexport const fetchLikedTracks = async () =>\r\n    (\r\n        await LibraryAPI.getTracks({\r\n            limit: Number.MAX_SAFE_INTEGER,\r\n        })\r\n    ).items\r\nexport const fetchArtistLikedTracks = async (uri: SpotifyURI, offset = 0, limit = 100) =>\r\n    (await LibraryAPI.getTracks({ uri, offset, limit })).items\r\n\r\nexport const fetchPlaylistContents = async (uri: SpotifyURI) => (await PlaylistAPI.getContents(uri)).items\r\n\r\nexport const createFolder = async (name: string, location: Spicetify.Platform.RootlistAPI.Location = {}) =>\r\n    await RootlistAPI.createFolder(name, location)\r\n\r\nexport const addPlaylist = async (playlist: SpotifyURI, folder?: SpotifyURI) =>\r\n    await RootlistAPI.add([playlist], folder ? SpotifyLoc.after.fromUri(folder) : {})\r\n\r\n/* Replaced by createPlaylistFromTracks */\r\nexport const createPlaylist = async (name: string, location: Spicetify.Platform.RootlistAPI.Location = {}) =>\r\n    await RootlistAPI.createPlaylist(name, location)\r\n\r\nexport const createPlaylistFromTracks = (name: string, tracks: SpotifyURI[], folder?: SpotifyURI) =>\r\n    CosmosAsync.post(\"sp://core-playlist/v1/rootlist?responseFormat=protobufJson\", {\r\n        operation: \"create\",\r\n        ...(folder ? { after: folder } : {}),\r\n        name,\r\n        playlist: true,\r\n        uris: tracks,\r\n    })\r\n\r\nexport const setPlaylistVisibility = async (playlist: SpotifyURI, visibleForAll: boolean) =>\r\n    await PlaylistPermissionsAPI.setBasePermission(playlist, visibleForAll ? \"VIEWER\" : \"BLOCKED\")\r\nexport const setPlaylistPublished = async (playlist: SpotifyURI, published: boolean) =>\r\n    await RootlistAPI.setPublishedState(playlist, published)\r\n\r\nexport const fetchFolder = async (folder?: SpotifyURI) => await RootlistAPI.getContents({ folderUri: folder })\r\nexport const fetchRootFolder = () => fetchFolder(undefined)\r\n\r\nexport const addPlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    tracks: SpotifyURI[],\r\n    location: Spicetify.Platform.RootlistAPI.Location = {},\r\n) => await PlaylistAPI.add(playlist, tracks, location)\r\n\r\nexport const movePlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    uids: string[],\r\n    location: Spicetify.Platform.RootlistAPI.Location = {},\r\n) =>\r\n    await PlaylistAPI.move(\r\n        playlist,\r\n        uids.map(uid => ({ uid })),\r\n        location,\r\n    )\r\n\r\nexport const removePlaylistTracks = (playlist: SpotifyURI, tracks: Array<{ uid: string }>) =>\r\n    PlaylistAPI.remove(playlist, tracks)\r\n\r\nexport const fetchPlaylistEnhancedSongs300 = async (uri: SpotifyURI, offset = 0, limit = 300) =>\r\n    (await EnhanceAPI.getPage(uri, /* iteration */ 0, /* sessionId */ 0, offset, limit)).enhancePage.pageItems\r\nexport const fetchPlaylistEnhancedSongs = async (\r\n    uri: SpotifyURI,\r\n    offset = 0,\r\n): Promise<Array<Spicetify.Platform.EnhanceAPI.EnhanceItem>> => {\r\n    const nextPageItems = await fetchPlaylistEnhancedSongs300(uri, offset)\r\n    if (nextPageItems?.length < 300) return nextPageItems\r\n    else return nextPageItems.concat(await fetchPlaylistEnhancedSongs(uri, offset + 300))\r\n}\r\n\r\nexport const fetchLocalTracks = async () => await LocalFilesAPI.getTracks()\r\n", "// @deno-types=\"npm:@types/lodash\"\r\nimport { default as ld } from \"https://esm.sh/lodash\"\r\nexport const _ = ld\r\n\r\n// @deno-types=\"npm:@types/lodash/fp\"\r\nimport { default as ld_fp } from \"https://esm.sh/lodash/fp\"\r\nexport const fp = ld_fp\r\n", "const { URI } = Spicetify\r\n\r\ntype PagedItem = Spicetify.Platform.LibraryAPI.Paged<{ uri: string }>\r\ntype Task<A> = () => Promise<A>\r\nexport const extractUrisWrapper = (fetcher: Task<PagedItem>) => () =>\r\n    fetcher().then(({ items }) => items.map(item => item.uri))\r\n\r\nexport type PoF = Playlist | Folder\r\n\r\nexport interface Playlist {\r\n    type: \"playlist\"\r\n    name: string\r\n    isOwnedBySelf: boolean\r\n    uri: string\r\n}\r\n\r\nexport interface Folder {\r\n    type: \"folder\"\r\n    name: string\r\n    items: PoF[]\r\n}\r\n\r\ntype SpotifyTrackUri = string & { _: \"track\" }\r\ntype SpotifyPlaylistUri = string & { _: \"playlist\" }\r\n\r\ntype namedProp<A> = Record<string, A>\r\nexport type LikedPlaylist = namedProp<SpotifyPlaylistUri>\r\nexport type PersonalPlaylist = namedProp<SpotifyTrackUri[]>\r\nexport type PersonalFolder = namedProp<Array<LikedPlaylist | PersonalPlaylist | PersonalFolder>>\r\n\r\nexport const isContentOfPersonalPlaylist = (\r\n    subleaf: PersonalFolder[\"\"] | PersonalPlaylist[\"\"],\r\n): subleaf is PersonalPlaylist[\"\"] => typeof subleaf[0] === \"string\" && URI.isTrack(subleaf[0])\r\n", "import { _ } from \"../../shared/deps.ts\"\r\nimport { fetchPlaylistContents } from \"../../shared/platformApi.ts\"\r\n\r\nimport { LikedPlaylist, PersonalFolder, PersonalPlaylist, PoF, extractUrisWrapper } from \"./util.ts\"\r\n\r\nconst { LibraryAPI, LocalStorageAPI } = Spicetify.Platform\r\n\r\nexport type LibraryBackup = {\r\n    libraryTracks: Array<string>\r\n    libraryAlbums: Array<string>\r\n    libraryArtists: Array<string>\r\n    playlists: PersonalFolder\r\n}\r\nexport type LocalStorageBackup = {\r\n    localStore: Array<[string, string]>\r\n    localStoreAPI: Array<[string, string]>\r\n}\r\n\r\nexport type SettingBackup = {\r\n    settings: Array<[string, string, any]>\r\n}\r\n\r\nconst getLibraryTracks = () =>\r\n    LibraryAPI.getTracks({\r\n        limit: -1,\r\n        sort: { field: \"ADDED_AT\", order: \"ASC\" },\r\n    })\r\n\r\nconst getLibraryAlbums = () =>\r\n    LibraryAPI.getAlbums({\r\n        limit: 2 ** 30,\r\n        sort: { field: \"ADDED_AT\" },\r\n    })\r\n\r\nconst getLibraryArtists = () =>\r\n    LibraryAPI.getArtists({\r\n        limit: 2 ** 30,\r\n        sort: {\r\n            field: \"ADDED_AT\",\r\n        },\r\n    })\r\n\r\nexport const getLibraryTrackUris = extractUrisWrapper(getLibraryTracks)\r\nexport const getLibraryAlbumUris = extractUrisWrapper(getLibraryAlbums)\r\nexport const getLibraryArtistUris = extractUrisWrapper(getLibraryArtists)\r\n\r\nenum SettingType {\r\n    CHECKBOX = \"checkbox\",\r\n    TEXT = \"text\",\r\n    SELECT = \"select\",\r\n}\r\n\r\ntype Setting =\r\n    | [string, SettingType.CHECKBOX, boolean]\r\n    | [string, SettingType.TEXT, string]\r\n    | [string, SettingType.SELECT, string]\r\nexport const getSettings = () => {\r\n    const SETTINGS_EL_SEL = `[id^=\"settings.\"],[id^=\"desktop.\"],[class^=\"network.\"]`\r\n    const settingsEls = Array.from(document.querySelectorAll(SETTINGS_EL_SEL) as NodeListOf<HTMLElement>)\r\n    const settings = settingsEls.map(settingEl => {\r\n        const id = settingEl.getAttribute(\"id\")\r\n\r\n        if (!id) return null\r\n\r\n        if (settingEl instanceof HTMLInputElement) {\r\n            switch (settingEl.getAttribute(\"type\")) {\r\n                case \"checkbox\":\r\n                    return [id, SettingType.CHECKBOX, settingEl.checked] as const\r\n                case \"text\":\r\n                    return [id, SettingType.TEXT, settingEl.value] as const\r\n            }\r\n        } else if (settingEl instanceof HTMLSelectElement) {\r\n            return [id, SettingType.SELECT, settingEl.value] as const\r\n        }\r\n        return null\r\n    })\r\n    return _.compact(settings) as Setting[]\r\n}\r\n\r\nexport const getLocalStorage = () => {\r\n    const LS_ALLOW_REGEX = /^(?:marketplace:)|(?:extensions:)|(?:spicetify)/\r\n    return Object.entries(localStorage).filter(([key]) => LS_ALLOW_REGEX.test(key))\r\n}\r\n\r\nexport const getLocalStoreAPI = () => {\r\n    return Object.entries(LocalStorageAPI.items)\r\n        .filter(([key]) => key.startsWith(LocalStorageAPI.namespace))\r\n        .map(([key, value]) => [key.split(\":\")[1], value] as const)\r\n}\r\n\r\nexport const extractLikedPlaylistTreeRecur = async (\r\n    leaf: PoF,\r\n): Promise<PersonalFolder | PersonalPlaylist | LikedPlaylist> => {\r\n    switch (leaf.type) {\r\n        case \"playlist\": {\r\n            const getPlaylistContents = (uri: string) =>\r\n                fetchPlaylistContents(uri).then(tracks => tracks.map(track => track.uri))\r\n\r\n            return {\r\n                [leaf.name]: leaf.isOwnedBySelf ? await getPlaylistContents(leaf.uri) : leaf.uri,\r\n            } as PersonalPlaylist | LikedPlaylist\r\n        }\r\n        case \"folder\": {\r\n            const a = leaf.items.map(extractLikedPlaylistTreeRecur)\r\n            return {\r\n                [leaf.name]: await Promise.all(a),\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { addPlaylist, createFolder, createPlaylistFromTracks, setTracksLiked } from \"../../shared/platformApi.ts\"\r\nimport { REACT_PROPS, SpotifyLoc } from \"../../shared/util.ts\"\r\n\r\nimport { LibraryBackup, LocalStorageBackup, SettingBackup } from \"./backup.ts\"\r\nimport { LikedPlaylist, PersonalFolder, PersonalPlaylist, isContentOfPersonalPlaylist } from \"./util.ts\"\r\n\r\nconst { LocalStorageAPI } = Spicetify.Platform\r\n\r\nexport const restoreLibrary = async (data: LibraryBackup, silent = true) => {\r\n    setTracksLiked(data.libraryTracks, true)\r\n    setTracksLiked(data.libraryAlbums, true)\r\n    setTracksLiked(data.libraryArtists, true)\r\n    await restorePlaylistseRecur(data.playlists)\r\n    !silent && Spicetify.showNotification(\"Restored Library\")\r\n}\r\n\r\nexport const restoreExtensions = (vault: LocalStorageBackup, silent = true) => {\r\n    vault.localStore.forEach(([k, v]) => localStorage.setItem(k, v))\r\n    vault.localStoreAPI.forEach(([k, v]) => LocalStorageAPI.setItem(k, v))\r\n    !silent && Spicetify.showNotification(\"Restored Extensions\")\r\n}\r\n\r\nexport const restoreSettings = (data: SettingBackup, silent = true) => {\r\n    data.settings.map(([id, type, value]) => {\r\n        const setting = document.querySelector<any>(`[id=\"${id}\"]`)\r\n        if (!setting) return console.warn(`Setting for ${id} wasn't found`)\r\n\r\n        if (type === \"text\") setting.value = value\r\n        else if (type === \"checkbox\") setting.checked = value\r\n        else if (type === \"select\") setting.value = value\r\n        else return\r\n\r\n        const settingReactProps = setting[REACT_PROPS]\r\n        settingReactProps.onChange({ target: setting })\r\n    })\r\n    !silent && Spicetify.showNotification(\"Restored Settings\")\r\n}\r\n\r\nconst restorePlaylistseRecur = async (leaf: PersonalFolder | PersonalPlaylist | LikedPlaylist, folder = \"\") =>\r\n    await Promise.all(\r\n        Object.keys(leaf).map(async name => {\r\n            const subleaf = leaf[name]\r\n\r\n            // isPlaylist\r\n            if (!Array.isArray(subleaf)) return void addPlaylist(subleaf, folder)\r\n            if (subleaf.length === 0) return\r\n\r\n            //isCollectionOfTracks\r\n            if (isContentOfPersonalPlaylist(subleaf)) return void createPlaylistFromTracks(name, subleaf, folder)\r\n\r\n            //isFolder\r\n            const { success, uri } = await createFolder(name, SpotifyLoc.after.fromUri(folder))\r\n            if (!success) return\r\n\r\n            subleaf.forEach(leaf => restorePlaylistseRecur(leaf, uri))\r\n        }),\r\n    )\r\n", "// @ts-expect-error webpackChunkOpen is only defined in the browser\r\nconst require = webpackChunkopen.push([[Symbol(\"Dummy chunk to extract require method\")], {}, require => require])\r\nconst modules = Object.keys(require.m)\r\n    .map(id => require(id))\r\n    .filter((module): module is Object => typeof module === \"object\")\r\nexport const exportedMembers = modules.flatMap(module => Object.values(module)).filter(Boolean)\r\nexport const exportedFunctions = exportedMembers.filter((module): module is Function => typeof module === \"function\")\r\n\r\nconst exportedReactObjects = Object.groupBy(exportedMembers, x => x.$$typeof)\r\nconst exportedContexts = exportedReactObjects[Symbol.for(\"react.context\")]!\r\nconst exportedForwardRefs = exportedReactObjects[Symbol.for(\"react.forward_ref\")]!\r\nconst exportedMemos = exportedReactObjects[Symbol.for(\"react.memo\")]!\r\n\r\nconst findByStrings = (modules: Array<any>, ...filters: Array<string | RegExp>) =>\r\n    modules.find(f =>\r\n        filters\r\n            .map(filter =>\r\n                typeof filter === \"string\" ? (s: string) => s.includes(filter) : (s: string) => filter.test(s),\r\n            )\r\n            .every(filterFn => filterFn(f.toString())),\r\n    )\r\n\r\nexport const CheckedPlaylistButtonIcon = findByStrings(\r\n    exportedFunctions,\r\n    \"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z\",\r\n)\r\n\r\nexport const Highlight = findByStrings(exportedFunctions, \"hightlightClassName\", \"textToHighlight\")\r\n\r\nexport const SettingColumn = findByStrings(exportedFunctions, \"setSectionFilterMatchQueryValue\", \"filterMatchQuery\")\r\nexport const SettingText = findByStrings(exportedFunctions, \"textSubdued\", \"dangerouslySetInnerHTML\")\r\nexport const SettingToggle = findByStrings(exportedFunctions, \"condensed\", \"onSelected\")\r\n\r\nexport const curationButtonClass = exportedMembers.find(m => m?.curationButton)!.curationButton\r\n\r\nexport const rs_w = exportedForwardRefs.filter(x => x.render?.toString().includes(\"hasLeadingOrMedia\"))\r\n", "import { SettingColumn, SettingText, SettingToggle } from \"./modules.ts\"\r\nimport { sleep } from \"./util.ts\"\r\nimport { _ } from \"./deps.ts\"\r\n\r\ntype Task<A> = (() => Awaited<A>) | (() => Promise<Awaited<A>>)\r\n\r\nconst { React, ReactDOM, LocalStorage } = Spicetify\r\nconst { ButtonSecondary } = Spicetify.ReactComponent\r\nconst { History } = Spicetify.Platform\r\n\r\ntype FieldToProps<A> = Omit<A, \"type\">\r\n\r\nexport enum FieldType {\r\n    BUTTON = \"button\",\r\n    TOGGLE = \"toggle\",\r\n    INPUT = \"input\",\r\n    HIDDEN = \"hidden\",\r\n}\r\n\r\nexport interface BaseField {\r\n    id: string\r\n    type: FieldType\r\n    desc: string\r\n}\r\n\r\nexport type SettingsField = HiddenField | InputField | ButtonField | ToggleField\r\n\r\nexport interface ButtonField extends BaseField {\r\n    type: FieldType.BUTTON\r\n    text: string\r\n    onClick?: () => void\r\n}\r\nexport interface ToggleField extends BaseField {\r\n    type: FieldType.TOGGLE\r\n    onSelected?: (checked: boolean) => void\r\n}\r\n\r\nexport interface InputField extends BaseField {\r\n    type: FieldType.INPUT\r\n    inputType: string\r\n    onChange?: (value: string) => void\r\n}\r\n\r\nexport interface HiddenField extends BaseField {\r\n    type: FieldType.HIDDEN\r\n}\r\n\r\nif (!globalThis.__renderSettingSections) {\r\n    globalThis.__settingSections = new Map<string, React.JSX.Element>()\r\n    globalThis.__renderSettingSections = () => Array.from(globalThis.__settingSections.values())\r\n}\r\n\r\nexport class SettingsSection {\r\n    public id: string\r\n\r\n    constructor(public name: string, public sectionFields: { [key: string]: React.JSX.Element } = {}) {\r\n        this.id = _.kebabCase(name)\r\n    }\r\n\r\n    pushSettings = () => {\r\n        __settingSections.set(this.id, <this.SettingsSection />)\r\n    }\r\n\r\n    toObject = () =>\r\n        new Proxy(\r\n            {},\r\n            {\r\n                get: (target, prop) => SettingsSection.getFieldValue(this.getId(prop.toString())),\r\n                set: (target, prop, newValue) => {\r\n                    const id = this.getId(prop.toString())\r\n                    if (SettingsSection.getFieldValue(id) === newValue) return false\r\n                    SettingsSection.setFieldValue(id, newValue)\r\n                    return true\r\n                },\r\n            },\r\n        )\r\n\r\n    addButton = (props: FieldToProps<ButtonField>) => {\r\n        this.addField(FieldType.BUTTON, props, this.ButtonField)\r\n        return this\r\n    }\r\n\r\n    addToggle = (props: FieldToProps<ToggleField>, defaultValue: Task<boolean> = () => false) => {\r\n        this.addField(FieldType.TOGGLE, props, this.ToggleField, defaultValue)\r\n        return this\r\n    }\r\n\r\n    addInput = (props: FieldToProps<InputField>, defaultValue: Task<string> = () => \"\") => {\r\n        this.addField(FieldType.INPUT, props, this.InputField, defaultValue)\r\n        return this\r\n    }\r\n\r\n    private addField<SF extends SettingsField>(\r\n        type: SF[\"type\"],\r\n        opts: FieldToProps<SF>,\r\n        fieldComponent: (field: SF) => React.JSX.Element,\r\n        defaultValue?: any,\r\n    ) {\r\n        if (defaultValue !== undefined) {\r\n            const settingId = this.getId(opts.id)\r\n            SettingsSection.setDefaultFieldValue(settingId, defaultValue)\r\n        }\r\n        const field = Object.assign({}, opts, { type }) as SF\r\n        this.sectionFields[opts.id] = React.createElement(fieldComponent, field)\r\n    }\r\n\r\n    getId = (nameId: string) => [\"extensions\", this.id, nameId].join(\":\")\r\n\r\n    private useStateFor = <A,>(id: string) => {\r\n        const [value, setValueState] = React.useState(SettingsSection.getFieldValue<A>(id))\r\n\r\n        return [\r\n            value,\r\n            (newValue: A) => {\r\n                if (newValue !== undefined) {\r\n                    setValueState(newValue)\r\n                    SettingsSection.setFieldValue(id, newValue)\r\n                }\r\n            },\r\n        ] as const\r\n    }\r\n\r\n    static getFieldValue = <R,>(id: string): R => JSON.parse(LocalStorage.get(id) ?? \"null\")\r\n\r\n    static setFieldValue = (id: string, newValue: any) => LocalStorage.set(id, JSON.stringify(newValue))\r\n\r\n    private static setDefaultFieldValue = async (id: string, defaultValue: Task<any>) => {\r\n        if (SettingsSection.getFieldValue(id) === null) SettingsSection.setFieldValue(id, await defaultValue())\r\n    }\r\n\r\n    private SettingsSection = () => (\r\n        <__SettingSection filterMatchQuery={this.name}>\r\n            <__SectionTitle>{this.name}</__SectionTitle>\r\n            {Object.values(this.sectionFields)}\r\n        </__SettingSection>\r\n    )\r\n\r\n    SettingField = ({ field, children }: { field: SettingsField; children?: any }) => (\r\n        <SettingColumn filterMatchQuery={field.id}>\r\n            <div className=\"x-settings-firstColumn\">\r\n                <SettingText htmlFor={field.id}>{field.desc}</SettingText>\r\n            </div>\r\n            <div className=\"x-settings-secondColumn\">{children}</div>\r\n        </SettingColumn>\r\n    )\r\n\r\n    ButtonField = (field: ButtonField) => (\r\n        <this.SettingField field={field}>\r\n            <ButtonSecondary id={field.id} buttonSize=\"sm\" onClick={field.onClick} className=\"x-settings-button\">\r\n                {field.text}\r\n            </ButtonSecondary>\r\n        </this.SettingField>\r\n    )\r\n\r\n    ToggleField = (field: ToggleField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<boolean>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <SettingToggle\r\n                    id={field.id}\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    onSelected={(checked: boolean) => {\r\n                        setValue(checked)\r\n                        field.onSelected?.(checked)\r\n                    }}\r\n                    className=\"x-settings-button\"\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n\r\n    InputField = (field: InputField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<string>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <input\r\n                    className=\"x-settings-input\"\r\n                    id={field.id}\r\n                    dir=\"ltr\"\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    type={field.inputType}\r\n                    onChange={e => {\r\n                        const value = e.currentTarget.value\r\n                        setValue(value)\r\n                        field.onChange?.(value)\r\n                    }}\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n}\r\n", "import { SettingsSection } from \"../../shared/settings.tsx\"\r\n\r\nimport { RestoreScope, backup, restoreFactory } from \"./app.ts\"\r\n\r\nconst settings = new SettingsSection(\"Vaultify\")\r\n    .addButton({\r\n        id: \"backup\",\r\n        desc: \"Backup Library, Extensions and Settings\",\r\n        text: \"Backup to clipboard\",\r\n        onClick: backup,\r\n    })\r\n    .addButton({\r\n        id: \"restoreLibrary\",\r\n        desc: \"Restore Library\",\r\n        text: \"Restore from clipboard\",\r\n        onClick: restoreFactory(RestoreScope.LIBRARY),\r\n    })\r\n    .addButton({\r\n        id: \"restoreExtensions\",\r\n        desc: \"Restore Extensions\",\r\n        text: \"Restore from clipboard\",\r\n        onClick: restoreFactory(RestoreScope.EXTENSIONS),\r\n    })\r\n    .addButton({\r\n        id: \"restoreSettings\",\r\n        desc: \"Restore Settings\",\r\n        text: \"Restore from clipboard\",\r\n        onClick: restoreFactory(RestoreScope.SETTINGS),\r\n    })\r\n\r\nsettings.pushSettings()\r\n", "import { fetchRootFolder } from \"../../shared/platformApi.ts\"\r\n\r\nimport {\r\n    LibraryBackup,\r\n    LocalStorageBackup,\r\n    SettingBackup,\r\n    extractLikedPlaylistTreeRecur,\r\n    getLibraryAlbumUris,\r\n    getLibraryArtistUris,\r\n    getLibraryTrackUris,\r\n    getLocalStorage,\r\n    getLocalStoreAPI,\r\n    getSettings,\r\n} from \"./backup.ts\"\r\nimport { restoreExtensions, restoreLibrary, restoreSettings } from \"./restore.ts\"\r\n\r\nconst { ClipboardAPI } = Spicetify.Platform\r\n\r\nexport const backup = async (silent = false) => {\r\n    const libraryTracks = await getLibraryTrackUris()\r\n    const libraryAlbums = await getLibraryAlbumUris()\r\n    const libraryArtists = await getLibraryArtistUris()\r\n    const playlists = await fetchRootFolder().then(extractLikedPlaylistTreeRecur)\r\n    const localStore = getLocalStorage()\r\n    const localStoreAPI = getLocalStoreAPI()\r\n\r\n    const settings = getSettings()\r\n\r\n    await ClipboardAPI.copy(\r\n        JSON.stringify({\r\n            libraryTracks,\r\n            libraryAlbums,\r\n            libraryArtists,\r\n            playlists,\r\n            localStore,\r\n            localStoreAPI,\r\n            settings,\r\n        } as Vault),\r\n    )\r\n\r\n    !silent && Spicetify.showNotification(\"Backed up Playlists, Extensions and Settings\")\r\n}\r\n\r\ntype Vault = LibraryBackup & LocalStorageBackup & SettingBackup\r\nexport enum RestoreScope {\r\n    LIBRARY = \"library\",\r\n    EXTENSIONS = \"extensions\",\r\n    SETTINGS = \"settings\",\r\n}\r\n\r\nexport const restoreFactory = (mode: RestoreScope) => async () => {\r\n    const vault = JSON.parse(await ClipboardAPI.paste()) as Vault\r\n\r\n    switch (mode) {\r\n        case RestoreScope.LIBRARY:\r\n            return restoreLibrary(vault, true)\r\n        case RestoreScope.EXTENSIONS:\r\n            return restoreExtensions(vault, true)\r\n        case RestoreScope.SETTINGS:\r\n            return restoreSettings(vault, true)\r\n    }\r\n}\r\n\r\nimport(\"./settings.ts\")\r\n"],
  "mappings": "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",
  "names": ["URI", "init_util", "LibraryAPI", "init_util", "settings", "LocalStorageAPI", "init_util", "leaf", "require", "modules", "value", "init_settings", "settings", "RestoreScope"]
}
