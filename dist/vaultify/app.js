var y=(t,e)=>()=>(t&&(e=t(t=0)),e);import{array as h,eq as tt,string as et,record as bt,semigroup as Pt,function as u}from"https://esm.sh/fp-ts";import{guard as k,memoize as it}from"https://esm.sh/fp-ts-std/Function";var F,L,P,f,d,T,g=y(()=>{F=t=>k(t),L=t=>k(t),P=t=>async e=>t(await e),f=t=>e=>i=>i[t]===e,d=t=>e=>u.flow(h.chunksOf(t),h.map(e),i=>Promise.all(i),P(h.flatten)),T=t=>u.pipe(t,u.tupled,it(tt.contramap(JSON.stringify)(et.Eq)),u.untupled)});import{array as kt,function as w}from"https://esm.sh/fp-ts";var Ft,U,v,m,A=y(()=>{Ft={before:{start:w.constant({before:"start"}),fromUri:t=>({before:{uri:t}}),fromUid:t=>({before:{uid:t}})},after:{end:w.constant({after:"end"}),fromUri:t=>({after:{uri:t}}),fromUid:t=>({after:{uid:t}})}};U=t=>new Promise(e=>setTimeout(e,t)),v=t=>t[Object.keys(t).find(e=>e.startsWith("__reactProps$"))],m=(t,e)=>Spicetify.Platform.LibraryAPI[e?"add":"remove"](...t)});var Ct,Ot,Dt,Nt,B,E,C,O,rt,D,st,_t,N=y(()=>{g();A();Ct=d(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${t.join(",")}`)).artists),Ot=d(1)(async([t])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${t}`)]),Dt=d(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${t.join(",")}`)).albums),Nt=d(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${t.join(",")}`)).tracks),B=async t=>(await Spicetify.Platform.PlaylistAPI.getContents(t)).items,E=async(t,e={})=>await Spicetify.Platform.RootlistAPI.createFolder(t,e),C=async t=>await Spicetify.Platform.RootlistAPI.add([t]),O=(t,e,i)=>Spicetify.CosmosAsync.post("sp://core-playlist/v1/rootlist?responseFormat=protobufJson",{operation:"create",...i?{after:i}:{},name:t,playlist:!0,uris:e}),rt=async t=>await Spicetify.Platform.RootlistAPI.getContents({folderUri:t}),D=()=>rt(void 0),st=async(t,e,i,s="")=>{let r=new URL("https://ws.audioscrobbler.com/2.0/");return r.searchParams.append("method","track.getInfo"),r.searchParams.append("api_key",t),r.searchParams.append("artist",e),r.searchParams.append("track",i),r.searchParams.append("format","json"),r.searchParams.append("username",s),await fetch(r).then(n=>n.json())},_t=T(st)});import{task as _}from"https://esm.sh/fp-ts";var a,at,nt,G,ot,lt,x,pt,ct,yt,S,M=y(()=>{g();A();({React:a,ReactDOM:at}=Spicetify),{ButtonSecondary:nt}=Spicetify.ReactComponent,G=webpackChunkopen.push([[Symbol()],{},t=>t]),ot=Object.keys(G.m).map(t=>G(t)),lt=ot.filter(t=>typeof t=="object").map(t=>{try{return Object.values(t)}catch{}}).flat(),x=lt.filter(t=>typeof t=="function"),pt=x.find(t=>t.toString().includes("setSectionFilterMatchQueryValue")&&t.toString().includes("filterMatchQuery")),ct=x.find(t=>t.toString().includes("textSubdued")&&t.toString().includes("viola")),yt=x.find(t=>t.toString().includes("condensed")&&t.toString().includes("onSelected")),S=class t{constructor(e,i,s={}){this.name=e;this.sectionId=i;this.sectionFields=s;this.pushSettings=()=>{this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(()=>this.render()),this.render()};this.toObject=()=>new Proxy({},{get:(e,i)=>t.getFieldValue(this.getId(i.toString()))});this.render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await U(100)}let e=document.querySelector(".x-settings-container"),i=Array.from(e.children).find(({id:s})=>s===this.sectionId);i||(i=document.createElement("div"),i.id=this.sectionId,i.className="settingsContainer",e.appendChild(i)),at.render(a.createElement(this.FieldsContainer,null),i)};this.addButton=e=>(this.addField("button",e),this);this.addToggle=(e,i=_.of(!1))=>(this.addField("toggle",e,i),this);this.addInput=(e,i=_.of(""))=>(this.addField("input",e,i),this);this.getId=e=>`extensions:${this.sectionId}:${e}`;this.useStateFor=e=>{let[i,s]=a.useState(t.getFieldValue(e));return[i,r=>{r!==void 0&&(s(r),t.setFieldValue(e,r))}]};this.FieldsContainer=()=>a.createElement("div",{className:"x-settings-section"},a.createElement("h2",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-cello-textBase-type"},this.name),Object.entries(this.sectionFields).map(([e,i])=>a.createElement(this.Field,{field:i})));this.Field=({field:e})=>{let i=f("type");return L([[i("input"),this.InputField],[i("button"),this.ButtonField],[i("toggle"),this.ToggleField]])(()=>a.createElement(a.Fragment,null))(e)};this.SettingField=({field:e,children:i})=>a.createElement(pt,{filterMatchQuery:e.id},a.createElement("div",{className:"x-settings-firstColumn"},a.createElement(ct,{htmlFor:e.id},e.desc)),a.createElement("div",{className:"x-settings-secondColumn"},i));this.ButtonField=e=>a.createElement(this.SettingField,{field:e},a.createElement(nt,{id:e.id,buttonSize:"sm",onClick:e.onClick,className:"x-settings-button"},e.text));this.ToggleField=e=>{let[i,s]=this.useStateFor(e.id);return a.createElement(this.SettingField,{field:e},a.createElement(yt,{id:e.id,value:t.getFieldValue(this.getId(e.id)),onSelected:r=>{s(r),e.onSelected?.(r)},className:"x-settings-button"}))};this.InputField=e=>{let[i,s]=this.useStateFor(e.id);return a.createElement(this.SettingField,{field:e},a.createElement("input",{className:"x-settings-input",id:e.id,dir:"ltr",value:t.getFieldValue(this.getId(e.id)),type:e.inputType,onChange:r=>{let n=r.currentTarget.value;s(n),e.onChange?.(n)}}))}}addField(e,i,s){if(s!==void 0){let n=this.getId(i.id);t.setDefaultFieldValue(n,s)}let r=Object.assign({},i,{type:e});this.sectionFields[i.id]=r}static{this.getFieldValue=e=>JSON.parse(Spicetify.LocalStorage.get(e)??"null")}static{this.setFieldValue=(e,i)=>Spicetify.LocalStorage.set(e,JSON.stringify(i))}static{this.setDefaultFieldValue=async(e,i)=>{t.getFieldValue(e)===null&&t.setFieldValue(e,await i())}}}});var ut={};var dt,j=y(()=>{M();q();dt=new S("Vaultify","vaultify").addButton({id:"backup",desc:"Backup Library, Extensions and Settings",text:"Backup to clipboard",onClick:Q}).addButton({id:"restoreLibrary",desc:"Restore Library",text:"Restore from clipboard",onClick:b("library")}).addButton({id:"restoreExtensions",desc:"Restore Extensions",text:"Restore from clipboard",onClick:b("extensions")}).addButton({id:"restoreSettings",desc:"Restore Settings",text:"Restore from clipboard",onClick:b("settings")});dt.pushSettings()});import{array as l,function as p,record as V,task as ft}from"https://esm.sh/fp-ts";var $,H,gt,W,mt,Q,b,q=y(()=>{N();g();A();$=f("type"),H=t=>F([[$("playlist"),async e=>({[e.name]:e.isOwnedBySelf?await p.pipe(e.uri,B,P(l.map(i=>i.uri))):e.uri})],[$("folder"),async e=>({[e.name]:await p.pipe(e.items,l.map(H),i=>Promise.all(i))})]])(ft.of({}))(t),gt=t=>typeof t[0]=="string"&&Spicetify.URI.isTrack(t[0]),W=async t=>{Object.keys(t).forEach(e=>{let i=t[e];if(!Array.isArray(i))return void C(i);if(i.length!==0){if(gt(i))return void O(e,i);E(e),i.forEach(W)}})},mt=/^(?:marketplace:)|(?:extensions:)|(?:spicetify)/,Q=async()=>{let t=o=>o.items.map(c=>c.uri),e=await Spicetify.Platform.LibraryAPI.getTracks({limit:-1,sort:{field:"ADDED_AT",order:"ASC"}}),i=t(e),s=await Spicetify.Platform.LibraryAPI.getAlbums({limit:2**30,sort:{field:"ADDED_AT"}}),r=t(s),n=await Spicetify.Platform.LibraryAPI.getArtists({limit:2**30,sort:{field:"ADDED_AT"}}),I=t(n),z=await p.pipe(await D(),H),J=p.pipe(localStorage,V.toUnfoldable(l),l.filter(([o])=>mt.test(o))),{items:K,namespace:X}=Spicetify.Platform.LocalStorageAPI,Y=p.pipe(K,V.toUnfoldable(l),l.filter(([o])=>o.startsWith(X)),l.map(([o,c])=>[o.split(":")[1],c])),Z=p.pipe(document.querySelectorAll('[id^="settings."],[id^="desktop."],[class^="network."]'),Array.from,l.flatMap(o=>{let c=o.getAttribute("id");if(o instanceof HTMLInputElement){let R=o.getAttribute("type");if(R==="checkbox")return[[c,"checkbox",o.checked]];if(R==="text")return[[c,"text",o.value]]}else if(o instanceof HTMLSelectElement)return[[c,"select",o.value]];return[]}));await Spicetify.Platform.ClipboardAPI.copy(JSON.stringify({libraryTracks:i,libraryAlbums:r,libraryArtists:I,playlists:z,localStore:J,localStoreAPI:Y,settings:Z})),Spicetify.showNotification("Backed up Playlists, Extensions and Settings")},b=t=>async()=>{let e=JSON.parse(await Spicetify.Platform.ClipboardAPI.paste());t==="library"&&(m(e.libraryTracks,!0),m(e.libraryAlbums,!0),m(e.libraryArtists,!0),await W(e.playlists),Spicetify.showNotification("Restored Library")),t==="extensions"&&(l.map(p.tupled(Spicetify.LocalStorage.set))(e.localStore),l.map(p.tupled(Spicetify.Platform.LocalStorageAPI.setItem))(e.localStoreAPI),Spicetify.showNotification("Restored Extensions")),t==="settings"&&(e.settings.map(([i,s,r])=>{let n=document.querySelector(`[id="${i}"]`);if(!n)return console.warn(`Setting for ${i} wasn't found`);if(s==="text")n.value=r;else if(s==="checkbox")n.checked=r;else if(s==="select")n.value=r;else return;v(n).onChange({target:n})}),Spicetify.showNotification("Restored Settings"))};Promise.resolve().then(()=>j())});q();export{Q as backup,b as restore};
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,
