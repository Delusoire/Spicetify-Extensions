var d=(e,t)=>()=>(e&&(t=e(e=0)),t);import{array as I,eq as Z,string as tt,record as ut,semigroup as ft,function as g}from"https://esm.sh/fp-ts";import{guard as L,memoize as et}from"https://esm.sh/fp-ts-std/Function";var w,T,F,m,f,v,A=d(()=>{w=e=>L(e),T=e=>L(e),F=e=>async t=>e(await t),m=e=>t=>i=>i[e]===t,f=e=>t=>g.flow(I.chunksOf(e),I.map(t),i=>Promise.all(i),F(I.flatten)),v=e=>g.pipe(e,g.tupled,et(Z.contramap(JSON.stringify)(tt.Eq)),g.untupled)});import{array as St,function as U}from"https://esm.sh/fp-ts";var bt,S,E,b,h=d(()=>{bt={before:{start:U.constant({before:"start"}),fromUri:e=>({before:{uri:e}}),fromUid:e=>({before:{uid:e}})},after:{end:U.constant({after:"end"}),fromUri:e=>({after:{uri:e}}),fromUid:e=>({after:{uid:e}})}};S=e=>new Promise(t=>setTimeout(t,e)),E=e=>e[Object.keys(e).find(t=>t.startsWith("__reactProps$"))],b=(e,t)=>Spicetify.Platform.LibraryAPI[t?"add":"remove"](...e)});var Lt,wt,Tt,vt,B,D,C,N,it,O,rt,Ut,M=d(()=>{A();h();Lt=f(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${e.join(",")}`)).artists),wt=f(1)(async([e])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${e}`)]),Tt=f(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${e.join(",")}`)).albums),vt=f(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${e.join(",")}`)).tracks),B=async e=>(await Spicetify.Platform.PlaylistAPI.getContents(e)).items,D=async(e,t={})=>await Spicetify.Platform.RootlistAPI.createFolder(e,t),C=async e=>await Spicetify.Platform.RootlistAPI.add([e]),N=(e,t,i)=>Spicetify.CosmosAsync.post("sp://core-playlist/v1/rootlist?responseFormat=protobufJson",{operation:"create",...i?{after:i}:{},name:e,playlist:!0,uris:t}),it=async e=>await Spicetify.Platform.RootlistAPI.getContents({folderUri:e}),O=()=>it(void 0),rt=async(e,t,i,s="")=>{let r=new URL("https://ws.audioscrobbler.com/2.0/");return r.searchParams.append("method","track.getInfo"),r.searchParams.append("api_key",e),r.searchParams.append("artist",t),r.searchParams.append("track",i),r.searchParams.append("format","json"),r.searchParams.append("username",s),await fetch(r).then(n=>n.json())},Ut=v(rt)});import{task as _}from"https://esm.sh/fp-ts";import{constVoid as P}from"https://esm.sh/fp-ts/function";var a,st,x,H=d(()=>{A();h();({React:a,ReactDOM:st}=Spicetify),x=class e{constructor(t,i,s={}){this.name=t;this.sectionId=i;this.sectionFields=s;this.setRerender=null;this.pushSettings=async()=>{for(;!Spicetify?.Platform?.History?.listen;)await S(100);this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(({pathname:t=""})=>{t==="/preferences"&&this.render()}),Spicetify.Platform.History.location.pathname==="/preferences"&&await this.render()};this.toObject=()=>new Proxy({},{get:(t,i)=>e.getFieldValue(this.getId(i.toString()))});this.rerender=()=>{this.setRerender&&this.setRerender(Math.random())};this.render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await S(100)}let t=document.querySelector(".x-settings-container"),i=Array.from(t.children).find(({id:s})=>s===this.sectionId);i||(i=document.createElement("div"),i.id=this.sectionId,i.className="settingsContainer",t.appendChild(i)),st.render(a.createElement(this.FieldsContainer,null),i)};this.addButton=(t,i,s,r=P,n={})=>{let l=this.getId(t);return n.onClick=r,this.sectionFields[t]={id:l,type:"button",description:i,text:s,events:n},this};this.addToggle=(t,i,s=_.of(!0),r=P,n={})=>{let l=this.getId(t);return e.setDefaultFieldValue(l,s),n.onChange=r,this.sectionFields[t]={id:l,type:"toggle",description:i,events:n},this};this.addInput=(t,i,s,r=P,n="text",l={})=>{let y=this.getId(t);return e.setDefaultFieldValue(y,s),l.onChange=r,this.sectionFields[t]={id:y,type:"input",description:i,inputType:n,events:l},this};this.addDropDown=(t,i,s,r=_.of(0),n=P,l={})=>{let y=this.getId(t);return e.setDefaultFieldValue(y,r),l.onChange=n,this.sectionFields[t]={id:y,type:"dropdown",description:i,options:s,events:l},this};this.addHidden=(t,i)=>{let s=this.getId(t);return e.setDefaultFieldValue(s,i),this.sectionFields[t]={id:s,type:"hidden",description:""},this};this.getId=t=>`extensions:${this.sectionId}:${t}`;this.useStateFor=t=>{let[i,s]=a.useState(e.getFieldValue(t));return[i,r=>{r!==void 0&&(s(r),e.setFieldValue(t,r))}]};this.FieldsContainer=()=>{let[t,i]=a.useState(0);return this.setRerender=i,a.createElement("div",{className:"x-settings-section",key:t},a.createElement("h2",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-cello-textBase-type"},this.name),Object.entries(this.sectionFields).map(([s,r])=>a.createElement(this.Field,{field:r})))};this.Field=({field:t})=>{let i=m("type");return a.createElement("div",{className:"x-settings-row"},a.createElement(this.SettingDescription,{id:t.id,description:t.description}),a.createElement("div",{className:"x-settings-secondColumn"},T([[i("input"),this.SettingInputField],[i("button"),this.SettingButtonField],[i("toggle"),this.SettingToggleField],[i("dropdown"),this.SettingDropdownField]])(this.SettingHidden)(t)))};this.SettingDescription=({id:t,description:i})=>a.createElement("div",{className:"x-settings-firstColumn"},a.createElement("label",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-viola-textSubdued-type",htmlFor:t},i));this.SettingButtonField=t=>a.createElement("span",{className:""},a.createElement("button",{id:t.id,className:"Button-sc-y0gtbx-0 Button-sm-buttonSecondary-useBrowserDefaultFocusStyle x-settings-button",...t.events,type:t.type},t.text));this.SettingToggleField=t=>{let[i,s]=this.useStateFor(t.id);return a.createElement("label",{className:"x-settings-secondColumn x-toggle-wrapper"},a.createElement("input",{id:t.id,className:"x-toggle-input",type:"checkbox",checked:e.getFieldValue(t.id),...t.events,onChange:r=>{s(r.currentTarget.checked),t.events.onChange?.(r)}}),a.createElement("span",{className:"x-toggle-indicatorWrapper"},a.createElement("span",{className:"x-toggle-indicator"})))};this.SettingInputField=t=>{let[i,s]=this.useStateFor(t.id);return a.createElement("input",{className:"x-settings-input",id:t.id,dir:"ltr",value:e.getFieldValue(t.id),type:t.inputType,...t.events,onChange:r=>{s(r.currentTarget.value),t.events.onChange?.(r)}})};this.SettingDropdownField=t=>{let[i,s]=this.useStateFor(t.id);return a.createElement("select",{className:"main-dropDown-dropDown",id:t.id,...t.events,onChange:r=>{s(r.currentTarget.selectedIndex),t.events.onChange?.(r)}},t.options.map((r,n)=>a.createElement("option",{selected:n===e.getFieldValue(t.id),value:n+1},r)))};this.SettingHidden=()=>a.createElement(a.Fragment,null)}static{this.waitForReact=async()=>{for(;!(Spicetify.React&&Spicetify.ReactDOM);)S(100);return this}}static{this.getFieldValue=t=>JSON.parse(Spicetify.LocalStorage.get(t)??"null")}static{this.setFieldValue=(t,i)=>{Spicetify.LocalStorage.set(t,JSON.stringify(i))}}static{this.setDefaultFieldValue=async(t,i)=>{e.getFieldValue(t)===null&&e.setFieldValue(t,await i())}}}});var at={};var nt,G=d(()=>{H();Q();nt=new x("Vaultify","vaultify").addButton("backup","Backup Library, Extensions and Settings","Backup to clipboard",j).addButton("restoreLibrary","Restore Library","Restore from clipboard",R("library")).addButton("restoreExtensions","Restore Extensions","Restore from clipboard",R("extensions")).addButton("restoreSettings","Restore Settings","Restore from clipboard",R("settings"));nt.pushSettings()});import{array as p,function as c,record as V,task as ot}from"https://esm.sh/fp-ts";var q,W,lt,$,pt,j,R,Q=d(()=>{M();A();h();q=m("type"),W=e=>w([[q("playlist"),async t=>({[t.name]:t.isOwnedBySelf?await c.pipe(t.uri,B,F(p.map(i=>i.uri))):t.uri})],[q("folder"),async t=>({[t.name]:await c.pipe(t.items,p.map(W),i=>Promise.all(i))})]])(ot.of({}))(e),lt=e=>typeof e[0]=="string"&&Spicetify.URI.isTrack(e[0]),$=async e=>{Object.keys(e).forEach(t=>{let i=e[t];if(!Array.isArray(i))return void C(i);if(i.length!==0){if(lt(i))return void N(t,i);D(t),i.forEach($)}})},pt=/^(?:marketplace:)|(?:extensions:)|(?:spicetify)/,j=async()=>{let e=o=>o.items.map(u=>u.uri),t=await Spicetify.Platform.LibraryAPI.getTracks({limit:-1,sort:{field:"ADDED_AT",order:"ASC"}}),i=e(t),s=await Spicetify.Platform.LibraryAPI.getAlbums({limit:2**30,sort:{field:"ADDED_AT"}}),r=e(s),n=await Spicetify.Platform.LibraryAPI.getArtists({limit:2**30,sort:{field:"ADDED_AT"}}),l=e(n),y=await c.pipe(await O(),W),z=c.pipe(localStorage,V.toUnfoldable(p),p.filter(([o])=>pt.test(o))),{items:J,namespace:K}=Spicetify.Platform.LocalStorageAPI,X=c.pipe(J,V.toUnfoldable(p),p.filter(([o])=>o.startsWith(K)),p.map(([o,u])=>[o.split(":")[1],u])),Y=c.pipe(document.querySelectorAll('[id^="settings."],[id^="desktop."],[class^="network."]'),Array.from,p.flatMap(o=>{let u=o.getAttribute("id");if(o instanceof HTMLInputElement){let k=o.getAttribute("type");if(k==="checkbox")return[[u,"checkbox",o.checked]];if(k==="text")return[[u,"text",o.value]]}else if(o instanceof HTMLSelectElement)return[[u,"select",o.value]];return[]}));await Spicetify.Platform.ClipboardAPI.copy(JSON.stringify({libraryTracks:i,libraryAlbums:r,libraryArtists:l,playlists:y,localStore:z,localStoreAPI:X,settings:Y})),Spicetify.showNotification("Backed up Playlists, Extensions and Settings")},R=e=>async()=>{let t=JSON.parse(await Spicetify.Platform.ClipboardAPI.paste());e==="library"&&(b(t.libraryTracks,!0),b(t.libraryAlbums,!0),b(t.libraryArtists,!0),await $(t.playlists),Spicetify.showNotification("Restored Library")),e==="extensions"&&(p.map(c.tupled(Spicetify.LocalStorage.set))(t.localStore),p.map(c.tupled(Spicetify.Platform.LocalStorageAPI.setItem))(t.localStoreAPI),Spicetify.showNotification("Restored Extensions")),e==="settings"&&(t.settings.map(([i,s,r])=>{let n=document.querySelector(`[id="${i}"]`);if(!n)return console.warn(`Setting for ${i} wasn't found`);if(s==="text")n.value=r;else if(s==="checkbox")n.checked=r;else if(s==="select")n.value=r;else return;E(n).onChange({target:n})}),Spicetify.showNotification("Restored Settings"))};Promise.resolve().then(()=>G())});Q();export{j as backup,R as restore};
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,
