var $7=Object.defineProperty;var M0=($,Q)=>{for(var X in Q)$7($,X,{get:Q[X],enumerable:!0,configurable:!0,set:(Y)=>Q[X]=()=>Y})};function K($){return $}function W($){return function(){return $}}function I1($){return function(){var Q=[];for(var X=0;X<arguments.length;X++)Q[X]=arguments[X];if(Q.length>1)return $(Q[1],Q[0]);return function(Y){return $(Y)(Q[0])}}}function L($,Q,X,Y,V,H,Z,D,v){switch(arguments.length){case 1:return $;case 2:return function(){return Q($.apply(this,arguments))};case 3:return function(){return X(Q($.apply(this,arguments)))};case 4:return function(){return Y(X(Q($.apply(this,arguments))))};case 5:return function(){return V(Y(X(Q($.apply(this,arguments)))))};case 6:return function(){return H(V(Y(X(Q($.apply(this,arguments))))))};case 7:return function(){return Z(H(V(Y(X(Q($.apply(this,arguments)))))))};case 8:return function(){return D(Z(H(V(Y(X(Q($.apply(this,arguments))))))))};case 9:return function(){return v(D(Z(H(V(Y(X(Q($.apply(this,arguments)))))))))}}return}function A($){return function(Q){return $.apply(void 0,Q)}}function E1($){return function(){var Q=[];for(var X=0;X<arguments.length;X++)Q[X]=arguments[X];return $(Q)}}function J($,Q,X,Y,V,H,Z,D,v){switch(arguments.length){case 1:return $;case 2:return Q($);case 3:return X(Q($));case 4:return Y(X(Q($)));case 5:return V(Y(X(Q($))));case 6:return H(V(Y(X(Q($)))));case 7:return Z(H(V(Y(X(Q($))))));case 8:return D(Z(H(V(Y(X(Q($)))))));case 9:return v(D(Z(H(V(Y(X(Q($))))))));default:{var B=arguments[0];for(var p=1;p<arguments.length;p++)B=arguments[p](B);return B}}}var Q7=function($,Q,X){if(X||arguments.length===2){for(var Y=0,V=Q.length,H;Y<V;Y++)if(H||!(Y in Q)){if(!H)H=Array.prototype.slice.call(Q,0,Y);H[Y]=Q[Y]}}return $.concat(H||Array.prototype.slice.call(Q))};var W1=W(!1);var w=function($,Q){var X=typeof $==="number"?function(Y){return Y.length>=$}:$;return function(){var Y=Array.from(arguments);if(X(arguments))return Q.apply(this,Y);return function(V){return Q.apply(void 0,Q7([V],Y,!1))}}};var X7=function(){return{concat:function($,Q){return J($,Y7(Q))}}},k1=function(){return{concat:X7().concat,empty:W1}};var x1=function($){return function(Q){return!$(Q)}},Y7=function($){return function(Q){return function(X){return Q(X)||$(X)}}};var V7=function($,Q,X){if(X||arguments.length===2){for(var Y=0,V=Q.length,H;Y<V;Y++)if(H||!(Y in Q)){if(!H)H=Array.prototype.slice.call(Q,0,Y);H[Y]=Q[Y]}}return $.concat(H||Array.prototype.slice.call(Q))},H0=function($){return $._tag==="None"},U=function($){return $._tag==="Some"},G={_tag:"None"},P=function($){return{_tag:"Some",value:$}},I=function($){return $._tag==="Left"};var W0=function($){return $.length>0},I0=function($){return $[0]},y1=function($){return $.slice(1)};var E={};var E0=function($){return V7([$[0]],$.slice(1),!0)};function V0($){return function(Q){return function(X){return $.ap($.map(X,function(Y){return function(){return Y}}),Q)}}}function J0($){return function(Q){return function(X){return $.ap($.map(X,function(){return function(Y){return Y}}),Q)}}}function Z0($){return function(Q,X){return function(Y){return $.ap($.map(Y,function(V){return function(H){var Z;return Object.assign({},V,(Z={},Z[Q]=H,Z))}}),X)}}}function k0($){return function(Q){return function(X){return $.map(X,function(Y){return Y(Q)})}}}function r($){return function(Q){return function(X){return $.map(X,function(Y){var V;return V={},V[Q]=Y,V})}}}var o=function($){return function(Q,X){return function(Y){return $.map(Y,function(V){var H;return Object.assign({},V,(H={},H[Q]=X(V),H))})}}};function x0($){return function(Q,X){return $.map(Q,function(){return X})}}function b1($){var Q=x0($);return function(X){return Q(X,void 0)}}function h1($){var Q=f($);return function(X){return function(Y){return Q(Y,X)}}}function f($){return function(Q,X){return $.chain(Q,function(Y){return $.map(X(Y),function(){return Y})})}}function s($){return function(Q,X){return function(Y){return $.chain(Y,function(V){return $.map(X(V),function(H){var Z;return Object.assign({},V,(Z={},Z[Q]=H,Z))})})}}}function j0($){return function(Q){return L(Q,$.fromEither)}}function u1($,Q){var X=j0($),Y=f(Q);return function(V,H){return Y(V,X(H))}}var l1=function($){return function(Q){return function(X){return X.reduce(function(Y,V){return $.concat(Y,V)},Q)}}};var G0={};M0(G0,{tuple:()=>{{return m1}},struct:()=>{{return c1}},strictEqual:()=>{{return L7}},getTupleEq:()=>{{return P7}},getStructEq:()=>{{return z7}},getSemigroup:()=>{{return n1}},getMonoid:()=>{{return D7}},fromEquals:()=>{{return R}},eqString:()=>{{return B7}},eqStrict:()=>{{return O}},eqNumber:()=>{{return v7}},eqDate:()=>{{return w7}},eqBoolean:()=>{{return C7}},eq:()=>{{return q7}},contramap:()=>{{return _1}},URI:()=>{{return d1}},Contravariant:()=>{{return p1}}});var R=function($){return{equals:function(Q,X){return Q===X||$(Q,X)}}},c1=function($){return R(function(Q,X){for(var Y in $)if(!$[Y].equals(Q[Y],X[Y]))return!1;return!0})},m1=function(){var $=[];for(var Q=0;Q<arguments.length;Q++)$[Q]=arguments[Q];return R(function(X,Y){return $.every(function(V,H){return V.equals(X[H],Y[H])})})},j7=function($,Q){return J($,_1(Q))},_1=function($){return function(Q){return R(function(X,Y){return Q.equals($(X),$(Y))})}},d1="Eq",O={equals:function($,Q){return $===Q}},G7={equals:function(){return!0}},n1=function(){return{concat:function($,Q){return R(function(X,Y){return $.equals(X,Y)&&Q.equals(X,Y)})}}},D7=function(){return{concat:n1().concat,empty:G7}},p1={URI:d1,contramap:j7},P7=m1,z7=c1,L7=O.equals,q7=p1,C7=O,B7=O,v7=O,w7={equals:function($,Q){return $.valueOf()===Q.valueOf()}};var U7=function($,Q){return $<Q?-1:$>Q?1:0},K7=function($){return function(Q,X){return Q===X||$(Q,X)===0}},D0=function($){return{equals:K7($),compare:function(Q,X){return Q===X?0:$(Q,X)}}};var T7=function(){return{concat:function($,Q){return D0(function(X,Y){var V=$.compare(X,Y);return V!==0?V:Q.compare(X,Y)})}}},r1=function(){return{concat:T7().concat,empty:D0(function(){return 0})}};var OQ={equals:O.equals,compare:U7};var N7=function($){return{concat:function(){return $}}};var o1=l1,f1=N7(void 0);var s1={concat:function($,Q){return $&&Q}},t1={concat:function($,Q){return $||Q}};var i1={concat:function($,Q){return $+Q}},e1={concat:function($,Q){return $+Q}},a1={concat:function($,Q){return $*Q}};var P0=function($,Q){return{left:$,right:Q}};function $5($,Q){return function(X){var Y=$.traverse(X);return function(V,H){return X.map(Y(V,H),Q.separate)}}}function Q5($,Q){return function(X){var Y=$.traverse(X);return function(V,H){return X.map(Y(V,H),Q.compact)}}}function X5($){return function(Q){var X=$.wither(Q);return function(Y){return function(V){return X(V,function(H){return Q.map(Y(H),function(Z){return Z?P(H):G})})}}}}function Y5($,Q){return function(X){return X?Q.of(void 0):$.zero()}}var t=G,y0=P;var R7=function($){return $._tag==="Left"?t:y0($.right)},H5=function($,Q){return J($,z0(Q))},O7=function($,Q){return J($,g7(Q))};var b0="Option";var z0=function($){return function(Q){return i(Q)?t:y0($(Q.value))}},V5={URI:b0,map:H5},uQ=w(2,x0(V5)),lQ=b1(V5);var g7=function($){return function(Q){return i(Q)?t:i($)?t:y0(Q.value($.value))}};var F7=w(2,function($,Q){return i($)?t:Q($.value)}),J5={URI:b0,map:H5,ap:O7,chain:F7};var cQ=w(2,function($,Q){return i($)?Q():$});var M7=R7,W7={URI:b0,fromEither:M7},Z5=U,i=function($){return $._tag==="None"};var mQ=w(2,f(J5)),_Q=w(2,u1(W7,J5));function G5($){return function(Q,X){if(X===void 0){var Y=G5($);return function(B){return Y(Q,B)}}var V=X.entries(),H;while(!(H=V.next()).done){var Z=H.value,D=Z[0],v=Z[1];if($.equals(D,Q))return P([D,v])}return G}}function h0($){var Q=G5($);return function(X,Y){if(Y===void 0){var V=h0($);return function(H){return V(X,H)}}return J(Q(X,Y),z0(function(H){var Z=H[0],D=H[1];return D}))}}var D5=h0;var _={};M0(_,{zipWith:()=>{{return G4}},zip:()=>{{return D4}},zero:()=>{{return l}},wither:()=>{{return _9}},wilt:()=>{{return d9}},updateAt:()=>{{return N9}},unzip:()=>{{return F9}},unsafeUpdateAt:()=>{{return m4}},unsafeInsertAt:()=>{{return c4}},unsafeDeleteAt:()=>{{return _4}},uniq:()=>{{return I9}},union:()=>{{return Z1}},unfold:()=>{{return N1}},traverseWithIndex:()=>{{return U1}},traverse:()=>{{return k4}},takeRight:()=>{{return G9}},takeLeftWhile:()=>{{return D9}},takeLeft:()=>{{return j9}},tail:()=>{{return J9}},splitAt:()=>{{return z4}},spanLeft:()=>{{return P9}},sortBy:()=>{{return E9}},sort:()=>{{return g9}},some:()=>{{return d4}},snoc:()=>{{return E$}},size:()=>{{return X9}},sequence:()=>{{return X0}},separate:()=>{{return m}},scanRight:()=>{{return Q9}},scanLeft:()=>{{return $9}},rotate:()=>{{return W9}},rights:()=>{{return R9}},reverse:()=>{{return S9}},replicate:()=>{{return s7}},reduceWithIndex:()=>{{return T1}},reduceRightWithIndex:()=>{{return E4}},reduceRight:()=>{{return I4}},reduce:()=>{{return W4}},range:()=>{{return M$}},prependW:()=>{{return o7}},prependToAll:()=>{{return k$}},prependAll:()=>{{return P4}},prepend:()=>{{return r7}},partitionWithIndex:()=>{{return v1}},partitionMapWithIndex:()=>{{return w1}},partitionMap:()=>{{return S4}},partition:()=>{{return A4}},of:()=>{{return M}},modifyAt:()=>{{return j4}},matchW:()=>{{return Q4}},matchRightW:()=>{{return H4}},matchRight:()=>{{return V4}},matchLeftW:()=>{{return X4}},matchLeft:()=>{{return Y4}},match:()=>{{return i7}},mapWithIndex:()=>{{return U4}},map:()=>{{return q1}},makeBy:()=>{{return e5}},lookup:()=>{{return Y9}},let:()=>{{return R$}},lefts:()=>{{return O9}},last:()=>{{return V9}},isOutOfBound:()=>{{return Q0}},isNonEmpty:()=>{{return z}},isEmpty:()=>{{return g}},intersperse:()=>{{return M9}},intersection:()=>{{return j1}},intercalate:()=>{{return N$}},insertAt:()=>{{return U9}},init:()=>{{return Z9}},head:()=>{{return H9}},guard:()=>{{return J$}},getUnionSemigroup:()=>{{return y4}},getUnionMonoid:()=>{{return f9}},getShow:()=>{{return n9}},getSemigroup:()=>{{return x4}},getOrd:()=>{{return o9}},getMonoid:()=>{{return p9}},getIntersectionSemigroup:()=>{{return s9}},getEq:()=>{{return r9}},getDifferenceMagma:()=>{{return t9}},fromPredicate:()=>{{return t7}},fromOptionK:()=>{{return y9}},fromOption:()=>{{return a5}},fromEitherK:()=>{{return K$}},fromEither:()=>{{return $4}},foldRight:()=>{{return a7}},foldMapWithIndex:()=>{{return M4}},foldMap:()=>{{return F4}},foldLeft:()=>{{return e7}},flatten:()=>{{return c9}},flatMap:()=>{{return T}},flap:()=>{{return i9}},findLastMap:()=>{{return K9}},findLastIndex:()=>{{return T9}},findLast:()=>{{return w9}},findIndex:()=>{{return C9}},findFirstMap:()=>{{return v9}},findFirst:()=>{{return B9}},filterWithIndex:()=>{{return g4}},filterMapWithIndex:()=>{{return C1}},filterMap:()=>{{return B1}},filterE:()=>{{return w$}},filter:()=>{{return N4}},extend:()=>{{return K1}},exists:()=>{{return U$}},every:()=>{{return T$}},empty:()=>{{return W$}},elem:()=>{{return J1}},duplicate:()=>{{return m9}},dropRight:()=>{{return L9}},dropLeftWhile:()=>{{return q9}},dropLeft:()=>{{return z9}},difference:()=>{{return G1}},deleteAt:()=>{{return A9}},copy:()=>{{return C}},cons:()=>{{return I$}},concatW:()=>{{return L4}},concat:()=>{{return h9}},comprehension:()=>{{return b9}},compact:()=>{{return c}},chunksOf:()=>{{return x9}},chop:()=>{{return k9}},chainWithIndex:()=>{{return J4}},chainRecDepthFirst:()=>{{return q$}},chainRecBreadthFirst:()=>{{return B$}},chainFirst:()=>{{return X$}},chain:()=>{{return F$}},bindTo:()=>{{return S$}},bind:()=>{{return O$}},array:()=>{{return x$}},appendW:()=>{{return f7}},append:()=>{{return C0}},apSecond:()=>{{return $$}},apS:()=>{{return g$}},apFirst:()=>{{return a9}},ap:()=>{{return T4}},altW:()=>{{return R4}},alt:()=>{{return O4}},Zero:()=>{{return h4}},Witherable:()=>{{return u4}},Unfoldable:()=>{{return H$}},URI:()=>{{return j}},TraversableWithIndex:()=>{{return L$}},Traversable:()=>{{return R1}},Pointed:()=>{{return b4}},Monad:()=>{{return Y$}},FunctorWithIndex:()=>{{return e9}},Functor:()=>{{return N0}},FromEither:()=>{{return l4}},FoldableWithIndex:()=>{{return z$}},Foldable:()=>{{return P$}},FilterableWithIndex:()=>{{return D$}},Filterable:()=>{{return G$}},Extend:()=>{{return j$}},Do:()=>{{return A$}},Compactable:()=>{{return S1}},ChainRecDepthFirst:()=>{{return C$}},ChainRecBreadthFirst:()=>{{return v$}},Chain:()=>{{return A1}},Apply:()=>{{return A0}},Applicative:()=>{{return Q$}},Alternative:()=>{{return Z$}},Alt:()=>{{return V$}}});var y7=function($,Q,X){if(X||arguments.length===2){for(var Y=0,V=Q.length,H;Y<V;Y++)if(H||!(Y in Q)){if(!H)H=Array.prototype.slice.call(Q,0,Y);H[Y]=Q[Y]}}return $.concat(H||Array.prototype.slice.call(Q))};var e=W0,P5=function($,Q){return $<0||$>=Q.length},z5=function($){return function(Q){return y7([$],Q,!0)}},L5=z5;var q5=function($){return function(Q){var X=[$,Q[0]];for(var Y=1;Y<Q.length;Y++)X.push($,Q[Y]);return X}},C5=function($){return function(Q){var X=B5(Q);return e(X)?J(X,q5($),L5(a(Q))):Q}};var b7=I0;var a=b7,B5=y1,L0=function($){return $[$.length-1]};var v5=function($){return function(Q){return Q.reduce($.concat)}};var u0=function($){var Q=v5($);return function(X){return L(C5(X),Q)}};function S5($,Q){return Q?$.concat(Q):function(X){return X.concat($)}}function M5($,Q){return Q===void 0?k($):J(Q,k($))}var l0=function($,Q,X){if(X||arguments.length===2){for(var Y=0,V=Q.length,H;Y<V;Y++)if(H||!(Y in Q)){if(!H)H=Array.prototype.slice.call(Q,0,Y);H[Y]=Q[Y]}}return $.concat(H||Array.prototype.slice.call(Q))},x=function($){return $.length>0},c0=function($,Q){return $<0||$>=Q.length},m0=function($){return function(Q){return l0([$],Q,!0)}},k=m0,_0=function($){return function(Q){return l0(l0([],Q,!0),[$],!1)}},d0=_0,K5=function($,Q,X){if(x(X)){var Y=r0(X);return Y.splice($,0,Q),Y}return[Q]},T5=function($,Q,X){var Y=r0(X);return Y[$]=Q,Y},n0=function($){return function(Q){if(Q.length===1)return $0(Q);var X=[y(Q)],Y=b(Q),V=function(v){if(X.every(function(B){return!$.equals(B,v)}))X.push(v)};for(var H=0,Z=Y;H<Z.length;H++){var D=Z[H];V(D)}return X}},U5=function($){if(x($)){var Q=r1();return h7($.reduce(Q.concat,Q.empty))}return $0},N5=function($){var Q=n0($);return function(X){return function(Y){return Q(J(Y,S5(X)))}}},p0=function($){return function(Q){var X=Q.length,Y=Math.round($)%X;if(c0(Math.abs(Y),Q)||Y===0)return $0(Q);if(Y<0){var V=q0(-Y)(Q),H=V[0],Z=V[1];return J(Z,S5(H))}else return p0(Y-X)(Q)}},r0=E0;var o0=function($){return function(Q){var X=Math.max(0,Math.floor(Q)),Y=[$(0)];for(var V=1;V<X;V++)Y.push($(V));return Y}};var A5=function($,Q){return $<=Q?o0(function(X){return $+X})(Q-$+1):[$]};var h7=function($){return function(Q){return Q.slice().sort($.compare)}};var $0=r0,R5=function($){return[$]};var f0=function($){return function(Q){var X=[$,Q[0]];for(var Y=1;Y<Q.length;Y++)X.push($,Q[Y]);return X}},O5=function($){return function(Q){var X=b(Q);return x(X)?J(X,f0($),k(y(Q))):$0(Q)}};var s0=function($){return function(Q){var X=$(Q),Y=X[0],V=X[1],H=[Y],Z=V;while(x(Z)){var D=$(Z),v=D[0],B=D[1];H.push(v),Z=B}return H}},q0=function($){return function(Q){var X=Math.max(1,$);return X>=Q.length?[$0(Q),[]]:[J(Q.slice(1,X),k(y(Q))),Q.slice(X)]}},g5=function($){return s0(q0($))};var y=a,b=function($){return $.slice(1)},F5=L0,t0=function($){return $.slice(0,-1)};var W5=function($,Q){return J($,d0(Q))};var I5={equals:function($,Q){return $===Q}},i0={equals:I5.equals,compare:function($,Q){return $<Q?-1:$>Q?1:0}},NX={equals:I5.equals,compare:i0.compare,top:Infinity,bottom:(-Infinity)};var l7={concat:function($,Q){return $-Q}},E5={concat:function($,Q){return $+Q}},k5={concat:function($,Q){return $*Q}},AX={concat:E5.concat,empty:0},SX={concat:k5.concat,empty:1},RX={add:E5.concat,zero:0,mul:k5.concat,one:1,sub:l7.concat,degree:function($){return 1},div:function($,Q){return $/Q},mod:function($,Q){return $%Q}};function a0($,Q){return Q===void 0?function(X){return a0($,X)}:n7($,Q)?G:P(Q[$])}function h5($){return function(Q){for(var X=0;X<Q.length;X++)if($(Q[X]))return P(Q[X]);return G}}function l5($){return function(Q){for(var X=Q.length-1;X>=0;X--)if($(Q[X]))return P(Q[X]);return G}}function $1($){return function(Q,X){if(X===void 0){var Y=$1($);return function(Z){return Y(Q,Z)}}var V=function(Z){return $.equals(Z,Q)},H=0;for(;H<X.length;H++)if(V(X[H]))return!0;return!1}}function t5($){return function(Q){return Q.every($)}}var m7=function($,Q,X){if(X||arguments.length===2){for(var Y=0,V=Q.length,H;Y<V;Y++)if(H||!(Y in Q)){if(!H)H=Array.prototype.slice.call(Q,0,Y);H[Y]=Q[Y]}}return $.concat(H||Array.prototype.slice.call(Q))};var e0=e;var _7=function($,Q){return function(X){return e0(X)?Q(X):$()}},d7=_7;var n7=P5,x5=function($){return e0($)?P(a($)):G},y5=function($){return e0($)?P(L0($)):G};var b5=function($){return function(Q){for(var X=0;X<Q.length;X++)if($(Q[X]))return P(X);return G}},u5=function($){return function(Q){for(var X=0;X<Q.length;X++){var Y=$(Q[X]);if(U(Y))return Y}return G}},c5=function($){return function(Q){for(var X=Q.length-1;X>=0;X--){var Y=$(Q[X]);if(U(Y))return Y}return G}},m5=function($){return function(Q){for(var X=Q.length-1;X>=0;X--)if($(Q[X]))return P(X);return G}};var _5=function($,Q){return J($,H1(Q))},d5=function($,Q){return J($,V1(Q))};var Q1=function($){return function(Q){return function(X){return X.reduce(function(Y,V,H){return $.concat(Y,Q(H,V))},$.empty)}}},n5=function($,Q){return X1($,function(X,Y,V){return Q(Y,V)})},p5=function($){var Q=Q1($);return function(X){return Q(function(Y,V){return X(V)})}},X1=function($,Q){return function(X){var Y=X.length,V=$;for(var H=0;H<Y;H++)V=Q(H,V,X[H]);return V}},r5=function($,Q){return Y1($,function(X,Y,V){return Q(Y,V)})},Y1=function($,Q){return function(X){return X.reduceRight(function(Y,V,H){return Q(H,V,Y)},$)}};var o5=function($){return{show:function(Q){return"[".concat(Q.map($.show).join(", "),"]")}}};var f5=function($){return R(function(Q,X){return Q.length===X.length&&Q.every(function(Y,V){return $.equals(Y,X[V])})})},s5=function($){return D0(function(Q,X){var Y=Q.length,V=X.length,H=Math.min(Y,V);for(var Z=0;Z<H;Z++){var D=$.compare(Q[Z],X[Z]);if(D!==0)return D}return i0.compare(Y,V)})};var H1=function($){return function(Q){var X=m7([],$(Q),!0),Y=[];while(X.length>0){var V=X.shift();if(I(V))X.unshift.apply(X,$(V.left));else Y.push(V.right)}return Y}};var V1=function($){return function(Q){var X=$(Q),Y=[],V=[];function H(B){if(I(B))$(B.left).forEach(function(p){return Y.push(p)});else V.push(B.right)}for(var Z=0,D=X;Z<D.length;Z++){var v=D[Z];H(v)}while(Y.length>0)H(Y.shift());return V}};var i5=function($){var Q=u0($);return function(X){return d7(function(){return $.empty},Q(X))}};function t7($){return function(Q){return $(Q)?[Q]:[]}}function D9($){return function(Q){var X=[];for(var Y=0,V=Q;Y<V.length;Y++){var H=V[Y];if(!$(H))break;X.push(H)}return X}}function P9($){return function(Q){var X=z4(Z4(Q,$))(Q),Y=X[0],V=X[1];return{init:Y,rest:V}}}function q9($){return function(Q){return Q.slice(Z4(Q,$))}}function B9($){return h5($)}function w9($){return l5($)}function D4($,Q){if(Q===void 0)return function(X){return D4(X,$)};return G4($,Q,function(X,Y){return[X,Y]})}function b9($,Q,X){if(X===void 0)X=function(){return!0};var Y=function(V,H){return z(H)?T(y(H),function(Z){return Y(J(V,C0(Z)),b(H))}):X.apply(void 0,V)?[Q.apply(void 0,V)]:[]};return Y([],$)}function Z1($){var Q=N5($);return function(X,Y){if(Y===void 0){var V=Z1($);return function(H){return V(H,X)}}return z(X)&&z(Y)?Q(Y)(X):z(X)?C(X):C(Y)}}function j1($){var Q=J1($);return function(X,Y){if(Y===void 0){var V=j1($);return function(H){return V(H,X)}}return X.filter(function(H){return Q(H,Y)})}}function G1($){var Q=J1($);return function(X,Y){if(Y===void 0){var V=G1($);return function(H){return V(H,X)}}return X.filter(function(H){return!Q(H,Y)})}}var g=function($){return $.length===0},z=x,r7=k,o7=m0,C0=d0,f7=_0,e5=function($,Q){return $<=0?[]:o0(Q)($)},s7=function($,Q){return e5($,function(){return Q})},a5=function($){return H0($)?[]:[$.value]},$4=function($){return I($)?[]:[$.right]},Q4=function($,Q){return function(X){return z(X)?Q(X):$()}},i7=Q4,X4=function($,Q){return function(X){return z(X)?Q(y(X),b(X)):$()}},Y4=X4,e7=Y4,H4=function($,Q){return function(X){return z(X)?Q(t0(X),F5(X)):$()}},V4=H4,a7=V4,J4=function($){return function(Q){var X=[];for(var Y=0;Y<Q.length;Y++)X.push.apply(X,$(Y,Q[Y]));return X}},$9=function($,Q){return function(X){var Y=X.length,V=new Array(Y+1);V[0]=$;for(var H=0;H<Y;H++)V[H+1]=Q(V[H],X[H]);return V}},Q9=function($,Q){return function(X){var Y=X.length,V=new Array(Y+1);V[Y]=$;for(var H=Y-1;H>=0;H--)V[H]=Q(X[H],V[H+1]);return V}},X9=function($){return $.length},Q0=c0,Y9=a0,H9=x5,V9=y5,J9=function($){return z($)?P(b($)):G},Z9=function($){return z($)?P(t0($)):G},j9=function($){return function(Q){return Q0($,Q)?C(Q):Q.slice(0,$)}},G9=function($){return function(Q){return Q0($,Q)?C(Q):$===0?[]:Q.slice(-$)}},Z4=function($,Q){var X=$.length,Y=0;for(;Y<X;Y++)if(!Q($[Y]))break;return Y},z9=function($){return function(Q){return $<=0||g(Q)?C(Q):$>=Q.length?[]:Q.slice($,Q.length)}},L9=function($){return function(Q){return $<=0||g(Q)?C(Q):$>=Q.length?[]:Q.slice(0,Q.length-$)}},C9=b5,v9=u5,K9=c5,T9=m5,C=function($){return $.slice()},U9=function($,Q){return function(X){return $<0||$>X.length?G:P(c4($,Q,X))}},N9=function($,Q){return j4($,function(){return Q})},A9=function($){return function(Q){return Q0($,Q)?G:P(_4($,Q))}},j4=function($,Q){return function(X){return Q0($,X)?G:P(m4($,Q(X[$]),X))}},S9=function($){return g($)?[]:$.slice().reverse()},R9=function($){var Q=[];for(var X=0;X<$.length;X++){var Y=$[X];if(Y._tag==="Right")Q.push(Y.right)}return Q},O9=function($){var Q=[];for(var X=0;X<$.length;X++){var Y=$[X];if(Y._tag==="Left")Q.push(Y.left)}return Q},g9=function($){return function(Q){return Q.length<=1?C(Q):Q.slice().sort($.compare)}},G4=function($,Q,X){var Y=[],V=Math.min($.length,Q.length);for(var H=0;H<V;H++)Y[H]=X($[H],Q[H]);return Y},F9=function($){var Q=[],X=[];for(var Y=0;Y<$.length;Y++)Q[Y]=$[Y][0],X[Y]=$[Y][1];return[Q,X]},P4=function($){var Q=f0($);return function(X){return z(X)?Q(X):[]}},M9=function($){var Q=O5($);return function(X){return z(X)?Q(X):C(X)}},W9=function($){var Q=p0($);return function(X){return z(X)?Q(X):C(X)}},J1=$1,I9=function($){var Q=n0($);return function(X){return z(X)?Q(X):C(X)}},E9=function($){var Q=U5($);return function(X){return z(X)?Q(X):C(X)}},k9=function($){var Q=s0($);return function(X){return z(X)?Q(X):[]}},z4=function($){return function(Q){return $>=1&&z(Q)?q0($)(Q):g(Q)?[C(Q),[]]:[[],C(Q)]}},x9=function($){var Q=g5($);return function(X){return z(X)?Q(X):[]}},y9=function($){return function(){var Q=[];for(var X=0;X<arguments.length;X++)Q[X]=arguments[X];return a5($.apply(void 0,Q))}},L4=function($){return function(Q){return g(Q)?C($):g($)?C(Q):Q.concat($)}},h9=L4,q=function($,Q){return J($,q1(Q))},B0=function($,Q){return J($,U4(Q))},N=function($,Q){return J($,T4(Q))},v0=function($,Q){return J($,N4(Q))},w0=function($,Q){return J($,B1(Q))},K0=function($,Q){return J($,A4(Q))},T0=function($,Q){return J($,S4(Q))},q4=function($,Q){return J($,v1(Q))},C4=function($,Q){return J($,w1(Q))},D1=function($,Q){return J($,O4(Q))},F=function($,Q,X){return J($,W4(Q,X))},h=function($){var Q=F4($);return function(X,Y){return J(X,Q(Y))}},u=function($,Q,X){return J($,I4(Q,X))},P1=function($,Q,X){return J($,T1(Q,X))},z1=function($){var Q=M4($);return function(X,Y){return J(X,Q(Y))}},L1=function($,Q,X){return J($,E4(Q,X))},B4=function($,Q){return J($,C1(Q))},v4=function($,Q){return J($,g4(Q))},w4=function($,Q){return J($,K1(Q))},U0=function($){var Q=k4($);return function(X,Y){return J(X,Q(Y))}},K4=function($){var Q=U1($);return function(X,Y){return J(X,Q(Y))}},u9=_5,l9=d5,M=R5,l=function(){return[]},q1=function($){return function(Q){return Q.map(function(X){return $(X)})}},T4=function($){return T(function(Q){return J($,q1(Q))})},T=w(2,function($,Q){return J($,J4(function(X,Y){return Q(Y,X)}))}),c9=T(K),U4=function($){return function(Q){return Q.map(function(X,Y){return $(Y,X)})}},C1=function($){return function(Q){var X=[];for(var Y=0;Y<Q.length;Y++){var V=$(Y,Q[Y]);if(U(V))X.push(V.value)}return X}},B1=function($){return C1(function(Q,X){return $(X)})},c=B1(K),m=function($){var Q=[],X=[];for(var Y=0,V=$;Y<V.length;Y++){var H=V[Y];if(H._tag==="Left")Q.push(H.left);else X.push(H.right)}return P0(Q,X)},N4=function($){return function(Q){return Q.filter($)}},A4=function($){return v1(function(Q,X){return $(X)})},v1=function($){return function(Q){var X=[],Y=[];for(var V=0;V<Q.length;V++){var H=Q[V];if($(V,H))Y.push(H);else X.push(H)}return P0(X,Y)}},S4=function($){return w1(function(Q,X){return $(X)})},w1=function($){return function(Q){var X=[],Y=[];for(var V=0;V<Q.length;V++){var H=$(V,Q[V]);if(H._tag==="Left")X.push(H.left);else Y.push(H.right)}return P0(X,Y)}},R4=function($){return function(Q){return Q.concat($())}},O4=R4,g4=function($){return function(Q){return Q.filter(function(X,Y){return $(Y,X)})}},K1=function($){return function(Q){return Q.map(function(X,Y){return $(Q.slice(Y))})}},m9=K1(K),F4=p5,M4=Q1,W4=n5,T1=X1,I4=r5,E4=Y1,k4=function($){var Q=U1($);return function(X){return Q(function(Y,V){return X(V)})}},X0=function($){return function(Q){return F(Q,$.of(l()),function(X,Y){return $.ap($.map(X,function(V){return function(H){return J(V,C0(H))}}),Y)})}},U1=function($){return function(Q){return T1($.of(l()),function(X,Y,V){return $.ap($.map(Y,function(H){return function(Z){return J(H,C0(Z))}}),Q(X,V))})}},_9=function($){var Q=O1($);return function(X){return function(Y){return Q(Y,X)}}},d9=function($){var Q=g1($);return function(X){return function(Y){return Q(Y,X)}}},N1=function($,Q){var X=[],Y=$;while(!0){var V=Q(Y);if(U(V)){var H=V.value,Z=H[0],D=H[1];X.push(Z),Y=D}else break}return X},j="Array",n9=o5,x4=function(){return{concat:function($,Q){return $.concat(Q)}}},p9=function(){return{concat:x4().concat,empty:[]}},r9=f5,o9=s5,y4=function($){var Q=Z1($);return{concat:function(X,Y){return Q(Y)(X)}}},f9=function($){return{concat:y4($).concat,empty:[]}},s9=function($){var Q=j1($);return{concat:function(X,Y){return Q(Y)(X)}}},t9=function($){var Q=G1($);return{concat:function(X,Y){return Q(Y)(X)}}},N0={URI:j,map:q},i9=k0(N0),b4={URI:j,of:M},e9={URI:j,map:q,mapWithIndex:B0},A0={URI:j,map:q,ap:N},a9=V0(A0),$$=J0(A0),Q$={URI:j,map:q,ap:N,of:M},A1={URI:j,map:q,ap:N,chain:T},X$=h1(A1),Y$={URI:j,map:q,ap:N,of:M,chain:T},H$={URI:j,unfold:N1},V$={URI:j,map:q,alt:D1},h4={URI:j,zero:l},J$=Y5(h4,b4),Z$={URI:j,map:q,ap:N,of:M,alt:D1,zero:l},j$={URI:j,map:q,extend:w4},S1={URI:j,compact:c,separate:m},G$={URI:j,map:q,compact:c,separate:m,filter:v0,filterMap:w0,partition:K0,partitionMap:T0},D$={URI:j,map:q,mapWithIndex:B0,compact:c,separate:m,filter:v0,filterMap:w0,partition:K0,partitionMap:T0,partitionMapWithIndex:C4,partitionWithIndex:q4,filterMapWithIndex:B4,filterWithIndex:v4},P$={URI:j,reduce:F,foldMap:h,reduceRight:u},z$={URI:j,reduce:F,foldMap:h,reduceRight:u,reduceWithIndex:P1,foldMapWithIndex:z1,reduceRightWithIndex:L1},R1={URI:j,map:q,reduce:F,foldMap:h,reduceRight:u,traverse:U0,sequence:X0},L$={URI:j,map:q,mapWithIndex:B0,reduce:F,foldMap:h,reduceRight:u,reduceWithIndex:P1,foldMapWithIndex:z1,reduceRightWithIndex:L1,traverse:U0,sequence:X0,traverseWithIndex:K4},O1=Q5(R1,S1),g1=$5(R1,S1),u4={URI:j,map:q,compact:c,separate:m,filter:v0,filterMap:w0,partition:K0,partitionMap:T0,reduce:F,foldMap:h,reduceRight:u,traverse:U0,sequence:X0,wither:O1,wilt:g1},q$=H1,C$={URI:j,map:q,ap:N,chain:T,chainRec:u9},B$=V1,v$={URI:j,map:q,ap:N,chain:T,chainRec:l9},w$=X5(u4),l4={URI:j,fromEither:$4},K$=j0(l4),c4=K5,m4=function($,Q,X){return z(X)?T5($,Q,X):[]},_4=function($,Q){var X=Q.slice();return X.splice($,1),X},T$=t5,d4=function($){return function(Q){return Q.some($)}},U$=d4,N$=i5,A$=M(E),S$=r(N0),R$=o(N0);var O$=s(A1),g$=Z0(A0),F$=T,M$=A5,W$=[],I$=M5,E$=W5,k$=P4,x$={URI:j,compact:c,separate:m,map:q,ap:N,of:M,chain:T,filter:v0,filterMap:w0,partition:K0,partitionMap:T0,mapWithIndex:B0,partitionMapWithIndex:C4,partitionWithIndex:q4,filterMapWithIndex:B4,filterWithIndex:v4,alt:D1,zero:l,unfold:N1,reduce:F,foldMap:h,reduceRight:u,traverse:U0,sequence:X0,reduceWithIndex:P1,foldMapWithIndex:z1,reduceRightWithIndex:L1,traverseWithIndex:K4,extend:w4,wither:O1,wilt:g1};var y$=function(){return{concat:function($,Q){return L($,Q)}}},n4=function(){return{concat:y$().concat,empty:K}};var S0=function($){return o1($)($.empty)},j3={concat:f1.concat,empty:void 0};var G3={concat:s1.concat,empty:!0},D3={concat:t1.concat,empty:!1};var P3={concat:i1.concat,empty:""},z3={concat:e1.concat,empty:0},L3={concat:a1.concat,empty:1};var b$="Function",h$=($)=>(Q)=>L(Q,$),F1={URI:b$,map:($,Q)=>h$(Q)($)},p4=W,u$=($)=>(Q)=>(X)=>Q(X)($(X)),R0={...F1,of:p4,ap:($,Q)=>u$(Q)($)},F3=V0(R0),M3=J0(R0),l$=($)=>(Q)=>(X)=>$(Q(X))(X);var c$={...R0,chain:($,Q)=>l$(Q)($)},W3=p4({}),I3=r(F1),E3=s(c$),k3=Z0(R0),x3=o(F1);var O0=A;var m$=($)=>(Q)=>(X)=>$(X)?X:Q(X),y3=L(x1,m$);var _$=($)=>(Q)=>(X)=>X[$](...Q),b3=I1(_$)([]);var r4=($)=>(Q)=>{const X=new Map;return(Y)=>{const V=D5($)(Y)(X);if(Z5(V))return V.value;const H=Q(Y);return X.set(Y,H),H}},d$=($)=>(Q)=>(X)=>$([Q,X]),h3=L(O0,d$),n$=($)=>(Q)=>(X)=>(Y)=>$([Q,X,Y]),u3=L(O0,n$),p$=($)=>(Q)=>(X)=>(Y)=>(V)=>$([Q,X,Y,V]),l3=L(O0,p$),r$=($)=>(Q)=>(X)=>(Y)=>(V)=>(H)=>$([Q,X,Y,V,H]),c3=L(O0,r$);var m3=S0(n4());var o4=($)=>S0(k1())($);var g0={};M0(g0,{trimRight:()=>{{return XQ}},trimLeft:()=>{{return QQ}},trim:()=>{{return $Q}},toUpperCase:()=>{{return i$}},toLowerCase:()=>{{return e$}},startsWith:()=>{{return jQ}},split:()=>{{return JQ}},slice:()=>{{return YQ}},size:()=>{{return VQ}},replace:()=>{{return a$}},isString:()=>{{return t$}},isEmpty:()=>{{return HQ}},includes:()=>{{return ZQ}},endsWith:()=>{{return GQ}},empty:()=>{{return t4}},Show:()=>{{return s$}},Semigroup:()=>{{return s4}},Ord:()=>{{return f$}},Monoid:()=>{{return o$}},Eq:()=>{{return f4}}});var f4={equals:function($,Q){return $===Q}},s4={concat:function($,Q){return $+Q}},t4="",o$={concat:s4.concat,empty:t4},f$={equals:f4.equals,compare:function($,Q){return $<Q?-1:$>Q?1:0}},s$={show:function($){return JSON.stringify($)}},t$=function($){return typeof $==="string"},i$=function($){return $.toUpperCase()},e$=function($){return $.toLowerCase()},a$=function($,Q){return function(X){return X.replace($,Q)}},$Q=function($){return $.trim()},QQ=function($){return $.trimLeft()},XQ=function($){return $.trimRight()},YQ=function($,Q){return function(X){return X.slice($,Q)}},HQ=function($){return $.length===0},VQ=function($){return $.length},JQ=function($){return function(Q){var X=Q.split($);return e(X)?X:[Q]}},ZQ=function($,Q){return function(X){return X.includes($,Q)}},jQ=function($,Q){return function(X){return X.startsWith($,Q)}},GQ=function($,Q){return function(X){return X.endsWith($,Q)}};var DQ=($)=>async(Q)=>$(await Q);var Y0=($)=>(Q)=>L(_.chunksOf($),_.map(Q),(X)=>Promise.all(X),DQ(_.flatten));var i4=($)=>J($,A,r4(G0.contramap(JSON.stringify)(g0.Eq)),E1);var e4;(function(F0){let $;(function(d){d.start=W({before:"start"}),d.fromUri=(H)=>({before:{uri:H}}),d.fromUid=(H)=>({before:{uid:H}})})($=F0.before||(F0.before={}));let Q;(function(n){n.end=W({after:"end"}),n.fromUri=(H)=>({before:{uri:H}}),n.fromUid=(H)=>({before:{uid:H}})})(Q=F0.after||(F0.after={}))})(e4||(e4={}));//! Does location actually point to document.body?
var{URI:j6}=Spicetify;var G6=Y0(50)(async($)=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${$.join(",")}`)).artists),D6=Y0(1)(async([$])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${$}`)]),P6=Y0(50)(async($)=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${$.join(",")}`)).albums),z6=Y0(50)(async($)=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${$.join(",")}`)).tracks);var PQ=async($,Q=0,X=300)=>(await Spicetify.Platform.EnhanceAPI.getPage($,0,0,Q,X)).enhancePage.pageItems,M1=async($,Q=0)=>{const X=await PQ($,Q);if(X?.length<300)return X;else return X.concat(M1($,Q+300))};var zQ=async($,Q,X,Y="")=>{const V=new URL("https://ws.audioscrobbler.com/2.0/");return V.searchParams.append("method","track.getInfo"),V.searchParams.append("api_key",$),V.searchParams.append("artist",Q),V.searchParams.append("track",X),V.searchParams.append("format","json"),V.searchParams.append("username",Y),await fetch(V).then((H)=>H.json())},L6=i4(zQ);var{URI:LQ}=Spicetify,a4=new Array,qQ=async($)=>{a4=await M1($),Spicetify.Platform.PlayerAPI.clearQueue(),Spicetify.Platform.PlayerAPI.addToQueue(a4)};new Spicetify.ContextMenu.Item("Play enhanced songs",A(qQ),A(o4([LQ.isPlaylistV1OrV2])),"enhance").register();

//# debugId=01B712A8EB31AE5364756e2164756e21
//# sourceMappingURL=data:application/json;base64,
