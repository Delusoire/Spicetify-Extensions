var UV=Object.create;var{defineProperty:AX,getPrototypeOf:CV,getOwnPropertyNames:NV}=Object;var TV=Object.prototype.hasOwnProperty;var RX=(X,$,Q)=>{Q=X!=null?UV(CV(X)):{};const Y=$||!X||!X.__esModule?AX(Q,"default",{value:X,enumerable:!0}):Q;for(let J of NV(X))if(!TV.call(Y,J))AX(Y,J,{get:()=>X[J],enumerable:!0});return Y};var v=(X,$)=>()=>($||X(($={exports:{}}).exports,$),$.exports);var k1=(X,$)=>{for(var Q in $)AX(X,Q,{get:$[Q],enumerable:!0,configurable:!0,set:(Y)=>$[Q]=()=>Y})};var F=v((U)=>{var b8=function(X){return X},m4=function(X){return function(){return X}},WU=function(X){return function(){var $=[];for(var Q=0;Q<arguments.length;Q++)$[Q]=arguments[Q];if($.length>1)return X($[1],$[0]);return function(Y){return X(Y)($[0])}}},tH=function(X,$,Q,Y,J,Z,V,D,L){switch(arguments.length){case 1:return X;case 2:return function(){return $(X.apply(this,arguments))};case 3:return function(){return Q($(X.apply(this,arguments)))};case 4:return function(){return Y(Q($(X.apply(this,arguments))))};case 5:return function(){return J(Y(Q($(X.apply(this,arguments)))))};case 6:return function(){return Z(J(Y(Q($(X.apply(this,arguments))))))};case 7:return function(){return V(Z(J(Y(Q($(X.apply(this,arguments)))))))};case 8:return function(){return D(V(Z(J(Y(Q($(X.apply(this,arguments))))))))};case 9:return function(){return L(D(V(Z(J(Y(Q($(X.apply(this,arguments)))))))))}}return},EU=function(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];return X},OU=function(X){return X+1},MU=function(X){return X-1},aH=function(X){throw new Error("Called `absurd` function which should be uncallable")},gU=function(X){return function($){return X.apply(void 0,$)}},FU=function(X){return function(){var $=[];for(var Q=0;Q<arguments.length;Q++)$[Q]=arguments[Q];return X($)}},IU=function(X,$,Q,Y,J,Z,V,D,L){switch(arguments.length){case 1:return X;case 2:return $(X);case 3:return Q($(X));case 4:return Y(Q($(X)));case 5:return J(Y(Q($(X))));case 6:return Z(J(Y(Q($(X)))));case 7:return V(Z(J(Y(Q($(X))))));case 8:return D(V(Z(J(Y(Q($(X)))))));case 9:return L(D(V(Z(J(Y(Q($(X))))))));default:{var B=arguments[0];for(var R=1;R<arguments.length;R++)B=arguments[R](B);return B}}},bU=function(X){return function($){return!X($)}},CU=U&&U.__spreadArray||function(X,$,Q){if(Q||arguments.length===2){for(var Y=0,J=$.length,Z;Y<J;Y++)if(Z||!(Y in $)){if(!Z)Z=Array.prototype.slice.call($,0,Y);Z[Y]=$[Y]}}return X.concat(Z||Array.prototype.slice.call($))};Object.defineProperty(U,"__esModule",{value:!0});U.dual=U.getEndomorphismMonoid=U.not=U.SK=U.hole=U.pipe=U.untupled=U.tupled=U.absurd=U.decrement=U.increment=U.tuple=U.flow=U.flip=U.constVoid=U.constUndefined=U.constNull=U.constFalse=U.constTrue=U.constant=U.unsafeCoerce=U.identity=U.apply=U.getRing=U.getSemiring=U.getMonoid=U.getSemigroup=U.getBooleanAlgebra=void 0;var NU=function(X){return function(){return{meet:function($,Q){return function(Y){return X.meet($(Y),Q(Y))}},join:function($,Q){return function(Y){return X.join($(Y),Q(Y))}},zero:function(){return X.zero},one:function(){return X.one},implies:function($,Q){return function(Y){return X.implies($(Y),Q(Y))}},not:function($){return function(Q){return X.not($(Q))}}}}};U.getBooleanAlgebra=NU;var TU=function(X){return function(){return{concat:function($,Q){return function(Y){return X.concat($(Y),Q(Y))}}}}};U.getSemigroup=TU;var vU=function(X){var $=(0,U.getSemigroup)(X);return function(){return{concat:$().concat,empty:function(){return X.empty}}}};U.getMonoid=vU;var AU=function(X){return{add:function($,Q){return function(Y){return X.add($(Y),Q(Y))}},zero:function(){return X.zero},mul:function($,Q){return function(Y){return X.mul($(Y),Q(Y))}},one:function(){return X.one}}};U.getSemiring=AU;var RU=function(X){var $=(0,U.getSemiring)(X);return{add:$.add,mul:$.mul,one:$.one,zero:$.zero,sub:function(Q,Y){return function(J){return X.sub(Q(J),Y(J))}}}};U.getRing=RU;var SU=function(X){return function($){return $(X)}};U.apply=SU;U.identity=b8;U.unsafeCoerce=b8;U.constant=m4;U.constTrue=m4(!0);U.constFalse=m4(!1);U.constNull=m4(null);U.constUndefined=m4(void 0);U.constVoid=U.constUndefined;U.flip=WU;U.flow=tH;U.tuple=EU;U.increment=OU;U.decrement=MU;U.absurd=aH;U.tupled=gU;U.untupled=FU;U.pipe=IU;U.hole=aH;var yU=function(X,$){return $};U.SK=yU;U.not=bU;var hU=function(){return{concat:function(X,$){return tH(X,$)},empty:b8}};U.getEndomorphismMonoid=hU;var uU=function(X,$){var Q=typeof X==="number"?function(Y){return Y.length>=X}:X;return function(){var Y=Array.from(arguments);if(Q(arguments))return $.apply(this,Y);return function(J){return $.apply(void 0,CU([J],Y,!1))}}};U.dual=uU});var v1=v(($j)=>{var eH=function(X,$){return function(Q){return function(Y){return X.map(Y,function(J){return $.map(J,Q)})}}},lU=function(X){return function($){return function(Q){return X.map(Q,function(Y){return Y($)})}}},mU=function(X){return function($){return function(Q){return X.map(Q,function(Y){var J;return J={},J[$]=Y,J})}}},cU=function(X){return function($,Q){return function(Y){return X.map(Y,function(J){var Z;return Object.assign({},J,(Z={},Z[$]=Q(J),Z))})}}},_U=function(X,$){var Q=eH(X,$);return{map:function(Y,J){return(0,kU.pipe)(Y,Q(J))}}},Xj=function(X){return function($,Q){return X.map($,function(){return Q})}},xU=function(X){var $=Xj(X);return function(Q){return $(Q,void 0)}};Object.defineProperty($j,"__esModule",{value:!0});$j.asUnit=$j.as=$j.getFunctorComposition=$j.let=$j.bindTo=$j.flap=$j.map=void 0;var kU=F();$j.map=eH;$j.flap=lU;$j.bindTo=mU;$j.let=cU;$j.getFunctorComposition=_U;$j.as=Xj;$j.asUnit=xU});var Kj=v((jj)=>{var sU=function(X){return{show:function($){return"make(".concat(X.show($),")")}}},Yj=function(X){return{URI:jj.URI,_E:void 0,map:h8,ap:function($,Q){return(0,jj.make)(X.concat($,Q))}}},tU=function(X){var $=Yj(X);return{URI:jj.URI,_E:void 0,map:$.map,ap:$.ap,of:function(){return(0,jj.make)(X.empty)}}};Object.defineProperty(jj,"__esModule",{value:!0});jj.const_=jj.Bifunctor=jj.Contravariant=jj.flap=jj.Functor=jj.URI=jj.mapLeft=jj.bimap=jj.map=jj.contramap=jj.getApplicative=jj.getApply=jj.getBooleanAlgebra=jj.getHeytingAlgebra=jj.getRing=jj.getSemiring=jj.getMonoid=jj.getSemigroup=jj.getBounded=jj.getOrd=jj.getEq=jj.getShow=jj.make=void 0;var Z0=F(),rU=v1();jj.make=Z0.unsafeCoerce;jj.getShow=sU;jj.getEq=Z0.identity;jj.getOrd=Z0.identity;jj.getBounded=Z0.identity;jj.getSemigroup=Z0.identity;jj.getMonoid=Z0.identity;jj.getSemiring=Z0.identity;jj.getRing=Z0.identity;jj.getHeytingAlgebra=Z0.identity;jj.getBooleanAlgebra=Z0.identity;jj.getApply=Yj;jj.getApplicative=tU;var Jj=function(X,$){return(0,Z0.pipe)(X,(0,jj.contramap)($))},h8=function(X,$){return(0,Z0.pipe)(X,(0,jj.map)($))},Zj=function(X,$,Q){return(0,Z0.pipe)(X,(0,jj.bimap)($,Q))},Hj=function(X,$){return(0,Z0.pipe)(X,(0,jj.mapLeft)($))},aU=function(){return Z0.unsafeCoerce};jj.contramap=aU;var eU=function(){return Z0.unsafeCoerce};jj.map=eU;var XC=function(X){return function($){return(0,jj.make)(X($))}};jj.bimap=XC;var $C=function(X){return function($){return(0,jj.make)(X($))}};jj.mapLeft=$C;jj.URI="Const";jj.Functor={URI:jj.URI,map:h8};jj.flap=(0,rU.flap)(jj.Functor);jj.Contravariant={URI:jj.URI,contramap:Jj};jj.Bifunctor={URI:jj.URI,bimap:Zj,mapLeft:Hj};jj.const_={URI:jj.URI,map:h8,contramap:Jj,bimap:Zj,mapLeft:Hj}});var J1=v((C)=>{var wC=C&&C.__spreadArray||function(X,$,Q){if(Q||arguments.length===2){for(var Y=0,J=$.length,Z;Y<J;Y++)if(Z||!(Y in $)){if(!Z)Z=Array.prototype.slice.call($,0,Y);Z[Y]=$[Y]}}return X.concat(Z||Array.prototype.slice.call($))};Object.defineProperty(C,"__esModule",{value:!0});C.flatMapReader=C.flatMapTask=C.flatMapIO=C.flatMapEither=C.flatMapOption=C.flatMapNullable=C.liftOption=C.liftNullable=C.fromReadonlyNonEmptyArray=C.has=C.emptyRecord=C.emptyReadonlyArray=C.tail=C.head=C.isNonEmpty=C.singleton=C.right=C.left=C.isRight=C.isLeft=C.some=C.none=C.isSome=C.isNone=void 0;var c5=F(),UC=function(X){return X._tag==="None"};C.isNone=UC;var CC=function(X){return X._tag==="Some"};C.isSome=CC;C.none={_tag:"None"};var NC=function(X){return{_tag:"Some",value:X}};C.some=NC;var TC=function(X){return X._tag==="Left"};C.isLeft=TC;var vC=function(X){return X._tag==="Right"};C.isRight=vC;var AC=function(X){return{_tag:"Left",left:X}};C.left=AC;var RC=function(X){return{_tag:"Right",right:X}};C.right=RC;var SC=function(X){return[X]};C.singleton=SC;var WC=function(X){return X.length>0};C.isNonEmpty=WC;var EC=function(X){return X[0]};C.head=EC;var OC=function(X){return X.slice(1)};C.tail=OC;C.emptyReadonlyArray=[];C.emptyRecord={};C.has=Object.prototype.hasOwnProperty;var MC=function(X){return wC([X[0]],X.slice(1),!0)};C.fromReadonlyNonEmptyArray=MC;var gC=function(X){return function($,Q){return function(){var Y=[];for(var J=0;J<arguments.length;J++)Y[J]=arguments[J];var Z=$.apply(void 0,Y);return X.fromEither(Z==null?(0,C.left)(Q.apply(void 0,Y)):(0,C.right)(Z))}}};C.liftNullable=gC;var FC=function(X){return function($,Q){return function(){var Y=[];for(var J=0;J<arguments.length;J++)Y[J]=arguments[J];var Z=$.apply(void 0,Y);return X.fromEither((0,C.isNone)(Z)?(0,C.left)(Q.apply(void 0,Y)):(0,C.right)(Z.value))}}};C.liftOption=FC;var IC=function(X,$){return(0,c5.dual)(3,function(Q,Y,J){return $.flatMap(Q,(0,C.liftNullable)(X)(Y,J))})};C.flatMapNullable=IC;var yC=function(X,$){return(0,c5.dual)(3,function(Q,Y,J){return $.flatMap(Q,(0,C.liftOption)(X)(Y,J))})};C.flatMapOption=yC;var bC=function(X,$){return(0,c5.dual)(2,function(Q,Y){return $.flatMap(Q,function(J){return X.fromEither(Y(J))})})};C.flatMapEither=bC;var hC=function(X,$){return(0,c5.dual)(2,function(Q,Y){return $.flatMap(Q,function(J){return X.fromIO(Y(J))})})};C.flatMapIO=hC;var uC=function(X,$){return(0,c5.dual)(2,function(Q,Y){return $.flatMap(Q,function(J){return X.fromTask(Y(J))})})};C.flatMapTask=uC;var kC=function(X,$){return(0,c5.dual)(2,function(Q,Y){return $.flatMap(Q,function(J){return X.fromReader(Y(J))})})};C.flatMapReader=kC});var Y5=v((p)=>{var dC=function(X,$){return function(Q){return function(Y){return X.ap(X.map(Y,function(J){return function(Z){return $.ap(J,Z)}}),Q)}}},nC=function(X){return function($){return function(Q){return X.ap(X.map(Q,function(Y){return function(){return Y}}),$)}}},fC=function(X){return function($){return function(Q){return X.ap(X.map(Q,function(){return function(Y){return Y}}),$)}}},pC=function(X){return function($,Q){return function(Y){return X.ap(X.map(Y,function(J){return function(Z){var V;return Object.assign({},J,(V={},V[$]=Z,V))}}),Q)}}},oC=function(X){return function($){return{concat:function(Q,Y){return X.ap(X.map(Q,function(J){return function(Z){return $.concat(J,Z)}}),Y)}}}},k8=function(X,$,Q){return function(Y){var J=Array(Q.length+1);for(var Z=0;Z<Q.length;Z++)J[Z]=Q[Z];return J[Q.length]=Y,$===0?X.apply(null,J):k8(X,$-1,J)}},iC=function(X){if(!xC.has.call(u8,X))u8[X]=k8(_C.tuple,X-1,[]);return u8[X]},rC=function(X){return function(){var $=[];for(var Q=0;Q<arguments.length;Q++)$[Q]=arguments[Q];var Y=$.length,J=iC(Y),Z=X.map($[0],J);for(var V=1;V<Y;V++)Z=X.ap(Z,$[V]);return Z}},sC=function(X){var $=X.length;switch($){case 1:return function(Q){var Y;return Y={},Y[X[0]]=Q,Y};case 2:return function(Q){return function(Y){var J;return J={},J[X[0]]=Q,J[X[1]]=Y,J}};case 3:return function(Q){return function(Y){return function(J){var Z;return Z={},Z[X[0]]=Q,Z[X[1]]=Y,Z[X[2]]=J,Z}}};case 4:return function(Q){return function(Y){return function(J){return function(Z){var V;return V={},V[X[0]]=Q,V[X[1]]=Y,V[X[2]]=J,V[X[3]]=Z,V}}}};case 5:return function(Q){return function(Y){return function(J){return function(Z){return function(V){var D;return D={},D[X[0]]=Q,D[X[1]]=Y,D[X[2]]=J,D[X[3]]=Z,D[X[4]]=V,D}}}}};default:return k8(function(){var Q=[];for(var Y=0;Y<arguments.length;Y++)Q[Y]=arguments[Y];var J={};for(var Z=0;Z<$;Z++)J[X[Z]]=Q[Z];return J},$-1,[])}},tC=function(X){return function($){var Q=Object.keys($),Y=Q.length,J=sC(Q),Z=X.map($[Q[0]],J);for(var V=1;V<Y;V++)Z=X.ap(Z,$[Q[V]]);return Z}},lC=p&&p.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),mC=p&&p.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),cC=p&&p.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))lC($,X,Q)}return mC($,X),$};Object.defineProperty(p,"__esModule",{value:!0});p.sequenceS=p.sequenceT=p.getApplySemigroup=p.apS=p.apSecond=p.apFirst=p.ap=void 0;var _C=F(),xC=cC(J1());p.ap=dC;p.apFirst=nC;p.apSecond=fC;p.apS=pC;p.getApplySemigroup=oC;var u8={1:function(X){return[X]},2:function(X){return function($){return[X,$]}},3:function(X){return function($){return function(Q){return[X,$,Q]}}},4:function(X){return function($){return function(Q){return function(Y){return[X,$,Q,Y]}}}},5:function(X){return function($){return function(Q){return function(Y){return function(J){return[X,$,Q,Y,J]}}}}}};p.sequenceT=rC;p.sequenceS=tC});var J5=v((Lj)=>{var aC=function(X){var $=Bj(X);return function(Q){return function(Y){return $(Y,Q)}}},Bj=function(X){return function($,Q){return X.chain($,function(Y){return X.map(Q(Y),function(){return Y})})}},eC=function(X){return function($,Q){return function(Y){return X.chain(Y,function(J){return X.map(Q(J),function(Z){var V;return Object.assign({},J,(V={},V[$]=Z,V))})})}}};Object.defineProperty(Lj,"__esModule",{value:!0});Lj.bind=Lj.tap=Lj.chainFirst=void 0;Lj.chainFirst=aC;Lj.tap=Bj;Lj.bind=eC});var _4=v((nj)=>{var Cj=function(X){return function($){return function(Q){return X.map(Q,$)}}},Nj=function(X){return function($){return function(Q){return X.contramap(Q,$)}}},Tj=function(X){return function($){return function(Q){return X.mapWithIndex(Q,$)}}},vj=function(X){return function($){return function(Q){return X.ap(Q,$)}}},Aj=function(X){return function($){return function(Q){return X.chain(Q,$)}}},Rj=function(X){return function($,Q){return function(Y){return X.bimap(Y,$,Q)}}},Sj=function(X){return function($){return function(Q){return X.mapLeft(Q,$)}}},Wj=function(X){return function($){return function(Q){return X.extend(Q,$)}}},Ej=function(X){return function($,Q){return function(Y){return X.reduce(Y,$,Q)}}},Oj=function(X){return function($){var Q=X.foldMap($);return function(Y){return function(J){return Q(J,Y)}}}},Mj=function(X){return function($,Q){return function(Y){return X.reduceRight(Y,$,Q)}}},gj=function(X){return function($,Q){return function(Y){return X.reduceWithIndex(Y,$,Q)}}},Fj=function(X){return function($){var Q=X.foldMapWithIndex($);return function(Y){return function(J){return Q(J,Y)}}}},Ij=function(X){return function($,Q){return function(Y){return X.reduceRightWithIndex(Y,$,Q)}}},yj=function(X){return function($){return function(Q){return X.alt(Q,$)}}},bj=function(X){return function($){return function(Q){return X.filter(Q,$)}}},hj=function(X){return function($){return function(Q){return X.filterMap(Q,$)}}},uj=function(X){return function($){return function(Q){return X.partition(Q,$)}}},kj=function(X){return function($){return function(Q){return X.partitionMap(Q,$)}}},lj=function(X){return function($){return function(Q){return X.filterWithIndex(Q,$)}}},mj=function(X){return function($){return function(Q){return X.filterMapWithIndex(Q,$)}}},cj=function(X){return function($){return function(Q){return X.partitionWithIndex(Q,$)}}},_j=function(X){return function($){return function(Q){return X.partitionMapWithIndex(Q,$)}}},xj=function(X){return function($,Q){return function(Y){return X.promap(Y,$,Q)}}},dj=function(X){return function($){return function(Q){return X.compose(Q,$)}}},CN=function(X){var $={};if(YN(X))$.map=Cj(X);if(JN(X))$.contramap=Nj(X);if(ZN(X))$.mapWithIndex=Tj(X);if(HN(X))$.ap=vj(X),$.apFirst=(0,Uj.apFirst)(X),$.apSecond=(0,Uj.apSecond)(X);if(jN(X))$.chain=Aj(X),$.chainFirst=(0,QN.chainFirst)(X),$.flatten=$.chain(l8.identity);if(PN(X))$.bimap=Rj(X),$.mapLeft=Sj(X);if(zN(X))$.extend=Wj(X),$.duplicate=$.extend(l8.identity);if(GN(X))$.reduce=Ej(X),$.foldMap=Oj(X),$.reduceRight=Mj(X);if(VN(X))$.reduceWithIndex=gj(X),$.foldMapWithIndex=Fj(X),$.reduceRightWithIndex=Ij(X);if(DN(X))$.alt=yj(X);if(qN(X))$.compact=X.compact,$.separate=X.separate;if(KN(X))$.filter=bj(X),$.filterMap=hj(X),$.partition=uj(X),$.partitionMap=kj(X);if(BN(X))$.filterWithIndex=lj(X),$.filterMapWithIndex=mj(X),$.partitionWithIndex=cj(X),$.partitionMapWithIndex=_j(X);if(LN(X))$.promap=xj(X);if(wN(X))$.compose=dj(X);if(UN(X)){var Q=function(V){return function(D){return D._tag==="None"?X.throwError(V()):X.of(D.value)}},Y=function(V){return V._tag==="Left"?X.throwError(V.left):X.of(V.right)},J=function(V,D){return function(L){return V(L)?X.of(L):X.throwError(D(L))}},Z=function(V,D){return function(L){return X.chain(L,function(B){return V(B)?X.of(B):X.throwError(D(B))})}};$.fromOption=Q,$.fromEither=Y,$.fromPredicate=J,$.filterOrElse=Z}return $};Object.defineProperty(nj,"__esModule",{value:!0});nj.pipe=nj.pipeable=nj.compose=nj.promap=nj.partitionMapWithIndex=nj.partitionWithIndex=nj.filterMapWithIndex=nj.filterWithIndex=nj.partitionMap=nj.partition=nj.filterMap=nj.filter=nj.alt=nj.reduceRightWithIndex=nj.foldMapWithIndex=nj.reduceWithIndex=nj.reduceRight=nj.foldMap=nj.reduce=nj.extend=nj.mapLeft=nj.bimap=nj.chain=nj.ap=nj.mapWithIndex=nj.contramap=nj.map=void 0;var Uj=Y5(),QN=J5(),l8=F();nj.map=Cj;nj.contramap=Nj;nj.mapWithIndex=Tj;nj.ap=vj;nj.chain=Aj;nj.bimap=Rj;nj.mapLeft=Sj;nj.extend=Wj;nj.reduce=Ej;nj.foldMap=Oj;nj.reduceRight=Mj;nj.reduceWithIndex=gj;nj.foldMapWithIndex=Fj;nj.reduceRightWithIndex=Ij;nj.alt=yj;nj.filter=bj;nj.filterMap=hj;nj.partition=uj;nj.partitionMap=kj;nj.filterWithIndex=lj;nj.filterMapWithIndex=mj;nj.partitionWithIndex=cj;nj.partitionMapWithIndex=_j;nj.promap=xj;nj.compose=dj;var YN=function(X){return typeof X.map==="function"},JN=function(X){return typeof X.contramap==="function"},ZN=function(X){return typeof X.mapWithIndex==="function"},HN=function(X){return typeof X.ap==="function"},jN=function(X){return typeof X.chain==="function"},PN=function(X){return typeof X.bimap==="function"},zN=function(X){return typeof X.extend==="function"},GN=function(X){return typeof X.reduce==="function"},VN=function(X){return typeof X.reduceWithIndex==="function"},DN=function(X){return typeof X.alt==="function"},qN=function(X){return typeof X.compact==="function"},KN=function(X){return typeof X.filter==="function"},BN=function(X){return typeof X.filterWithIndex==="function"},LN=function(X){return typeof X.promap==="function"},wN=function(X){return typeof X.compose==="function"},UN=function(X){return typeof X.throwError==="function"};nj.pipeable=CN;nj.pipe=l8.pipe});var n4=v((pj)=>{Object.defineProperty(pj,"__esModule",{value:!0});pj.eqDate=pj.eqNumber=pj.eqString=pj.eqBoolean=pj.eq=pj.strictEqual=pj.getStructEq=pj.getTupleEq=pj.Contravariant=pj.getMonoid=pj.getSemigroup=pj.eqStrict=pj.URI=pj.contramap=pj.tuple=pj.struct=pj.fromEquals=void 0;var pN=F(),oN=function(X){return{equals:function($,Q){return $===Q||X($,Q)}}};pj.fromEquals=oN;var iN=function(X){return(0,pj.fromEquals)(function($,Q){for(var Y in X)if(!X[Y].equals($[Y],Q[Y]))return!1;return!0})};pj.struct=iN;var rN=function(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];return(0,pj.fromEquals)(function(Q,Y){return X.every(function(J,Z){return J.equals(Q[Z],Y[Z])})})};pj.tuple=rN;var sN=function(X,$){return(0,pN.pipe)(X,(0,pj.contramap)($))},tN=function(X){return function($){return(0,pj.fromEquals)(function(Q,Y){return $.equals(X(Q),X(Y))})}};pj.contramap=tN;pj.URI="Eq";pj.eqStrict={equals:function(X,$){return X===$}};var aN={equals:function(){return!0}},eN=function(){return{concat:function(X,$){return(0,pj.fromEquals)(function(Q,Y){return X.equals(Q,Y)&&$.equals(Q,Y)})}}};pj.getSemigroup=eN;var XT=function(){return{concat:(0,pj.getSemigroup)().concat,empty:aN}};pj.getMonoid=XT;pj.Contravariant={URI:pj.URI,contramap:sN};pj.getTupleEq=pj.tuple;pj.getStructEq=pj.struct;pj.strictEqual=pj.eqStrict.equals;pj.eq=pj.Contravariant;pj.eqBoolean=pj.eqStrict;pj.eqString=pj.eqStrict;pj.eqNumber=pj.eqStrict;pj.eqDate={equals:function(X,$){return X.valueOf()===$.valueOf()}}});var m9=v((k)=>{var $P=function(X){return function($){return function(Q){return X.fromEither(Z5.isNone(Q)?Z5.left($()):Z5.right(Q.value))}}},qT=function(X){return function($,Q){return function(Y){return X.fromEither($(Y)?Z5.right(Y):Z5.left(Q(Y)))}}},QP=function(X){var $=$P(X);return function(Q){var Y=$(Q);return function(J){return(0,XP.flow)(J,Y)}}},KT=function(X,$){var Q=QP(X);return function(Y){var J=Q(Y);return function(Z){return function(V){return $.chain(V,J(Z))}}}},m8=function(X){return function($){return(0,XP.flow)($,X.fromEither)}},BT=function(X,$){var Q=m8(X);return function(Y){return function(J){return $.chain(J,Q(Y))}}},LT=function(X,$){var Q=YP(X,$);return function(Y){return function(J){return Q(J,Y)}}},wT=function(X,$){return function(Q,Y){return function(J){return $.chain(J,function(Z){return X.fromEither(Q(Z)?Z5.right(Z):Z5.left(Y(Z)))})}}},YP=function(X,$){var Q=m8(X),Y=(0,DT.tap)($);return function(J,Z){return Y(J,Q(Z))}},zT=k&&k.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),GT=k&&k.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),VT=k&&k.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))zT($,X,Q)}return GT($,X),$};Object.defineProperty(k,"__esModule",{value:!0});k.tapEither=k.filterOrElse=k.chainFirstEitherK=k.chainEitherK=k.fromEitherK=k.chainOptionK=k.fromOptionK=k.fromPredicate=k.fromOption=void 0;var DT=J5(),XP=F(),Z5=VT(J1());k.fromOption=$P;k.fromPredicate=qT;k.fromOptionK=QP;k.chainOptionK=KT;k.fromEitherK=m8;k.chainEitherK=BT;k.chainFirstEitherK=LT;k.filterOrElse=wT;k.tapEither=YP});var PP=v((JP)=>{Object.defineProperty(JP,"__esModule",{value:!0});JP.Field=JP.MonoidProduct=JP.MonoidSum=JP.SemigroupProduct=JP.SemigroupSum=JP.MagmaSub=JP.Show=JP.Bounded=JP.Ord=JP.Eq=JP.isNumber=void 0;var UT=function(X){return typeof X==="number"};JP.isNumber=UT;JP.Eq={equals:function(X,$){return X===$}};JP.Ord={equals:JP.Eq.equals,compare:function(X,$){return X<$?-1:X>$?1:0}};JP.Bounded={equals:JP.Eq.equals,compare:JP.Ord.compare,top:Infinity,bottom:(-Infinity)};JP.Show={show:function(X){return JSON.stringify(X)}};JP.MagmaSub={concat:function(X,$){return X-$}};JP.SemigroupSum={concat:function(X,$){return X+$}};JP.SemigroupProduct={concat:function(X,$){return X*$}};JP.MonoidSum={concat:JP.SemigroupSum.concat,empty:0};JP.MonoidProduct={concat:JP.SemigroupProduct.concat,empty:1};JP.Field={add:JP.SemigroupSum.concat,zero:0,mul:JP.SemigroupProduct.concat,one:1,sub:JP.MagmaSub.concat,degree:function(X){return 1},div:function(X,$){return X/$},mod:function(X,$){return X%$}}});var _9=v((zP)=>{var xT=function(X,$){return X<$?-1:X>$?1:0};Object.defineProperty(zP,"__esModule",{value:!0});zP.ordDate=zP.ordNumber=zP.ordString=zP.ordBoolean=zP.ord=zP.getDualOrd=zP.getTupleOrd=zP.between=zP.clamp=zP.max=zP.min=zP.geq=zP.leq=zP.gt=zP.lt=zP.equals=zP.trivial=zP.Contravariant=zP.getMonoid=zP.getSemigroup=zP.URI=zP.contramap=zP.reverse=zP.tuple=zP.fromCompare=zP.equalsDefault=void 0;var RT=n4(),c9=F(),ST=function(X){return function($,Q){return $===Q||X($,Q)===0}};zP.equalsDefault=ST;var WT=function(X){return{equals:(0,zP.equalsDefault)(X),compare:function($,Q){return $===Q?0:X($,Q)}}};zP.fromCompare=WT;var ET=function(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];return(0,zP.fromCompare)(function(Q,Y){var J=0;for(;J<X.length-1;J++){var Z=X[J].compare(Q[J],Y[J]);if(Z!==0)return Z}return X[J].compare(Q[J],Y[J])})};zP.tuple=ET;var OT=function(X){return(0,zP.fromCompare)(function($,Q){return X.compare(Q,$)})};zP.reverse=OT;var MT=function(X,$){return(0,c9.pipe)(X,(0,zP.contramap)($))},gT=function(X){return function($){return(0,zP.fromCompare)(function(Q,Y){return $.compare(X(Q),X(Y))})}};zP.contramap=gT;zP.URI="Ord";var FT=function(){return{concat:function(X,$){return(0,zP.fromCompare)(function(Q,Y){var J=X.compare(Q,Y);return J!==0?J:$.compare(Q,Y)})}}};zP.getSemigroup=FT;var IT=function(){return{concat:(0,zP.getSemigroup)().concat,empty:(0,zP.fromCompare)(function(){return 0})}};zP.getMonoid=IT;zP.Contravariant={URI:zP.URI,contramap:MT};zP.trivial={equals:c9.constTrue,compare:(0,c9.constant)(0)};var yT=function(X){return function($){return function(Q){return Q===$||X.compare(Q,$)===0}}};zP.equals=yT;var bT=function(X){return function($,Q){return X.compare($,Q)===-1}};zP.lt=bT;var hT=function(X){return function($,Q){return X.compare($,Q)===1}};zP.gt=hT;var uT=function(X){return function($,Q){return X.compare($,Q)!==1}};zP.leq=uT;var kT=function(X){return function($,Q){return X.compare($,Q)!==-1}};zP.geq=kT;var lT=function(X){return function($,Q){return $===Q||X.compare($,Q)<1?$:Q}};zP.min=lT;var mT=function(X){return function($,Q){return $===Q||X.compare($,Q)>-1?$:Q}};zP.max=mT;var cT=function(X){var $=(0,zP.min)(X),Q=(0,zP.max)(X);return function(Y,J){return function(Z){return Q($(Z,J),Y)}}};zP.clamp=cT;var _T=function(X){var $=(0,zP.lt)(X),Q=(0,zP.gt)(X);return function(Y,J){return function(Z){return $(Z,Y)||Q(Z,J)?!1:!0}}};zP.between=_T;zP.getTupleOrd=zP.tuple;zP.getDualOrd=zP.reverse;zP.ord=zP.Contravariant;var d8={equals:RT.eqStrict.equals,compare:xT};zP.ordBoolean=d8;zP.ordString=d8;zP.ordNumber=d8;zP.ordDate=(0,c9.pipe)(zP.ordNumber,(0,zP.contramap)(function(X){return X.valueOf()}))});var RP=v((vP)=>{Object.defineProperty(vP,"__esModule",{value:!0});vP.concatAll=vP.endo=vP.filterSecond=vP.filterFirst=vP.reverse=void 0;var $3=function(X){return{concat:function($,Q){return X.concat(Q,$)}}};vP.reverse=$3;var Q3=function(X){return function($){return{concat:function(Q,Y){return X(Q)?$.concat(Q,Y):Y}}}};vP.filterFirst=Q3;var Y3=function(X){return function($){return{concat:function(Q,Y){return X(Y)?$.concat(Q,Y):Q}}}};vP.filterSecond=Y3;var J3=function(X){return function($){return{concat:function(Q,Y){return $.concat(X(Q),X(Y))}}}};vP.endo=J3;var Z3=function(X){return function($){return function(Q){return Q.reduce(function(Y,J){return X.concat(Y,J)},$)}}};vP.concatAll=Z3});var p8=v((w)=>{var v3=function(X){var $=(0,w.concatAll)(X);return function(Q,Y){return Y===void 0?$(Q):$(Q)(Y)}},G3=w&&w.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),V3=w&&w.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),f8=w&&w.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))G3($,X,Q)}return V3($,X),$};Object.defineProperty(w,"__esModule",{value:!0});w.semigroupProduct=w.semigroupSum=w.semigroupString=w.getFunctionSemigroup=w.semigroupAny=w.semigroupAll=w.fold=w.getIntercalateSemigroup=w.getMeetSemigroup=w.getJoinSemigroup=w.getDualSemigroup=w.getStructSemigroup=w.getTupleSemigroup=w.getFirstSemigroup=w.getLastSemigroup=w.getObjectSemigroup=w.semigroupVoid=w.concatAll=w.last=w.first=w.intercalate=w.tuple=w.struct=w.reverse=w.constant=w.max=w.min=void 0;var SP=F(),D3=f8(J1()),WP=f8(RP()),EP=f8(_9()),q3=function(X){return{concat:EP.min(X)}};w.min=q3;var K3=function(X){return{concat:EP.max(X)}};w.max=K3;var B3=function(X){return{concat:function(){return X}}};w.constant=B3;w.reverse=WP.reverse;var L3=function(X){return{concat:function($,Q){var Y={};for(var J in X)if(D3.has.call(X,J))Y[J]=X[J].concat($[J],Q[J]);return Y}}};w.struct=L3;var w3=function(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];return{concat:function(Q,Y){return X.map(function(J,Z){return J.concat(Q[Z],Y[Z])})}}};w.tuple=w3;var U3=function(X){return function($){return{concat:function(Q,Y){return $.concat(Q,$.concat(X,Y))}}}};w.intercalate=U3;var C3=function(){return{concat:SP.identity}};w.first=C3;var N3=function(){return{concat:function(X,$){return $}}};w.last=N3;w.concatAll=WP.concatAll;w.semigroupVoid=(0,w.constant)(void 0);var T3=function(){return{concat:function(X,$){return Object.assign({},X,$)}}};w.getObjectSemigroup=T3;w.getLastSemigroup=w.last;w.getFirstSemigroup=w.first;w.getTupleSemigroup=w.tuple;w.getStructSemigroup=w.struct;w.getDualSemigroup=w.reverse;w.getJoinSemigroup=w.max;w.getMeetSemigroup=w.min;w.getIntercalateSemigroup=w.intercalate;w.fold=v3;w.semigroupAll={concat:function(X,$){return X&&$}};w.semigroupAny={concat:function(X,$){return X||$}};w.getFunctionSemigroup=SP.getSemigroup;w.semigroupString={concat:function(X,$){return X+$}};w.semigroupSum={concat:function(X,$){return X+$}};w.semigroupProduct={concat:function(X,$){return X*$}}});var X$=v((G)=>{var FP=function(X){return function($){return $.concat(X)}},p4=function(X,$){return $?X.concat($):function(Q){return Q.concat(X)}},IP=function(X){return function($){var Q=$.length;if(Q===0)return G.empty;var Y=[],J=$[0],Z=[J];for(var V=1;V<Q;V++){var D=$[V];if(X.equals(D,J))Z.push(D);else Y.push(Z),J=D,Z=[J]}return Y.push(Z),Y}},yP=function(X,$){if($===void 0)return function(Q){return yP(Q,X)};return(0,G.zipWith)(X,$,function(Q,Y){return[Q,Y]})},yv=function(X){var $=(0,G.sort)(X),Q=IP(X);return function(Y){return(0,G.isNonEmpty)(Y)?Q($(Y)):G.empty}},bv=function(X){return(0,G.filterWithIndex)(function($,Q){return X(Q)})},uv=function(X,$){return $===void 0?(0,G.prepend)(X):(0,h.pipe)($,(0,G.prepend)(X))},A3=G&&G.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),R3=G&&G.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),OP=G&&G.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))A3($,X,Q)}return R3($,X),$},f4=G&&G.__spreadArray||function(X,$,Q){if(Q||arguments.length===2){for(var Y=0,J=$.length,Z;Y<J;Y++)if(Z||!(Y in $)){if(!Z)Z=Array.prototype.slice.call($,0,Y);Z[Y]=$[Y]}}return X.concat(Z||Array.prototype.slice.call($))};Object.defineProperty(G,"__esModule",{value:!0});G.reduceRight=G.foldMap=G.reduce=G.mapWithIndex=G.map=G.flatten=G.duplicate=G.extend=G.flatMap=G.ap=G.alt=G.altW=G.of=G.chunksOf=G.splitAt=G.chop=G.chainWithIndex=G.intersperse=G.prependAll=G.unzip=G.zip=G.zipWith=G.modifyAt=G.updateAt=G.sort=G.groupBy=G.group=G.reverse=G.concat=G.concatW=G.fromArray=G.unappend=G.unprepend=G.range=G.replicate=G.makeBy=G.fromReadonlyArray=G.rotate=G.union=G.sortBy=G.uniq=G.unsafeUpdateAt=G.unsafeInsertAt=G.append=G.appendW=G.prepend=G.prependW=G.isOutOfBound=G.isNonEmpty=G.empty=void 0;G.groupSort=G.chain=G.intercalate=G.updateLast=G.modifyLast=G.updateHead=G.modifyHead=G.matchRight=G.matchLeft=G.concatAll=G.max=G.min=G.init=G.last=G.tail=G.head=G.apS=G.bind=G.let=G.bindTo=G.Do=G.Comonad=G.Alt=G.TraversableWithIndex=G.Traversable=G.FoldableWithIndex=G.Foldable=G.Monad=G.chainFirst=G.Chain=G.Applicative=G.apSecond=G.apFirst=G.Apply=G.FunctorWithIndex=G.Pointed=G.flap=G.Functor=G.getUnionSemigroup=G.getEq=G.getSemigroup=G.getShow=G.URI=G.extract=G.traverseWithIndex=G.sequence=G.traverse=G.reduceRightWithIndex=G.foldMapWithIndex=G.reduceWithIndex=void 0;G.readonlyNonEmptyArray=G.fold=G.prependToAll=G.insertAt=G.snoc=G.cons=G.unsnoc=G.uncons=G.filterWithIndex=G.filter=void 0;var o8=Y5(),MP=J5(),S3=n4(),h=F(),i8=v1(),H0=OP(J1()),W3=_9(),gP=OP(p8());G.empty=H0.emptyReadonlyArray;G.isNonEmpty=H0.isNonEmpty;var E3=function(X,$){return X<0||X>=$.length};G.isOutOfBound=E3;var O3=function(X){return function($){return f4([X],$,!0)}};G.prependW=O3;G.prepend=G.prependW;var M3=function(X){return function($){return f4(f4([],$,!0),[X],!1)}};G.appendW=M3;G.append=G.appendW;var g3=function(X,$,Q){if((0,G.isNonEmpty)(Q)){var Y=H0.fromReadonlyNonEmptyArray(Q);return Y.splice(X,0,$),Y}return[$]};G.unsafeInsertAt=g3;var F3=function(X,$,Q){if(Q[X]===$)return Q;else{var Y=H0.fromReadonlyNonEmptyArray(Q);return Y[X]=$,Y}};G.unsafeUpdateAt=F3;var I3=function(X){return function($){if($.length===1)return $;var Q=[(0,G.head)($)],Y=(0,G.tail)($),J=function(L){if(Q.every(function(B){return!X.equals(B,L)}))Q.push(L)};for(var Z=0,V=Y;Z<V.length;Z++){var D=V[Z];J(D)}return Q}};G.uniq=I3;var y3=function(X){if((0,G.isNonEmpty)(X)){var $=(0,W3.getMonoid)();return(0,G.sort)(X.reduce($.concat,$.empty))}return h.identity};G.sortBy=y3;var b3=function(X){var $=(0,G.uniq)(X);return function(Q){return function(Y){return $((0,h.pipe)(Y,p4(Q)))}}};G.union=b3;var h3=function(X){return function($){var Q=$.length,Y=Math.round(X)%Q;if((0,G.isOutOfBound)(Math.abs(Y),$)||Y===0)return $;if(Y<0){var J=(0,G.splitAt)(-Y)($),Z=J[0],V=J[1];return(0,h.pipe)(V,p4(Z))}else return(0,G.rotate)(Y-Q)($)}};G.rotate=h3;var u3=function(X){return(0,G.isNonEmpty)(X)?H0.some(X):H0.none};G.fromReadonlyArray=u3;var k3=function(X){return function($){var Q=Math.max(0,Math.floor($)),Y=[X(0)];for(var J=1;J<Q;J++)Y.push(X(J));return Y}};G.makeBy=k3;var l3=function(X){return(0,G.makeBy)(function(){return X})};G.replicate=l3;var m3=function(X,$){return X<=$?(0,G.makeBy)(function(Q){return X+Q})($-X+1):[X]};G.range=m3;var c3=function(X){return[(0,G.head)(X),(0,G.tail)(X)]};G.unprepend=c3;var _3=function(X){return[(0,G.init)(X),(0,G.last)(X)]};G.unappend=_3;var x3=function(X){return(0,G.fromReadonlyArray)(X.slice())};G.fromArray=x3;G.concatW=FP;G.concat=p4;var d3=function(X){return X.length===1?X:f4([(0,G.last)(X)],X.slice(0,-1).reverse(),!0)};G.reverse=d3;G.group=IP;var n3=function(X){return function($){var Q={};for(var Y=0,J=$;Y<J.length;Y++){var Z=J[Y],V=X(Z);if(H0.has.call(Q,V))Q[V].push(Z);else Q[V]=[Z]}return Q}};G.groupBy=n3;var f3=function(X){return function($){return $.length===1?$:$.slice().sort(X.compare)}};G.sort=f3;var p3=function(X,$){return(0,G.modifyAt)(X,function(){return $})};G.updateAt=p3;var o3=function(X,$){return function(Q){return(0,G.isOutOfBound)(X,Q)?H0.none:H0.some((0,G.unsafeUpdateAt)(X,$(Q[X]),Q))}};G.modifyAt=o3;var i3=function(X,$,Q){var Y=[Q(X[0],$[0])],J=Math.min(X.length,$.length);for(var Z=1;Z<J;Z++)Y[Z]=Q(X[Z],$[Z]);return Y};G.zipWith=i3;G.zip=yP;var r3=function(X){var $=[X[0][0]],Q=[X[0][1]];for(var Y=1;Y<X.length;Y++)$[Y]=X[Y][0],Q[Y]=X[Y][1];return[$,Q]};G.unzip=r3;var s3=function(X){return function($){var Q=[X,$[0]];for(var Y=1;Y<$.length;Y++)Q.push(X,$[Y]);return Q}};G.prependAll=s3;var t3=function(X){return function($){var Q=(0,G.tail)($);return(0,G.isNonEmpty)(Q)?(0,h.pipe)(Q,(0,G.prependAll)(X),(0,G.prepend)((0,G.head)($))):$}};G.intersperse=t3;var a3=function(X){return function($){var Q=H0.fromReadonlyNonEmptyArray(X(0,(0,G.head)($)));for(var Y=1;Y<$.length;Y++)Q.push.apply(Q,X(Y,$[Y]));return Q}};G.chainWithIndex=a3;var e3=function(X){return function($){var Q=X($),Y=Q[0],J=Q[1],Z=[Y],V=J;while((0,G.isNonEmpty)(V)){var D=X(V),L=D[0],B=D[1];Z.push(L),V=B}return Z}};G.chop=e3;var Xv=function(X){return function($){var Q=Math.max(1,X);return Q>=$.length?[$,G.empty]:[(0,h.pipe)($.slice(1,Q),(0,G.prepend)((0,G.head)($))),$.slice(Q)]}};G.splitAt=Xv;var $v=function(X){return(0,G.chop)((0,G.splitAt)(X))};G.chunksOf=$v;var x0=function(X,$){return(0,h.pipe)(X,(0,G.map)($))},r8=function(X,$){return(0,h.pipe)(X,(0,G.mapWithIndex)($))},o4=function(X,$){return(0,h.pipe)(X,(0,G.ap)($))},bP=function(X,$){return(0,h.pipe)(X,(0,G.extend)($))},i4=function(X,$,Q){return(0,h.pipe)(X,(0,G.reduce)($,Q))},r4=function(X){var $=(0,G.foldMap)(X);return function(Q,Y){return(0,h.pipe)(Q,$(Y))}},s4=function(X,$,Q){return(0,h.pipe)(X,(0,G.reduceRight)($,Q))},s8=function(X){var $=(0,G.traverse)(X);return function(Q,Y){return(0,h.pipe)(Q,$(Y))}},hP=function(X,$){return(0,h.pipe)(X,(0,G.alt)($))},t8=function(X,$,Q){return(0,h.pipe)(X,(0,G.reduceWithIndex)($,Q))},a8=function(X){var $=(0,G.foldMapWithIndex)(X);return function(Q,Y){return(0,h.pipe)(Q,$(Y))}},e8=function(X,$,Q){return(0,h.pipe)(X,(0,G.reduceRightWithIndex)($,Q))},uP=function(X){var $=(0,G.traverseWithIndex)(X);return function(Q,Y){return(0,h.pipe)(Q,$(Y))}};G.of=H0.singleton;var Qv=function(X){return function($){return(0,h.pipe)($,FP(X()))}};G.altW=Qv;G.alt=G.altW;var Yv=function(X){return(0,G.flatMap)(function($){return(0,h.pipe)(X,(0,G.map)($))})};G.ap=Yv;G.flatMap=(0,h.dual)(2,function(X,$){return(0,h.pipe)(X,(0,G.chainWithIndex)(function(Q,Y){return $(Y,Q)}))});var Jv=function(X){return function($){var Q=(0,G.tail)($),Y=[X($)];while((0,G.isNonEmpty)(Q))Y.push(X(Q)),Q=(0,G.tail)(Q);return Y}};G.extend=Jv;G.duplicate=(0,G.extend)(h.identity);G.flatten=(0,G.flatMap)(h.identity);var Zv=function(X){return(0,G.mapWithIndex)(function($,Q){return X(Q)})};G.map=Zv;var Hv=function(X){return function($){var Q=[X(0,(0,G.head)($))];for(var Y=1;Y<$.length;Y++)Q.push(X(Y,$[Y]));return Q}};G.mapWithIndex=Hv;var jv=function(X,$){return(0,G.reduceWithIndex)(X,function(Q,Y,J){return $(Y,J)})};G.reduce=jv;var Pv=function(X){return function($){return function(Q){return Q.slice(1).reduce(function(Y,J){return X.concat(Y,$(J))},$(Q[0]))}}};G.foldMap=Pv;var zv=function(X,$){return(0,G.reduceRightWithIndex)(X,function(Q,Y,J){return $(Y,J)})};G.reduceRight=zv;var Gv=function(X,$){return function(Q){return Q.reduce(function(Y,J,Z){return $(Z,Y,J)},X)}};G.reduceWithIndex=Gv;var Vv=function(X){return function($){return function(Q){return Q.slice(1).reduce(function(Y,J,Z){return X.concat(Y,$(Z+1,J))},$(0,Q[0]))}}};G.foldMapWithIndex=Vv;var Dv=function(X,$){return function(Q){return Q.reduceRight(function(Y,J,Z){return $(Z,J,Y)},X)}};G.reduceRightWithIndex=Dv;var qv=function(X){var $=(0,G.traverseWithIndex)(X);return function(Q){return $(function(Y,J){return Q(J)})}};G.traverse=qv;var Kv=function(X){return(0,G.traverseWithIndex)(X)(h.SK)};G.sequence=Kv;var Bv=function(X){return function($){return function(Q){var Y=X.map($(0,(0,G.head)(Q)),G.of);for(var J=1;J<Q.length;J++)Y=X.ap(X.map(Y,function(Z){return function(V){return(0,h.pipe)(Z,(0,G.append)(V))}}),$(J,Q[J]));return Y}}};G.traverseWithIndex=Bv;G.extract=H0.head;G.URI="ReadonlyNonEmptyArray";var Lv=function(X){return{show:function($){return"[".concat($.map(X.show).join(", "),"]")}}};G.getShow=Lv;var wv=function(){return{concat:p4}};G.getSemigroup=wv;var Uv=function(X){return(0,S3.fromEquals)(function($,Q){return $.length===Q.length&&$.every(function(Y,J){return X.equals(Y,Q[J])})})};G.getEq=Uv;var Cv=function(X){var $=(0,G.union)(X);return{concat:function(Q,Y){return $(Y)(Q)}}};G.getUnionSemigroup=Cv;G.Functor={URI:G.URI,map:x0};G.flap=(0,i8.flap)(G.Functor);G.Pointed={URI:G.URI,of:G.of};G.FunctorWithIndex={URI:G.URI,map:x0,mapWithIndex:r8};G.Apply={URI:G.URI,map:x0,ap:o4};G.apFirst=(0,o8.apFirst)(G.Apply);G.apSecond=(0,o8.apSecond)(G.Apply);G.Applicative={URI:G.URI,map:x0,ap:o4,of:G.of};G.Chain={URI:G.URI,map:x0,ap:o4,chain:G.flatMap};G.chainFirst=(0,MP.chainFirst)(G.Chain);G.Monad={URI:G.URI,map:x0,ap:o4,of:G.of,chain:G.flatMap};G.Foldable={URI:G.URI,reduce:i4,foldMap:r4,reduceRight:s4};G.FoldableWithIndex={URI:G.URI,reduce:i4,foldMap:r4,reduceRight:s4,reduceWithIndex:t8,foldMapWithIndex:a8,reduceRightWithIndex:e8};G.Traversable={URI:G.URI,map:x0,reduce:i4,foldMap:r4,reduceRight:s4,traverse:s8,sequence:G.sequence};G.TraversableWithIndex={URI:G.URI,map:x0,mapWithIndex:r8,reduce:i4,foldMap:r4,reduceRight:s4,traverse:s8,sequence:G.sequence,reduceWithIndex:t8,foldMapWithIndex:a8,reduceRightWithIndex:e8,traverseWithIndex:uP};G.Alt={URI:G.URI,map:x0,alt:hP};G.Comonad={URI:G.URI,map:x0,extend:bP,extract:G.extract};G.Do=(0,G.of)(H0.emptyRecord);G.bindTo=(0,i8.bindTo)(G.Functor);var Nv=(0,i8.let)(G.Functor);G.let=Nv;G.bind=(0,MP.bind)(G.Chain);G.apS=(0,o8.apS)(G.Apply);G.head=G.extract;G.tail=H0.tail;var Tv=function(X){return X[X.length-1]};G.last=Tv;var vv=function(X){return X.slice(0,-1)};G.init=vv;var Av=function(X){var $=gP.min(X);return function(Q){return Q.reduce($.concat)}};G.min=Av;var Rv=function(X){var $=gP.max(X);return function(Q){return Q.reduce($.concat)}};G.max=Rv;var Sv=function(X){return function($){return $.reduce(X.concat)}};G.concatAll=Sv;var Wv=function(X){return function($){return X((0,G.head)($),(0,G.tail)($))}};G.matchLeft=Wv;var Ev=function(X){return function($){return X((0,G.init)($),(0,G.last)($))}};G.matchRight=Ev;var Ov=function(X){return function($){return f4([X((0,G.head)($))],(0,G.tail)($),!0)}};G.modifyHead=Ov;var Mv=function(X){return(0,G.modifyHead)(function(){return X})};G.updateHead=Mv;var gv=function(X){return function($){return(0,h.pipe)((0,G.init)($),(0,G.append)(X((0,G.last)($))))}};G.modifyLast=gv;var Fv=function(X){return(0,G.modifyLast)(function(){return X})};G.updateLast=Fv;var Iv=function(X){var $=(0,G.concatAll)(X);return function(Q){return(0,h.flow)((0,G.intersperse)(Q),$)}};G.intercalate=Iv;G.chain=G.flatMap;G.groupSort=yv;G.filter=bv;var hv=function(X){return function($){return(0,G.fromReadonlyArray)($.filter(function(Q,Y){return X(Y,Q)}))}};G.filterWithIndex=hv;G.uncons=G.unprepend;G.unsnoc=G.unappend;G.cons=uv;var kv=function(X,$){return(0,h.pipe)(X,p4([$]))};G.snoc=kv;var lv=function(X,$){return function(Q){return X<0||X>Q.length?H0.none:H0.some((0,G.unsafeInsertAt)(X,$,Q))}};G.insertAt=lv;G.prependToAll=G.prependAll;G.fold=G.concatAll;G.readonlyNonEmptyArray={URI:G.URI,of:G.of,map:x0,mapWithIndex:r8,ap:o4,chain:G.flatMap,extend:bP,extract:G.extract,reduce:i4,foldMap:r4,reduceRight:s4,traverse:s8,sequence:G.sequence,reduceWithIndex:t8,foldMapWithIndex:a8,reduceRightWithIndex:e8,traverseWithIndex:uP,alt:hP}});var a4=v((kP)=>{Object.defineProperty(kP,"__esModule",{value:!0});kP.right=kP.left=kP.flap=kP.Functor=kP.Bifunctor=kP.URI=kP.bimap=kP.mapLeft=kP.map=kP.separated=void 0;var $$=F(),mv=v1(),cv=function(X,$){return{left:X,right:$}};kP.separated=cv;var _v=function(X,$){return(0,$$.pipe)(X,(0,kP.map)($))},xv=function(X,$){return(0,$$.pipe)(X,(0,kP.mapLeft)($))},dv=function(X,$,Q){return(0,$$.pipe)(X,(0,kP.bimap)($,Q))},nv=function(X){return function($){return(0,kP.separated)((0,kP.left)($),X((0,kP.right)($)))}};kP.map=nv;var fv=function(X){return function($){return(0,kP.separated)(X((0,kP.left)($)),(0,kP.right)($))}};kP.mapLeft=fv;var pv=function(X,$){return function(Q){return(0,kP.separated)(X((0,kP.left)(Q)),$((0,kP.right)(Q)))}};kP.bimap=pv;kP.URI="Separated";kP.Bifunctor={URI:kP.URI,mapLeft:xv,bimap:dv};kP.Functor={URI:kP.URI,map:_v};kP.flap=(0,mv.flap)(kP.Functor);var ov=function(X){return X.left};kP.left=ov;var iv=function(X){return X.right};kP.right=iv});var e4=v((L0)=>{var XA=function(X,$){return function(Q){var Y=X.traverse(Q);return function(J,Z){return Q.map(Y(J,Z),$.separate)}}},$A=function(X,$){return function(Q){var Y=X.traverse(Q);return function(J,Z){return Q.map(Y(J,Z),$.compact)}}},QA=function(X){return function($){var Q=X.wither($);return function(Y){return function(J){return Q(J,function(Z){return $.map(Y(Z),function(V){return V?xP.some(Z):xP.none})})}}}},tv=L0&&L0.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),av=L0&&L0.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),ev=L0&&L0.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))tv($,X,Q)}return av($,X),$};Object.defineProperty(L0,"__esModule",{value:!0});L0.filterE=L0.witherDefault=L0.wiltDefault=void 0;var xP=ev(J1());L0.wiltDefault=XA;L0.witherDefault=$A;L0.filterE=QA});var Y$=v((dP)=>{var YA=function(X,$){return function(Q){return Q?$.of(void 0):X.zero()}};Object.defineProperty(dP,"__esModule",{value:!0});dP.guard=void 0;dP.guard=YA});var t9=v((H)=>{var BA=function(X){return function($){return X($)?[$]:H.empty}},pP=function(X,$){return $===void 0?function(Q){return pP(X,Q)}:(0,H.isOutOfBound)(X,$)?M.none:M.some($[X])},FA=function(X){return function($){var Q=[];for(var Y=0,J=$;Y<J.length;Y++){var Z=J[Y];if(!X(Z))break;Q.push(Z)}var V=Q.length;return V===$.length?$:V===0?H.empty:Q}},IA=function(X){return function($){var Q=(0,H.splitAt)(oP($,X))($),Y=Q[0],J=Q[1];return{init:Y,rest:J}}},hA=function(X){return function($){var Q=oP($,X);return Q===0?$:Q===$.length?H.empty:$.slice(Q)}},kA=function(X){return function($){for(var Q=0;Q<$.length;Q++)if(X($[Q]))return M.some($[Q]);return M.none}},mA=function(X){return function($){for(var Q=$.length-1;Q>=0;Q--)if(X($[Q]))return M.some($[Q]);return M.none}},iP=function(X,$){if($===void 0)return function(Q){return iP(Q,X)};return(0,H.zipWith)(X,$,function(Q,Y){return[Q,Y]})},n9=function(X){return function($,Q){if(Q===void 0){var Y=n9(X);return function(V){return Y($,V)}}var J=function(V){return X.equals(V,$)},Z=0;for(;Z<Q.length;Z++)if(J(Q[Z]))return!0;return!1}},jR=function(X,$,Q){if(Q===void 0)Q=function(){return!0};var Y=function(J,Z){return(0,H.isNonEmpty)(Z)?(0,H.flatMap)(g.head(Z),function(V){return Y((0,b.pipe)(J,(0,H.append)(V)),g.tail(Z))}):Q.apply(void 0,J)?[$.apply(void 0,J)]:H.empty};return Y(H.empty,X)},z$=function(X){var $=g.union(X);return function(Q,Y){if(Y===void 0){var J=z$(X);return function(Z){return J(Z,Q)}}return(0,H.isNonEmpty)(Q)&&(0,H.isNonEmpty)(Y)?$(Y)(Q):(0,H.isNonEmpty)(Q)?Q:Y}},G$=function(X){var $=n9(X);return function(Q,Y){if(Y===void 0){var J=G$(X);return function(Z){return J(Z,Q)}}return Q.filter(function(Z){return $(Z,Y)})}},V$=function(X){var $=n9(X);return function(Q,Y){if(Y===void 0){var J=V$(X);return function(Z){return J(Z,Q)}}return Q.filter(function(Z){return!$(Z,Y)})}},eR=function(X){return function($){return $.every(X)}},JA=H&&H.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),ZA=H&&H.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),J$=H&&H.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))JA($,X,Q)}return ZA($,X),$},HA=H&&H.__spreadArray||function(X,$,Q){if(Q||arguments.length===2){for(var Y=0,J=$.length,Z;Y<J;Y++)if(Z||!(Y in $)){if(!Z)Z=Array.prototype.slice.call($,0,Y);Z[Y]=$[Y]}}return X.concat(Z||Array.prototype.slice.call($))};Object.defineProperty(H,"__esModule",{value:!0});H.sort=H.lefts=H.rights=H.reverse=H.modifyAt=H.deleteAt=H.updateAt=H.insertAt=H.findLastIndex=H.findLastMap=H.findLast=H.findFirstMap=H.findFirst=H.findIndex=H.dropLeftWhile=H.dropRight=H.dropLeft=H.spanLeft=H.takeLeftWhile=H.takeRight=H.takeLeft=H.init=H.tail=H.last=H.head=H.lookup=H.isOutOfBound=H.size=H.scanRight=H.scanLeft=H.chainWithIndex=H.foldRight=H.matchRight=H.matchRightW=H.foldLeft=H.matchLeft=H.matchLeftW=H.match=H.matchW=H.fromEither=H.fromOption=H.fromPredicate=H.replicate=H.makeBy=H.appendW=H.append=H.prependW=H.prepend=H.isNonEmpty=H.isEmpty=void 0;H.sequence=H.traverse=H.reduceRightWithIndex=H.reduceRight=H.reduceWithIndex=H.foldMap=H.reduce=H.foldMapWithIndex=H.duplicate=H.extend=H.filterWithIndex=H.partitionMapWithIndex=H.partitionMap=H.partitionWithIndex=H.partition=H.compact=H.filterMap=H.filterMapWithIndex=H.filter=H.separate=H.mapWithIndex=H.map=H.flatten=H.flatMap=H.ap=H.alt=H.altW=H.zero=H.of=H._chainRecBreadthFirst=H._chainRecDepthFirst=H.difference=H.intersection=H.union=H.concat=H.concatW=H.comprehension=H.fromOptionK=H.chunksOf=H.splitAt=H.chop=H.sortBy=H.uniq=H.elem=H.rotate=H.intersperse=H.prependAll=H.unzip=H.zip=H.zipWith=void 0;H.toArray=H.unsafeDeleteAt=H.unsafeUpdateAt=H.unsafeInsertAt=H.fromEitherK=H.FromEither=H.filterE=H.Witherable=H.ChainRecBreadthFirst=H.chainRecBreadthFirst=H.ChainRecDepthFirst=H.chainRecDepthFirst=H.TraversableWithIndex=H.Traversable=H.FoldableWithIndex=H.Foldable=H.FilterableWithIndex=H.Filterable=H.Compactable=H.Extend=H.Alternative=H.guard=H.Zero=H.Alt=H.Unfoldable=H.chainFirst=H.Monad=H.Chain=H.Applicative=H.apSecond=H.apFirst=H.Apply=H.FunctorWithIndex=H.Pointed=H.flap=H.Functor=H.getDifferenceMagma=H.getIntersectionSemigroup=H.getUnionMonoid=H.getUnionSemigroup=H.getOrd=H.getEq=H.getMonoid=H.getSemigroup=H.getShow=H.URI=H.unfold=H.wilt=H.wither=H.traverseWithIndex=void 0;H.readonlyArray=H.prependToAll=H.snoc=H.cons=H.range=H.chain=H.apS=H.bind=H.let=H.bindTo=H.Do=H.intercalate=H.exists=H.some=H.every=H.empty=H.fromArray=void 0;var Z$=Y5(),fP=J5(),jA=n4(),PA=m9(),b=F(),H$=v1(),M=J$(J1()),zA=J$(PP()),GA=_9(),g=J$(X$()),j$=a4(),P$=e4(),VA=Y$(),DA=function(X){return X.length===0};H.isEmpty=DA;H.isNonEmpty=g.isNonEmpty;H.prepend=g.prepend;H.prependW=g.prependW;H.append=g.append;H.appendW=g.appendW;var qA=function(X,$){return X<=0?H.empty:g.makeBy($)(X)};H.makeBy=qA;var KA=function(X,$){return(0,H.makeBy)(X,function(){return $})};H.replicate=KA;H.fromPredicate=BA;var LA=function(X){return M.isNone(X)?H.empty:[X.value]};H.fromOption=LA;var wA=function(X){return M.isLeft(X)?H.empty:[X.right]};H.fromEither=wA;var UA=function(X,$){return function(Q){return(0,H.isNonEmpty)(Q)?$(Q):X()}};H.matchW=UA;H.match=H.matchW;var CA=function(X,$){return function(Q){return(0,H.isNonEmpty)(Q)?$(g.head(Q),g.tail(Q)):X()}};H.matchLeftW=CA;H.matchLeft=H.matchLeftW;H.foldLeft=H.matchLeft;var NA=function(X,$){return function(Q){return(0,H.isNonEmpty)(Q)?$(g.init(Q),g.last(Q)):X()}};H.matchRightW=NA;H.matchRight=H.matchRightW;H.foldRight=H.matchRight;var TA=function(X){return function($){if((0,H.isEmpty)($))return H.empty;var Q=[];for(var Y=0;Y<$.length;Y++)Q.push.apply(Q,X(Y,$[Y]));return Q}};H.chainWithIndex=TA;var vA=function(X,$){return function(Q){var Y=Q.length,J=new Array(Y+1);J[0]=X;for(var Z=0;Z<Y;Z++)J[Z+1]=$(J[Z],Q[Z]);return J}};H.scanLeft=vA;var AA=function(X,$){return function(Q){var Y=Q.length,J=new Array(Y+1);J[Y]=X;for(var Z=Y-1;Z>=0;Z--)J[Z]=$(Q[Z],J[Z+1]);return J}};H.scanRight=AA;var RA=function(X){return X.length};H.size=RA;H.isOutOfBound=g.isOutOfBound;H.lookup=pP;var SA=function(X){return(0,H.isNonEmpty)(X)?M.some(g.head(X)):M.none};H.head=SA;var WA=function(X){return(0,H.isNonEmpty)(X)?M.some(g.last(X)):M.none};H.last=WA;var EA=function(X){return(0,H.isNonEmpty)(X)?M.some(g.tail(X)):M.none};H.tail=EA;var OA=function(X){return(0,H.isNonEmpty)(X)?M.some(g.init(X)):M.none};H.init=OA;var MA=function(X){return function($){return(0,H.isOutOfBound)(X,$)?$:X===0?H.empty:$.slice(0,X)}};H.takeLeft=MA;var gA=function(X){return function($){return(0,H.isOutOfBound)(X,$)?$:X===0?H.empty:$.slice(-X)}};H.takeRight=gA;H.takeLeftWhile=FA;var oP=function(X,$){var Q=X.length,Y=0;for(;Y<Q;Y++)if(!$(X[Y]))break;return Y};H.spanLeft=IA;var yA=function(X){return function($){return X<=0||(0,H.isEmpty)($)?$:X>=$.length?H.empty:$.slice(X,$.length)}};H.dropLeft=yA;var bA=function(X){return function($){return X<=0||(0,H.isEmpty)($)?$:X>=$.length?H.empty:$.slice(0,$.length-X)}};H.dropRight=bA;H.dropLeftWhile=hA;var uA=function(X){return function($){for(var Q=0;Q<$.length;Q++)if(X($[Q]))return M.some(Q);return M.none}};H.findIndex=uA;H.findFirst=kA;var lA=function(X){return function($){for(var Q=0;Q<$.length;Q++){var Y=X($[Q]);if(M.isSome(Y))return Y}return M.none}};H.findFirstMap=lA;H.findLast=mA;var cA=function(X){return function($){for(var Q=$.length-1;Q>=0;Q--){var Y=X($[Q]);if(M.isSome(Y))return Y}return M.none}};H.findLastMap=cA;var _A=function(X){return function($){for(var Q=$.length-1;Q>=0;Q--)if(X($[Q]))return M.some(Q);return M.none}};H.findLastIndex=_A;var xA=function(X,$){return function(Q){return X<0||X>Q.length?M.none:M.some(g.unsafeInsertAt(X,$,Q))}};H.insertAt=xA;var dA=function(X,$){return(0,H.modifyAt)(X,function(){return $})};H.updateAt=dA;var nA=function(X){return function($){return(0,H.isOutOfBound)(X,$)?M.none:M.some((0,H.unsafeDeleteAt)(X,$))}};H.deleteAt=nA;var fA=function(X,$){return function(Q){return(0,H.isOutOfBound)(X,Q)?M.none:M.some((0,H.unsafeUpdateAt)(X,$(Q[X]),Q))}};H.modifyAt=fA;var pA=function(X){return X.length<=1?X:X.slice().reverse()};H.reverse=pA;var oA=function(X){var $=[];for(var Q=0;Q<X.length;Q++){var Y=X[Q];if(Y._tag==="Right")$.push(Y.right)}return $};H.rights=oA;var iA=function(X){var $=[];for(var Q=0;Q<X.length;Q++){var Y=X[Q];if(Y._tag==="Left")$.push(Y.left)}return $};H.lefts=iA;var rA=function(X){return function($){return $.length<=1?$:$.slice().sort(X.compare)}};H.sort=rA;var sA=function(X,$,Q){var Y=[],J=Math.min(X.length,$.length);for(var Z=0;Z<J;Z++)Y[Z]=Q(X[Z],$[Z]);return Y};H.zipWith=sA;H.zip=iP;var tA=function(X){var $=[],Q=[];for(var Y=0;Y<X.length;Y++)$[Y]=X[Y][0],Q[Y]=X[Y][1];return[$,Q]};H.unzip=tA;var aA=function(X){var $=g.prependAll(X);return function(Q){return(0,H.isNonEmpty)(Q)?$(Q):Q}};H.prependAll=aA;var eA=function(X){var $=g.intersperse(X);return function(Q){return(0,H.isNonEmpty)(Q)?$(Q):Q}};H.intersperse=eA;var XR=function(X){var $=g.rotate(X);return function(Q){return(0,H.isNonEmpty)(Q)?$(Q):Q}};H.rotate=XR;H.elem=n9;var $R=function(X){var $=g.uniq(X);return function(Q){return(0,H.isNonEmpty)(Q)?$(Q):Q}};H.uniq=$R;var QR=function(X){var $=g.sortBy(X);return function(Q){return(0,H.isNonEmpty)(Q)?$(Q):Q}};H.sortBy=QR;var YR=function(X){var $=g.chop(X);return function(Q){return(0,H.isNonEmpty)(Q)?$(Q):H.empty}};H.chop=YR;var JR=function(X){return function($){return X>=1&&(0,H.isNonEmpty)($)?g.splitAt(X)($):(0,H.isEmpty)($)?[$,H.empty]:[H.empty,$]}};H.splitAt=JR;var ZR=function(X){var $=g.chunksOf(X);return function(Q){return(0,H.isNonEmpty)(Q)?$(Q):H.empty}};H.chunksOf=ZR;var HR=function(X){return function(){var $=[];for(var Q=0;Q<arguments.length;Q++)$[Q]=arguments[Q];return(0,H.fromOption)(X.apply(void 0,$))}};H.fromOptionK=HR;H.comprehension=jR;var PR=function(X){return function($){return(0,H.isEmpty)($)?X:(0,H.isEmpty)(X)?$:$.concat(X)}};H.concatW=PR;H.concat=H.concatW;H.union=z$;H.intersection=G$;H.difference=V$;var Y0=function(X,$){return(0,b.pipe)(X,(0,H.map)($))},f9=function(X,$){return(0,b.pipe)(X,(0,H.mapWithIndex)($))},b1=function(X,$){return(0,b.pipe)(X,(0,H.ap)($))},p9=function(X,$){return(0,b.pipe)(X,(0,H.filter)($))},o9=function(X,$){return(0,b.pipe)(X,(0,H.filterMap)($))},i9=function(X,$){return(0,b.pipe)(X,(0,H.partition)($))},r9=function(X,$){return(0,b.pipe)(X,(0,H.partitionMap)($))},rP=function(X,$){return(0,b.pipe)(X,(0,H.partitionWithIndex)($))},sP=function(X,$){return(0,b.pipe)(X,(0,H.partitionMapWithIndex)($))},D$=function(X,$){return(0,b.pipe)(X,(0,H.alt)($))},H5=function(X,$,Q){return(0,b.pipe)(X,(0,H.reduce)($,Q))},x5=function(X){var $=(0,H.foldMap)(X);return function(Q,Y){return(0,b.pipe)(Q,$(Y))}},d5=function(X,$,Q){return(0,b.pipe)(X,(0,H.reduceRight)($,Q))},q$=function(X,$,Q){return(0,b.pipe)(X,(0,H.reduceWithIndex)($,Q))},K$=function(X){var $=(0,H.foldMapWithIndex)(X);return function(Q,Y){return(0,b.pipe)(Q,$(Y))}},B$=function(X,$,Q){return(0,b.pipe)(X,(0,H.reduceRightWithIndex)($,Q))},tP=function(X,$){return(0,b.pipe)(X,(0,H.filterMapWithIndex)($))},aP=function(X,$){return(0,b.pipe)(X,(0,H.filterWithIndex)($))},eP=function(X,$){return(0,b.pipe)(X,(0,H.extend)($))},s9=function(X){var $=(0,H.traverse)(X);return function(Q,Y){return(0,b.pipe)(Q,$(Y))}},Xz=function(X){var $=(0,H.traverseWithIndex)(X);return function(Q,Y){return(0,b.pipe)(Q,$(Y))}},zR=function(X,$){return(0,b.pipe)(X,(0,H.chainRecDepthFirst)($))};H._chainRecDepthFirst=zR;var GR=function(X,$){return(0,b.pipe)(X,(0,H.chainRecBreadthFirst)($))};H._chainRecBreadthFirst=GR;H.of=g.of;var VR=function(){return H.empty};H.zero=VR;var DR=function(X){return function($){return $.concat(X())}};H.altW=DR;H.alt=H.altW;var qR=function(X){return(0,H.flatMap)(function($){return(0,b.pipe)(X,(0,H.map)($))})};H.ap=qR;H.flatMap=(0,b.dual)(2,function(X,$){return(0,b.pipe)(X,(0,H.chainWithIndex)(function(Q,Y){return $(Y,Q)}))});H.flatten=(0,H.flatMap)(b.identity);var KR=function(X){return function($){return $.map(function(Q){return X(Q)})}};H.map=KR;var BR=function(X){return function($){return $.map(function(Q,Y){return X(Y,Q)})}};H.mapWithIndex=BR;var LR=function(X){var $=[],Q=[];for(var Y=0,J=X;Y<J.length;Y++){var Z=J[Y];if(Z._tag==="Left")$.push(Z.left);else Q.push(Z.right)}return(0,j$.separated)($,Q)};H.separate=LR;var wR=function(X){return function($){return $.filter(X)}};H.filter=wR;var UR=function(X){return function($){var Q=[];for(var Y=0;Y<$.length;Y++){var J=X(Y,$[Y]);if(M.isSome(J))Q.push(J.value)}return Q}};H.filterMapWithIndex=UR;var CR=function(X){return(0,H.filterMapWithIndex)(function($,Q){return X(Q)})};H.filterMap=CR;H.compact=(0,H.filterMap)(b.identity);var NR=function(X){return(0,H.partitionWithIndex)(function($,Q){return X(Q)})};H.partition=NR;var TR=function(X){return function($){var Q=[],Y=[];for(var J=0;J<$.length;J++){var Z=$[J];if(X(J,Z))Y.push(Z);else Q.push(Z)}return(0,j$.separated)(Q,Y)}};H.partitionWithIndex=TR;var vR=function(X){return(0,H.partitionMapWithIndex)(function($,Q){return X(Q)})};H.partitionMap=vR;var AR=function(X){return function($){var Q=[],Y=[];for(var J=0;J<$.length;J++){var Z=X(J,$[J]);if(Z._tag==="Left")Q.push(Z.left);else Y.push(Z.right)}return(0,j$.separated)(Q,Y)}};H.partitionMapWithIndex=AR;var RR=function(X){return function($){return $.filter(function(Q,Y){return X(Y,Q)})}};H.filterWithIndex=RR;var SR=function(X){return function($){return $.map(function(Q,Y){return X($.slice(Y))})}};H.extend=SR;H.duplicate=(0,H.extend)(b.identity);var WR=function(X){return function($){return function(Q){return Q.reduce(function(Y,J,Z){return X.concat(Y,$(Z,J))},X.empty)}}};H.foldMapWithIndex=WR;var ER=function(X,$){return(0,H.reduceWithIndex)(X,function(Q,Y,J){return $(Y,J)})};H.reduce=ER;var OR=function(X){var $=(0,H.foldMapWithIndex)(X);return function(Q){return $(function(Y,J){return Q(J)})}};H.foldMap=OR;var MR=function(X,$){return function(Q){var Y=Q.length,J=X;for(var Z=0;Z<Y;Z++)J=$(Z,J,Q[Z]);return J}};H.reduceWithIndex=MR;var gR=function(X,$){return(0,H.reduceRightWithIndex)(X,function(Q,Y,J){return $(Y,J)})};H.reduceRight=gR;var FR=function(X,$){return function(Q){return Q.reduceRight(function(Y,J,Z){return $(Z,J,Y)},X)}};H.reduceRightWithIndex=FR;var IR=function(X){var $=(0,H.traverseWithIndex)(X);return function(Q){return $(function(Y,J){return Q(J)})}};H.traverse=IR;var yR=function(X){return function($){return H5($,X.of((0,H.zero)()),function(Q,Y){return X.ap(X.map(Q,function(J){return function(Z){return(0,b.pipe)(J,(0,H.append)(Z))}}),Y)})}};H.sequence=yR;var bR=function(X){return function($){return(0,H.reduceWithIndex)(X.of((0,H.zero)()),function(Q,Y,J){return X.ap(X.map(Y,function(Z){return function(V){return(0,b.pipe)(Z,(0,H.append)(V))}}),$(Q,J))})}};H.traverseWithIndex=bR;var hR=function(X){var $=L$(X);return function(Q){return function(Y){return $(Y,Q)}}};H.wither=hR;var uR=function(X){var $=w$(X);return function(Q){return function(Y){return $(Y,Q)}}};H.wilt=uR;var kR=function(X,$){var Q=[],Y=X;while(!0){var J=$(Y);if(M.isSome(J)){var Z=J.value,V=Z[0],D=Z[1];Q.push(V),Y=D}else break}return Q};H.unfold=kR;H.URI="ReadonlyArray";var lR=function(X){return{show:function($){return"[".concat($.map(X.show).join(", "),"]")}}};H.getShow=lR;var mR=function(){return{concat:function(X,$){return(0,H.isEmpty)(X)?$:(0,H.isEmpty)($)?X:X.concat($)}}};H.getSemigroup=mR;var cR=function(){return{concat:(0,H.getSemigroup)().concat,empty:H.empty}};H.getMonoid=cR;var _R=function(X){return(0,jA.fromEquals)(function($,Q){return $.length===Q.length&&$.every(function(Y,J){return X.equals(Y,Q[J])})})};H.getEq=_R;var xR=function(X){return(0,GA.fromCompare)(function($,Q){var Y=$.length,J=Q.length,Z=Math.min(Y,J);for(var V=0;V<Z;V++){var D=X.compare($[V],Q[V]);if(D!==0)return D}return zA.Ord.compare(Y,J)})};H.getOrd=xR;var dR=function(X){var $=z$(X);return{concat:function(Q,Y){return $(Y)(Q)}}};H.getUnionSemigroup=dR;var nR=function(X){return{concat:(0,H.getUnionSemigroup)(X).concat,empty:H.empty}};H.getUnionMonoid=nR;var fR=function(X){var $=G$(X);return{concat:function(Q,Y){return $(Y)(Q)}}};H.getIntersectionSemigroup=fR;var pR=function(X){var $=V$(X);return{concat:function(Q,Y){return $(Y)(Q)}}};H.getDifferenceMagma=pR;H.Functor={URI:H.URI,map:Y0};H.flap=(0,H$.flap)(H.Functor);H.Pointed={URI:H.URI,of:H.of};H.FunctorWithIndex={URI:H.URI,map:Y0,mapWithIndex:f9};H.Apply={URI:H.URI,map:Y0,ap:b1};H.apFirst=(0,Z$.apFirst)(H.Apply);H.apSecond=(0,Z$.apSecond)(H.Apply);H.Applicative={URI:H.URI,map:Y0,ap:b1,of:H.of};H.Chain={URI:H.URI,map:Y0,ap:b1,chain:H.flatMap};H.Monad={URI:H.URI,map:Y0,ap:b1,of:H.of,chain:H.flatMap};H.chainFirst=(0,fP.chainFirst)(H.Chain);H.Unfoldable={URI:H.URI,unfold:H.unfold};H.Alt={URI:H.URI,map:Y0,alt:D$};H.Zero={URI:H.URI,zero:H.zero};H.guard=(0,VA.guard)(H.Zero,H.Pointed);H.Alternative={URI:H.URI,map:Y0,ap:b1,of:H.of,alt:D$,zero:H.zero};H.Extend={URI:H.URI,map:Y0,extend:eP};H.Compactable={URI:H.URI,compact:H.compact,separate:H.separate};H.Filterable={URI:H.URI,map:Y0,compact:H.compact,separate:H.separate,filter:p9,filterMap:o9,partition:i9,partitionMap:r9};H.FilterableWithIndex={URI:H.URI,map:Y0,mapWithIndex:f9,compact:H.compact,separate:H.separate,filter:p9,filterMap:o9,partition:i9,partitionMap:r9,partitionMapWithIndex:sP,partitionWithIndex:rP,filterMapWithIndex:tP,filterWithIndex:aP};H.Foldable={URI:H.URI,reduce:H5,foldMap:x5,reduceRight:d5};H.FoldableWithIndex={URI:H.URI,reduce:H5,foldMap:x5,reduceRight:d5,reduceWithIndex:q$,foldMapWithIndex:K$,reduceRightWithIndex:B$};H.Traversable={URI:H.URI,map:Y0,reduce:H5,foldMap:x5,reduceRight:d5,traverse:s9,sequence:H.sequence};H.TraversableWithIndex={URI:H.URI,map:Y0,mapWithIndex:f9,reduce:H5,foldMap:x5,reduceRight:d5,reduceWithIndex:q$,foldMapWithIndex:K$,reduceRightWithIndex:B$,traverse:s9,sequence:H.sequence,traverseWithIndex:Xz};var oR=function(X){return function($){var Q=HA([],X($),!0),Y=[];while(Q.length>0){var J=Q.shift();if(M.isLeft(J))Q.unshift.apply(Q,X(J.left));else Y.push(J.right)}return Y}};H.chainRecDepthFirst=oR;H.ChainRecDepthFirst={URI:H.URI,map:Y0,ap:b1,chain:H.flatMap,chainRec:H._chainRecDepthFirst};var iR=function(X){return function($){var Q=X($),Y=[],J=[];function Z(B){if(M.isLeft(B))X(B.left).forEach(function(R){return Y.push(R)});else J.push(B.right)}for(var V=0,D=Q;V<D.length;V++){var L=D[V];Z(L)}while(Y.length>0)Z(Y.shift());return J}};H.chainRecBreadthFirst=iR;H.ChainRecBreadthFirst={URI:H.URI,map:Y0,ap:b1,chain:H.flatMap,chainRec:H._chainRecBreadthFirst};var L$=(0,P$.witherDefault)(H.Traversable,H.Compactable),w$=(0,P$.wiltDefault)(H.Traversable,H.Compactable);H.Witherable={URI:H.URI,map:Y0,compact:H.compact,separate:H.separate,filter:p9,filterMap:o9,partition:i9,partitionMap:r9,reduce:H5,foldMap:x5,reduceRight:d5,traverse:s9,sequence:H.sequence,wither:L$,wilt:w$};H.filterE=(0,P$.filterE)(H.Witherable);H.FromEither={URI:H.URI,fromEither:H.fromEither};H.fromEitherK=(0,PA.fromEitherK)(H.FromEither);H.unsafeInsertAt=g.unsafeInsertAt;var rR=function(X,$,Q){return(0,H.isNonEmpty)(Q)?g.unsafeUpdateAt(X,$,Q):Q};H.unsafeUpdateAt=rR;var sR=function(X,$){var Q=$.slice();return Q.splice(X,1),Q};H.unsafeDeleteAt=sR;var tR=function(X){return X.slice()};H.toArray=tR;var aR=function(X){return(0,H.isEmpty)(X)?H.empty:X.slice()};H.fromArray=aR;H.empty=g.empty;H.every=eR;var X2=function(X){return function($){return $.some(X)}};H.some=X2;H.exists=H.some;var $2=function(X){var $=g.intercalate(X);return function(Q){return(0,H.match)(function(){return X.empty},$(Q))}};H.intercalate=$2;H.Do=(0,H.of)(M.emptyRecord);H.bindTo=(0,H$.bindTo)(H.Functor);var Q2=(0,H$.let)(H.Functor);H.let=Q2;H.bind=(0,fP.bind)(H.Chain);H.apS=(0,Z$.apS)(H.Apply);H.chain=H.flatMap;H.range=g.range;H.cons=g.cons;H.snoc=g.snoc;H.prependToAll=H.prependAll;H.readonlyArray={URI:H.URI,compact:H.compact,separate:H.separate,map:Y0,ap:b1,of:H.of,chain:H.flatMap,filter:p9,filterMap:o9,partition:i9,partitionMap:r9,mapWithIndex:f9,partitionMapWithIndex:sP,partitionWithIndex:rP,filterMapWithIndex:tP,filterWithIndex:aP,alt:D$,zero:H.zero,unfold:H.unfold,reduce:H5,foldMap:x5,reduceRight:d5,traverse:s9,sequence:H.sequence,reduceWithIndex:q$,foldMapWithIndex:K$,reduceRightWithIndex:B$,traverseWithIndex:Xz,extend:eP,wither:L$,wilt:w$}});var U$=v(($z)=>{Object.defineProperty($z,"__esModule",{value:!0});$z.endsWith=$z.startsWith=$z.includes=$z.split=$z.size=$z.isEmpty=$z.slice=$z.trimRight=$z.trimLeft=$z.trim=$z.replace=$z.toLowerCase=$z.toUpperCase=$z.isString=$z.Show=$z.Ord=$z.Monoid=$z.empty=$z.Semigroup=$z.Eq=void 0;var Y2=X$();$z.Eq={equals:function(X,$){return X===$}};$z.Semigroup={concat:function(X,$){return X+$}};$z.empty="";$z.Monoid={concat:$z.Semigroup.concat,empty:$z.empty};$z.Ord={equals:$z.Eq.equals,compare:function(X,$){return X<$?-1:X>$?1:0}};$z.Show={show:function(X){return JSON.stringify(X)}};var J2=function(X){return typeof X==="string"};$z.isString=J2;var Z2=function(X){return X.toUpperCase()};$z.toUpperCase=Z2;var H2=function(X){return X.toLowerCase()};$z.toLowerCase=H2;var j2=function(X,$){return function(Q){return Q.replace(X,$)}};$z.replace=j2;var P2=function(X){return X.trim()};$z.trim=P2;var z2=function(X){return X.trimLeft()};$z.trimLeft=z2;var G2=function(X){return X.trimRight()};$z.trimRight=G2;var V2=function(X,$){return function(Q){return Q.slice(X,$)}};$z.slice=V2;var D2=function(X){return X.length===0};$z.isEmpty=D2;var q2=function(X){return X.length};$z.size=q2;var K2=function(X){return function($){var Q=$.split(X);return(0,Y2.isNonEmpty)(Q)?Q:[$]}};$z.split=K2;var B2=function(X,$){return function(Q){return Q.includes(X,$)}};$z.includes=B2;var L2=function(X,$){return function(Q){return Q.startsWith(X,$)}};$z.startsWith=L2;var w2=function(X,$){return function(Q){return Q.endsWith(X,$)}};$z.endsWith=w2});var F$=v((z)=>{var e9=function(X){if(typeof X==="function")return e9(T.Ord)(X);var $=n5(X);return function(Q){return function(Y){var J=[];for(var Z=0,V=$(Y);Z<V.length;Z++){var D=V[Z];J.push(Q(D,Y[D]))}return J}}},x2=function(X){return function($){var Q=(0,z.toReadonlyArray)($),Y=Q.length;return X.unfold(0,function(J){return J<Y?y.some([Q[J],J+1]):y.none})}},jz=function(X){return function($){if(!y.has.call($,X))return $;var Q=Object.assign({},$);return delete Q[X],Q}},o2=function(X){var $=jz(X);return function(Q){var Y=T$(X,Q);return y.isNone(Y)?y.none:y.some([Y.value,$(Q)])}},N$=function(X){return function($,Q){if(Q===void 0){var Y=N$(X);return function(Z){return Y(Z,$)}}for(var J in $)if(!y.has.call(Q,J)||!X.equals($[J],Q[J]))return!1;return!0}},T$=function(X,$){if($===void 0)return function(Q){return T$(X,Q)};return y.has.call($,X)?y.some($[X]):y.none},v$=function(X){return function($){var Q={};for(var Y in $)if(y.has.call($,Y))Q[Y]=X(Y,$[Y]);return Q}},Pz=function(X){return v$(function($,Q){return X(Q)})},XX=function(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];if(X.length===2)return XX(T.Ord).apply(void 0,X);var Q=n5(X[0]);return function(Y,J){return function(Z){var V=Y,D=Q(Z),L=D.length;for(var B=0;B<L;B++){var R=D[B];V=J(R,V,Z[R])}return V}}},$X=function(X){if("compare"in X){var $=n5(X);return function(Q){return function(Y){return function(J){var Z=Q.empty,V=$(J),D=V.length;for(var L=0;L<D;L++){var B=V[L];Z=Q.concat(Z,Y(B,J[B]))}return Z}}}}return $X(T.Ord)(X)},QX=function(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];if(X.length===2)return QX(T.Ord).apply(void 0,X);var Q=n5(X[0]);return function(Y,J){return function(Z){var V=Y,D=Q(Z),L=D.length;for(var B=L-1;B>=0;B--){var R=D[B];V=J(R,Z[R],V)}return V}}},r2=function(X){var $=$7(T.Ord)(X);return function(Q){return function(Y){return $(Y,Q)}}},A$=function(X){var $=(0,z._traverse)(T.Ord)(X);return function(Q){return function(Y){return $(Y,Q)}}},X7=function(X){return(0,z._sequence)(T.Ord)(X)},R$=function(X){return function($){var Q={},Y={};for(var J in $)if(y.has.call($,J)){var Z=X(J,$[J]);switch(Z._tag){case"Left":Q[J]=Z.left;break;case"Right":Y[J]=Z.right;break}}return(0,C$.separated)(Q,Y)}},S$=function(X){return function($){var Q={},Y={};for(var J in $)if(y.has.call($,J)){var Z=$[J];if(X(J,Z))Y[J]=Z;else Q[J]=Z}return(0,C$.separated)(Q,Y)}},W$=function(X){return function($){var Q={};for(var Y in $)if(y.has.call($,Y)){var J=X(Y,$[Y]);if(y.isSome(J))Q[Y]=J.value}return Q}},E$=function(X){return function($){var Q={},Y=!1;for(var J in $)if(y.has.call($,J)){var Z=$[J];if(X(J,Z))Q[J]=Z;else Y=!0}return Y?Q:$}},a2=function(X,$){var Q=zz(X,$);return function(Y){return Q(Y,o.identity)}},zz=function(X,$){return function(Q,Y){return $.reduce(Q,{},function(J,Z){var V=Y(Z),D=V[0],L=V[1];return J[D]=y.has.call(J,D)?X.concat(J[D],L):L,J})}},XS=function(X){return function($){for(var Q in $)if(!X($[Q]))return!1;return!0}},$S=function(X){return function($){for(var Q in $)if(X($[Q]))return!0;return!1}},Gz=function(X){return function($,Q){if(Q===void 0){var Y=Gz(X);return function(Z){return Y($,Z)}}for(var J in Q)if(X.equals(Q[J],$))return!0;return!1}},O$=function(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];if(X.length===1){var Q=XX(X[0]);return function(Y,J){return Q(Y,function(Z,V,D){return J(V,D)})}}return O$(T.Ord).apply(void 0,X)},M$=function(X){if("compare"in X){var $=$X(X);return function(Q){var Y=$(Q);return function(J){return Y(function(Z,V){return J(V)})}}}return M$(T.Ord)(X)},g$=function(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];if(X.length===1){var Q=QX(X[0]);return function(Y,J){return Q(Y,function(Z,V,D){return J(V,D)})}}return g$(T.Ord).apply(void 0,X)},Vz=function(X){if("compare"in X)return function($){return{show:function(Q){var Y=e9(X)(function(J,Z){return"".concat(JSON.stringify(J),": ").concat($.show(Z))})(Q).join(", ");return Y===""?"{}":"{ ".concat(Y," }")}}};return Vz(T.Ord)(X)},MS=function(X){var $=N$(X);return(0,u2.fromEquals)(function(Q,Y){return $(Q)(Y)&&$(Y)(Q)})},gS=function(X){return{concat:function($,Q){if((0,z.isEmpty)($))return Q;if((0,z.isEmpty)(Q))return $;var Y=Object.assign({},$);for(var J in Q)if(y.has.call(Q,J))Y[J]=y.has.call($,J)?X.concat($[J],Q[J]):Q[J];return Y},empty:z.empty}},cS=function(X,$){return y.has.call($===void 0?this:$,X)},b2=z&&z.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),h2=z&&z.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),Hz=z&&z.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))b2($,X,Q)}return h2($,X),$};Object.defineProperty(z,"__esModule",{value:!0});z._partition=z._filterMap=z._filter=z._reduceRight=z._foldMap=z._reduce=z._mapWithIndex=z._map=z.difference=z.intersection=z.union=z.elem=z.some=z.every=z.fromEntries=z.toEntries=z.fromFoldableMap=z.fromFoldable=z.filterWithIndex=z.filterMapWithIndex=z.partitionWithIndex=z.partitionMapWithIndex=z.wilt=z.wither=z.sequence=z.traverse=z.traverseWithIndex=z.singleton=z.reduceRightWithIndex=z.foldMapWithIndex=z.reduceWithIndex=z.map=z.mapWithIndex=z.empty=z.lookup=z.isSubrecord=z.pop=z.modifyAt=z.updateAt=z.deleteAt=z.has=z.upsertAt=z.toUnfoldable=z.toReadonlyArray=z.collect=z.keys=z.isEmpty=z.size=z.toRecord=z.fromRecord=void 0;z.readonlyRecord=z.hasOwnProperty=z.insertAt=z.Witherable=z.TraversableWithIndex=z.Traversable=z.FoldableWithIndex=z.Foldable=z.getDifferenceMagma=z.getIntersectionSemigroup=z.getUnionMonoid=z.getUnionSemigroup=z.getWitherable=z.getTraversableWithIndex=z.getTraversable=z.FilterableWithIndex=z.Filterable=z.Compactable=z.getFoldableWithIndex=z.getFoldable=z.FunctorWithIndex=z.flap=z.Functor=z.getMonoid=z.getEq=z.getShow=z.URI=z.separate=z.compact=z.reduceRight=z.foldMap=z.reduce=z.partitionMap=z.partition=z.filterMap=z.filter=z._sequence=z._traverse=z._filterWithIndex=z._filterMapWithIndex=z._partitionWithIndex=z._partitionMapWithIndex=z._reduceRightWithIndex=z._foldMapWithIndex=z._reduceWithIndex=z._partitionMap=void 0;var u2=n4(),o=F(),k2=v1(),y=Hz(J1()),C$=a4(),T=Hz(U$()),a9=e4(),l2=function(X){return Object.assign({},X)};z.fromRecord=l2;var m2=function(X){return Object.assign({},X)};z.toRecord=m2;var c2=function(X){return Object.keys(X).length};z.size=c2;var _2=function(X){for(var $ in X)if(y.has.call(X,$))return!1;return!0};z.isEmpty=_2;var n5=function(X){return function($){return Object.keys($).sort(X.compare)}};z.keys=n5(T.Ord);z.collect=e9;z.toReadonlyArray=e9(T.Ord)(function(X,$){return[X,$]});z.toUnfoldable=x2;var d2=function(X,$){return function(Q){if(y.has.call(Q,X)&&Q[X]===$)return Q;var Y=Object.assign({},Q);return Y[X]=$,Y}};z.upsertAt=d2;var n2=function(X,$){return y.has.call($,X)};z.has=n2;z.deleteAt=jz;var f2=function(X,$){return function(Q){if(!(0,z.has)(X,Q))return y.none;if(Q[X]===$)return y.some(Q);var Y=Object.assign({},Q);return Y[X]=$,y.some(Y)}};z.updateAt=f2;var p2=function(X,$){return function(Q){if(!(0,z.has)(X,Q))return y.none;var Y=$(Q[X]);if(Y===Q[X])return y.some(Q);var J=Object.assign({},Q);return J[X]=Y,y.some(J)}};z.modifyAt=p2;z.pop=o2;z.isSubrecord=N$;z.lookup=T$;z.empty={};z.mapWithIndex=v$;z.map=Pz;z.reduceWithIndex=XX;z.foldMapWithIndex=$X;z.reduceRightWithIndex=QX;var i2=function(X,$){var Q;return Q={},Q[X]=$,Q};z.singleton=i2;z.traverseWithIndex=r2;z.traverse=A$;z.sequence=X7;var s2=function(X){var $=A$(X);return function(Q){return function(Y){return X.map((0,o.pipe)(Y,$(Q)),z.compact)}}};z.wither=s2;var t2=function(X){var $=A$(X);return function(Q){return function(Y){return X.map((0,o.pipe)(Y,$(Q)),z.separate)}}};z.wilt=t2;z.partitionMapWithIndex=R$;z.partitionWithIndex=S$;z.filterMapWithIndex=W$;z.filterWithIndex=E$;z.fromFoldable=a2;z.fromFoldableMap=zz;z.toEntries=z.toReadonlyArray;var e2=function(X){var $={};for(var Q=0,Y=X;Q<Y.length;Q++){var J=Y[Q];$[J[0]]=J[1]}return $};z.fromEntries=e2;z.every=XS;z.some=$S;z.elem=Gz;var QS=function(X){return function($){return function(Q){if((0,z.isEmpty)(Q))return $;if((0,z.isEmpty)($))return Q;var Y={};for(var J in Q)if((0,z.has)(J,$))Y[J]=X.concat(Q[J],$[J]);else Y[J]=Q[J];for(var J in $)if(!(0,z.has)(J,Y))Y[J]=$[J];return Y}}};z.union=QS;var YS=function(X){return function($){return function(Q){if((0,z.isEmpty)(Q)||(0,z.isEmpty)($))return z.empty;var Y={};for(var J in Q)if((0,z.has)(J,$))Y[J]=X.concat(Q[J],$[J]);return Y}}};z.intersection=YS;var JS=function(X){return function($){if((0,z.isEmpty)($))return X;if((0,z.isEmpty)(X))return $;var Q={};for(var Y in $)if(!(0,z.has)(Y,X))Q[Y]=$[Y];for(var Y in X)if(!(0,z.has)(Y,$))Q[Y]=X[Y];return Q}};z.difference=JS;var ZS=function(X,$){return(0,o.pipe)(X,Pz($))};z._map=ZS;var HS=function(X,$){return(0,o.pipe)(X,v$($))};z._mapWithIndex=HS;var jS=function(X){var $=O$(X);return function(Q,Y,J){return(0,o.pipe)(Q,$(Y,J))}};z._reduce=jS;var PS=function(X){return function($){var Q=M$(X)($);return function(Y,J){return(0,o.pipe)(Y,Q(J))}}};z._foldMap=PS;var zS=function(X){var $=g$(X);return function(Q,Y,J){return(0,o.pipe)(Q,$(Y,J))}};z._reduceRight=zS;var GS=function(X,$){return(0,o.pipe)(X,(0,z.filter)($))};z._filter=GS;var VS=function(X,$){return(0,o.pipe)(X,(0,z.filterMap)($))};z._filterMap=VS;var DS=function(X,$){return(0,o.pipe)(X,(0,z.partition)($))};z._partition=DS;var qS=function(X,$){return(0,o.pipe)(X,(0,z.partitionMap)($))};z._partitionMap=qS;var KS=function(X){var $=XX(X);return function(Q,Y,J){return(0,o.pipe)(Q,$(Y,J))}};z._reduceWithIndex=KS;var BS=function(X){var $=$X(X);return function(Q){var Y=$(Q);return function(J,Z){return(0,o.pipe)(J,Y(Z))}}};z._foldMapWithIndex=BS;var LS=function(X){var $=QX(X);return function(Q,Y,J){return(0,o.pipe)(Q,$(Y,J))}};z._reduceRightWithIndex=LS;var wS=function(X,$){return(0,o.pipe)(X,R$($))};z._partitionMapWithIndex=wS;var US=function(X,$){return(0,o.pipe)(X,S$($))};z._partitionWithIndex=US;var CS=function(X,$){return(0,o.pipe)(X,W$($))};z._filterMapWithIndex=CS;var NS=function(X,$){return(0,o.pipe)(X,E$($))};z._filterWithIndex=NS;var TS=function(X){var $=$7(X);return function(Q){var Y=$(Q);return function(J,Z){return Y(J,(0,o.flow)(o.SK,Z))}}};z._traverse=TS;var vS=function(X){var $=(0,z._traverse)(X);return function(Q){var Y=$(Q);return function(J){return Y(J,o.identity)}}};z._sequence=vS;var $7=function(X){return function($){var Q=n5(X);return function(Y,J){var Z=Q(Y);if(Z.length===0)return $.of(z.empty);var V=$.of({}),D=function(K0){V=$.ap($.map(V,function(O0){return function(S1){var p0;return Object.assign({},O0,(p0={},p0[K0]=S1,p0))}}),J(K0,Y[K0]))};for(var L=0,B=Z;L<B.length;L++){var R=B[L];D(R)}return V}}},AS=function(X){return E$(function($,Q){return X(Q)})};z.filter=AS;var RS=function(X){return W$(function($,Q){return X(Q)})};z.filterMap=RS;var SS=function(X){return S$(function($,Q){return X(Q)})};z.partition=SS;var WS=function(X){return R$(function($,Q){return X(Q)})};z.partitionMap=WS;z.reduce=O$;z.foldMap=M$;z.reduceRight=g$;var ES=function(X){var $={};for(var Q in X)if(y.has.call(X,Q)){var Y=X[Q];if(y.isSome(Y))$[Q]=Y.value}return $};z.compact=ES;var OS=function(X){var $={},Q={};for(var Y in X)if(y.has.call(X,Y)){var J=X[Y];if(y.isLeft(J))$[Y]=J.left;else Q[Y]=J.right}return(0,C$.separated)($,Q)};z.separate=OS;z.URI="ReadonlyRecord";z.getShow=Vz;z.getEq=MS;z.getMonoid=gS;z.Functor={URI:z.URI,map:z._map};z.flap=(0,k2.flap)(z.Functor);z.FunctorWithIndex={URI:z.URI,map:z._map,mapWithIndex:z._mapWithIndex};var FS=function(X){return{URI:z.URI,reduce:(0,z._reduce)(X),foldMap:(0,z._foldMap)(X),reduceRight:(0,z._reduceRight)(X)}};z.getFoldable=FS;var IS=function(X){return{URI:z.URI,reduce:(0,z._reduce)(X),foldMap:(0,z._foldMap)(X),reduceRight:(0,z._reduceRight)(X),reduceWithIndex:(0,z._reduceWithIndex)(X),foldMapWithIndex:(0,z._foldMapWithIndex)(X),reduceRightWithIndex:(0,z._reduceRightWithIndex)(X)}};z.getFoldableWithIndex=IS;z.Compactable={URI:z.URI,compact:z.compact,separate:z.separate};z.Filterable={URI:z.URI,map:z._map,compact:z.compact,separate:z.separate,filter:z._filter,filterMap:z._filterMap,partition:z._partition,partitionMap:z._partitionMap};z.FilterableWithIndex={URI:z.URI,map:z._map,mapWithIndex:z._mapWithIndex,compact:z.compact,separate:z.separate,filter:z._filter,filterMap:z._filterMap,partition:z._partition,partitionMap:z._partitionMap,filterMapWithIndex:z._filterMapWithIndex,filterWithIndex:z._filterWithIndex,partitionMapWithIndex:z._partitionMapWithIndex,partitionWithIndex:z._partitionWithIndex};var yS=function(X){return{URI:z.URI,map:z._map,reduce:(0,z._reduce)(X),foldMap:(0,z._foldMap)(X),reduceRight:(0,z._reduceRight)(X),traverse:(0,z._traverse)(X),sequence:(0,z._sequence)(X)}};z.getTraversable=yS;var bS=function(X){return{URI:z.URI,map:z._map,mapWithIndex:z._mapWithIndex,reduce:(0,z._reduce)(X),foldMap:(0,z._foldMap)(X),reduceRight:(0,z._reduceRight)(X),reduceWithIndex:(0,z._reduceWithIndex)(X),foldMapWithIndex:(0,z._foldMapWithIndex)(X),reduceRightWithIndex:(0,z._reduceRightWithIndex)(X),traverse:(0,z._traverse)(X),sequence:(0,z._sequence)(X),traverseWithIndex:$7(X)}};z.getTraversableWithIndex=bS;var hS=function(X){var $=(0,z.getTraversable)(X);return{URI:z.URI,map:z._map,reduce:(0,z._reduce)(X),foldMap:(0,z._foldMap)(X),reduceRight:(0,z._reduceRight)(X),traverse:$.traverse,sequence:$.sequence,compact:z.compact,separate:z.separate,filter:z._filter,filterMap:z._filterMap,partition:z._partition,partitionMap:z._partitionMap,wither:(0,a9.witherDefault)($,z.Compactable),wilt:(0,a9.wiltDefault)($,z.Compactable)}};z.getWitherable=hS;var uS=function(X){var $=(0,z.union)(X);return{concat:function(Q,Y){return $(Y)(Q)}}};z.getUnionSemigroup=uS;var kS=function(X){return{concat:(0,z.getUnionSemigroup)(X).concat,empty:z.empty}};z.getUnionMonoid=kS;var lS=function(X){var $=(0,z.intersection)(X);return{concat:function(Q,Y){return $(Y)(Q)}}};z.getIntersectionSemigroup=lS;var mS=function(){return{concat:function(X,$){return(0,z.difference)($)(X)}}};z.getDifferenceMagma=mS;z.Foldable={URI:z.URI,reduce:(0,z._reduce)(T.Ord),foldMap:(0,z._foldMap)(T.Ord),reduceRight:(0,z._reduceRight)(T.Ord)};z.FoldableWithIndex={URI:z.URI,reduce:(0,z._reduce)(T.Ord),foldMap:(0,z._foldMap)(T.Ord),reduceRight:(0,z._reduceRight)(T.Ord),reduceWithIndex:(0,z._reduceWithIndex)(T.Ord),foldMapWithIndex:(0,z._foldMapWithIndex)(T.Ord),reduceRightWithIndex:(0,z._reduceRightWithIndex)(T.Ord)};z.Traversable={URI:z.URI,map:z._map,reduce:(0,z._reduce)(T.Ord),foldMap:(0,z._foldMap)(T.Ord),reduceRight:(0,z._reduceRight)(T.Ord),traverse:(0,z._traverse)(T.Ord),sequence:X7};z.TraversableWithIndex={URI:z.URI,map:z._map,mapWithIndex:z._mapWithIndex,reduce:(0,z._reduce)(T.Ord),foldMap:(0,z._foldMap)(T.Ord),reduceRight:(0,z._reduceRight)(T.Ord),reduceWithIndex:(0,z._reduceWithIndex)(T.Ord),foldMapWithIndex:(0,z._foldMapWithIndex)(T.Ord),reduceRightWithIndex:(0,z._reduceRightWithIndex)(T.Ord),traverse:(0,z._traverse)(T.Ord),sequence:X7,traverseWithIndex:$7(T.Ord)};var Dz=(0,a9.witherDefault)(z.Traversable,z.Compactable),qz=(0,a9.wiltDefault)(z.Traversable,z.Compactable);z.Witherable={URI:z.URI,map:z._map,reduce:(0,z._reduce)(T.Ord),foldMap:(0,z._foldMap)(T.Ord),reduceRight:(0,z._reduceRight)(T.Ord),traverse:(0,z._traverse)(T.Ord),sequence:X7,compact:z.compact,separate:z.separate,filter:z._filter,filterMap:z._filterMap,partition:z._partition,partitionMap:z._partitionMap,wither:Dz,wilt:qz};z.insertAt=z.upsertAt;z.hasOwnProperty=cS;z.readonlyRecord={URI:z.URI,map:z._map,reduce:(0,z._reduce)(T.Ord),foldMap:(0,z._foldMap)(T.Ord),reduceRight:(0,z._reduceRight)(T.Ord),traverse:(0,z._traverse)(T.Ord),sequence:X7,compact:z.compact,separate:z.separate,filter:z._filter,filterMap:z._filterMap,partition:z._partition,partitionMap:z._partitionMap,mapWithIndex:z._mapWithIndex,reduceWithIndex:(0,z._reduceWithIndex)(T.Ord),foldMapWithIndex:(0,z._foldMapWithIndex)(T.Ord),reduceRightWithIndex:(0,z._reduceRightWithIndex)(T.Ord),filterMapWithIndex:z._filterMapWithIndex,filterWithIndex:z._filterWithIndex,partitionMapWithIndex:z._partitionMapWithIndex,partitionWithIndex:z._partitionWithIndex,traverseWithIndex:$7(T.Ord),wither:Dz,wilt:qz}});var I$=v((Bz)=>{var dS=function(X){var $=(0,Kz.getApplySemigroup)(X);return function(Q){return{concat:$(Q).concat,empty:X.of(Q.empty)}}},nS=function(X,$){var Q=(0,xS.getFunctorComposition)(X,$).map,Y=(0,Kz.ap)(X,$);return{map:Q,of:function(J){return X.of($.of(J))},ap:function(J,Z){return(0,_S.pipe)(J,Y(Z))}}};Object.defineProperty(Bz,"__esModule",{value:!0});Bz.getApplicativeComposition=Bz.getApplicativeMonoid=void 0;var Kz=Y5(),_S=F(),xS=v1();Bz.getApplicativeMonoid=dS;Bz.getApplicativeComposition=nS});var Az=v((wz)=>{Object.defineProperty(wz,"__esModule",{value:!0});wz.and=wz.or=wz.not=wz.Contravariant=wz.getMonoidAll=wz.getSemigroupAll=wz.getMonoidAny=wz.getSemigroupAny=wz.URI=wz.contramap=void 0;var f5=F(),pS=function(X,$){return(0,f5.pipe)(X,(0,wz.contramap)($))},oS=function(X){return function($){return(0,f5.flow)(X,$)}};wz.contramap=oS;wz.URI="Predicate";var iS=function(){return{concat:function(X,$){return(0,f5.pipe)(X,(0,wz.or)($))}}};wz.getSemigroupAny=iS;var rS=function(){return{concat:(0,wz.getSemigroupAny)().concat,empty:f5.constFalse}};wz.getMonoidAny=rS;var sS=function(){return{concat:function(X,$){return(0,f5.pipe)(X,(0,wz.and)($))}}};wz.getSemigroupAll=sS;var tS=function(){return{concat:(0,wz.getSemigroupAll)().concat,empty:f5.constTrue}};wz.getMonoidAll=tS;wz.Contravariant={URI:wz.URI,contramap:pS};var aS=function(X){return function($){return!X($)}};wz.not=aS;var eS=function(X){return function($){return function(Q){return $(Q)||X(Q)}}};wz.or=eS;var XW=function(X){return function($){return function(Q){return $(Q)&&X(Q)}}};wz.and=XW});var d$=v((P)=>{var GW=function(X){return function($){return X($)?(0,P.some)($):P.none}},Mz=function(X){return function($,Q){if(Q===void 0){var Y=Mz(X);return function(J){return Y($,J)}}return(0,P.isNone)(Q)?!1:X.equals($,Q.value)}},iW=function(X){return function($){return(0,P.isSome)(X($))}},ZW=P&&P.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),HW=P&&P.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),Rz=P&&P.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))ZW($,X,Q)}return HW($,X),$};Object.defineProperty(P,"__esModule",{value:!0});P.Witherable=P.wilt=P.wither=P.Traversable=P.sequence=P.traverse=P.Filterable=P.partitionMap=P.partition=P.filterMap=P.filter=P.Compactable=P.separate=P.compact=P.Extend=P.extend=P.Alternative=P.guard=P.Zero=P.zero=P.Alt=P.alt=P.altW=P.orElse=P.Foldable=P.reduceRight=P.foldMap=P.reduce=P.Monad=P.Chain=P.flatMap=P.Applicative=P.Apply=P.ap=P.Pointed=P.of=P.asUnit=P.as=P.Functor=P.map=P.getMonoid=P.getOrd=P.getEq=P.getShow=P.URI=P.getRight=P.getLeft=P.fromPredicate=P.some=P.none=void 0;P.getFirstMonoid=P.getApplyMonoid=P.getApplySemigroup=P.option=P.mapNullable=P.getRefinement=P.chainFirst=P.chain=P.sequenceArray=P.traverseArray=P.traverseArrayWithIndex=P.traverseReadonlyArrayWithIndex=P.traverseReadonlyNonEmptyArrayWithIndex=P.ApT=P.apS=P.bind=P.let=P.bindTo=P.Do=P.exists=P.elem=P.toUndefined=P.toNullable=P.chainNullableK=P.fromNullableK=P.tryCatchK=P.tryCatch=P.fromNullable=P.chainFirstEitherK=P.chainEitherK=P.fromEitherK=P.duplicate=P.tapEither=P.tap=P.flatten=P.apSecond=P.apFirst=P.flap=P.getOrElse=P.getOrElseW=P.fold=P.match=P.foldW=P.matchW=P.isNone=P.isSome=P.FromEither=P.fromEither=P.MonadThrow=P.throwError=void 0;P.getLastMonoid=void 0;var jW=I$(),YX=Y5(),Sz=Rz(J5()),b$=m9(),l=F(),Y7=v1(),j5=Rz(J1()),PW=Az(),Wz=p8(),h$=a4(),Ez=e4(),zW=Y$();P.none=j5.none;P.some=j5.some;P.fromPredicate=GW;var VW=function(X){return X._tag==="Right"?P.none:(0,P.some)(X.left)};P.getLeft=VW;var DW=function(X){return X._tag==="Left"?P.none:(0,P.some)(X.right)};P.getRight=DW;var C0=function(X,$){return(0,l.pipe)(X,(0,P.map)($))},P5=function(X,$){return(0,l.pipe)(X,(0,P.ap)($))},JX=function(X,$,Q){return(0,l.pipe)(X,(0,P.reduce)($,Q))},ZX=function(X){var $=(0,P.foldMap)(X);return function(Q,Y){return(0,l.pipe)(Q,$(Y))}},HX=function(X,$,Q){return(0,l.pipe)(X,(0,P.reduceRight)($,Q))},u$=function(X){var $=(0,P.traverse)(X);return function(Q,Y){return(0,l.pipe)(Q,$(Y))}},k$=function(X,$){return(0,l.pipe)(X,(0,P.alt)($))},Q7=function(X,$){return(0,l.pipe)(X,(0,P.filter)($))},l$=function(X,$){return(0,l.pipe)(X,(0,P.filterMap)($))},Oz=function(X,$){return(0,l.pipe)(X,(0,P.extend)($))},m$=function(X,$){return(0,l.pipe)(X,(0,P.partition)($))},c$=function(X,$){return(0,l.pipe)(X,(0,P.partitionMap)($))};P.URI="Option";var qW=function(X){return{show:function($){return(0,P.isNone)($)?"none":"some(".concat(X.show($.value),")")}}};P.getShow=qW;var KW=function(X){return{equals:function($,Q){return $===Q||((0,P.isNone)($)?(0,P.isNone)(Q):(0,P.isNone)(Q)?!1:X.equals($.value,Q.value))}}};P.getEq=KW;var BW=function(X){return{equals:(0,P.getEq)(X).equals,compare:function($,Q){return $===Q?0:(0,P.isSome)($)?(0,P.isSome)(Q)?X.compare($.value,Q.value):1:-1}}};P.getOrd=BW;var LW=function(X){return{concat:function($,Q){return(0,P.isNone)($)?Q:(0,P.isNone)(Q)?$:(0,P.some)(X.concat($.value,Q.value))},empty:P.none}};P.getMonoid=LW;var wW=function(X){return function($){return(0,P.isNone)($)?P.none:(0,P.some)(X($.value))}};P.map=wW;P.Functor={URI:P.URI,map:C0};P.as=(0,l.dual)(2,(0,Y7.as)(P.Functor));P.asUnit=(0,Y7.asUnit)(P.Functor);P.of=P.some;P.Pointed={URI:P.URI,of:P.of};var UW=function(X){return function($){return(0,P.isNone)($)?P.none:(0,P.isNone)(X)?P.none:(0,P.some)($.value(X.value))}};P.ap=UW;P.Apply={URI:P.URI,map:C0,ap:P5};P.Applicative={URI:P.URI,map:C0,ap:P5,of:P.of};P.flatMap=(0,l.dual)(2,function(X,$){return(0,P.isNone)(X)?P.none:$(X.value)});P.Chain={URI:P.URI,map:C0,ap:P5,chain:P.flatMap};P.Monad={URI:P.URI,map:C0,ap:P5,of:P.of,chain:P.flatMap};var CW=function(X,$){return function(Q){return(0,P.isNone)(Q)?X:$(X,Q.value)}};P.reduce=CW;var NW=function(X){return function($){return function(Q){return(0,P.isNone)(Q)?X.empty:$(Q.value)}}};P.foldMap=NW;var TW=function(X,$){return function(Q){return(0,P.isNone)(Q)?X:$(Q.value,X)}};P.reduceRight=TW;P.Foldable={URI:P.URI,reduce:JX,foldMap:ZX,reduceRight:HX};P.orElse=(0,l.dual)(2,function(X,$){return(0,P.isNone)(X)?$():X});P.altW=P.orElse;P.alt=P.orElse;P.Alt={URI:P.URI,map:C0,alt:k$};var vW=function(){return P.none};P.zero=vW;P.Zero={URI:P.URI,zero:P.zero};P.guard=(0,zW.guard)(P.Zero,P.Pointed);P.Alternative={URI:P.URI,map:C0,ap:P5,of:P.of,alt:k$,zero:P.zero};var AW=function(X){return function($){return(0,P.isNone)($)?P.none:(0,P.some)(X($))}};P.extend=AW;P.Extend={URI:P.URI,map:C0,extend:Oz};P.compact=(0,P.flatMap)(l.identity);var RW=(0,h$.separated)(P.none,P.none),SW=function(X){return(0,P.isNone)(X)?RW:(0,h$.separated)((0,P.getLeft)(X.value),(0,P.getRight)(X.value))};P.separate=SW;P.Compactable={URI:P.URI,compact:P.compact,separate:P.separate};var WW=function(X){return function($){return(0,P.isNone)($)?P.none:X($.value)?$:P.none}};P.filter=WW;var EW=function(X){return function($){return(0,P.isNone)($)?P.none:X($.value)}};P.filterMap=EW;var OW=function(X){return function($){return(0,h$.separated)(Q7($,(0,PW.not)(X)),Q7($,X))}};P.partition=OW;var MW=function(X){return(0,l.flow)((0,P.map)(X),P.separate)};P.partitionMap=MW;P.Filterable={URI:P.URI,map:C0,compact:P.compact,separate:P.separate,filter:Q7,filterMap:l$,partition:m$,partitionMap:c$};var gW=function(X){return function($){return function(Q){return(0,P.isNone)(Q)?X.of(P.none):X.map($(Q.value),P.some)}}};P.traverse=gW;var FW=function(X){return function($){return(0,P.isNone)($)?X.of(P.none):X.map($.value,P.some)}};P.sequence=FW;P.Traversable={URI:P.URI,map:C0,reduce:JX,foldMap:ZX,reduceRight:HX,traverse:u$,sequence:P.sequence};var _$=(0,Ez.witherDefault)(P.Traversable,P.Compactable),x$=(0,Ez.wiltDefault)(P.Traversable,P.Compactable),IW=function(X){var $=_$(X);return function(Q){return function(Y){return $(Y,Q)}}};P.wither=IW;var yW=function(X){var $=x$(X);return function(Q){return function(Y){return $(Y,Q)}}};P.wilt=yW;P.Witherable={URI:P.URI,map:C0,reduce:JX,foldMap:ZX,reduceRight:HX,traverse:u$,sequence:P.sequence,compact:P.compact,separate:P.separate,filter:Q7,filterMap:l$,partition:m$,partitionMap:c$,wither:_$,wilt:x$};var bW=function(){return P.none};P.throwError=bW;P.MonadThrow={URI:P.URI,map:C0,ap:P5,of:P.of,chain:P.flatMap,throwError:P.throwError};P.fromEither=P.getRight;P.FromEither={URI:P.URI,fromEither:P.fromEither};P.isSome=j5.isSome;var hW=function(X){return X._tag==="None"};P.isNone=hW;var uW=function(X,$){return function(Q){return(0,P.isNone)(Q)?X():$(Q.value)}};P.matchW=uW;P.foldW=P.matchW;P.match=P.matchW;P.fold=P.match;var kW=function(X){return function($){return(0,P.isNone)($)?X():$.value}};P.getOrElseW=kW;P.getOrElse=P.getOrElseW;P.flap=(0,Y7.flap)(P.Functor);P.apFirst=(0,YX.apFirst)(P.Apply);P.apSecond=(0,YX.apSecond)(P.Apply);P.flatten=P.compact;P.tap=(0,l.dual)(2,Sz.tap(P.Chain));P.tapEither=(0,l.dual)(2,(0,b$.tapEither)(P.FromEither,P.Chain));P.duplicate=(0,P.extend)(l.identity);P.fromEitherK=(0,b$.fromEitherK)(P.FromEither);P.chainEitherK=(0,b$.chainEitherK)(P.FromEither,P.Chain);P.chainFirstEitherK=P.tapEither;var lW=function(X){return X==null?P.none:(0,P.some)(X)};P.fromNullable=lW;var mW=function(X){try{return(0,P.some)(X())}catch($){return P.none}};P.tryCatch=mW;var cW=function(X){return function(){var $=[];for(var Q=0;Q<arguments.length;Q++)$[Q]=arguments[Q];return(0,P.tryCatch)(function(){return X.apply(void 0,$)})}};P.tryCatchK=cW;var _W=function(X){return(0,l.flow)(X,P.fromNullable)};P.fromNullableK=_W;var xW=function(X){return function($){return(0,P.isNone)($)?P.none:(0,P.fromNullable)(X($.value))}};P.chainNullableK=xW;P.toNullable=(0,P.match)(l.constNull,l.identity);P.toUndefined=(0,P.match)(l.constUndefined,l.identity);P.elem=Mz;var dW=function(X){return function($){return(0,P.isNone)($)?!1:X($.value)}};P.exists=dW;P.Do=(0,P.of)(j5.emptyRecord);P.bindTo=(0,Y7.bindTo)(P.Functor);var nW=(0,Y7.let)(P.Functor);P.let=nW;P.bind=Sz.bind(P.Chain);P.apS=(0,YX.apS)(P.Apply);P.ApT=(0,P.of)(j5.emptyReadonlyArray);var fW=function(X){return function($){var Q=X(0,j5.head($));if((0,P.isNone)(Q))return P.none;var Y=[Q.value];for(var J=1;J<$.length;J++){var Z=X(J,$[J]);if((0,P.isNone)(Z))return P.none;Y.push(Z.value)}return(0,P.some)(Y)}};P.traverseReadonlyNonEmptyArrayWithIndex=fW;var pW=function(X){var $=(0,P.traverseReadonlyNonEmptyArrayWithIndex)(X);return function(Q){return j5.isNonEmpty(Q)?$(Q):P.ApT}};P.traverseReadonlyArrayWithIndex=pW;P.traverseArrayWithIndex=P.traverseReadonlyArrayWithIndex;var oW=function(X){return(0,P.traverseReadonlyArrayWithIndex)(function($,Q){return X(Q)})};P.traverseArray=oW;P.sequenceArray=(0,P.traverseArray)(l.identity);P.chain=P.flatMap;P.chainFirst=P.tap;P.getRefinement=iW;P.mapNullable=P.chainNullableK;P.option={URI:P.URI,map:C0,of:P.of,ap:P5,chain:P.flatMap,reduce:JX,foldMap:ZX,reduceRight:HX,traverse:u$,sequence:P.sequence,zero:P.zero,alt:k$,extend:Oz,compact:P.compact,separate:P.separate,filter:Q7,filterMap:l$,partition:m$,partitionMap:c$,wither:_$,wilt:x$,throwError:P.throwError};P.getApplySemigroup=(0,YX.getApplySemigroup)(P.Apply);P.getApplyMonoid=(0,jW.getApplicativeMonoid)(P.Applicative);var rW=function(){return(0,P.getMonoid)((0,Wz.first)())};P.getFirstMonoid=rW;var sW=function(){return(0,P.getMonoid)((0,Wz.last)())};P.getLastMonoid=sW});var Iz=v((gz)=>{Object.defineProperty(gz,"__esModule",{value:!0});gz.tailRec=void 0;var tW=function(X,$){var Q=$(X);while(Q._tag==="Left")Q=$(Q.left);return Q.right};gz.tailRec=tW});var cz=v((j)=>{var ME=function(X){return X instanceof Error?X:new Error(String(X))},mz=function(X){return function($,Q){if(Q===void 0){var Y=mz(X);return function(J){return Y($,J)}}return(0,j.isLeft)(Q)?!1:X.equals($,Q.right)}},hE=function(X,$){return(0,j.tryCatch)(function(){return JSON.parse(X)},$)},mE=function(X){var $=(0,j.getApplicativeValidation)(X).ap,Q=(0,j.getAltValidation)(X).alt;return{URI:j.URI,_E:void 0,map:j0,of:j.of,chain:j.flatMap,bimap:n$,mapLeft:f$,reduce:j7,foldMap:P7,reduceRight:z7,extend:p$,traverse:jX,sequence:j.sequence,chainRec:o$,throwError:j.throwError,ap:$,alt:Q}},aW=j&&j.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),eW=j&&j.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),bz=j&&j.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))aW($,X,Q)}return eW($,X),$};Object.defineProperty(j,"__esModule",{value:!0});j.match=j.foldW=j.matchW=j.isRight=j.isLeft=j.fromOption=j.fromPredicate=j.FromEither=j.MonadThrow=j.throwError=j.ChainRec=j.Extend=j.extend=j.Alt=j.alt=j.altW=j.Bifunctor=j.mapLeft=j.bimap=j.Traversable=j.sequence=j.traverse=j.Foldable=j.reduceRight=j.foldMap=j.reduce=j.Monad=j.Chain=j.Applicative=j.Apply=j.ap=j.apW=j.Pointed=j.of=j.asUnit=j.as=j.Functor=j.map=j.getAltValidation=j.getApplicativeValidation=j.getWitherable=j.getFilterable=j.getCompactable=j.getSemigroup=j.getEq=j.getShow=j.URI=j.flatMap=j.right=j.left=void 0;j.chainFirstW=j.chainFirst=j.chain=j.chainW=j.sequenceArray=j.traverseArray=j.traverseArrayWithIndex=j.traverseReadonlyArrayWithIndex=j.traverseReadonlyNonEmptyArrayWithIndex=j.ApT=j.apSW=j.apS=j.bindW=j.bind=j.let=j.bindTo=j.Do=j.exists=j.elem=j.toError=j.toUnion=j.chainNullableK=j.fromNullableK=j.tryCatchK=j.tryCatch=j.fromNullable=j.orElse=j.orElseW=j.swap=j.filterOrElseW=j.filterOrElse=j.flatMapOption=j.flatMapNullable=j.liftOption=j.liftNullable=j.chainOptionKW=j.chainOptionK=j.fromOptionK=j.duplicate=j.flatten=j.flattenW=j.tap=j.apSecondW=j.apSecond=j.apFirstW=j.apFirst=j.flap=j.getOrElse=j.getOrElseW=j.fold=void 0;j.getValidation=j.getValidationMonoid=j.getValidationSemigroup=j.getApplyMonoid=j.getApplySemigroup=j.either=j.stringifyJSON=j.parseJSON=void 0;var hz=I$(),J7=Y5(),uz=bz(J5()),XE=Iz(),Z7=m9(),t=F(),H7=v1(),R0=bz(J1()),A1=a4(),yz=e4();j.left=R0.left;j.right=R0.right;j.flatMap=(0,t.dual)(2,function(X,$){return(0,j.isLeft)(X)?X:$(X.right)});var j0=function(X,$){return(0,t.pipe)(X,(0,j.map)($))},z5=function(X,$){return(0,t.pipe)(X,(0,j.ap)($))},j7=function(X,$,Q){return(0,t.pipe)(X,(0,j.reduce)($,Q))},P7=function(X){return function($,Q){var Y=(0,j.foldMap)(X);return(0,t.pipe)($,Y(Q))}},z7=function(X,$,Q){return(0,t.pipe)(X,(0,j.reduceRight)($,Q))},jX=function(X){var $=(0,j.traverse)(X);return function(Q,Y){return(0,t.pipe)(Q,$(Y))}},n$=function(X,$,Q){return(0,t.pipe)(X,(0,j.bimap)($,Q))},f$=function(X,$){return(0,t.pipe)(X,(0,j.mapLeft)($))},kz=function(X,$){return(0,t.pipe)(X,(0,j.alt)($))},p$=function(X,$){return(0,t.pipe)(X,(0,j.extend)($))},o$=function(X,$){return(0,XE.tailRec)($(X),function(Q){return(0,j.isLeft)(Q)?(0,j.right)((0,j.left)(Q.left)):(0,j.isLeft)(Q.right)?(0,j.left)($(Q.right.left)):(0,j.right)((0,j.right)(Q.right.right))})};j.URI="Either";var $E=function(X,$){return{show:function(Q){return(0,j.isLeft)(Q)?"left(".concat(X.show(Q.left),")"):"right(".concat($.show(Q.right),")")}}};j.getShow=$E;var QE=function(X,$){return{equals:function(Q,Y){return Q===Y||((0,j.isLeft)(Q)?(0,j.isLeft)(Y)&&X.equals(Q.left,Y.left):(0,j.isRight)(Y)&&$.equals(Q.right,Y.right))}}};j.getEq=QE;var YE=function(X){return{concat:function($,Q){return(0,j.isLeft)(Q)?$:(0,j.isLeft)($)?Q:(0,j.right)(X.concat($.right,Q.right))}}};j.getSemigroup=YE;var JE=function(X){var $=(0,j.left)(X.empty);return{URI:j.URI,_E:void 0,compact:function(Q){return(0,j.isLeft)(Q)?Q:Q.right._tag==="None"?$:(0,j.right)(Q.right.value)},separate:function(Q){return(0,j.isLeft)(Q)?(0,A1.separated)(Q,Q):(0,j.isLeft)(Q.right)?(0,A1.separated)((0,j.right)(Q.right.left),$):(0,A1.separated)($,(0,j.right)(Q.right.right))}}};j.getCompactable=JE;var ZE=function(X){var $=(0,j.left)(X.empty),Q=(0,j.getCompactable)(X),Y=Q.compact,J=Q.separate,Z=function(D,L){return(0,j.isLeft)(D)?D:L(D.right)?D:$},V=function(D,L){return(0,j.isLeft)(D)?(0,A1.separated)(D,D):L(D.right)?(0,A1.separated)($,(0,j.right)(D.right)):(0,A1.separated)((0,j.right)(D.right),$)};return{URI:j.URI,_E:void 0,map:j0,compact:Y,separate:J,filter:Z,filterMap:function(D,L){if((0,j.isLeft)(D))return D;var B=L(D.right);return B._tag==="None"?$:(0,j.right)(B.value)},partition:V,partitionMap:function(D,L){if((0,j.isLeft)(D))return(0,A1.separated)(D,D);var B=L(D.right);return(0,j.isLeft)(B)?(0,A1.separated)((0,j.right)(B.left),$):(0,A1.separated)($,(0,j.right)(B.right))}}};j.getFilterable=ZE;var HE=function(X){var $=(0,j.getFilterable)(X),Q=(0,j.getCompactable)(X);return{URI:j.URI,_E:void 0,map:j0,compact:$.compact,separate:$.separate,filter:$.filter,filterMap:$.filterMap,partition:$.partition,partitionMap:$.partitionMap,traverse:jX,sequence:j.sequence,reduce:j7,foldMap:P7,reduceRight:z7,wither:(0,yz.witherDefault)(j.Traversable,Q),wilt:(0,yz.wiltDefault)(j.Traversable,Q)}};j.getWitherable=HE;var jE=function(X){return{URI:j.URI,_E:void 0,map:j0,ap:function($,Q){return(0,j.isLeft)($)?(0,j.isLeft)(Q)?(0,j.left)(X.concat($.left,Q.left)):$:(0,j.isLeft)(Q)?Q:(0,j.right)($.right(Q.right))},of:j.of}};j.getApplicativeValidation=jE;var PE=function(X){return{URI:j.URI,_E:void 0,map:j0,alt:function($,Q){if((0,j.isRight)($))return $;var Y=Q();return(0,j.isLeft)(Y)?(0,j.left)(X.concat($.left,Y.left)):Y}}};j.getAltValidation=PE;var zE=function(X){return function($){return(0,j.isLeft)($)?$:(0,j.right)(X($.right))}};j.map=zE;j.Functor={URI:j.URI,map:j0};j.as=(0,t.dual)(2,(0,H7.as)(j.Functor));j.asUnit=(0,H7.asUnit)(j.Functor);j.of=j.right;j.Pointed={URI:j.URI,of:j.of};var GE=function(X){return function($){return(0,j.isLeft)($)?$:(0,j.isLeft)(X)?X:(0,j.right)($.right(X.right))}};j.apW=GE;j.ap=j.apW;j.Apply={URI:j.URI,map:j0,ap:z5};j.Applicative={URI:j.URI,map:j0,ap:z5,of:j.of};j.Chain={URI:j.URI,map:j0,ap:z5,chain:j.flatMap};j.Monad={URI:j.URI,map:j0,ap:z5,of:j.of,chain:j.flatMap};var VE=function(X,$){return function(Q){return(0,j.isLeft)(Q)?X:$(X,Q.right)}};j.reduce=VE;var DE=function(X){return function($){return function(Q){return(0,j.isLeft)(Q)?X.empty:$(Q.right)}}};j.foldMap=DE;var qE=function(X,$){return function(Q){return(0,j.isLeft)(Q)?X:$(Q.right,X)}};j.reduceRight=qE;j.Foldable={URI:j.URI,reduce:j7,foldMap:P7,reduceRight:z7};var KE=function(X){return function($){return function(Q){return(0,j.isLeft)(Q)?X.of((0,j.left)(Q.left)):X.map($(Q.right),j.right)}}};j.traverse=KE;var BE=function(X){return function($){return(0,j.isLeft)($)?X.of((0,j.left)($.left)):X.map($.right,j.right)}};j.sequence=BE;j.Traversable={URI:j.URI,map:j0,reduce:j7,foldMap:P7,reduceRight:z7,traverse:jX,sequence:j.sequence};var LE=function(X,$){return function(Q){return(0,j.isLeft)(Q)?(0,j.left)(X(Q.left)):(0,j.right)($(Q.right))}};j.bimap=LE;var wE=function(X){return function($){return(0,j.isLeft)($)?(0,j.left)(X($.left)):$}};j.mapLeft=wE;j.Bifunctor={URI:j.URI,bimap:n$,mapLeft:f$};var UE=function(X){return function($){return(0,j.isLeft)($)?X():$}};j.altW=UE;j.alt=j.altW;j.Alt={URI:j.URI,map:j0,alt:kz};var CE=function(X){return function($){return(0,j.isLeft)($)?$:(0,j.right)(X($))}};j.extend=CE;j.Extend={URI:j.URI,map:j0,extend:p$};j.ChainRec={URI:j.URI,map:j0,ap:z5,chain:j.flatMap,chainRec:o$};j.throwError=j.left;j.MonadThrow={URI:j.URI,map:j0,ap:z5,of:j.of,chain:j.flatMap,throwError:j.throwError};j.FromEither={URI:j.URI,fromEither:t.identity};j.fromPredicate=(0,Z7.fromPredicate)(j.FromEither);j.fromOption=(0,Z7.fromOption)(j.FromEither);j.isLeft=R0.isLeft;j.isRight=R0.isRight;var NE=function(X,$){return function(Q){return(0,j.isLeft)(Q)?X(Q.left):$(Q.right)}};j.matchW=NE;j.foldW=j.matchW;j.match=j.matchW;j.fold=j.match;var TE=function(X){return function($){return(0,j.isLeft)($)?X($.left):$.right}};j.getOrElseW=TE;j.getOrElse=j.getOrElseW;j.flap=(0,H7.flap)(j.Functor);j.apFirst=(0,J7.apFirst)(j.Apply);j.apFirstW=j.apFirst;j.apSecond=(0,J7.apSecond)(j.Apply);j.apSecondW=j.apSecond;j.tap=(0,t.dual)(2,uz.tap(j.Chain));j.flattenW=(0,j.flatMap)(t.identity);j.flatten=j.flattenW;j.duplicate=(0,j.extend)(t.identity);j.fromOptionK=(0,Z7.fromOptionK)(j.FromEither);j.chainOptionK=(0,Z7.chainOptionK)(j.FromEither,j.Chain);j.chainOptionKW=j.chainOptionK;var PX={fromEither:j.FromEither.fromEither};j.liftNullable=R0.liftNullable(PX);j.liftOption=R0.liftOption(PX);var lz={flatMap:j.flatMap};j.flatMapNullable=R0.flatMapNullable(PX,lz);j.flatMapOption=R0.flatMapOption(PX,lz);j.filterOrElse=(0,Z7.filterOrElse)(j.FromEither,j.Chain);j.filterOrElseW=j.filterOrElse;var vE=function(X){return(0,j.isLeft)(X)?(0,j.right)(X.left):(0,j.left)(X.right)};j.swap=vE;var AE=function(X){return function($){return(0,j.isLeft)($)?X($.left):$}};j.orElseW=AE;j.orElse=j.orElseW;var RE=function(X){return function($){return $==null?(0,j.left)(X):(0,j.right)($)}};j.fromNullable=RE;var SE=function(X,$){try{return(0,j.right)(X())}catch(Q){return(0,j.left)($(Q))}};j.tryCatch=SE;var WE=function(X,$){return function(){var Q=[];for(var Y=0;Y<arguments.length;Y++)Q[Y]=arguments[Y];return(0,j.tryCatch)(function(){return X.apply(void 0,Q)},$)}};j.tryCatchK=WE;var EE=function(X){var $=(0,j.fromNullable)(X);return function(Q){return(0,t.flow)(Q,$)}};j.fromNullableK=EE;var OE=function(X){var $=(0,j.fromNullableK)(X);return function(Q){return(0,j.flatMap)($(Q))}};j.chainNullableK=OE;j.toUnion=(0,j.foldW)(t.identity,t.identity);j.toError=ME;j.elem=mz;var gE=function(X){return function($){return(0,j.isLeft)($)?!1:X($.right)}};j.exists=gE;j.Do=(0,j.of)(R0.emptyRecord);j.bindTo=(0,H7.bindTo)(j.Functor);var FE=(0,H7.let)(j.Functor);j.let=FE;j.bind=uz.bind(j.Chain);j.bindW=j.bind;j.apS=(0,J7.apS)(j.Apply);j.apSW=j.apS;j.ApT=(0,j.of)(R0.emptyReadonlyArray);var IE=function(X){return function($){var Q=X(0,R0.head($));if((0,j.isLeft)(Q))return Q;var Y=[Q.right];for(var J=1;J<$.length;J++){var Z=X(J,$[J]);if((0,j.isLeft)(Z))return Z;Y.push(Z.right)}return(0,j.right)(Y)}};j.traverseReadonlyNonEmptyArrayWithIndex=IE;var yE=function(X){var $=(0,j.traverseReadonlyNonEmptyArrayWithIndex)(X);return function(Q){return R0.isNonEmpty(Q)?$(Q):j.ApT}};j.traverseReadonlyArrayWithIndex=yE;j.traverseArrayWithIndex=j.traverseReadonlyArrayWithIndex;var bE=function(X){return(0,j.traverseReadonlyArrayWithIndex)(function($,Q){return X(Q)})};j.traverseArray=bE;j.sequenceArray=(0,j.traverseArray)(t.identity);j.chainW=j.flatMap;j.chain=j.flatMap;j.chainFirst=j.tap;j.chainFirstW=j.tap;j.parseJSON=hE;var uE=function(X,$){return(0,j.tryCatch)(function(){var Q=JSON.stringify(X);if(typeof Q!=="string")throw new Error("Converting unsupported structure to JSON");return Q},$)};j.stringifyJSON=uE;j.either={URI:j.URI,map:j0,of:j.of,ap:z5,chain:j.flatMap,reduce:j7,foldMap:P7,reduceRight:z7,traverse:jX,sequence:j.sequence,bimap:n$,mapLeft:f$,alt:kz,extend:p$,chainRec:o$,throwError:j.throwError};j.getApplySemigroup=(0,J7.getApplySemigroup)(j.Apply);j.getApplyMonoid=(0,hz.getApplicativeMonoid)(j.Applicative);var kE=function(X,$){return(0,J7.getApplySemigroup)((0,j.getApplicativeValidation)(X))($)};j.getValidationSemigroup=kE;var lE=function(X,$){return(0,hz.getApplicativeMonoid)((0,j.getApplicativeValidation)(X))($)};j.getValidationMonoid=lE;j.getValidation=mE});var zX=v((q)=>{var xz=function(X){return function($){return(0,q.traversal)(function(Q){return function(Y){return $.modifyF(Q)(X.modifyF(Q)(Y))}})}},dz=function(X){return function(){return(0,q.traversal)(function($){var Q=WO($)?X.map:X.traverse($);return function(Y){return function(J){return Q(J,Y)}}})}},EO=function(X){return xz(dz(X)())},nz=function(){return(0,q.at)(function(X){return(0,q.lens)(function($){return p5.lookup(X,$)},d.fold(function(){return p5.deleteAt(X)},function($){return p5.insertAt(X,$)}))})},cE=q&&q.__spreadArray||function(X,$,Q){if(Q||arguments.length===2){for(var Y=0,J=$.length,Z;Y<J;Y++)if(Z||!(Y in $)){if(!Z)Z=Array.prototype.slice.call($,0,Y);Z[Y]=$[Y]}}return X.concat(Z||Array.prototype.slice.call($))};Object.defineProperty(q,"__esModule",{value:!0});q.atReadonlyRecord=q.at=q.indexReadonlyRecord=q.indexReadonlyNonEmptyArray=q.indexReadonlyArray=q.index=q.traversalTraverse=q.fromTraversable=q.ApplicativeIdentity=q.traversalComposeTraversal=q.traversal=q.optionalFindFirstNonEmpty=q.optionalFindFirst=q.optionalKey=q.optionalIndexNonEmpty=q.optionalIndex=q.optionalComposeOptional=q.optionalModify=q.optionalModifyOption=q.optionalAsTraversal=q.optional=q.prismLeft=q.prismRight=q.prismSome=q.prismFromPredicate=q.prismFromNullable=q.prismComposeLens=q.prismSet=q.prismModify=q.prismModifyOption=q.prismAsTraversal=q.prismAsOptional=q.prism=q.lensAtKey=q.lensComponent=q.lensProps=q.lensProp=q.lensId=q.lensComposePrism=q.prismComposePrism=q.lensComposeLens=q.lensAsTraversal=q.lensAsOptional=q.lens=q.isoAsTraversal=q.isoAsOptional=q.isoAsPrism=q.isoAsLens=q.iso=void 0;var Z1=t9(),p5=F$(),P0=F(),d=d$(),i$=cz(),w0=_4(),_E=function(X,$){return{get:X,reverseGet:$}};q.iso=_E;var xE=function(X){return(0,q.lens)(X.get,(0,P0.flow)(X.reverseGet,P0.constant))};q.isoAsLens=xE;var dE=function(X){return(0,q.prism)((0,P0.flow)(X.get,d.some),X.reverseGet)};q.isoAsPrism=dE;var nE=function(X){return(0,q.optional)((0,P0.flow)(X.get,d.some),(0,P0.flow)(X.reverseGet,P0.constant))};q.isoAsOptional=nE;var fE=function(X){return(0,q.traversal)(function($){return function(Q){return function(Y){return $.map(Q(X.get(Y)),function(J){return X.reverseGet(J)})}}})};q.isoAsTraversal=fE;var pE=function(X,$){return{get:X,set:$}};q.lens=pE;var oE=function(X){return(0,q.optional)((0,P0.flow)(X.get,d.some),X.set)};q.lensAsOptional=oE;var iE=function(X){return(0,q.traversal)(function($){return function(Q){return function(Y){return $.map(Q(X.get(Y)),function(J){return X.set(J)(Y)})}}})};q.lensAsTraversal=iE;var rE=function(X){return function($){return(0,q.lens)(function(Q){return X.get($.get(Q))},function(Q){return function(Y){return $.set(X.set(Q)($.get(Y)))(Y)}})}};q.lensComposeLens=rE;var sE=function(X){return function($){return(0,q.prism)((0,P0.flow)($.getOption,d.chain(X.getOption)),(0,P0.flow)(X.reverseGet,$.reverseGet))}};q.prismComposePrism=sE;var tE=function(X){return function($){return(0,q.optionalComposeOptional)((0,q.prismAsOptional)(X))((0,q.lensAsOptional)($))}};q.lensComposePrism=tE;var aE=function(){return(0,q.lens)(P0.identity,P0.constant)};q.lensId=aE;var eE=function(X){return function($){return(0,q.lens)(function(Q){return $.get(Q)[X]},function(Q){return function(Y){var J,Z=$.get(Y);if(Q===Z[X])return Y;return $.set(Object.assign({},Z,(J={},J[X]=Q,J)))(Y)}})}};q.lensProp=eE;var XO=function(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];return function(Q){return(0,q.lens)(function(Y){var J=Q.get(Y),Z={};for(var V=0,D=X;V<D.length;V++){var L=D[V];Z[L]=J[L]}return Z},function(Y){return function(J){var Z=Q.get(J);for(var V=0,D=X;V<D.length;V++){var L=D[V];if(Y[L]!==Z[L])return Q.set(Object.assign({},Z,Y))(J)}return J}})}};q.lensProps=XO;var $O=function(X){return function($){return(0,q.lens)(function(Q){return $.get(Q)[X]},function(Q){return function(Y){var J=$.get(Y);if(Q===J[X])return Y;var Z=J.slice();return Z[X]=Q,$.set(Z)(Y)}})}};q.lensComponent=$O;var QO=function(X){return function($){return(0,w0.pipe)($,(0,q.lensComposeLens)(nz().at(X)))}};q.lensAtKey=QO;var YO=function(X,$){return{getOption:X,reverseGet:$}};q.prism=YO;var JO=function(X){return(0,q.optional)(X.getOption,function($){return(0,q.prismSet)($)(X)})};q.prismAsOptional=JO;var ZO=function(X){return(0,q.traversal)(function($){return function(Q){return function(Y){return(0,w0.pipe)(X.getOption(Y),d.fold(function(){return $.of(Y)},function(J){return $.map(Q(J),function(Z){return(0,q.prismSet)(Z)(X)(Y)})}))}}})};q.prismAsTraversal=ZO;var HO=function(X){return function($){return function(Q){return(0,w0.pipe)($.getOption(Q),d.map(function(Y){var J=X(Y);return J===Y?Q:$.reverseGet(J)}))}}};q.prismModifyOption=HO;var jO=function(X){return function($){var Q=(0,q.prismModifyOption)(X)($);return function(Y){return(0,w0.pipe)(Q(Y),d.getOrElse(function(){return Y}))}}};q.prismModify=jO;var PO=function(X){return(0,q.prismModify)(function(){return X})};q.prismSet=PO;var zO=function(X){return function($){return(0,q.optionalComposeOptional)((0,q.lensAsOptional)(X))((0,q.prismAsOptional)($))}};q.prismComposeLens=zO;var GO=function(){return(0,q.prism)(d.fromNullable,P0.identity)};q.prismFromNullable=GO;var VO=function(X){return(0,q.prism)(d.fromPredicate(X),P0.identity)};q.prismFromPredicate=VO;var DO=function(){return(0,q.prism)(P0.identity,d.some)};q.prismSome=DO;var qO=function(){return(0,q.prism)(d.fromEither,i$.right)};q.prismRight=qO;var KO=function(){return(0,q.prism)(function(X){return i$.isLeft(X)?d.some(X.left):d.none},i$.left)};q.prismLeft=KO;var BO=function(X,$){return{getOption:X,set:$}};q.optional=BO;var LO=function(X){return(0,q.traversal)(function($){return function(Q){return function(Y){return(0,w0.pipe)(X.getOption(Y),d.fold(function(){return $.of(Y)},function(J){return $.map(Q(J),function(Z){return X.set(Z)(Y)})}))}}})};q.optionalAsTraversal=LO;var wO=function(X){return function($){return function(Q){return(0,w0.pipe)($.getOption(Q),d.map(function(Y){var J=X(Y);return J===Y?Q:$.set(J)(Q)}))}}};q.optionalModifyOption=wO;var UO=function(X){return function($){var Q=(0,q.optionalModifyOption)(X)($);return function(Y){return(0,w0.pipe)(Q(Y),d.getOrElse(function(){return Y}))}}};q.optionalModify=UO;var CO=function(X){return function($){return(0,q.optional)((0,P0.flow)($.getOption,d.chain(X.getOption)),function(Q){return(0,q.optionalModify)(X.set(Q))($)})}};q.optionalComposeOptional=CO;var NO=function(X){return function($){return(0,w0.pipe)($,(0,q.optionalComposeOptional)((0,q.indexReadonlyArray)().index(X)))}};q.optionalIndex=NO;var TO=function(X){return function($){return(0,w0.pipe)($,(0,q.optionalComposeOptional)((0,q.indexReadonlyNonEmptyArray)().index(X)))}};q.optionalIndexNonEmpty=TO;var vO=function(X){return function($){return(0,w0.pipe)($,(0,q.optionalComposeOptional)((0,q.indexReadonlyRecord)().index(X)))}};q.optionalKey=vO;var AO=function(X){return(0,q.optional)(Z1.findFirst(X),function($){return function(Q){return(0,w0.pipe)(Z1.findIndex(X)(Q),d.fold(function(){return Q},function(Y){return Z1.unsafeUpdateAt(Y,$,Q)}))}})};q.optionalFindFirst=AO;var _z=function(X,$,Q){if(Q[X]===$)return Q;else{var Y=cE([Q[0]],Q.slice(1),!0);return Y[X]=$,Y}},RO=function(X){return(0,q.optional)(Z1.findFirst(X),function($){return function(Q){return(0,w0.pipe)(Z1.findIndex(X)(Q),d.fold(function(){return Q},function(Y){return _z(Y,$,Q)}))}})};q.optionalFindFirstNonEmpty=RO;var SO=function(X){return{modifyF:X}};q.traversal=SO;q.traversalComposeTraversal=xz;q.ApplicativeIdentity={URI:"Identity",map:function(X,$){return $(X)},of:P0.identity,ap:function(X,$){return X($)}};var WO=function(X){return X.URI==="Identity"};q.fromTraversable=dz;q.traversalTraverse=EO;var OO=function(X){return{index:X}};q.index=OO;var MO=function(){return(0,q.index)(function(X){return(0,q.optional)(function($){return Z1.lookup(X,$)},function($){return function(Q){return(0,w0.pipe)(Z1.lookup(X,Q),d.fold(function(){return Q},function(){return Z1.unsafeUpdateAt(X,$,Q)}))}})})};q.indexReadonlyArray=MO;var gO=function(){return(0,q.index)(function(X){return(0,q.optional)(function($){return Z1.lookup(X,$)},function($){return function(Q){return(0,w0.pipe)(Z1.lookup(X,Q),d.fold(function(){return Q},function(){return _z(X,$,Q)}))}})})};q.indexReadonlyNonEmptyArray=gO;var FO=function(){return(0,q.index)(function(X){return(0,q.optional)(function($){return p5.lookup(X,$)},function($){return function(Q){if(Q[X]===$||d.isNone(p5.lookup(X,Q)))return Q;return p5.insertAt(X,$)(Q)}})})};q.indexReadonlyRecord=FO;var IO=function(X){return{at:X}};q.at=IO;q.atReadonlyRecord=nz});var S0=v((oz)=>{var kO=function(X){return(0,oz.compose)(A.prismAsTraversal(A.prismFromPredicate(X)))},fO=function(X){return(0,oz.composeOptional)(A.optionalFindFirst(X))},pO=function(X){return(0,oz.composeOptional)(A.optionalFindFirstNonEmpty(X))};Object.defineProperty(oz,"__esModule",{value:!0});oz.Category=oz.Semigroupoid=oz.URI=oz.getAll=oz.fold=oz.foldMap=oz.findFirstNonEmpty=oz.findFirst=oz.traverse=oz.left=oz.right=oz.some=oz.atKey=oz.key=oz.indexNonEmpty=oz.index=oz.component=oz.props=oz.prop=oz.filter=oz.fromNullable=oz.set=oz.modify=oz.composeOptional=oz.composePrism=oz.composeLens=oz.composeIso=oz.composeTraversal=oz.compose=oz.fromTraversable=oz.id=oz.traversal=void 0;var fz=Kj(),G7=F(),G5=_4(),pz=t9(),A=zX();oz.traversal=A.traversal;var yO=function(){return(0,oz.traversal)(function(X){return function($){return $}})};oz.id=yO;oz.fromTraversable=A.fromTraversable;oz.compose=A.traversalComposeTraversal;oz.composeTraversal=oz.compose;oz.composeIso=(0,G7.flow)(A.isoAsTraversal,oz.compose);oz.composeLens=(0,G7.flow)(A.lensAsTraversal,A.traversalComposeTraversal);oz.composePrism=(0,G7.flow)(A.prismAsTraversal,A.traversalComposeTraversal);oz.composeOptional=(0,G7.flow)(A.optionalAsTraversal,A.traversalComposeTraversal);var bO=function(X){return function($){return $.modifyF(A.ApplicativeIdentity)(X)}};oz.modify=bO;var hO=function(X){return(0,oz.modify)(function(){return X})};oz.set=hO;var uO=function(X){return(0,oz.composePrism)(A.prismFromNullable())(X)};oz.fromNullable=uO;oz.filter=kO;var lO=function(X){return(0,oz.compose)((0,G5.pipe)(A.lensId(),A.lensProp(X),A.lensAsTraversal))};oz.prop=lO;var mO=function(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];return(0,oz.compose)((0,G5.pipe)(A.lensId(),A.lensProps.apply(A,X),A.lensAsTraversal))};oz.props=mO;var cO=function(X){return(0,oz.compose)((0,G5.pipe)(A.lensId(),A.lensComponent(X),A.lensAsTraversal))};oz.component=cO;var _O=function(X){return function($){return(0,G5.pipe)($,(0,oz.compose)(A.optionalAsTraversal(A.indexReadonlyArray().index(X))))}};oz.index=_O;var xO=function(X){return function($){return(0,G5.pipe)($,(0,oz.compose)(A.optionalAsTraversal(A.indexReadonlyNonEmptyArray().index(X))))}};oz.indexNonEmpty=xO;var dO=function(X){return function($){return(0,G5.pipe)($,(0,oz.compose)(A.optionalAsTraversal(A.indexReadonlyRecord().index(X))))}};oz.key=dO;var nO=function(X){return function($){return(0,G5.pipe)($,(0,oz.compose)(A.lensAsTraversal(A.atReadonlyRecord().at(X))))}};oz.atKey=nO;oz.some=(0,oz.compose)(A.prismAsTraversal(A.prismSome()));oz.right=(0,oz.compose)(A.prismAsTraversal(A.prismRight()));oz.left=(0,oz.compose)(A.prismAsTraversal(A.prismLeft()));oz.traverse=A.traversalTraverse;oz.findFirst=fO;oz.findFirstNonEmpty=pO;var oO=function(X){return function($){return function(Q){return Q.modifyF(fz.getApplicative(X))(function(Y){return fz.make($(Y))})}}};oz.foldMap=oO;var iO=function(X){return(0,oz.foldMap)(X)(G7.identity)};oz.fold=iO;var rO=function(X){return function($){return(0,oz.foldMap)(pz.getMonoid())(pz.of)($)(X)}};oz.getAll=rO;oz.URI="monocle-ts/Traversal";oz.Semigroupoid={URI:oz.URI,compose:function(X,$){return(0,oz.compose)(X)($)}};oz.Category={URI:oz.URI,compose:oz.Semigroupoid.compose,id:oz.id}});var H1=v(($G)=>{var vM=function(X){return function($){return function(Q){return function(Y){return(0,UM.pipe)(Q.get(Y),$,function(J){return X.map(J,function(Z){return Q.set(Z)(Y)})})}}}},RM=function(X){return(0,$G.composePrism)(_.prismFromPredicate(X))},OM=function(X){return(0,R1.flow)($G.asTraversal,_.traversalTraverse(X))},MM=function(X){return(0,$G.composeOptional)(_.optionalFindFirst(X))},gM=function(X){return(0,$G.composeOptional)(_.optionalFindFirstNonEmpty(X))};Object.defineProperty($G,"__esModule",{value:!0});$G.Category=$G.Semigroupoid=$G.Invariant=$G.URI=$G.imap=$G.findFirstNonEmpty=$G.findFirst=$G.traverse=$G.left=$G.right=$G.some=$G.atKey=$G.key=$G.indexNonEmpty=$G.index=$G.component=$G.props=$G.prop=$G.filter=$G.fromNullable=$G.modifyF=$G.modify=$G.composeTraversal=$G.composeOptional=$G.composePrism=$G.composeIso=$G.composeLens=$G.compose=$G.asTraversal=$G.asOptional=$G.id=$G.lens=void 0;var R1=F(),UM=_4(),_=zX();$G.lens=_.lens;$G.id=_.lensId;$G.asOptional=_.lensAsOptional;$G.asTraversal=_.lensAsTraversal;$G.compose=_.lensComposeLens;$G.composeLens=$G.compose;$G.composeIso=(0,R1.flow)(_.isoAsLens,$G.compose);$G.composePrism=_.lensComposePrism;var CM=function(X){return(0,R1.flow)($G.asOptional,_.optionalComposeOptional(X))};$G.composeOptional=CM;var NM=function(X){return(0,R1.flow)($G.asTraversal,_.traversalComposeTraversal(X))};$G.composeTraversal=NM;var TM=function(X){return function($){return function(Q){var Y=$.get(Q),J=X(Y);return Y===J?Q:$.set(J)(Q)}}};$G.modify=TM;$G.modifyF=vM;var AM=function(X){return(0,$G.composePrism)(_.prismFromNullable())(X)};$G.fromNullable=AM;$G.filter=RM;$G.prop=_.lensProp;$G.props=_.lensProps;$G.component=_.lensComponent;var SM=function(X){return(0,R1.flow)($G.asOptional,_.optionalIndex(X))};$G.index=SM;var WM=function(X){return(0,R1.flow)($G.asOptional,_.optionalIndexNonEmpty(X))};$G.indexNonEmpty=WM;var EM=function(X){return(0,R1.flow)($G.asOptional,_.optionalKey(X))};$G.key=EM;$G.atKey=_.lensAtKey;$G.some=(0,$G.composePrism)(_.prismSome());$G.right=(0,$G.composePrism)(_.prismRight());$G.left=(0,$G.composePrism)(_.prismLeft());$G.traverse=OM;$G.findFirst=MM;$G.findFirstNonEmpty=gM;var FM=function(X,$){return function(Q){return XG(Q,X,$)}};$G.imap=FM;var XG=function(X,$,Q){return(0,$G.lens)((0,R1.flow)(X.get,$),(0,R1.flow)(Q,X.set))};$G.URI="monocle-ts/Lens";$G.Invariant={URI:$G.URI,imap:XG};$G.Semigroupoid={URI:$G.URI,compose:function(X,$){return(0,$G.compose)(X)($)}};$G.Category={URI:$G.URI,compose:$G.Semigroupoid.compose,id:$G.id}});var q7=v((jG)=>{var Yg=function(X){return function($){return function(Q){return function(Y){return(0,D7.pipe)(Q.getOption(Y),XQ.fold(function(){return X.of(Y)},function(J){return X.map($(J),function(Z){return Q.set(Z)(Y)})}))}}}},Jg=function(X){return(0,jG.compose)(W.prismAsOptional(W.prismFromPredicate(X)))},zg=function(X){return(0,h1.flow)(jG.asTraversal,W.traversalTraverse(X))},Gg=function(X){return(0,jG.compose)(W.optionalFindFirst(X))},Vg=function(X){return(0,jG.compose)(W.optionalFindFirstNonEmpty(X))};Object.defineProperty(jG,"__esModule",{value:!0});jG.Category=jG.Semigroupoid=jG.Invariant=jG.URI=jG.imap=jG.findFirstNonEmpty=jG.findFirst=jG.traverse=jG.left=jG.right=jG.some=jG.atKey=jG.key=jG.indexNonEmpty=jG.index=jG.component=jG.props=jG.prop=jG.filter=jG.fromNullable=jG.modifyF=jG.modify=jG.setOption=jG.modifyOption=jG.composeTraversal=jG.composePrism=jG.composeLens=jG.composeIso=jG.composeOptional=jG.compose=jG.asTraversal=jG.id=jG.optional=void 0;var h1=F(),XQ=d$(),D7=_4(),W=zX();jG.optional=W.optional;var Xg=function(){return(0,jG.optional)(XQ.some,h1.constant)};jG.id=Xg;jG.asTraversal=W.optionalAsTraversal;jG.compose=W.optionalComposeOptional;jG.composeOptional=jG.compose;jG.composeIso=(0,h1.flow)(W.isoAsOptional,jG.compose);jG.composeLens=(0,h1.flow)(W.lensAsOptional,W.optionalComposeOptional);jG.composePrism=(0,h1.flow)(W.prismAsOptional,W.optionalComposeOptional);var $g=function(X){return(0,h1.flow)(jG.asTraversal,W.traversalComposeTraversal(X))};jG.composeTraversal=$g;jG.modifyOption=W.optionalModifyOption;var Qg=function(X){return(0,jG.modifyOption)(function(){return X})};jG.setOption=Qg;jG.modify=W.optionalModify;jG.modifyF=Yg;jG.fromNullable=(0,jG.compose)(W.prismAsOptional(W.prismFromNullable()));jG.filter=Jg;var Zg=function(X){return(0,jG.compose)((0,D7.pipe)(W.lensId(),W.lensProp(X),W.lensAsOptional))};jG.prop=Zg;var Hg=function(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];return(0,jG.compose)((0,D7.pipe)(W.lensId(),W.lensProps.apply(W,X),W.lensAsOptional))};jG.props=Hg;var jg=function(X){return(0,jG.compose)((0,D7.pipe)(W.lensId(),W.lensComponent(X),W.lensAsOptional))};jG.component=jg;jG.index=W.optionalIndex;jG.indexNonEmpty=W.optionalIndexNonEmpty;jG.key=W.optionalKey;var Pg=function(X){return function($){return(0,D7.pipe)($,(0,jG.compose)(W.lensAsOptional(W.atReadonlyRecord().at(X))))}};jG.atKey=Pg;jG.some=(0,jG.compose)(W.prismAsOptional(W.prismSome()));jG.right=(0,jG.compose)(W.prismAsOptional(W.prismRight()));jG.left=(0,jG.compose)(W.prismAsOptional(W.prismLeft()));jG.traverse=zg;jG.findFirst=Gg;jG.findFirstNonEmpty=Vg;var Dg=function(X,$){return function(Q){return HG(Q,X,$)}};jG.imap=Dg;var HG=function(X,$,Q){return(0,jG.optional)((0,h1.flow)(X.getOption,XQ.map($)),(0,h1.flow)(Q,X.set))};jG.URI="monocle-ts/Optional";jG.Invariant={URI:jG.URI,imap:HG};jG.Semigroupoid={URI:jG.URI,compose:function(X,$){return(0,jG.compose)(X)($)}};jG.Category={URI:jG.URI,compose:jG.Semigroupoid.compose,id:jG.id}});var E0=v((e)=>{var lg=e&&e.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),mg=e&&e.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),K7=e&&e.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))lg($,X,Q)}return mg($,X),$};Object.defineProperty(e,"__esModule",{value:!0});e.lensFromPath=e.traversalFromPath=e.optionalFromPath=e.isPathTraversal=e.isPathLens=void 0;var i=F(),cg=K7(t9()),_g=K7(F$()),xg=U$(),YQ=K7(H1()),j1=K7(q7()),W0=K7(S0()),dg=(X)=>!B7(X).some(($)=>["?","?some","?left","right","[]>","{}>","[number]","[string]"].includes($)||!$.startsWith("(")&&$.includes(":"));e.isPathLens=dg;var ng=(X)=>B7(X).some(($)=>["[]>","{}>"].includes($));e.isPathTraversal=ng;var DG=(X)=>{if(X==="")return X;const $=X.match(/\((.*)\*(.*)\)$/);if($)return $[2];const Q=X.match(/\((.*)\)$/);if(Q)return Q[0];const Y=X.match(/(.*)\.(.*)/);if(Y)return Y[2];return X},fg=(X)=>{if(X==="")return X;const $=X.match(/(.*)\.\((.*)\*(.*)\)$/);if($)return $[1];return X.substring(0,X.lastIndexOf(DG(X))-1)},qG=(X,$=[])=>{const Q=fg(X),Y=DG(X);if(Q==="")return[Y,...$];return qG(Q,[Y,...$])},B7=(X)=>{return qG(X,[]).flatMap((Q)=>{if(Q.includes("?some")||Q.includes("?left")||Q.includes("?right")||!Q.includes("?"))return[Q];else{const Y=Q.substring(0,Q.length-1);if(Y.length>0)return[Y,"?"];return["?"]}})},pg=(X,$)=>{const Q=[...$];return B7(X).reduce((J,Z)=>{if(Z==="?")return(0,i.pipe)(J,j1.fromNullable);else if(Z==="?some")return(0,i.pipe)(J,j1.some);else if(Z==="?left")return(0,i.pipe)(J,j1.left);else if(Z==="?right")return(0,i.pipe)(J,j1.left);else if(Z==="[number]")return(0,i.pipe)(J,j1.index(Q.shift()));else if(Z==="[string]")return(0,i.pipe)(J,j1.key(Q.shift()));else if(Z.includes("[")&&Z.includes("]")&&Z.indexOf("[")<Z.indexOf("]")){const V=Number.parseInt(Z.substring(Z.indexOf("[")+1,Z.indexOf("]")),10);return(0,i.pipe)(J,j1.component(V))}else if(Z.includes(":")){const V=Z.indexOf(":"),D=Z.substring(0,V),L=Z.substring(V+1,Z.length);return(0,i.pipe)(J,j1.filter((B)=>B[D]===L))}return(0,i.pipe)(J,j1.prop(Z))},j1.id())};e.optionalFromPath=pg;var og=(X,$)=>{const Q=[...$];return B7(X).reduce((J,Z)=>{if(Z==="?")return(0,i.pipe)(J,W0.fromNullable);else if(Z==="?some")return(0,i.pipe)(J,W0.some);else if(Z==="?left")return(0,i.pipe)(J,W0.left);else if(Z==="?right")return(0,i.pipe)(J,W0.left);else if(Z==="[number]")return(0,i.pipe)(J,W0.index(Q.shift()));else if(Z==="[string]")return(0,i.pipe)(J,W0.key(Q.shift()));else if(Z==="[]>")return(0,i.pipe)(J,W0.traverse(cg.Traversable));else if(Z==="{}>")return(0,i.pipe)(J,W0.traverse(_g.getTraversable(xg.Ord)));else if(Z.includes("[")&&Z.includes("]")&&Z.indexOf("[")<Z.indexOf("]")){const V=Number.parseInt(Z.substring(Z.indexOf("[")+1,Z.indexOf("]")),10);return(0,i.pipe)(J,W0.component(V))}else if(Z.includes(":")){const V=Z.indexOf(":"),D=Z.substring(0,V),L=Z.substring(V+1,Z.length);return(0,i.pipe)(J,W0.filter((B)=>B[D]===L))}return(0,i.pipe)(J,W0.prop(Z))},W0.id())};e.traversalFromPath=og;var ig=(X)=>{return B7(X).reduce((Q,Y)=>{if(Y.includes("[")&&Y.includes("]")&&Y.indexOf("[")<Y.indexOf("]")){const J=Y.substring(Y.indexOf("[")+1,Y.indexOf("]"));return(0,i.pipe)(Q,YQ.component(Number.parseInt(J,10)))}return(0,i.pipe)(Q,YQ.prop(Y))},YQ.id())};e.lensFromPath=ig});var KG=v((P1)=>{var rg=P1&&P1.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),sg=P1&&P1.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),tg=P1&&P1.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))rg($,X,Q)}return sg($,X),$};Object.defineProperty(P1,"__esModule",{value:!0});P1.get=void 0;var ag=F(),eg=tg(S0()),L7=E0(),XF=(X,...$)=>{if((0,L7.isPathLens)(X))return(0,L7.lensFromPath)(X).get;if((0,L7.isPathTraversal)(X))return(Q)=>{return(0,ag.pipe)((0,L7.traversalFromPath)(X,$),eg.getAll(Q))};return(0,L7.optionalFromPath)(X,$).getOption};P1.get=XF});var BG=v((z1)=>{var $F=z1&&z1.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),QF=z1&&z1.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),YF=z1&&z1.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))$F($,X,Q)}return QF($,X),$};Object.defineProperty(z1,"__esModule",{value:!0});z1.set=void 0;var JF=F(),ZF=YF(S0()),JQ=E0(),HF=(X,...$)=>(Q)=>{const Y=$.slice(0,$.length-1),J=$[$.length-1];if((0,JQ.isPathLens)(X))return(0,JQ.lensFromPath)(X).set(J)(Q);return(0,JF.pipe)((0,JQ.traversalFromPath)(X,Y),ZF.set(J))(Q)};z1.set=HF});var CG=v((wG)=>{Object.defineProperty(wG,"__esModule",{value:!0});wG.setOption=void 0;var LG=F(),jF=q7(),PF=S0(),w7=E0(),zF=(X,...$)=>(Q)=>{const Y=$.slice(0,$.length-1),J=$[$.length-1];if((0,w7.isPathLens)(X))return(0,w7.lensFromPath)(X).set(J)(Q);if((0,w7.isPathTraversal)(X))return(0,LG.pipe)((0,w7.traversalFromPath)(X,Y),(0,PF.set)(J))(Q);return(0,LG.pipe)((0,w7.optionalFromPath)(X,Y),(0,jF.setOption)(J))(Q)};wG.setOption=zF});var TG=v((G1)=>{var GF=G1&&G1.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),VF=G1&&G1.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),DF=G1&&G1.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))GF($,X,Q)}return VF($,X),$};Object.defineProperty(G1,"__esModule",{value:!0});G1.modify=void 0;var NG=F(),qF=DF(H1()),KF=S0(),ZQ=E0(),BF=(X,...$)=>(Q)=>{const Y=$.slice(0,$.length-1),J=$[$.length-1];if((0,ZQ.isPathLens)(X))return(0,NG.pipe)((0,ZQ.lensFromPath)(X),qF.modify(J))(Q);return(0,NG.pipe)((0,ZQ.traversalFromPath)(X,Y),(0,KF.modify)(J))(Q)};G1.modify=BF});var vG=v((V1)=>{var LF=V1&&V1.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),wF=V1&&V1.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),jQ=V1&&V1.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))LF($,X,Q)}return wF($,X),$};Object.defineProperty(V1,"__esModule",{value:!0});V1.modifyOption=void 0;var HQ=F(),UF=jQ(H1()),CF=jQ(q7()),NF=jQ(S0()),U7=E0(),TF=(X,...$)=>(Q)=>{const Y=$.slice(0,$.length-1),J=$[$.length-1];if((0,U7.isPathLens)(X))return(0,HQ.pipe)((0,U7.lensFromPath)(X),UF.modify(J))(Q);if((0,U7.isPathTraversal)(X))return(0,HQ.pipe)((0,U7.traversalFromPath)(X,Y),NF.modify(J))(Q);return(0,HQ.pipe)((0,U7.optionalFromPath)(X,Y),CF.modifyOption(J))(Q)};V1.modifyOption=TF});var RG=v((D1)=>{var vF=D1&&D1.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),AF=D1&&D1.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),RF=D1&&D1.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))vF($,X,Q)}return AF($,X),$};Object.defineProperty(D1,"__esModule",{value:!0});D1.modifyW=void 0;var AG=F(),SF=RF(H1()),WF=S0(),PQ=E0(),EF=(X,...$)=>(Q)=>{const Y=$.slice(0,$.length-1),J=$[$.length-1];if((0,PQ.isPathLens)(X))return(0,AG.pipe)((0,PQ.lensFromPath)(X),SF.modify(J))(Q);return(0,AG.pipe)((0,PQ.traversalFromPath)(X,Y),(0,WF.modify)(J))(Q)};D1.modifyW=EF});var SG=v((q1)=>{var OF=q1&&q1.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),MF=q1&&q1.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),GQ=q1&&q1.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))OF($,X,Q)}return MF($,X),$};Object.defineProperty(q1,"__esModule",{value:!0});q1.modifyOptionW=void 0;var zQ=F(),gF=GQ(H1()),FF=GQ(q7()),IF=GQ(S0()),C7=E0(),yF=(X,...$)=>(Q)=>{const Y=$.slice(0,$.length-1),J=$[$.length-1];if((0,C7.isPathLens)(X))return(0,zQ.pipe)((0,C7.lensFromPath)(X),gF.modify(J))(Q);if((0,C7.isPathTraversal)(X))return(0,zQ.pipe)((0,C7.traversalFromPath)(X,Y),IF.modify(J))(Q);return(0,zQ.pipe)((0,C7.optionalFromPath)(X,Y),FF.modifyOption(J))(Q)};q1.modifyOptionW=yF});var WG=v((K1)=>{var bF=K1&&K1.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),hF=K1&&K1.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),uF=K1&&K1.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))bF($,X,Q)}return hF($,X),$};Object.defineProperty(K1,"__esModule",{value:!0});K1.modifyF=void 0;var kF=F(),lF=uF(H1()),VQ=E0(),mF=(X)=>($,...Q)=>(Y)=>{const J=Q.slice(0,Q.length-1),Z=Q[Q.length-1];if((0,VQ.isPathLens)($))return(0,kF.pipe)((0,VQ.lensFromPath)($),lF.modifyF(X)(Z))(Y);return(0,VQ.traversalFromPath)($,J).modifyF(X)(Z)(Y)};K1.modifyF=mF});var MG=v((B1)=>{var cF=B1&&B1.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),_F=B1&&B1.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),OG=B1&&B1.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))cF($,X,Q)}return _F($,X),$};Object.defineProperty(B1,"__esModule",{value:!0});B1.upsert=void 0;var EG=F(),xF=OG(H1()),dF=OG(S0()),DQ=E0(),nF=(X,$,...Q)=>(Y)=>{const J=Q.slice(0,Q.length-1),Z=Q[Q.length-1];if((0,DQ.isPathLens)(X))return(0,EG.pipe)((0,DQ.lensFromPath)(X),xF.modify((V)=>({...V,[$]:Z})))(Y);return(0,EG.pipe)((0,DQ.traversalFromPath)(X,J),dF.modify((V)=>({...V,[$]:Z})))(Y)};B1.upsert=nF});var IG=v((L1)=>{var fF=L1&&L1.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),pF=L1&&L1.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),FG=L1&&L1.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))fF($,X,Q)}return pF($,X),$};Object.defineProperty(L1,"__esModule",{value:!0});L1.remove=void 0;var gG=F(),oF=FG(H1()),iF=FG(S0()),qQ=E0(),rF=(X)=>($)=>{const Q=X.split("."),Y=Q.slice(0,Q.length-1).join("."),J=Q[Q.length-1];if((0,qQ.isPathLens)(Y))return(0,gG.pipe)((0,qQ.lensFromPath)(Y),oF.modify((Z)=>{const V={...Z};return delete V[J],V}))($);return(0,gG.pipe)((0,qQ.traversalFromPath)(Y,[]),iF.modify((Z)=>{const V={...Z};return delete V[J],V}))($)};L1.remove=rF});var hG=v((w1)=>{var sF=w1&&w1.__createBinding||(Object.create?function(X,$,Q,Y){if(Y===void 0)Y=Q;var J=Object.getOwnPropertyDescriptor($,Q);if(!J||("get"in J?!$.__esModule:J.writable||J.configurable))J={enumerable:!0,get:function(){return $[Q]}};Object.defineProperty(X,Y,J)}:function(X,$,Q,Y){if(Y===void 0)Y=Q;X[Y]=$[Q]}),tF=w1&&w1.__setModuleDefault||(Object.create?function(X,$){Object.defineProperty(X,"default",{enumerable:!0,value:$})}:function(X,$){X.default=$}),bG=w1&&w1.__importStar||function(X){if(X&&X.__esModule)return X;var $={};if(X!=null){for(var Q in X)if(Q!=="default"&&Object.prototype.hasOwnProperty.call(X,Q))sF($,X,Q)}return tF($,X),$};Object.defineProperty(w1,"__esModule",{value:!0});w1.rename=void 0;var yG=F(),aF=bG(H1()),eF=bG(S0()),KQ=E0(),XI=(X,$)=>(Q)=>{const Y=X.split("."),J=Y.slice(0,Y.length-1).join("."),Z=Y[Y.length-1];if((0,KQ.isPathLens)(J))return(0,yG.pipe)((0,KQ.lensFromPath)(J),aF.modify(({[Z]:V,...D})=>({...D,[$]:V})))(Q);return(0,yG.pipe)((0,KQ.traversalFromPath)(J,[]),eF.modify(({[Z]:V,...D})=>({...D,[$]:V})))(Q)};w1.rename=XI});var uG=v((N0)=>{Object.defineProperty(N0,"__esModule",{value:!0});N0.rename=N0.remove=N0.upsert=N0.modifyF=N0.modifyOptionW=N0.modifyW=N0.modifyOption=N0.modify=N0.setOption=N0.set=N0.get=void 0;var $I=KG();Object.defineProperty(N0,"get",{enumerable:!0,get:function(){return $I.get}});var QI=BG();Object.defineProperty(N0,"set",{enumerable:!0,get:function(){return QI.set}});var YI=CG();Object.defineProperty(N0,"setOption",{enumerable:!0,get:function(){return YI.setOption}});var JI=TG();Object.defineProperty(N0,"modify",{enumerable:!0,get:function(){return JI.modify}});var ZI=vG();Object.defineProperty(N0,"modifyOption",{enumerable:!0,get:function(){return ZI.modifyOption}});var HI=RG();Object.defineProperty(N0,"modifyW",{enumerable:!0,get:function(){return HI.modifyW}});var jI=SG();Object.defineProperty(N0,"modifyOptionW",{enumerable:!0,get:function(){return jI.modifyOptionW}});var PI=WG();Object.defineProperty(N0,"modifyF",{enumerable:!0,get:function(){return PI.modifyF}});var zI=MG();Object.defineProperty(N0,"upsert",{enumerable:!0,get:function(){return zI.upsert}});var GI=IG();Object.defineProperty(N0,"remove",{enumerable:!0,get:function(){return GI.remove}});var VI=hG();Object.defineProperty(N0,"rename",{enumerable:!0,get:function(){return VI.rename}})});var aG=v((qu,tG)=>{tG.exports=Spicetify.React});var XV=v((Ku,eG)=>{eG.exports=Spicetify.ReactDOM});function u(X){return X}function l1(X){return function(){return X}}function W7(X){return function(){var $=[];for(var Q=0;Q<arguments.length;Q++)$[Q]=arguments[Q];if($.length>1)return X($[1],$[0]);return function(Y){return X(Y)($[0])}}}function I(X,$,Q,Y,J,Z,V,D,L){switch(arguments.length){case 1:return X;case 2:return function(){return $(X.apply(this,arguments))};case 3:return function(){return Q($(X.apply(this,arguments)))};case 4:return function(){return Y(Q($(X.apply(this,arguments))))};case 5:return function(){return J(Y(Q($(X.apply(this,arguments)))))};case 6:return function(){return Z(J(Y(Q($(X.apply(this,arguments))))))};case 7:return function(){return V(Z(J(Y(Q($(X.apply(this,arguments)))))))};case 8:return function(){return D(V(Z(J(Y(Q($(X.apply(this,arguments))))))))};case 9:return function(){return L(D(V(Z(J(Y(Q($(X.apply(this,arguments)))))))))}}return}function E7(X){return function($){return X.apply(void 0,$)}}function RQ(X){return function(){var $=[];for(var Q=0;Q<arguments.length;Q++)$[Q]=arguments[Q];return X($)}}function K(X,$,Q,Y,J,Z,V,D,L){switch(arguments.length){case 1:return X;case 2:return $(X);case 3:return Q($(X));case 4:return Y(Q($(X)));case 5:return J(Y(Q($(X))));case 6:return Z(J(Y(Q($(X)))));case 7:return V(Z(J(Y(Q($(X))))));case 8:return D(V(Z(J(Y(Q($(X)))))));case 9:return L(D(V(Z(J(Y(Q($(X))))))));default:{var B=arguments[0];for(var R=1;R<arguments.length;R++)B=arguments[R](B);return B}}}var vV=function(X,$,Q){if(Q||arguments.length===2){for(var Y=0,J=$.length,Z;Y<J;Y++)if(Z||!(Y in $)){if(!Z)Z=Array.prototype.slice.call($,0,Y);Z[Y]=$[Y]}}return X.concat(Z||Array.prototype.slice.call($))};var CQ=function(X){return function(){return{concat:function($,Q){return function(Y){return X.concat($(Y),Q(Y))}}}}},NQ=function(X){var $=CQ(X);return function(){return{concat:$().concat,empty:function(){return X.empty}}}};var TQ=function(X){return function($){return $(X)}};var vQ=l1(!1);var AQ=l1(void 0),a5=AQ;var O7=function(X,$){return $};var s=function(X,$){var Q=typeof X==="number"?function(Y){return Y.length>=X}:X;return function(){var Y=Array.from(arguments);if(Q(arguments))return $.apply(this,Y);return function(J){return $.apply(void 0,vV([J],Y,!1))}}};var AV=function(X,$,Q){if(Q||arguments.length===2){for(var Y=0,J=$.length,Z;Y<J;Y++)if(Z||!(Y in $)){if(!Z)Z=Array.prototype.slice.call($,0,Y);Z[Y]=$[Y]}}return X.concat(Z||Array.prototype.slice.call($))},W1=function(X){return X._tag==="None"},B0=function(X){return X._tag==="Some"},E={_tag:"None"},O=function(X){return{_tag:"Some",value:X}},U1=function(X){return X._tag==="Left"};var M7=function(X){return[X]},D5=function(X){return X.length>0},e5=function(X){return X[0]},g7=function(X){return X.slice(1)},X4=[],o0={},n=Object.prototype.hasOwnProperty,$4=function(X){return AV([X[0]],X.slice(1),!0)};var SQ=function(X,$){return s(2,function(Q,Y){return $.flatMap(Q,function(J){return X.fromIO(Y(J))})})};function r0(X){return function($){return function(Q){return X.ap(X.map(Q,function(Y){return function(){return Y}}),$)}}}function s0(X){return function($){return function(Q){return X.ap(X.map(Q,function(){return function(Y){return Y}}),$)}}}function t0(X){return function($,Q){return function(Y){return X.ap(X.map(Y,function(J){return function(Z){var V;return Object.assign({},J,(V={},V[$]=Z,V))}}),Q)}}}function F7(X){return function($){return{concat:function(Q,Y){return X.ap(X.map(Q,function(J){return function(Z){return $.concat(J,Z)}}),Y)}}}}function M0(X){return function($){return function(Q){return X.map(Q,function(Y){return Y($)})}}}function g0(X){return function($){return function(Q){return X.map(Q,function(Y){var J;return J={},J[$]=Y,J})}}}var F0=function(X){return function($,Q){return function(Y){return X.map(Y,function(J){var Z;return Object.assign({},J,(Z={},Z[$]=Q(J),Z))})}}};function Q4(X){return function($,Q){return X.map($,function(){return Q})}}function I7(X){var $=Q4(X);return function(Q){return $(Q,void 0)}}function WQ(X){var $=F7(X);return function(Q){return{concat:$(Q).concat,empty:X.of(Q.empty)}}}var S={};k1(S,{zipWith:()=>{{return lJ}},zip:()=>{{return mJ}},zero:()=>{{return g5}},wither:()=>{{return HB}},wilt:()=>{{return jB}},updateAt:()=>{{return cK}},unzip:()=>{{return pK}},unsafeUpdateAt:()=>{{return BZ}},unsafeInsertAt:()=>{{return KZ}},unsafeDeleteAt:()=>{{return LZ}},uniq:()=>{{return rK}},union:()=>{{return x6}},unfold:()=>{{return Y8}},traverseWithIndex:()=>{{return Q8}},traverse:()=>{{return jZ}},takeRight:()=>{{return EK}},takeLeftWhile:()=>{{return OK}},takeLeft:()=>{{return WK}},tail:()=>{{return RK}},splitAt:()=>{{return _J}},spanLeft:()=>{{return MK}},sortBy:()=>{{return sK}},sort:()=>{{return fK}},some:()=>{{return wZ}},snoc:()=>{{return rB}},size:()=>{{return NK}},sequence:()=>{{return N4}},separate:()=>{{return I5}},scanRight:()=>{{return CK}},scanLeft:()=>{{return UK}},rotate:()=>{{return iK}},rights:()=>{{return dK}},reverse:()=>{{return xK}},replicate:()=>{{return EJ}},reduceWithIndex:()=>{{return $8}},reduceRightWithIndex:()=>{{return HZ}},reduceRight:()=>{{return ZZ}},reduce:()=>{{return X8}},range:()=>{{return pB}},prependW:()=>{{return DK}},prependToAll:()=>{{return sB}},prependAll:()=>{{return cJ}},prepend:()=>{{return VK}},partitionWithIndex:()=>{{return t6}},partitionMapWithIndex:()=>{{return a6}},partitionMap:()=>{{return eJ}},partition:()=>{{return aJ}},of:()=>{{return s1}},modifyAt:()=>{{return kJ}},matchW:()=>{{return gJ}},matchRightW:()=>{{return yJ}},matchRight:()=>{{return bJ}},matchLeftW:()=>{{return FJ}},matchLeft:()=>{{return IJ}},match:()=>{{return BK}},mapWithIndex:()=>{{return sJ}},map:()=>{{return C4}},makeBy:()=>{{return WJ}},lookup:()=>{{return TK}},let:()=>{{return xB}},lefts:()=>{{return nK}},last:()=>{{return AK}},isOutOfBound:()=>{{return U4}},isNonEmpty:()=>{{return a}},isEmpty:()=>{{return i1}},intersperse:()=>{{return oK}},intersection:()=>{{return d6}},intercalate:()=>{{return mB}},insertAt:()=>{{return mK}},init:()=>{{return SK}},head:()=>{{return vK}},guard:()=>{{return RB}},getUnionSemigroup:()=>{{return zZ}},getUnionMonoid:()=>{{return DB}},getShow:()=>{{return PB}},getSemigroup:()=>{{return PZ}},getOrd:()=>{{return VB}},getMonoid:()=>{{return zB}},getIntersectionSemigroup:()=>{{return qB}},getEq:()=>{{return GB}},getDifferenceMagma:()=>{{return KB}},fromPredicate:()=>{{return KK}},fromOptionK:()=>{{return eK}},fromOption:()=>{{return OJ}},fromEitherK:()=>{{return uB}},fromEither:()=>{{return MJ}},foldRight:()=>{{return wK}},foldMapWithIndex:()=>{{return JZ}},foldMap:()=>{{return YZ}},foldLeft:()=>{{return LK}},flatten:()=>{{return JB}},flatMap:()=>{{return Q1}},flap:()=>{{return BB}},findLastMap:()=>{{return kK}},findLastIndex:()=>{{return lK}},findLast:()=>{{return uK}},findIndex:()=>{{return yK}},findFirstMap:()=>{{return hK}},findFirst:()=>{{return bK}},filterWithIndex:()=>{{return QZ}},filterMapWithIndex:()=>{{return r6}},filterMap:()=>{{return s6}},filterE:()=>{{return hB}},filter:()=>{{return tJ}},extend:()=>{{return e6}},exists:()=>{{return lB}},every:()=>{{return kB}},empty:()=>{{return oB}},elem:()=>{{return _6}},duplicate:()=>{{return ZB}},dropRight:()=>{{return FK}},dropLeftWhile:()=>{{return IK}},dropLeft:()=>{{return gK}},difference:()=>{{return n6}},deleteAt:()=>{{return _K}},copy:()=>{{return J0}},cons:()=>{{return iB}},concatW:()=>{{return xJ}},concat:()=>{{return $B}},comprehension:()=>{{return XB}},compact:()=>{{return F5}},chunksOf:()=>{{return aK}},chop:()=>{{return tK}},chainWithIndex:()=>{{return hJ}},chainRecDepthFirst:()=>{{return FB}},chainRecBreadthFirst:()=>{{return yB}},chainFirst:()=>{{return NB}},chain:()=>{{return fB}},bindTo:()=>{{return _B}},bind:()=>{{return dB}},array:()=>{{return tB}},appendW:()=>{{return qK}},append:()=>{{return L9}},apSecond:()=>{{return UB}},apS:()=>{{return nB}},apFirst:()=>{{return wB}},ap:()=>{{return rJ}},altW:()=>{{return XZ}},alt:()=>{{return $Z}},Zero:()=>{{return VZ}},Witherable:()=>{{return DZ}},Unfoldable:()=>{{return vB}},URI:()=>{{return c}},TraversableWithIndex:()=>{{return gB}},Traversable:()=>{{return j8}},Pointed:()=>{{return GZ}},Monad:()=>{{return TB}},FunctorWithIndex:()=>{{return LB}},Functor:()=>{{return A9}},FromEither:()=>{{return qZ}},FoldableWithIndex:()=>{{return MB}},Foldable:()=>{{return H8}},FilterableWithIndex:()=>{{return OB}},Filterable:()=>{{return EB}},Extend:()=>{{return WB}},Do:()=>{{return cB}},Compactable:()=>{{return Z8}},ChainRecDepthFirst:()=>{{return IB}},ChainRecBreadthFirst:()=>{{return bB}},Chain:()=>{{return J8}},Apply:()=>{{return R9}},Applicative:()=>{{return CB}},Alternative:()=>{{return SB}},Alt:()=>{{return AB}}});function q5(X){var $=C1(X);return function(Q){return function(Y){return $(Y,Q)}}}function C1(X){return function($,Q){return X.chain($,function(Y){return X.map(Q(Y),function(){return Y})})}}function I0(X){return function($,Q){return function(Y){return X.chain(Y,function(J){return X.map(Q(J),function(Z){var V;return Object.assign({},J,(V={},V[$]=Z,V))})})}}}function K5(X){return function($){return I($,X.fromEither)}}function OQ(X,$){var Q=K5(X),Y=C1($);return function(J,Z){return Y(J,Q(Z))}}var C5={};k1(C5,{zipWith:()=>{{return wY}},zip:()=>{{return UY}},updateLast:()=>{{return WD}},updateHead:()=>{{return SD}},updateAt:()=>{{return oV}},unzip:()=>{{return iV}},unsnoc:()=>{{return ID}},unsafeUpdateAt:()=>{{return _7}},unsafeInsertAt:()=>{{return c7}},unprepend:()=>{{return DY}},uniq:()=>{{return x7}},union:()=>{{return d7}},uncons:()=>{{return FD}},unappend:()=>{{return qY}},traverseWithIndex:()=>{{return i7}},traverse:()=>{{return IY}},tail:()=>{{return v0}},splitAt:()=>{{return G4}},sortBy:()=>{{return fX}},sort:()=>{{return pX}},snoc:()=>{{return H6}},sequence:()=>{{return o7}},rotate:()=>{{return n7}},reverse:()=>{{return nV}},replicate:()=>{{return dV}},reduceWithIndex:()=>{{return MY}},reduceRightWithIndex:()=>{{return FY}},reduceRight:()=>{{return gY}},reduce:()=>{{return OY}},range:()=>{{return P4}},prependW:()=>{{return l7}},prependToAll:()=>{{return yD}},prependAll:()=>{{return z4}},prepend:()=>{{return c1}},of:()=>{{return N1}},nonEmptyArray:()=>{{return hD}},modifyLast:()=>{{return bY}},modifyHead:()=>{{return yY}},modifyAt:()=>{{return LY}},min:()=>{{return ND}},max:()=>{{return TD}},matchRight:()=>{{return RD}},matchLeft:()=>{{return AD}},mapWithIndex:()=>{{return Q6}},map:()=>{{return $6}},makeBy:()=>{{return j4}},let:()=>{{return wD}},last:()=>{{return x1}},isOutOfBound:()=>{{return Z4}},isNonEmpty:()=>{{return e0}},intersperse:()=>{{return oX}},intercalate:()=>{{return ED}},insertAt:()=>{{return pV}},init:()=>{{return d1}},head:()=>{{return U0}},groupSort:()=>{{return MD}},groupBy:()=>{{return fV}},group:()=>{{return BY}},getUnionSemigroup:()=>{{return XD}},getShow:()=>{{return tV}},getSemigroup:()=>{{return aV}},getEq:()=>{{return eV}},fromReadonlyNonEmptyArray:()=>{{return H4}},fromArray:()=>{{return VY}},foldMapWithIndex:()=>{{return CY}},foldMap:()=>{{return NY}},fold:()=>{{return bD}},flatten:()=>{{return sV}},flatMap:()=>{{return _1}},flap:()=>{{return $D}},filterWithIndex:()=>{{return hY}},filter:()=>{{return gD}},extract:()=>{{return Y6}},extend:()=>{{return X6}},duplicate:()=>{{return rV}},copy:()=>{{return U5}},cons:()=>{{return Z6}},concatW:()=>{{return KY}},concatAll:()=>{{return vD}},concat:()=>{{return f7}},chunksOf:()=>{{return iX}},chop:()=>{{return p7}},chainWithIndex:()=>{{return TY}},chainFirst:()=>{{return jD}},chain:()=>{{return OD}},bindTo:()=>{{return LD}},bind:()=>{{return UD}},appendW:()=>{{return m7}},append:()=>{{return w5}},apSecond:()=>{{return ZD}},apS:()=>{{return CD}},apFirst:()=>{{return JD}},ap:()=>{{return EY}},altW:()=>{{return SY}},alt:()=>{{return WY}},URI:()=>{{return z0}},TraversableWithIndex:()=>{{return DD}},Traversable:()=>{{return VD}},Pointed:()=>{{return QD}},Monad:()=>{{return PD}},FunctorWithIndex:()=>{{return YD}},Functor:()=>{{return r7}},FoldableWithIndex:()=>{{return GD}},Foldable:()=>{{return zD}},Do:()=>{{return BD}},Comonad:()=>{{return KD}},Chain:()=>{{return J6}},Apply:()=>{{return s7}},Applicative:()=>{{return HD}},Alt:()=>{{return qD}}});var y7={};k1(y7,{tuple:()=>{{return gQ}},struct:()=>{{return MQ}},strictEqual:()=>{{return MV}},getTupleEq:()=>{{return EV}},getStructEq:()=>{{return OV}},getSemigroup:()=>{{return yQ}},getMonoid:()=>{{return WV}},fromEquals:()=>{{return y0}},eqString:()=>{{return IV}},eqStrict:()=>{{return m1}},eqNumber:()=>{{return yV}},eqDate:()=>{{return bV}},eqBoolean:()=>{{return FV}},eq:()=>{{return gV}},contramap:()=>{{return FQ}},URI:()=>{{return IQ}},Contravariant:()=>{{return bQ}}});var y0=function(X){return{equals:function($,Q){return $===Q||X($,Q)}}},MQ=function(X){return y0(function($,Q){for(var Y in X)if(!X[Y].equals($[Y],Q[Y]))return!1;return!0})},gQ=function(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];return y0(function(Q,Y){return X.every(function(J,Z){return J.equals(Q[Z],Y[Z])})})},RV=function(X,$){return K(X,FQ($))},FQ=function(X){return function($){return y0(function(Q,Y){return $.equals(X(Q),X(Y))})}},IQ="Eq",m1={equals:function(X,$){return X===$}},SV={equals:function(){return!0}},yQ=function(){return{concat:function(X,$){return y0(function(Q,Y){return X.equals(Q,Y)&&$.equals(Q,Y)})}}},WV=function(){return{concat:yQ().concat,empty:SV}},bQ={URI:IQ,contramap:RV},EV=gQ,OV=MQ,MV=m1.equals,gV=bQ,FV=m1,IV=m1,yV=m1,bV={equals:function(X,$){return X.valueOf()===$.valueOf()}};var kV=function(X,$){return X<$?-1:X>$?1:0},hV=function(X){return function($,Q){return $===Q||X($,Q)===0}},b7=function(X){return{equals:hV(X),compare:function($,Q){return $===Q?0:X($,Q)}}};var uV=function(){return{concat:function(X,$){return b7(function(Q,Y){var J=X.compare(Q,Y);return J!==0?J:$.compare(Q,Y)})}}},h7=function(){return{concat:uV().concat,empty:b7(function(){return 0})}};var hQ=function(X){return function($,Q){return $===Q||X.compare($,Q)<1?$:Q}},uQ=function(X){return function($,Q){return $===Q||X.compare($,Q)>-1?$:Q}};var bI={equals:m1.equals,compare:kV};var kQ=function(X){return function($){return function(Q){return Q.reduce(function(Y,J){return X.concat(Y,J)},$)}}};var SX=function(X){return{concat:hQ(X)}},WX=function(X){return{concat:uQ(X)}},cV=function(X){return{concat:function(){return X}}};var lQ=function(){return{concat:u}},mQ=function(){return{concat:function(X,$){return $}}},cQ=kQ,_Q=cV(void 0);var xQ={concat:function(X,$){return X&&$}},dQ={concat:function(X,$){return X||$}};var nQ={concat:function(X,$){return X+$}},fQ={concat:function(X,$){return X+$}},pQ={concat:function(X,$){return X*$}};function kX(X,$){return $?X.concat($):function(Q){return Q.concat(X)}}function PY(X,$){return $===void 0?B5(X):K($,B5(X))}var OX=function(X,$,Q){if(Q||arguments.length===2){for(var Y=0,J=$.length,Z;Y<J;Y++)if(Z||!(Y in $)){if(!Z)Z=Array.prototype.slice.call($,0,Y);Z[Y]=$[Y]}}return X.concat(Z||Array.prototype.slice.call($))},MX=X4,E1=D5,gX=function(X,$){return X<0||X>=$.length},FX=function(X){return function($){return OX([X],$,!0)}},B5=FX,IX=function(X){return function($){return OX(OX([],$,!0),[X],!1)}},oQ=IX,yX=function(X,$,Q){if(E1(Q)){var Y=$4(Q);return Y.splice(X,0,$),Y}return[$]},iQ=function(X,$,Q){if(Q[X]===$)return Q;else{var Y=$4(Q);return Y[X]=$,Y}},bX=function(X){return function($){if($.length===1)return $;var Q=[a0($)],Y=L5($),J=function(L){if(Q.every(function(B){return!X.equals(B,L)}))Q.push(L)};for(var Z=0,V=Y;Z<V.length;Z++){var D=V[Z];J(D)}return Q}},rQ=function(X){if(E1(X)){var $=h7();return _V(X.reduce($.concat,$.empty))}return u},sQ=function(X){var $=bX(X);return function(Q){return function(Y){return $(K(Y,kX(Q)))}}},hX=function(X){return function($){var Q=$.length,Y=Math.round(X)%Q;if(gX(Math.abs(Y),$)||Y===0)return $;if(Y<0){var J=u7(-Y)($),Z=J[0],V=J[1];return K(V,kX(Z))}else return hX(Y-Q)($)}};var uX=function(X){return function($){var Q=Math.max(0,Math.floor($)),Y=[X(0)];for(var J=1;J<Q;J++)Y.push(X(J));return Y}};var tQ=function(X,$){return X<=$?uX(function(Q){return X+Q})($-X+1):[X]};var _V=function(X){return function($){return $.length===1?$:$.slice().sort(X.compare)}};var lX=function(X){return function($){var Q=[X,$[0]];for(var Y=1;Y<$.length;Y++)Q.push(X,$[Y]);return Q}},mX=function(X){return function($){var Q=L5($);return E1(Q)?K(Q,lX(X),B5(a0($))):$}};var cX=function(X){return function($){var Q=X($),Y=Q[0],J=Q[1],Z=[Y],V=J;while(E1(V)){var D=X(V),L=D[0],B=D[1];Z.push(L),V=B}return Z}},u7=function(X){return function($){var Q=Math.max(1,X);return Q>=$.length?[$,MX]:[K($.slice(1,Q),B5(a0($))),$.slice(Q)]}},aQ=function(X){return cX(u7(X))};var eQ=M7;var XY=function(X,$){return _X(X,function(Q,Y,J){return $(Y,J)})},$Y=function(X){return function($){return function(Q){return Q.slice(1).reduce(function(Y,J){return X.concat(Y,$(J))},$(Q[0]))}}},QY=function(X,$){return xX(X,function(Q,Y,J){return $(Y,J)})},_X=function(X,$){return function(Q){return Q.reduce(function(Y,J,Z){return $(Z,Y,J)},X)}},YY=function(X){return function($){return function(Q){return Q.slice(1).reduce(function(Y,J,Z){return X.concat(Y,$(Z+1,J))},$(0,Q[0]))}}},xX=function(X,$){return function(Q){return Q.reduceRight(function(Y,J,Z){return $(Z,J,Y)},X)}};var xV=e5;var JY=function(X){return{show:function($){return"[".concat($.map(X.show).join(", "),"]")}}};var ZY=function(X){return y0(function($,Q){return $.length===Q.length&&$.every(function(Y,J){return X.equals(Y,Q[J])})})};var a0=xV,L5=g7,Y4=function(X){return X[X.length-1]},dX=function(X){return X.slice(0,-1)},HY=function(X){var $=SX(X);return function(Q){return Q.reduce($.concat)}},jY=function(X){var $=WX(X);return function(Q){return Q.reduce($.concat)}},nX=function(X){return function($){return $.reduce(X.concat)}};var k7=function(X){var $=nX(X);return function(Q){return I(mX(Q),$)}};var zY=function(X,$){return K(X,kX([$]))};function KY(X){return function($){return $.concat(X)}}function f7(X,$){return $?X.concat($):function(Q){return Q.concat(X)}}function BY(X){return function($){var Q=$.length;if(Q===0)return[];var Y=[],J=$[0],Z=[J];for(var V=1;V<Q;V++){var D=$[V];if(X.equals(D,J))Z.push(D);else Y.push(Z),J=D,Z=[J]}return Y.push(Z),Y}}function UY(X,$){if($===void 0)return function(Q){return UY(Q,X)};return wY(X,$,function(Q,Y){return[Q,Y]})}function MD(X){var $=pX(X),Q=BY(X);return function(Y){return e0(Y)?Q($(Y)):[]}}function gD(X){return hY(function($,Q){return X(Q)})}function Z6(X,$){return $===void 0?c1(X):K($,c1(X))}var J4=function(X,$,Q){if(Q||arguments.length===2){for(var Y=0,J=$.length,Z;Y<J;Y++)if(Z||!(Y in $)){if(!Z)Z=Array.prototype.slice.call($,0,Y);Z[Y]=$[Y]}}return X.concat(Z||Array.prototype.slice.call($))},e0=function(X){return X.length>0},Z4=function(X,$){return X<0||X>=$.length},l7=function(X){return function($){return J4([X],$,!0)}},c1=l7,m7=function(X){return function($){return J4(J4([],$,!0),[X],!1)}},w5=m7,c7=function(X,$,Q){if(e0(Q)){var Y=H4(Q);return Y.splice(X,0,$),Y}return[$]},_7=function(X,$,Q){var Y=H4(Q);return Y[X]=$,Y},x7=function(X){return function($){if($.length===1)return U5($);var Q=[U0($)],Y=v0($),J=function(L){if(Q.every(function(B){return!X.equals(B,L)}))Q.push(L)};for(var Z=0,V=Y;Z<V.length;Z++){var D=V[Z];J(D)}return Q}},fX=function(X){if(e0(X)){var $=h7();return pX(X.reduce($.concat,$.empty))}return U5},d7=function(X){var $=x7(X);return function(Q){return function(Y){return $(K(Y,f7(Q)))}}},n7=function(X){return function($){var Q=$.length,Y=Math.round(X)%Q;if(Z4(Math.abs(Y),$)||Y===0)return U5($);if(Y<0){var J=G4(-Y)($),Z=J[0],V=J[1];return K(V,f7(Z))}else return n7(Y-Q)($)}},H4=$4,VY=function(X){return e0(X)?O(X):E},j4=function(X){return function($){var Q=Math.max(0,Math.floor($)),Y=[X(0)];for(var J=1;J<Q;J++)Y.push(X(J));return Y}},dV=function(X){return j4(function(){return X})},P4=function(X,$){return X<=$?j4(function(Q){return X+Q})($-X+1):[X]},DY=function(X){return[U0(X),v0(X)]},qY=function(X){return[d1(X),x1(X)]},nV=function(X){return J4([x1(X)],X.slice(0,-1).reverse(),!0)},fV=function(X){return function($){var Q={};for(var Y=0,J=$;Y<J.length;Y++){var Z=J[Y],V=X(Z);if(n.call(Q,V))Q[V].push(Z);else Q[V]=[Z]}return Q}},pX=function(X){return function($){return $.slice().sort(X.compare)}},pV=function(X,$){return function(Q){return X<0||X>Q.length?E:O(c7(X,$,Q))}},oV=function(X,$){return LY(X,function(){return $})},LY=function(X,$){return function(Q){return Z4(X,Q)?E:O(_7(X,$(Q[X]),Q))}},U5=H4,N1=function(X){return[X]},wY=function(X,$,Q){var Y=[Q(X[0],$[0])],J=Math.min(X.length,$.length);for(var Z=1;Z<J;Z++)Y[Z]=Q(X[Z],$[Z]);return Y},iV=function(X){var $=[X[0][0]],Q=[X[0][1]];for(var Y=1;Y<X.length;Y++)$[Y]=X[Y][0],Q[Y]=X[Y][1];return[$,Q]},z4=function(X){return function($){var Q=[X,$[0]];for(var Y=1;Y<$.length;Y++)Q.push(X,$[Y]);return Q}},oX=function(X){return function($){var Q=v0($);return e0(Q)?K(Q,z4(X),c1(U0($))):U5($)}},CY=YY,NY=$Y,TY=function(X){return function($){var Q=H4(X(0,U0($)));for(var Y=1;Y<$.length;Y++)Q.push.apply(Q,X(Y,$[Y]));return Q}},p7=function(X){return function($){var Q=X($),Y=Q[0],J=Q[1],Z=[Y],V=J;while(e0(V)){var D=X(V),L=D[0],B=D[1];Z.push(L),V=B}return Z}},G4=function(X){return function($){var Q=Math.max(1,X);return Q>=$.length?[U5($),[]]:[K($.slice(1,Q),c1(U0($))),$.slice(Q)]}},iX=function(X){return p7(G4(X))},b0=function(X,$){return K(X,$6($))},rX=function(X,$){return K(X,Q6($))},V4=function(X,$){return K(X,EY($))},vY=function(X,$){return K(X,X6($))},D4=function(X,$,Q){return K(X,OY($,Q))},q4=function(X){var $=NY(X);return function(Q,Y){return K(Q,$(Y))}},K4=function(X,$,Q){return K(X,gY($,Q))},sX=function(X){var $=IY(X);return function(Q,Y){return K(Q,$(Y))}},AY=function(X,$){return K(X,WY($))},tX=function(X,$,Q){return K(X,MY($,Q))},aX=function(X){var $=CY(X);return function(Q,Y){return K(Q,$(Y))}},eX=function(X,$,Q){return K(X,FY($,Q))},RY=function(X){var $=i7(X);return function(Q,Y){return K(Q,$(Y))}},SY=function(X){return function($){return K($,KY(X()))}},WY=SY,EY=function(X){return _1(function($){return K(X,$6($))})},_1=s(2,function(X,$){return K(X,TY(function(Q,Y){return $(Y,Q)}))}),X6=function(X){return function($){var Q=v0($),Y=[X($)];while(e0(Q))Y.push(X(Q)),Q=v0(Q);return Y}},rV=X6(u),sV=_1(u),$6=function(X){return Q6(function($,Q){return X(Q)})},Q6=function(X){return function($){var Q=[X(0,U0($))];for(var Y=1;Y<$.length;Y++)Q.push(X(Y,$[Y]));return Q}},OY=XY,MY=_X,gY=QY,FY=xX,IY=function(X){var $=i7(X);return function(Q){return $(function(Y,J){return Q(J)})}},o7=function(X){return i7(X)(function($,Q){return Q})},i7=function(X){return function($){return function(Q){var Y=X.map($(0,U0(Q)),N1);for(var J=1;J<Q.length;J++)Y=X.ap(X.map(Y,function(Z){return function(V){return K(Z,w5(V))}}),$(J,Q[J]));return Y}}},Y6=a0,z0="NonEmptyArray",tV=JY,aV=function(){return{concat:f7}},eV=ZY,XD=function(X){var $=d7(X);return{concat:function(Q,Y){return $(Y)(Q)}}},r7={URI:z0,map:b0},$D=M0(r7),QD={URI:z0,of:N1},YD={URI:z0,map:b0,mapWithIndex:rX},s7={URI:z0,map:b0,ap:V4},JD=r0(s7),ZD=s0(s7),HD={URI:z0,map:b0,ap:V4,of:N1},J6={URI:z0,map:b0,ap:V4,chain:_1},jD=q5(J6),PD={URI:z0,map:b0,ap:V4,of:N1,chain:_1},zD={URI:z0,reduce:D4,foldMap:q4,reduceRight:K4},GD={URI:z0,reduce:D4,foldMap:q4,reduceRight:K4,reduceWithIndex:tX,foldMapWithIndex:aX,reduceRightWithIndex:eX},VD={URI:z0,map:b0,reduce:D4,foldMap:q4,reduceRight:K4,traverse:sX,sequence:o7},DD={URI:z0,map:b0,mapWithIndex:rX,reduce:D4,foldMap:q4,reduceRight:K4,traverse:sX,sequence:o7,reduceWithIndex:tX,foldMapWithIndex:aX,reduceRightWithIndex:eX,traverseWithIndex:RY},qD={URI:z0,map:b0,alt:AY},KD={URI:z0,map:b0,extend:vY,extract:Y6},BD=N1(o0),LD=g0(r7),wD=F0(r7);var UD=I0(J6),CD=t0(s7),U0=a0,v0=function(X){return X.slice(1)},x1=Y4,d1=function(X){return X.slice(0,-1)},ND=HY,TD=jY,vD=function(X){return function($){return $.reduce(X.concat)}},AD=function(X){return function($){return X(U0($),v0($))}},RD=function(X){return function($){return X(d1($),x1($))}},yY=function(X){return function($){return J4([X(U0($))],v0($),!0)}},SD=function(X){return yY(function(){return X})},bY=function(X){return function($){return K(d1($),w5(X(x1($))))}},WD=function(X){return bY(function(){return X})},ED=k7,OD=_1,hY=function(X){return function($){return VY($.filter(function(Q,Y){return X(Y,Q)}))}},FD=DY,ID=qY,H6=function(X,$){return K(X,w5($))},yD=z4,bD=nX,hD={URI:z0,of:N1,map:b0,mapWithIndex:rX,ap:V4,chain:_1,extend:vY,extract:Y6,reduce:D4,foldMap:q4,reduceRight:K4,traverse:sX,sequence:o7,reduceWithIndex:tX,foldMapWithIndex:aX,reduceRightWithIndex:eX,traverseWithIndex:RY,alt:AY};var T1={};k1(T1,{zipWith:()=>{{return tY}},zip:()=>{{return aY}},zero:()=>{{return R5}},wither:()=>{{return Aq}},wilt:()=>{{return Rq}},updateAt:()=>{{return Zq}},unzip:()=>{{return Vq}},unsafeUpdateAt:()=>{{return AJ}},unsafeInsertAt:()=>{{return sq}},unsafeDeleteAt:()=>{{return RJ}},uniq:()=>{{return Kq}},union:()=>{{return L6}},unfold:()=>{{return g6}},traverseWithIndex:()=>{{return M6}},traverse:()=>{{return LJ}},toArray:()=>{{return tq}},takeRight:()=>{{return aD}},takeLeftWhile:()=>{{return eD}},takeLeft:()=>{{return tD}},tail:()=>{{return rD}},splitAt:()=>{{return XJ}},spanLeft:()=>{{return Xq}},sortBy:()=>{{return Bq}},sort:()=>{{return Gq}},some:()=>{{return SJ}},snoc:()=>{{return PK}},size:()=>{{return iD}},sequence:()=>{{return w4}},separate:()=>{{return S5}},scanRight:()=>{{return oD}},scanLeft:()=>{{return pD}},rotate:()=>{{return qq}},rights:()=>{{return Pq}},reverse:()=>{{return jq}},replicate:()=>{{return xD}},reduceWithIndex:()=>{{return E5}},reduceRightWithIndex:()=>{{return L4}},reduceRight:()=>{{return V9}},reduce:()=>{{return z9}},readonlyArray:()=>{{return GK}},range:()=>{{return HK}},prependW:()=>{{return cD}},prependToAll:()=>{{return zK}},prependAll:()=>{{return eY}},prepend:()=>{{return mD}},partitionWithIndex:()=>{{return W6}},partitionMapWithIndex:()=>{{return E6}},partitionMap:()=>{{return KJ}},partition:()=>{{return qJ}},of:()=>{{return o1}},modifyAt:()=>{{return sY}},matchW:()=>{{return xY}},matchRightW:()=>{{return pY}},matchRight:()=>{{return oY}},matchLeftW:()=>{{return nY}},matchLeft:()=>{{return fY}},match:()=>{{return dY}},mapWithIndex:()=>{{return VJ}},map:()=>{{return A6}},makeBy:()=>{{return mY}},lookup:()=>{{return X9}},let:()=>{{return QK}},lefts:()=>{{return zq}},last:()=>{{return z6}},isOutOfBound:()=>{{return N5}},isNonEmpty:()=>{{return r}},isEmpty:()=>{{return X1}},intersperse:()=>{{return Dq}},intersection:()=>{{return w6}},intercalate:()=>{{return c6}},insertAt:()=>{{return Jq}},init:()=>{{return sD}},head:()=>{{return P6}},guard:()=>{{return lq}},getUnionSemigroup:()=>{{return UJ}},getUnionMonoid:()=>{{return Wq}},getShow:()=>{{return F6}},getSemigroup:()=>{{return wJ}},getOrd:()=>{{return y6}},getMonoid:()=>{{return Sq}},getIntersectionSemigroup:()=>{{return Eq}},getEq:()=>{{return I6}},getDifferenceMagma:()=>{{return Oq}},fromPredicate:()=>{{return dD}},fromOptionK:()=>{{return Uq}},fromOption:()=>{{return cY}},fromEitherK:()=>{{return rq}},fromEither:()=>{{return _Y}},fromArray:()=>{{return aq}},foldRight:()=>{{return fD}},foldMapWithIndex:()=>{{return B4}},foldMap:()=>{{return G9}},foldLeft:()=>{{return nD}},flatten:()=>{{return Tq}},flatMap:()=>{{return $1}},flap:()=>{{return Mq}},findLastMap:()=>{{return K6}},findLastIndex:()=>{{return B6}},findLast:()=>{{return q6}},findIndex:()=>{{return G6}},findFirstMap:()=>{{return D6}},findFirst:()=>{{return V6}},filterWithIndex:()=>{{return BJ}},filterMapWithIndex:()=>{{return R6}},filterMap:()=>{{return S6}},filterE:()=>{{return iq}},filter:()=>{{return DJ}},extend:()=>{{return O6}},exists:()=>{{return eq}},every:()=>{{return m6}},empty:()=>{{return f}},elem:()=>{{return T5}},duplicate:()=>{{return vq}},dropRight:()=>{{return Qq}},dropLeftWhile:()=>{{return Yq}},dropLeft:()=>{{return $q}},difference:()=>{{return U6}},deleteAt:()=>{{return Hq}},cons:()=>{{return jK}},concatW:()=>{{return $J}},concat:()=>{{return Nq}},comprehension:()=>{{return Cq}},compact:()=>{{return W5}},chunksOf:()=>{{return wq}},chop:()=>{{return Lq}},chainWithIndex:()=>{{return iY}},chainRecDepthFirst:()=>{{return K9}},chainRecBreadthFirst:()=>{{return B9}},chainFirst:()=>{{return hq}},chain:()=>{{return ZK}},bindTo:()=>{{return $K}},bind:()=>{{return YK}},appendW:()=>{{return _D}},append:()=>{{return e7}},apSecond:()=>{{return Iq}},apS:()=>{{return JK}},apFirst:()=>{{return Fq}},ap:()=>{{return GJ}},altW:()=>{{return PJ}},alt:()=>{{return zJ}},_chainRecDepthFirst:()=>{{return j9}},_chainRecBreadthFirst:()=>{{return P9}},Zero:()=>{{return NJ}},Witherable:()=>{{return TJ}},Unfoldable:()=>{{return uq}},URI:()=>{{return m}},TraversableWithIndex:()=>{{return fq}},Traversable:()=>{{return u6}},Pointed:()=>{{return CJ}},Monad:()=>{{return bq}},FunctorWithIndex:()=>{{return gq}},Functor:()=>{{return D9}},FromEither:()=>{{return vJ}},FoldableWithIndex:()=>{{return nq}},Foldable:()=>{{return dq}},FilterableWithIndex:()=>{{return xq}},Filterable:()=>{{return _q}},Extend:()=>{{return cq}},Do:()=>{{return XK}},Compactable:()=>{{return h6}},ChainRecDepthFirst:()=>{{return pq}},ChainRecBreadthFirst:()=>{{return oq}},Chain:()=>{{return b6}},Apply:()=>{{return q9}},Applicative:()=>{{return yq}},Alternative:()=>{{return mq}},Alt:()=>{{return kq}}});var uY={equals:function(X,$){return X===$}},j6={equals:uY.equals,compare:function(X,$){return X<$?-1:X>$?1:0}},fI={equals:uY.equals,compare:j6.compare,top:Infinity,bottom:(-Infinity)};var uD={concat:function(X,$){return X-$}},kY={concat:function(X,$){return X+$}},lY={concat:function(X,$){return X*$}},pI={concat:kY.concat,empty:0},oI={concat:lY.concat,empty:1},iI={add:kY.concat,zero:0,mul:lY.concat,one:1,sub:uD.concat,degree:function(X){return 1},div:function(X,$){return X/$},mod:function(X,$){return X%$}};var A0=function(X,$){return{left:X,right:$}};function n1(X,$){return function(Q){var Y=X.traverse(Q);return function(J,Z){return Q.map(Y(J,Z),$.separate)}}}function f1(X,$){return function(Q){var Y=X.traverse(Q);return function(J,Z){return Q.map(Y(J,Z),$.compact)}}}function t7(X){return function($){var Q=X.wither($);return function(Y){return function(J){return Q(J,function(Z){return $.map(Y(Z),function(V){return V?O(Z):E})})}}}}function a7(X,$){return function(Q){return Q?$.of(void 0):X.zero()}}function dD(X){return function($){return X($)?[$]:f}}function X9(X,$){return $===void 0?function(Q){return X9(X,Q)}:N5(X,$)?E:O($[X])}function eD(X){return function($){var Q=[];for(var Y=0,J=$;Y<J.length;Y++){var Z=J[Y];if(!X(Z))break;Q.push(Z)}var V=Q.length;return V===$.length?$:V===0?f:Q}}function Xq(X){return function($){var Q=XJ(rY($,X))($),Y=Q[0],J=Q[1];return{init:Y,rest:J}}}function Yq(X){return function($){var Q=rY($,X);return Q===0?$:Q===$.length?f:$.slice(Q)}}function V6(X){return function($){for(var Q=0;Q<$.length;Q++)if(X($[Q]))return O($[Q]);return E}}function q6(X){return function($){for(var Q=$.length-1;Q>=0;Q--)if(X($[Q]))return O($[Q]);return E}}function aY(X,$){if($===void 0)return function(Q){return aY(Q,X)};return tY(X,$,function(Q,Y){return[Q,Y]})}function T5(X){return function($,Q){if(Q===void 0){var Y=T5(X);return function(V){return Y($,V)}}var J=function(V){return X.equals(V,$)},Z=0;for(;Z<Q.length;Z++)if(J(Q[Z]))return!0;return!1}}function Cq(X,$,Q){if(Q===void 0)Q=function(){return!0};var Y=function(J,Z){return r(Z)?$1(a0(Z),function(V){return Y(K(J,e7(V)),L5(Z))}):Q.apply(void 0,J)?[$.apply(void 0,J)]:f};return Y(f,X)}function L6(X){var $=sQ(X);return function(Q,Y){if(Y===void 0){var J=L6(X);return function(Z){return J(Z,Q)}}return r(Q)&&r(Y)?$(Y)(Q):r(Q)?Q:Y}}function w6(X){var $=T5(X);return function(Q,Y){if(Y===void 0){var J=w6(X);return function(Z){return J(Z,Q)}}return Q.filter(function(Z){return $(Z,Y)})}}function U6(X){var $=T5(X);return function(Q,Y){if(Y===void 0){var J=U6(X);return function(Z){return J(Z,Q)}}return Q.filter(function(Z){return!$(Z,Y)})}}function m6(X){return function($){return $.every(X)}}var lD=function(X,$,Q){if(Q||arguments.length===2){for(var Y=0,J=$.length,Z;Y<J;Y++)if(Z||!(Y in $)){if(!Z)Z=Array.prototype.slice.call($,0,Y);Z[Y]=$[Y]}}return X.concat(Z||Array.prototype.slice.call($))},X1=function(X){return X.length===0},r=E1,mD=B5,cD=FX,e7=oQ,_D=IX,mY=function(X,$){return X<=0?f:uX($)(X)},xD=function(X,$){return mY(X,function(){return $})},cY=function(X){return W1(X)?f:[X.value]},_Y=function(X){return U1(X)?f:[X.right]},xY=function(X,$){return function(Q){return r(Q)?$(Q):X()}},dY=xY,nY=function(X,$){return function(Q){return r(Q)?$(a0(Q),L5(Q)):X()}},fY=nY,nD=fY,pY=function(X,$){return function(Q){return r(Q)?$(dX(Q),Y4(Q)):X()}},oY=pY,fD=oY,iY=function(X){return function($){if(X1($))return f;var Q=[];for(var Y=0;Y<$.length;Y++)Q.push.apply(Q,X(Y,$[Y]));return Q}},pD=function(X,$){return function(Q){var Y=Q.length,J=new Array(Y+1);J[0]=X;for(var Z=0;Z<Y;Z++)J[Z+1]=$(J[Z],Q[Z]);return J}},oD=function(X,$){return function(Q){var Y=Q.length,J=new Array(Y+1);J[Y]=X;for(var Z=Y-1;Z>=0;Z--)J[Z]=$(Q[Z],J[Z+1]);return J}},iD=function(X){return X.length},N5=gX,P6=function(X){return r(X)?O(a0(X)):E},z6=function(X){return r(X)?O(Y4(X)):E},rD=function(X){return r(X)?O(L5(X)):E},sD=function(X){return r(X)?O(dX(X)):E},tD=function(X){return function($){return N5(X,$)?$:X===0?f:$.slice(0,X)}},aD=function(X){return function($){return N5(X,$)?$:X===0?f:$.slice(-X)}},rY=function(X,$){var Q=X.length,Y=0;for(;Y<Q;Y++)if(!$(X[Y]))break;return Y},$q=function(X){return function($){return X<=0||X1($)?$:X>=$.length?f:$.slice(X,$.length)}},Qq=function(X){return function($){return X<=0||X1($)?$:X>=$.length?f:$.slice(0,$.length-X)}},G6=function(X){return function($){for(var Q=0;Q<$.length;Q++)if(X($[Q]))return O(Q);return E}},D6=function(X){return function($){for(var Q=0;Q<$.length;Q++){var Y=X($[Q]);if(B0(Y))return Y}return E}},K6=function(X){return function($){for(var Q=$.length-1;Q>=0;Q--){var Y=X($[Q]);if(B0(Y))return Y}return E}},B6=function(X){return function($){for(var Q=$.length-1;Q>=0;Q--)if(X($[Q]))return O(Q);return E}},Jq=function(X,$){return function(Q){return X<0||X>Q.length?E:O(yX(X,$,Q))}},Zq=function(X,$){return sY(X,function(){return $})},Hq=function(X){return function($){return N5(X,$)?E:O(RJ(X,$))}},sY=function(X,$){return function(Q){return N5(X,Q)?E:O(AJ(X,$(Q[X]),Q))}},jq=function(X){return X.length<=1?X:X.slice().reverse()},Pq=function(X){var $=[];for(var Q=0;Q<X.length;Q++){var Y=X[Q];if(Y._tag==="Right")$.push(Y.right)}return $},zq=function(X){var $=[];for(var Q=0;Q<X.length;Q++){var Y=X[Q];if(Y._tag==="Left")$.push(Y.left)}return $},Gq=function(X){return function($){return $.length<=1?$:$.slice().sort(X.compare)}},tY=function(X,$,Q){var Y=[],J=Math.min(X.length,$.length);for(var Z=0;Z<J;Z++)Y[Z]=Q(X[Z],$[Z]);return Y},Vq=function(X){var $=[],Q=[];for(var Y=0;Y<X.length;Y++)$[Y]=X[Y][0],Q[Y]=X[Y][1];return[$,Q]},eY=function(X){var $=lX(X);return function(Q){return r(Q)?$(Q):Q}},Dq=function(X){var $=mX(X);return function(Q){return r(Q)?$(Q):Q}},qq=function(X){var $=hX(X);return function(Q){return r(Q)?$(Q):Q}},Kq=function(X){var $=bX(X);return function(Q){return r(Q)?$(Q):Q}},Bq=function(X){var $=rQ(X);return function(Q){return r(Q)?$(Q):Q}},Lq=function(X){var $=cX(X);return function(Q){return r(Q)?$(Q):f}},XJ=function(X){return function($){return X>=1&&r($)?u7(X)($):X1($)?[$,f]:[f,$]}},wq=function(X){var $=aQ(X);return function(Q){return r(Q)?$(Q):f}},Uq=function(X){return function(){var $=[];for(var Q=0;Q<arguments.length;Q++)$[Q]=arguments[Q];return cY(X.apply(void 0,$))}},$J=function(X){return function($){return X1($)?X:X1(X)?$:$.concat(X)}},Nq=$J,X0=function(X,$){return K(X,A6($))},$9=function(X,$){return K(X,VJ($))},O1=function(X,$){return K(X,GJ($))},Q9=function(X,$){return K(X,DJ($))},Y9=function(X,$){return K(X,S6($))},J9=function(X,$){return K(X,qJ($))},Z9=function(X,$){return K(X,KJ($))},QJ=function(X,$){return K(X,W6($))},YJ=function(X,$){return K(X,E6($))},C6=function(X,$){return K(X,zJ($))},p1=function(X,$,Q){return K(X,z9($,Q))},v5=function(X){var $=G9(X);return function(Q,Y){return K(Q,$(Y))}},A5=function(X,$,Q){return K(X,V9($,Q))},N6=function(X,$,Q){return K(X,E5($,Q))},T6=function(X){var $=B4(X);return function(Q,Y){return K(Q,$(Y))}},v6=function(X,$,Q){return K(X,L4($,Q))},JJ=function(X,$){return K(X,R6($))},ZJ=function(X,$){return K(X,BJ($))},HJ=function(X,$){return K(X,O6($))},H9=function(X){var $=LJ(X);return function(Q,Y){return K(Q,$(Y))}},jJ=function(X){var $=M6(X);return function(Q,Y){return K(Q,$(Y))}},j9=function(X,$){return K(X,K9($))},P9=function(X,$){return K(X,B9($))},o1=eQ,R5=function(){return f},PJ=function(X){return function($){return $.concat(X())}},zJ=PJ,GJ=function(X){return $1(function($){return K(X,A6($))})},$1=s(2,function(X,$){return K(X,iY(function(Q,Y){return $(Y,Q)}))}),Tq=$1(u),A6=function(X){return function($){return $.map(function(Q){return X(Q)})}},VJ=function(X){return function($){return $.map(function(Q,Y){return X(Y,Q)})}},S5=function(X){var $=[],Q=[];for(var Y=0,J=X;Y<J.length;Y++){var Z=J[Y];if(Z._tag==="Left")$.push(Z.left);else Q.push(Z.right)}return A0($,Q)},DJ=function(X){return function($){return $.filter(X)}},R6=function(X){return function($){var Q=[];for(var Y=0;Y<$.length;Y++){var J=X(Y,$[Y]);if(B0(J))Q.push(J.value)}return Q}},S6=function(X){return R6(function($,Q){return X(Q)})},W5=S6(u),qJ=function(X){return W6(function($,Q){return X(Q)})},W6=function(X){return function($){var Q=[],Y=[];for(var J=0;J<$.length;J++){var Z=$[J];if(X(J,Z))Y.push(Z);else Q.push(Z)}return A0(Q,Y)}},KJ=function(X){return E6(function($,Q){return X(Q)})},E6=function(X){return function($){var Q=[],Y=[];for(var J=0;J<$.length;J++){var Z=X(J,$[J]);if(Z._tag==="Left")Q.push(Z.left);else Y.push(Z.right)}return A0(Q,Y)}},BJ=function(X){return function($){return $.filter(function(Q,Y){return X(Y,Q)})}},O6=function(X){return function($){return $.map(function(Q,Y){return X($.slice(Y))})}},vq=O6(u),B4=function(X){return function($){return function(Q){return Q.reduce(function(Y,J,Z){return X.concat(Y,$(Z,J))},X.empty)}}},z9=function(X,$){return E5(X,function(Q,Y,J){return $(Y,J)})},G9=function(X){var $=B4(X);return function(Q){return $(function(Y,J){return Q(J)})}},E5=function(X,$){return function(Q){var Y=Q.length,J=X;for(var Z=0;Z<Y;Z++)J=$(Z,J,Q[Z]);return J}},V9=function(X,$){return L4(X,function(Q,Y,J){return $(Y,J)})},L4=function(X,$){return function(Q){return Q.reduceRight(function(Y,J,Z){return $(Z,J,Y)},X)}},LJ=function(X){var $=M6(X);return function(Q){return $(function(Y,J){return Q(J)})}},w4=function(X){return function($){return p1($,X.of(R5()),function(Q,Y){return X.ap(X.map(Q,function(J){return function(Z){return K(J,e7(Z))}}),Y)})}},M6=function(X){return function($){return E5(X.of(R5()),function(Q,Y,J){return X.ap(X.map(Y,function(Z){return function(V){return K(Z,e7(V))}}),$(Q,J))})}},Aq=function(X){var $=k6(X);return function(Q){return function(Y){return $(Y,Q)}}},Rq=function(X){var $=l6(X);return function(Q){return function(Y){return $(Y,Q)}}},g6=function(X,$){var Q=[],Y=X;while(!0){var J=$(Y);if(B0(J)){var Z=J.value,V=Z[0],D=Z[1];Q.push(V),Y=D}else break}return Q},m="ReadonlyArray",F6=function(X){return{show:function($){return"[".concat($.map(X.show).join(", "),"]")}}},wJ=function(){return{concat:function(X,$){return X1(X)?$:X1($)?X:X.concat($)}}},Sq=function(){return{concat:wJ().concat,empty:f}},I6=function(X){return y0(function($,Q){return $.length===Q.length&&$.every(function(Y,J){return X.equals(Y,Q[J])})})},y6=function(X){return b7(function($,Q){var Y=$.length,J=Q.length,Z=Math.min(Y,J);for(var V=0;V<Z;V++){var D=X.compare($[V],Q[V]);if(D!==0)return D}return j6.compare(Y,J)})},UJ=function(X){var $=L6(X);return{concat:function(Q,Y){return $(Y)(Q)}}},Wq=function(X){return{concat:UJ(X).concat,empty:f}},Eq=function(X){var $=w6(X);return{concat:function(Q,Y){return $(Y)(Q)}}},Oq=function(X){var $=U6(X);return{concat:function(Q,Y){return $(Y)(Q)}}},D9={URI:m,map:X0},Mq=M0(D9),CJ={URI:m,of:o1},gq={URI:m,map:X0,mapWithIndex:$9},q9={URI:m,map:X0,ap:O1},Fq=r0(q9),Iq=s0(q9),yq={URI:m,map:X0,ap:O1,of:o1},b6={URI:m,map:X0,ap:O1,chain:$1},bq={URI:m,map:X0,ap:O1,of:o1,chain:$1},hq=q5(b6),uq={URI:m,unfold:g6},kq={URI:m,map:X0,alt:C6},NJ={URI:m,zero:R5},lq=a7(NJ,CJ),mq={URI:m,map:X0,ap:O1,of:o1,alt:C6,zero:R5},cq={URI:m,map:X0,extend:HJ},h6={URI:m,compact:W5,separate:S5},_q={URI:m,map:X0,compact:W5,separate:S5,filter:Q9,filterMap:Y9,partition:J9,partitionMap:Z9},xq={URI:m,map:X0,mapWithIndex:$9,compact:W5,separate:S5,filter:Q9,filterMap:Y9,partition:J9,partitionMap:Z9,partitionMapWithIndex:YJ,partitionWithIndex:QJ,filterMapWithIndex:JJ,filterWithIndex:ZJ},dq={URI:m,reduce:p1,foldMap:v5,reduceRight:A5},nq={URI:m,reduce:p1,foldMap:v5,reduceRight:A5,reduceWithIndex:N6,foldMapWithIndex:T6,reduceRightWithIndex:v6},u6={URI:m,map:X0,reduce:p1,foldMap:v5,reduceRight:A5,traverse:H9,sequence:w4},fq={URI:m,map:X0,mapWithIndex:$9,reduce:p1,foldMap:v5,reduceRight:A5,reduceWithIndex:N6,foldMapWithIndex:T6,reduceRightWithIndex:v6,traverse:H9,sequence:w4,traverseWithIndex:jJ},K9=function(X){return function($){var Q=lD([],X($),!0),Y=[];while(Q.length>0){var J=Q.shift();if(U1(J))Q.unshift.apply(Q,X(J.left));else Y.push(J.right)}return Y}},pq={URI:m,map:X0,ap:O1,chain:$1,chainRec:j9},B9=function(X){return function($){var Q=X($),Y=[],J=[];function Z(B){if(U1(B))X(B.left).forEach(function(R){return Y.push(R)});else J.push(B.right)}for(var V=0,D=Q;V<D.length;V++){var L=D[V];Z(L)}while(Y.length>0)Z(Y.shift());return J}},oq={URI:m,map:X0,ap:O1,chain:$1,chainRec:P9},k6=f1(u6,h6),l6=n1(u6,h6),TJ={URI:m,map:X0,compact:W5,separate:S5,filter:Q9,filterMap:Y9,partition:J9,partitionMap:Z9,reduce:p1,foldMap:v5,reduceRight:A5,traverse:H9,sequence:w4,wither:k6,wilt:l6},iq=t7(TJ),vJ={URI:m,fromEither:_Y},rq=K5(vJ),sq=yX,AJ=function(X,$,Q){return r(Q)?iQ(X,$,Q):Q},RJ=function(X,$){var Q=$.slice();return Q.splice(X,1),Q},tq=function(X){return X.slice()},aq=function(X){return X1(X)?f:X.slice()},f=MX,SJ=function(X){return function($){return $.some(X)}},eq=SJ,c6=function(X){var $=k7(X);return function(Q){return dY(function(){return X.empty},$(Q))}},XK=o1(o0),$K=g0(D9),QK=F0(D9);var YK=I0(b6),JK=t0(q9),ZK=$1,HK=tQ,jK=PY,PK=zY,zK=eY,GK={URI:m,compact:W5,separate:S5,map:X0,ap:O1,of:o1,chain:$1,filter:Q9,filterMap:Y9,partition:J9,partitionMap:Z9,mapWithIndex:$9,partitionMapWithIndex:YJ,partitionWithIndex:QJ,filterMapWithIndex:JJ,filterWithIndex:ZJ,alt:C6,zero:R5,unfold:g6,reduce:p1,foldMap:v5,reduceRight:A5,traverse:H9,sequence:w4,reduceWithIndex:N6,foldMapWithIndex:T6,reduceRightWithIndex:v6,traverseWithIndex:jJ,extend:HJ,wither:k6,wilt:l6};function KK(X){return function($){return X($)?[$]:[]}}function OK(X){return function($){var Q=[];for(var Y=0,J=$;Y<J.length;Y++){var Z=J[Y];if(!X(Z))break;Q.push(Z)}return Q}}function MK(X){return function($){var Q=_J(uJ($,X))($),Y=Q[0],J=Q[1];return{init:Y,rest:J}}}function IK(X){return function($){return $.slice(uJ($,X))}}function bK(X){return V6(X)}function uK(X){return q6(X)}function mJ(X,$){if($===void 0)return function(Q){return mJ(Q,X)};return lJ(X,$,function(Q,Y){return[Q,Y]})}function XB(X,$,Q){if(Q===void 0)Q=function(){return!0};var Y=function(J,Z){return a(Z)?Q1(U0(Z),function(V){return Y(K(J,L9(V)),v0(Z))}):Q.apply(void 0,J)?[$.apply(void 0,J)]:[]};return Y([],X)}function x6(X){var $=d7(X);return function(Q,Y){if(Y===void 0){var J=x6(X);return function(Z){return J(Z,Q)}}return a(Q)&&a(Y)?$(Y)(Q):a(Q)?J0(Q):J0(Y)}}function d6(X){var $=_6(X);return function(Q,Y){if(Y===void 0){var J=d6(X);return function(Z){return J(Z,Q)}}return Q.filter(function(Z){return $(Z,Y)})}}function n6(X){var $=_6(X);return function(Q,Y){if(Y===void 0){var J=n6(X);return function(Z){return J(Z,Q)}}return Q.filter(function(Z){return!$(Z,Y)})}}var i1=function(X){return X.length===0},a=e0,VK=c1,DK=l7,L9=w5,qK=m7,WJ=function(X,$){return X<=0?[]:j4($)(X)},EJ=function(X,$){return WJ(X,function(){return $})},OJ=function(X){return W1(X)?[]:[X.value]},MJ=function(X){return U1(X)?[]:[X.right]},gJ=function(X,$){return function(Q){return a(Q)?$(Q):X()}},BK=gJ,FJ=function(X,$){return function(Q){return a(Q)?$(U0(Q),v0(Q)):X()}},IJ=FJ,LK=IJ,yJ=function(X,$){return function(Q){return a(Q)?$(d1(Q),x1(Q)):X()}},bJ=yJ,wK=bJ,hJ=function(X){return function($){var Q=[];for(var Y=0;Y<$.length;Y++)Q.push.apply(Q,X(Y,$[Y]));return Q}},UK=function(X,$){return function(Q){var Y=Q.length,J=new Array(Y+1);J[0]=X;for(var Z=0;Z<Y;Z++)J[Z+1]=$(J[Z],Q[Z]);return J}},CK=function(X,$){return function(Q){var Y=Q.length,J=new Array(Y+1);J[Y]=X;for(var Z=Y-1;Z>=0;Z--)J[Z]=$(Q[Z],J[Z+1]);return J}},NK=function(X){return X.length},U4=Z4,TK=X9,vK=P6,AK=z6,RK=function(X){return a(X)?O(v0(X)):E},SK=function(X){return a(X)?O(d1(X)):E},WK=function(X){return function($){return U4(X,$)?J0($):$.slice(0,X)}},EK=function(X){return function($){return U4(X,$)?J0($):X===0?[]:$.slice(-X)}},uJ=function(X,$){var Q=X.length,Y=0;for(;Y<Q;Y++)if(!$(X[Y]))break;return Y},gK=function(X){return function($){return X<=0||i1($)?J0($):X>=$.length?[]:$.slice(X,$.length)}},FK=function(X){return function($){return X<=0||i1($)?J0($):X>=$.length?[]:$.slice(0,$.length-X)}},yK=G6,hK=D6,kK=K6,lK=B6,J0=function(X){return X.slice()},mK=function(X,$){return function(Q){return X<0||X>Q.length?E:O(KZ(X,$,Q))}},cK=function(X,$){return kJ(X,function(){return $})},_K=function(X){return function($){return U4(X,$)?E:O(LZ(X,$))}},kJ=function(X,$){return function(Q){return U4(X,Q)?E:O(BZ(X,$(Q[X]),Q))}},xK=function(X){return i1(X)?[]:X.slice().reverse()},dK=function(X){var $=[];for(var Q=0;Q<X.length;Q++){var Y=X[Q];if(Y._tag==="Right")$.push(Y.right)}return $},nK=function(X){var $=[];for(var Q=0;Q<X.length;Q++){var Y=X[Q];if(Y._tag==="Left")$.push(Y.left)}return $},fK=function(X){return function($){return $.length<=1?J0($):$.slice().sort(X.compare)}},lJ=function(X,$,Q){var Y=[],J=Math.min(X.length,$.length);for(var Z=0;Z<J;Z++)Y[Z]=Q(X[Z],$[Z]);return Y},pK=function(X){var $=[],Q=[];for(var Y=0;Y<X.length;Y++)$[Y]=X[Y][0],Q[Y]=X[Y][1];return[$,Q]},cJ=function(X){var $=z4(X);return function(Q){return a(Q)?$(Q):[]}},oK=function(X){var $=oX(X);return function(Q){return a(Q)?$(Q):J0(Q)}},iK=function(X){var $=n7(X);return function(Q){return a(Q)?$(Q):J0(Q)}},_6=T5,rK=function(X){var $=x7(X);return function(Q){return a(Q)?$(Q):J0(Q)}},sK=function(X){var $=fX(X);return function(Q){return a(Q)?$(Q):J0(Q)}},tK=function(X){var $=p7(X);return function(Q){return a(Q)?$(Q):[]}},_J=function(X){return function($){return X>=1&&a($)?G4(X)($):i1($)?[J0($),[]]:[[],J0($)]}},aK=function(X){var $=iX(X);return function(Q){return a(Q)?$(Q):[]}},eK=function(X){return function(){var $=[];for(var Q=0;Q<arguments.length;Q++)$[Q]=arguments[Q];return OJ(X.apply(void 0,$))}},xJ=function(X){return function($){return i1($)?J0(X):i1(X)?J0($):$.concat(X)}},$B=xJ,$0=function(X,$){return K(X,C4($))},w9=function(X,$){return K(X,sJ($))},M1=function(X,$){return K(X,rJ($))},U9=function(X,$){return K(X,tJ($))},C9=function(X,$){return K(X,s6($))},N9=function(X,$){return K(X,aJ($))},T9=function(X,$){return K(X,eJ($))},dJ=function(X,$){return K(X,t6($))},nJ=function(X,$){return K(X,a6($))},f6=function(X,$){return K(X,$Z($))},r1=function(X,$,Q){return K(X,X8($,Q))},O5=function(X){var $=YZ(X);return function(Q,Y){return K(Q,$(Y))}},M5=function(X,$,Q){return K(X,ZZ($,Q))},p6=function(X,$,Q){return K(X,$8($,Q))},o6=function(X){var $=JZ(X);return function(Q,Y){return K(Q,$(Y))}},i6=function(X,$,Q){return K(X,HZ($,Q))},fJ=function(X,$){return K(X,r6($))},pJ=function(X,$){return K(X,QZ($))},oJ=function(X,$){return K(X,e6($))},v9=function(X){var $=jZ(X);return function(Q,Y){return K(Q,$(Y))}},iJ=function(X){var $=Q8(X);return function(Q,Y){return K(Q,$(Y))}},QB=j9,YB=P9,s1=N1,g5=function(){return[]},C4=function(X){return function($){return $.map(function(Q){return X(Q)})}},rJ=function(X){return Q1(function($){return K(X,C4($))})},Q1=s(2,function(X,$){return K(X,hJ(function(Q,Y){return $(Y,Q)}))}),JB=Q1(u),sJ=function(X){return function($){return $.map(function(Q,Y){return X(Y,Q)})}},r6=function(X){return function($){var Q=[];for(var Y=0;Y<$.length;Y++){var J=X(Y,$[Y]);if(B0(J))Q.push(J.value)}return Q}},s6=function(X){return r6(function($,Q){return X(Q)})},F5=s6(u),I5=function(X){var $=[],Q=[];for(var Y=0,J=X;Y<J.length;Y++){var Z=J[Y];if(Z._tag==="Left")$.push(Z.left);else Q.push(Z.right)}return A0($,Q)},tJ=function(X){return function($){return $.filter(X)}},aJ=function(X){return t6(function($,Q){return X(Q)})},t6=function(X){return function($){var Q=[],Y=[];for(var J=0;J<$.length;J++){var Z=$[J];if(X(J,Z))Y.push(Z);else Q.push(Z)}return A0(Q,Y)}},eJ=function(X){return a6(function($,Q){return X(Q)})},a6=function(X){return function($){var Q=[],Y=[];for(var J=0;J<$.length;J++){var Z=X(J,$[J]);if(Z._tag==="Left")Q.push(Z.left);else Y.push(Z.right)}return A0(Q,Y)}},XZ=function(X){return function($){return $.concat(X())}},$Z=XZ,QZ=function(X){return function($){return $.filter(function(Q,Y){return X(Y,Q)})}},e6=function(X){return function($){return $.map(function(Q,Y){return X($.slice(Y))})}},ZB=e6(u),YZ=G9,JZ=B4,X8=z9,$8=E5,ZZ=V9,HZ=L4,jZ=function(X){var $=Q8(X);return function(Q){return $(function(Y,J){return Q(J)})}},N4=function(X){return function($){return r1($,X.of(g5()),function(Q,Y){return X.ap(X.map(Q,function(J){return function(Z){return K(J,L9(Z))}}),Y)})}},Q8=function(X){return function($){return $8(X.of(g5()),function(Q,Y,J){return X.ap(X.map(Y,function(Z){return function(V){return K(Z,L9(V))}}),$(Q,J))})}},HB=function(X){var $=P8(X);return function(Q){return function(Y){return $(Y,Q)}}},jB=function(X){var $=z8(X);return function(Q){return function(Y){return $(Y,Q)}}},Y8=function(X,$){var Q=[],Y=X;while(!0){var J=$(Y);if(B0(J)){var Z=J.value,V=Z[0],D=Z[1];Q.push(V),Y=D}else break}return Q},c="Array",PB=F6,PZ=function(){return{concat:function(X,$){return X.concat($)}}},zB=function(){return{concat:PZ().concat,empty:[]}},GB=I6,VB=y6,zZ=function(X){var $=x6(X);return{concat:function(Q,Y){return $(Y)(Q)}}},DB=function(X){return{concat:zZ(X).concat,empty:[]}},qB=function(X){var $=d6(X);return{concat:function(Q,Y){return $(Y)(Q)}}},KB=function(X){var $=n6(X);return{concat:function(Q,Y){return $(Y)(Q)}}},A9={URI:c,map:$0},BB=M0(A9),GZ={URI:c,of:s1},LB={URI:c,map:$0,mapWithIndex:w9},R9={URI:c,map:$0,ap:M1},wB=r0(R9),UB=s0(R9),CB={URI:c,map:$0,ap:M1,of:s1},J8={URI:c,map:$0,ap:M1,chain:Q1},NB=q5(J8),TB={URI:c,map:$0,ap:M1,of:s1,chain:Q1},vB={URI:c,unfold:Y8},AB={URI:c,map:$0,alt:f6},VZ={URI:c,zero:g5},RB=a7(VZ,GZ),SB={URI:c,map:$0,ap:M1,of:s1,alt:f6,zero:g5},WB={URI:c,map:$0,extend:oJ},Z8={URI:c,compact:F5,separate:I5},EB={URI:c,map:$0,compact:F5,separate:I5,filter:U9,filterMap:C9,partition:N9,partitionMap:T9},OB={URI:c,map:$0,mapWithIndex:w9,compact:F5,separate:I5,filter:U9,filterMap:C9,partition:N9,partitionMap:T9,partitionMapWithIndex:nJ,partitionWithIndex:dJ,filterMapWithIndex:fJ,filterWithIndex:pJ},H8={URI:c,reduce:r1,foldMap:O5,reduceRight:M5},MB={URI:c,reduce:r1,foldMap:O5,reduceRight:M5,reduceWithIndex:p6,foldMapWithIndex:o6,reduceRightWithIndex:i6},j8={URI:c,map:$0,reduce:r1,foldMap:O5,reduceRight:M5,traverse:v9,sequence:N4},gB={URI:c,map:$0,mapWithIndex:w9,reduce:r1,foldMap:O5,reduceRight:M5,reduceWithIndex:p6,foldMapWithIndex:o6,reduceRightWithIndex:i6,traverse:v9,sequence:N4,traverseWithIndex:iJ},P8=f1(j8,Z8),z8=n1(j8,Z8),DZ={URI:c,map:$0,compact:F5,separate:I5,filter:U9,filterMap:C9,partition:N9,partitionMap:T9,reduce:r1,foldMap:O5,reduceRight:M5,traverse:v9,sequence:N4,wither:P8,wilt:z8},FB=K9,IB={URI:c,map:$0,ap:M1,chain:Q1,chainRec:QB},yB=B9,bB={URI:c,map:$0,ap:M1,chain:Q1,chainRec:YB},hB=t7(DZ),qZ={URI:c,fromEither:MJ},uB=K5(qZ),KZ=c7,BZ=function(X,$,Q){return a(Q)?_7(X,$,Q):[]},LZ=function(X,$){var Q=$.slice();return Q.splice(X,1),Q},kB=m6,wZ=function(X){return function($){return $.some(X)}},lB=wZ,mB=c6,cB=s1(o0),_B=g0(A9),xB=F0(A9);var dB=I0(J8),nB=t0(R9),fB=Q1,pB=P4,oB=[],iB=Z6,rB=H6,sB=cJ,tB={URI:c,compact:F5,separate:I5,map:$0,ap:M1,of:s1,chain:Q1,filter:U9,filterMap:C9,partition:N9,partitionMap:T9,mapWithIndex:w9,partitionMapWithIndex:nJ,partitionWithIndex:dJ,filterMapWithIndex:fJ,filterWithIndex:pJ,alt:f6,zero:g5,unfold:Y8,reduce:r1,foldMap:O5,reduceRight:M5,traverse:v9,sequence:N4,reduceWithIndex:p6,foldMapWithIndex:o6,reduceRightWithIndex:i6,traverseWithIndex:iJ,extend:oJ,wither:P8,wilt:z8};var aB=function(){return{concat:function(X,$){return K(X,eB($))}}},UZ=function(){return{concat:aB().concat,empty:vQ}};var CZ=function(X){return function($){return!X($)}},eB=function(X){return function($){return function(Q){return $(Q)||X(Q)}}};function NZ(X){return function($){return X($)?T4($):t1}}var t1=E,T4=O;var $L=function(X){return X._tag==="Left"?t1:T4(X.right)},TZ=function(X,$){return K(X,v4($))},QL=function(X,$){return K(X,YL($))};var G8="Option";var vZ=function(X){return{concat:function($,Q){return g1($)?Q:g1(Q)?$:T4(X.concat($.value,Q.value))},empty:t1}},v4=function(X){return function($){return g1($)?t1:T4(X($.value))}},AZ={URI:G8,map:TZ},Ay=s(2,Q4(AZ)),Ry=I7(AZ);var YL=function(X){return function($){return g1($)?t1:g1(X)?t1:T4($.value(X.value))}};var JL=s(2,function(X,$){return g1(X)?t1:$(X.value)}),RZ={URI:G8,map:TZ,ap:QL,chain:JL};var Sy=s(2,function(X,$){return g1(X)?$():X});var ZL=$L,HL={URI:G8,fromEither:ZL},SZ=B0,g1=function(X){return X._tag==="None"};var jL=function(X){return function($){return g1($)?X():$.value}},WZ=jL;var Wy=s(2,C1(RZ)),Ey=s(2,OQ(HL,RZ));var PL=function(){return{concat:function(X,$){return I(X,$)}}},OZ=function(){return{concat:PL().concat,empty:u}};function MZ(X){return function($){return I($,X.fromIO)}}function gZ(X,$){var Q=C1($);return function(Y,J){return Q(Y,I(J,X.fromIO))}}function FZ(X){return function($,Q){if(Q===void 0){var Y=FZ(X);return function(B){return Y($,B)}}var J=Q.entries(),Z;while(!(Z=J.next()).done){var V=Z.value,D=V[0],L=V[1];if(X.equals(D,$))return O([D,L])}return E}}function V8(X){var $=FZ(X);return function(Q,Y){if(Y===void 0){var J=V8(X);return function(Z){return J(Q,Z)}}return K($(Q,Y),v4(function(Z){var V=Z[0],D=Z[1];return D}))}}var IZ=V8;var A4=function(X){return cQ(X)(X.empty)},$b={concat:_Q.concat,empty:void 0};var Qb={concat:xQ.concat,empty:!0},Yb={concat:dQ.concat,empty:!1};var Jb={concat:nQ.concat,empty:""},Zb={concat:fQ.concat,empty:0},Hb={concat:pQ.concat,empty:1};var F1={};k1(F1,{traverseSeqArrayWithIndex:()=>{{return kL}},traverseSeqArray:()=>{{return dZ}},traverseReadonlyNonEmptyArrayWithIndexSeq:()=>{{return _Z}},traverseReadonlyNonEmptyArrayWithIndex:()=>{{return cZ}},traverseReadonlyArrayWithIndexSeq:()=>{{return L8}},traverseReadonlyArrayWithIndex:()=>{{return B8}},traverseArrayWithIndex:()=>{{return hL}},traverseArray:()=>{{return xZ}},taskSeq:()=>{{return xL}},task:()=>{{return _L}},tapIO:()=>{{return lZ}},tap:()=>{{return kZ}},sequenceSeqArray:()=>{{return lL}},sequenceArray:()=>{{return uL}},of:()=>{{return u0}},never:()=>{{return mZ}},map:()=>{{return q8}},let:()=>{{return IL}},getSemigroup:()=>{{return dL}},getRaceMonoid:()=>{{return qL}},getMonoid:()=>{{return nL}},fromTask:()=>{{return R4}},fromIOK:()=>{{return WL}},fromIO:()=>{{return a1}},flatten:()=>{{return DL}},flatMapIO:()=>{{return uZ}},flatMap:()=>{{return k0}},flap:()=>{{return LL}},delay:()=>{{return VL}},chainIOK:()=>{{return EL}},chainFirstIOK:()=>{{return OL}},chainFirst:()=>{{return cL}},chain:()=>{{return mL}},bindTo:()=>{{return FL}},bind:()=>{{return yL}},asUnit:()=>{{return BL}},as:()=>{{return KL}},apSecond:()=>{{return CL}},apS:()=>{{return bL}},apFirst:()=>{{return UL}},ap:()=>{{return yZ}},URI:()=>{{return G0}},Pointed:()=>{{return wL}},MonadTask:()=>{{return AL}},MonadIO:()=>{{return vL}},Monad:()=>{{return TL}},Functor:()=>{{return y5}},FromTask:()=>{{return ML}},FromIO:()=>{{return E9}},Do:()=>{{return gL}},Chain:()=>{{return W9}},ApplySeq:()=>{{return bZ}},ApplyPar:()=>{{return S9}},ApplicativeSeq:()=>{{return hZ}},ApplicativePar:()=>{{return NL}},ApT:()=>{{return K8}}});function VL(X){return function($){return function(){return new Promise(function(Q){setTimeout(function(){Promise.resolve().then($).then(Q)},X)})}}}function qL(){return{concat:function(X,$){return function(){return Promise.race([Promise.resolve().then(X),Promise.resolve().then($)])}},empty:mZ}}var a1=function(X){return function(){return Promise.resolve().then(X)}},h0=function(X,$){return K(X,q8($))},e1=function(X,$){return K(X,yZ($))},D8=function(X,$){return k0(X,function(Q){return K($,q8(Q))})},q8=function(X){return function($){return function(){return Promise.resolve().then($).then(X)}}},yZ=function(X){return function($){return function(){return Promise.all([Promise.resolve().then($),Promise.resolve().then(X)]).then(function(Q){var Y=Q[0],J=Q[1];return Y(J)})}}},u0=function(X){return function(){return Promise.resolve(X)}},k0=s(2,function(X,$){return function(){return Promise.resolve().then(X).then(function(Q){return $(Q)()})}}),DL=k0(u),G0="Task",y5={URI:G0,map:h0},KL=s(2,Q4(y5)),BL=I7(y5),LL=M0(y5),wL={URI:G0,of:u0},S9={URI:G0,map:h0,ap:e1},UL=r0(S9),CL=s0(S9),NL={URI:G0,map:h0,ap:e1,of:u0},bZ={URI:G0,map:h0,ap:D8},hZ={URI:G0,map:h0,ap:D8,of:u0},W9={URI:G0,map:h0,ap:e1,chain:k0},TL={URI:G0,map:h0,of:u0,ap:e1,chain:k0},vL={URI:G0,map:h0,of:u0,ap:e1,chain:k0,fromIO:a1},R4=u,AL={URI:G0,map:h0,of:u0,ap:e1,chain:k0,fromIO:a1,fromTask:R4},E9={URI:G0,fromIO:a1},RL={flatMap:k0},SL={fromIO:E9.fromIO},uZ=SQ(SL,RL),kZ=s(2,C1(W9)),lZ=s(2,gZ(E9,W9)),WL=MZ(E9),EL=uZ,OL=lZ,ML={URI:G0,fromIO:a1,fromTask:R4},mZ=function(){return new Promise(function(X){return})},gL=u0(o0),FL=g0(y5),IL=F0(y5);var yL=I0(W9),bL=t0(S9),K8=u0(X4),cZ=function(X){return function($){return function(){return Promise.all($.map(function(Q,Y){return Promise.resolve().then(function(){return X(Y,Q)()})}))}}},B8=function(X){var $=cZ(X);return function(Q){return D5(Q)?$(Q):K8}},_Z=function(X){return function($){return function(){return g7($).reduce(function(Q,Y,J){return Q.then(function(Z){return Promise.resolve().then(X(J+1,Y)).then(function(V){return Z.push(V),Z})})},Promise.resolve().then(X(0,e5($))).then(M7))}}},L8=function(X){var $=_Z(X);return function(Q){return D5(Q)?$(Q):K8}},hL=B8,xZ=function(X){return B8(function($,Q){return X(Q)})},uL=xZ(u),kL=L8,dZ=function(X){return L8(function($,Q){return X(Q)})},lL=dZ(u),mL=k0,cL=kZ,_L={URI:G0,map:h0,of:u0,ap:e1,chain:k0,fromIO:a1,fromTask:R4},xL={URI:G0,map:h0,of:u0,ap:D8,chain:k0,fromIO:a1,fromTask:R4},dL=F7(bZ),nL=WQ(hZ);var b5={};k1(b5,{trimRight:()=>{{return eL}},trimLeft:()=>{{return aL}},trim:()=>{{return tL}},toUpperCase:()=>{{return iL}},toLowerCase:()=>{{return rL}},startsWith:()=>{{return Zw}},split:()=>{{return Yw}},slice:()=>{{return Xw}},size:()=>{{return Qw}},replace:()=>{{return sL}},isString:()=>{{return oL}},isEmpty:()=>{{return $w}},includes:()=>{{return Jw}},endsWith:()=>{{return Hw}},empty:()=>{{return pZ}},Show:()=>{{return pL}},Semigroup:()=>{{return fZ}},Ord:()=>{{return N}},Monoid:()=>{{return fL}},Eq:()=>{{return nZ}}});var nZ={equals:function(X,$){return X===$}},fZ={concat:function(X,$){return X+$}},pZ="",fL={concat:fZ.concat,empty:pZ},N={equals:nZ.equals,compare:function(X,$){return X<$?-1:X>$?1:0}},pL={show:function(X){return JSON.stringify(X)}},oL=function(X){return typeof X==="string"},iL=function(X){return X.toUpperCase()},rL=function(X){return X.toLowerCase()},sL=function(X,$){return function(Q){return Q.replace(X,$)}},tL=function(X){return X.trim()},aL=function(X){return X.trimLeft()},eL=function(X){return X.trimRight()},Xw=function(X,$){return function(Q){return Q.slice(X,$)}},$w=function(X){return X.length===0},Qw=function(X){return X.length},Yw=function(X){return function($){var Q=$.split(X);return E1(Q)?Q:[$]}},Jw=function(X,$){return function(Q){return Q.includes(X,$)}},Zw=function(X,$){return function(Q){return Q.startsWith(X,$)}},Hw=function(X,$){return function(Q){return Q.endsWith(X,$)}};function iZ(X){if(typeof X==="function")return iZ(N)(X);var $=S4(X);return function(Q){return function(Y){var J=[];for(var Z=0,V=$(Y);Z<V.length;Z++){var D=V[Z];J.push(Q(D,Y[D]))}return J}}}function O9(X){return function($,Q){if(Q===void 0){var Y=O9(X);return function(Z){return Y(Z,$)}}for(var J in $)if(!n.call(Q,J)||!X.equals($[J],Q[J]))return!1;return!0}}function w8(X,$){if($===void 0)return function(Q){return w8(X,Q)};return n.call($,X)?O($[X]):E}function M9(X){return function($){var Q={};for(var Y in $)if(n.call($,Y))Q[Y]=X(Y,$[Y]);return Q}}function C8(X){return M9(function($,Q){return X(Q)})}function h5(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];if(X.length===2)return h5(N).apply(void 0,X);var Q=S4(X[0]);return function(Y,J){return function(Z){var V=Y,D=Q(Z),L=D.length;for(var B=0;B<L;B++){var R=D[B];V=J(R,V,Z[R])}return V}}}function u5(X){if("compare"in X){var $=S4(X);return function(Q){return function(Y){return function(J){var Z=Q.empty,V=$(J),D=V.length;for(var L=0;L<D;L++){var B=V[L];Z=Q.concat(Z,Y(B,J[B]))}return Z}}}}return u5(N)(X)}function k5(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];if(X.length===2)return k5(N).apply(void 0,X);var Q=S4(X[0]);return function(Y,J){return function(Z){var V=Y,D=Q(Z),L=D.length;for(var B=L-1;B>=0;B--){var R=D[B];V=J(R,Z[R],V)}return V}}}function tZ(X){var $=vH(N)(X);return function(Q){return function(Y){return $(Y,Q)}}}function aZ(X){var $=b9(N)(X);return function(Q){return function(Y){return $(Y,Q)}}}function eZ(X){return v8(N)(X)}function g9(X){return function($){var Q={},Y={};for(var J in $)if(n.call($,J)){var Z=X(J,$[J]);switch(Z._tag){case"Left":Q[J]=Z.left;break;case"Right":Y[J]=Z.right;break}}return A0(Q,Y)}}function F9(X){return function($){var Q={},Y={};for(var J in $)if(n.call($,J)){var Z=$[J];if(X(J,Z))Y[J]=Z;else Q[J]=Z}return A0(Q,Y)}}function I9(X){return function($){var Q={};for(var Y in $)if(n.call($,Y)){var J=X(Y,$[Y]);if(B0(J))Q[Y]=J.value}return Q}}function y9(X){return function($){var Q={},Y=!1;for(var J in $)if(n.call($,J)){var Z=$[J];if(X(J,Z))Q[J]=Z;else Y=!0}return Y?Q:$}}function XH(X,$){var Q=N8(X,$);return function(Y){return Q(Y,u)}}function N8(X,$){return function(Q,Y){return $.reduce(Q,{},function(J,Z){var V=Y(Z),D=V[0],L=V[1];return J[D]=n.call(J,D)?X.concat(J[D],L):L,J})}}function $H(X){return function($){for(var Q in $)if(!X($[Q]))return!1;return!0}}function QH(X){return function($){for(var Q in $)if(X($[Q]))return!0;return!1}}function T8(X){return function($,Q){if(Q===void 0){var Y=T8(X);return function(Z){return Y($,Z)}}for(var J in Q)if(X.equals(Q[J],$))return!0;return!1}}function W4(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];if(X.length===1){var Q=h5(X[0]);return function(Y,J){return Q(Y,function(Z,V,D){return J(V,D)})}}return W4(N).apply(void 0,X)}function E4(X){if("compare"in X){var $=u5(X);return function(Q){var Y=$(Q);return function(J){return Y(function(Z,V){return J(V)})}}}return E4(N)(X)}function O4(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];if(X.length===1){var Q=k5(X[0]);return function(Y,J){return Q(Y,function(Z,V,D){return J(V,D)})}}return O4(N).apply(void 0,X)}function h9(X){if("compare"in X)return function($){return{show:function(Q){var Y=iZ(X)(function(J,Z){return"".concat(JSON.stringify(J),": ").concat($.show(Z))})(Q).join(", ");return Y===""?"{}":"{ ".concat(Y," }")}}};return h9(N)(X)}function SH(X){var $=O9(X);return y0(function(Q,Y){return $(Q)(Y)&&$(Y)(Q)})}function WH(X){return{concat:function($,Q){if(Y1($))return Q;if(Y1(Q))return $;var Y=Object.assign({},$);for(var J in Q)if(n.call(Q,J))Y[J]=n.call($,J)?X.concat($[J],Q[J]):Q[J];return Y},empty:U8}}function EH(X,$){return n.call($===void 0?this:$,X)}var oZ=function(X){return Object.keys(X).length},Y1=function(X){for(var $ in X)if(n.call(X,$))return!1;return!0},S4=function(X){return function($){return Object.keys($).sort(X.compare)}};var rZ=function(X,$){return function(Q){if(n.call(Q,X)&&Q[X]===$)return Q;var Y=Object.assign({},Q);return Y[X]=$,Y}},X5=function(X,$){return n.call($,X)};var U8={},sZ=function(X,$){var Q;return Q={},Q[X]=$,Q};var YH=function(X){return function($){return function(Q){if(Y1(Q))return $;if(Y1($))return Q;var Y={};for(var J in Q)if(X5(J,$))Y[J]=X.concat(Q[J],$[J]);else Y[J]=Q[J];for(var J in $)if(!X5(J,Y))Y[J]=$[J];return Y}}},JH=function(X){return function($){return function(Q){if(Y1(Q)||Y1($))return U8;var Y={};for(var J in Q)if(X5(J,$))Y[J]=X.concat(Q[J],$[J]);return Y}}},ZH=function(X){return function($){if(Y1($))return X;if(Y1(X))return $;var Q={};for(var Y in $)if(!X5(Y,X))Q[Y]=$[Y];for(var Y in X)if(!X5(Y,$))Q[Y]=X[Y];return Q}},HH=function(X,$){return K(X,C8($))},jH=function(X,$){return K(X,M9($))},PH=function(X){var $=W4(X);return function(Q,Y,J){return K(Q,$(Y,J))}},zH=function(X){return function($){var Q=E4(X)($);return function(Y,J){return K(Y,Q(J))}}},GH=function(X){var $=O4(X);return function(Q,Y,J){return K(Q,$(Y,J))}},VH=function(X,$){return K(X,A8($))},DH=function(X,$){return K(X,R8($))},qH=function(X,$){return K(X,S8($))},KH=function(X,$){return K(X,W8($))},BH=function(X){var $=h5(X);return function(Q,Y,J){return K(Q,$(Y,J))}},LH=function(X){var $=u5(X);return function(Q){var Y=$(Q);return function(J,Z){return K(J,Y(Z))}}},wH=function(X){var $=k5(X);return function(Q,Y,J){return K(Q,$(Y,J))}},UH=function(X,$){return K(X,g9($))},CH=function(X,$){return K(X,F9($))},NH=function(X,$){return K(X,I9($))},TH=function(X,$){return K(X,y9($))},b9=function(X){var $=vH(X);return function(Q){var Y=$(Q);return function(J,Z){return Y(J,I(O7,Z))}}},v8=function(X){var $=b9(X);return function(Q){var Y=$(Q);return function(J){return Y(J,u)}}},vH=function(X){return function($){var Q=S4(X);return function(Y,J){var Z=Q(Y);if(Z.length===0)return $.of(U8);var V=$.of({}),D=function(K0){V=$.ap($.map(V,function(O0){return function(S1){var p0;return Object.assign({},O0,(p0={},p0[K0]=S1,p0))}}),J(K0,Y[K0]))};for(var L=0,B=Z;L<B.length;L++){var R=B[L];D(R)}return V}}},A8=function(X){return y9(function($,Q){return X(Q)})},R8=function(X){return I9(function($,Q){return X(Q)})},S8=function(X){return F9(function($,Q){return X(Q)})},W8=function(X){return g9(function($,Q){return X(Q)})},AH=function(X){var $={};for(var Q in X)if(n.call(X,Q)){var Y=X[Q];if(B0(Y))$[Q]=Y.value}return $},RH=function(X){var $={},Q={};for(var Y in X)if(n.call(X,Y)){var J=X[Y];if(U1(J))$[Y]=J.left;else Q[Y]=J.right}return A0($,Q)};var u9={};k1(u9,{wither:()=>{{return Tw}},wilt:()=>{{return vw}},upsertAt:()=>{{return OH}},updateAt:()=>{{return Vw}},union:()=>{{return bH}},traverseWithIndex:()=>{{return Nw}},traverse:()=>{{return g8}},toUnfoldable:()=>{{return Gw}},toEntries:()=>{{return Ew}},toArray:()=>{{return M8}},some:()=>{{return Fw}},size:()=>{{return Pw}},singleton:()=>{{return Cw}},sequence:()=>{{return g4}},separate:()=>{{return y1}},reduceWithIndex:()=>{{return Lw}},reduceRightWithIndex:()=>{{return Uw}},reduceRight:()=>{{return mw}},reduce:()=>{{return kw}},record:()=>{{return jU}},pop:()=>{{return Dw}},partitionWithIndex:()=>{{return Rw}},partitionMapWithIndex:()=>{{return Aw}},partitionMap:()=>{{return uw}},partition:()=>{{return hw}},modifyAt:()=>{{return FH}},mapWithIndex:()=>{{return Kw}},map:()=>{{return Bw}},lookup:()=>{{return IH}},keys:()=>{{return zw}},isSubrecord:()=>{{return qw}},isEmpty:()=>{{return $5}},intersection:()=>{{return hH}},insertAt:()=>{{return ZU}},hasOwnProperty:()=>{{return HU}},has:()=>{{return MH}},getWitherable:()=>{{return sw}},getUnionSemigroup:()=>{{return nH}},getUnionMonoid:()=>{{return tw}},getTraversableWithIndex:()=>{{return rw}},getTraversable:()=>{{return dH}},getShow:()=>{{return cw}},getMonoid:()=>{{return xw}},getIntersectionSemigroup:()=>{{return aw}},getFoldableWithIndex:()=>{{return pw}},getFoldable:()=>{{return fw}},getEq:()=>{{return _w}},getDifferenceMagma:()=>{{return ew}},fromFoldableMap:()=>{{return Mw}},fromFoldable:()=>{{return yH}},fromEntries:()=>{{return Ow}},foldMapWithIndex:()=>{{return ww}},foldMap:()=>{{return lw}},flap:()=>{{return dw}},filterWithIndex:()=>{{return Ww}},filterMapWithIndex:()=>{{return Sw}},filterMap:()=>{{return bw}},filter:()=>{{return yw}},every:()=>{{return gw}},empty:()=>{{return JU}},elem:()=>{{return Iw}},difference:()=>{{return uH}},deleteAt:()=>{{return gH}},compact:()=>{{return I1}},collect:()=>{{return O8}},Witherable:()=>{{return YU}},URI:()=>{{return Q0}},TraversableWithIndex:()=>{{return QU}},Traversable:()=>{{return I8}},FunctorWithIndex:()=>{{return nw}},Functor:()=>{{return xH}},FoldableWithIndex:()=>{{return $U}},Foldable:()=>{{return XU}},FilterableWithIndex:()=>{{return iw}},Filterable:()=>{{return ow}},Compactable:()=>{{return M4}}});function O8(X){if(typeof X==="function")return O8(N)(X);var $=E8(X);return function(Q){return function(Y){var J=[];for(var Z=0,V=$(Y);Z<V.length;Z++){var D=V[Z];J.push(Q(D,Y[D]))}return J}}}function Gw(X){return function($){var Q=M8($),Y=Q.length;return X.unfold(0,function(J){return J<Y?O([Q[J],J+1]):E})}}function gH(X){return function($){if(!n.call($,X))return $;var Q=Object.assign({},$);return delete Q[X],Q}}function Dw(X){var $=gH(X);return function(Q){var Y=IH(X,Q);return W1(Y)?E:O([Y.value,$(Q)])}}function Lw(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];return X.length===1?h5(X[0]):h5(N).apply(void 0,X)}function ww(X){return"compare"in X?u5(X):u5(N)(X)}function Uw(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];return X.length===1?k5(X[0]):k5(N).apply(void 0,X)}function Nw(X){return tZ(X)}function g8(X){return aZ(X)}function g4(X){return eZ(X)}function Rw(X){return F9(X)}function Ww(X){return y9(X)}function yH(X,$){return XH(X,$)}function Mw(X,$){return N8(X,$)}function kw(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];return X.length===1?W4(X[0]):W4(N).apply(void 0,X)}function lw(X){return"compare"in X?E4(X):E4(N)(X)}function mw(){var X=[];for(var $=0;$<arguments.length;$++)X[$]=arguments[$];return X.length===1?O4(X[0]):O4(N).apply(void 0,X)}function cw(X){return"compare"in X?h9(X):h9(N)(X)}var l5=function(){return l5=Object.assign||function(X){for(var $,Q=1,Y=arguments.length;Q<Y;Q++){$=arguments[Q];for(var J in $)if(Object.prototype.hasOwnProperty.call($,J))X[J]=$[J]}return X},l5.apply(this,arguments)},Pw=oZ,$5=Y1,E8=function(X){return function($){return Object.keys($).sort(X.compare)}},zw=E8(N),M8=O8(N)(function(X,$){return[X,$]}),OH=rZ,MH=X5,Vw=function(X,$){return FH(X,function(){return $})},FH=function(X,$){return function(Q){if(!MH(X,Q))return E;var Y=Object.assign({},Q);return Y[X]=$(Q[X]),O(Y)}},qw=O9,IH=w8,Kw=M9,Bw=C8,Cw=sZ,Tw=function(X){var $=g8(X);return function(Q){return function(Y){return X.map(K(Y,$(Q)),I1)}}},vw=function(X){var $=g8(X);return function(Q){return function(Y){return X.map(K(Y,$(Q)),y1)}}},Aw=g9,Sw=I9,Ew=M8,Ow=function(X){return yH(mQ(),H8)(X)},gw=$H,Fw=QH,Iw=T8,bH=function(X){var $=YH(X);return function(Q){return function(Y){if($5(Y))return l5({},Q);if($5(Q))return l5({},Y);return $(Q)(Y)}}},hH=function(X){return function($){return function(Q){if($5(Q)||$5($))return{};return JH(X)($)(Q)}}},uH=function(X){return function($){if($5($))return l5({},X);if($5(X))return l5({},$);return ZH(X)($)}},l0=HH,F4=jH,m0=PH,c0=zH,_0=GH,I4=VH,y4=DH,b4=qH,h4=KH,u4=BH,k4=LH,l4=wH,kH=UH,lH=CH,mH=NH,cH=TH,m5=b9,_H=v8,F8=function(X){return function($){var Q=E8(X);return function(Y,J){var Z=Q(Y);if(Z.length===0)return $.of({});var V=$.of({}),D=function(K0){V=$.ap($.map(V,function(O0){return function(S1){return O0[K0]=S1,O0}}),J(K0,Y[K0]))};for(var L=0,B=Z;L<B.length;L++){var R=B[L];D(R)}return V}}},yw=A8,bw=R8,hw=S8,uw=W8,I1=AH,y1=RH,Q0="Record",_w=SH,xw=WH,xH={URI:Q0,map:l0},dw=M0(xH),nw={URI:Q0,map:l0,mapWithIndex:F4},fw=function(X){return{URI:Q0,reduce:m0(X),foldMap:c0(X),reduceRight:_0(X)}},pw=function(X){return{URI:Q0,reduce:m0(X),foldMap:c0(X),reduceRight:_0(X),reduceWithIndex:u4(X),foldMapWithIndex:k4(X),reduceRightWithIndex:l4(X)}},M4={URI:Q0,compact:I1,separate:y1},ow={URI:Q0,map:l0,compact:I1,separate:y1,filter:I4,filterMap:y4,partition:b4,partitionMap:h4},iw={URI:Q0,map:l0,mapWithIndex:F4,compact:I1,separate:y1,filter:I4,filterMap:y4,partition:b4,partitionMap:h4,filterMapWithIndex:mH,filterWithIndex:cH,partitionMapWithIndex:kH,partitionWithIndex:lH},dH=function(X){return{URI:Q0,map:l0,reduce:m0(X),foldMap:c0(X),reduceRight:_0(X),traverse:m5(X),sequence:_H(X)}},rw=function(X){return{URI:Q0,map:l0,mapWithIndex:F4,reduce:m0(X),foldMap:c0(X),reduceRight:_0(X),reduceWithIndex:u4(X),foldMapWithIndex:k4(X),reduceRightWithIndex:l4(X),traverse:m5(X),sequence:_H(X),traverseWithIndex:F8(X)}},sw=function(X){var $=dH(X);return{URI:Q0,map:l0,reduce:m0(X),foldMap:c0(X),reduceRight:_0(X),traverse:$.traverse,sequence:$.sequence,compact:I1,separate:y1,filter:I4,filterMap:y4,partition:b4,partitionMap:h4,wither:f1($,M4),wilt:n1($,M4)}},nH=function(X){var $=bH(X);return{concat:function(Q,Y){return $(Y)(Q)}}},tw=function(X){return{concat:nH(X).concat,empty:{}}},aw=function(X){var $=hH(X);return{concat:function(Q,Y){return $(Y)(Q)}}},ew=function(){return{concat:function(X,$){return uH($)(X)}}},XU={URI:Q0,reduce:m0(N),foldMap:c0(N),reduceRight:_0(N)},$U={URI:Q0,reduce:m0(N),foldMap:c0(N),reduceRight:_0(N),reduceWithIndex:u4(N),foldMapWithIndex:k4(N),reduceRightWithIndex:l4(N)},I8={URI:Q0,map:l0,reduce:m0(N),foldMap:c0(N),reduceRight:_0(N),traverse:m5(N),sequence:g4},QU={URI:Q0,map:l0,mapWithIndex:F4,reduce:m0(N),foldMap:c0(N),reduceRight:_0(N),reduceWithIndex:u4(N),foldMapWithIndex:k4(N),reduceRightWithIndex:l4(N),traverse:m5(N),sequence:g4,traverseWithIndex:F8(N)},fH=f1(I8,M4),pH=n1(I8,M4),YU={URI:Q0,map:l0,reduce:m0(N),foldMap:c0(N),reduceRight:_0(N),traverse:m5(N),sequence:g4,compact:I1,separate:y1,filter:I4,filterMap:y4,partition:b4,partitionMap:h4,wither:fH,wilt:pH},JU={},ZU=OH,HU=EH,jU={URI:Q0,map:l0,reduce:m0(N),foldMap:c0(N),reduceRight:_0(N),traverse:m5(N),sequence:g4,compact:I1,separate:y1,filter:I4,filterMap:y4,partition:b4,partitionMap:h4,mapWithIndex:F4,reduceWithIndex:u4(N),foldMapWithIndex:k4(N),reduceRightWithIndex:l4(N),filterMapWithIndex:mH,filterWithIndex:cH,partitionMapWithIndex:kH,partitionWithIndex:lH,traverseWithIndex:F8(N),wither:fH,wilt:pH};var PU="Function",zU=(X)=>($)=>I($,X),y8={URI:PU,map:(X,$)=>zU($)(X)},oH=l1,GU=(X)=>($)=>(Q)=>$(Q)(X(Q)),k9={...y8,of:oH,ap:(X,$)=>GU($)(X)},gb=r0(k9),Fb=s0(k9),VU=(X)=>($)=>(Q)=>X($(Q))(Q);var DU={...k9,chain:(X,$)=>VU($)(X)},Ib=oH({}),yb=g0(y8),bb=I0(DU),hb=t0(k9),ub=F0(y8);var l9=E7,iH=(X)=>($)=>(Q)=>K(X,C4(([Y,J])=>I(NZ(Y),v4(J))),A4(NQ(vZ(lQ()))()),TQ(Q),WZ(()=>$(Q)));var qU=(X)=>($)=>(Q)=>X(Q)?Q:$(Q),kb=I(CZ,qU);var KU=(X)=>($)=>(Q)=>Q[X](...$),lb=W7(KU)([]);var rH=(X)=>($)=>{const Q=new Map;return(Y)=>{const J=IZ(X)(Y)(Q);if(SZ(J))return J.value;const Z=$(Y);return Q.set(Y,Z),Z}},BU=(X)=>($)=>(Q)=>X([$,Q]),mb=I(l9,BU),LU=(X)=>($)=>(Q)=>(Y)=>X([$,Q,Y]),cb=I(l9,LU),wU=(X)=>($)=>(Q)=>(Y)=>(J)=>X([$,Q,Y,J]),_b=I(l9,wU),UU=(X)=>($)=>(Q)=>(Y)=>(J)=>(Z)=>X([$,Q,Y,J,Z]),xb=I(l9,UU);var db=A4(OZ());var sH=(X)=>A4(UZ())(X);var A7=RX(uG(),1);var kG=(X)=>iH(X);var i5=(X)=>async($)=>X(await $),lG=(X)=>($)=>(Q)=>Q[X]===$;var N7=(X)=>($)=>I(S.chunksOf(X),S.map($),(Q)=>Promise.all(Q),i5(S.flatten));var mG=(X)=>K(X,E7,rH(y7.contramap(JSON.stringify)(b5.Eq)),RQ);var KX;(function(qX){let X;(function(r5){r5.start=l1({before:"start"}),r5.fromUri=(Z)=>({before:{uri:Z}}),r5.fromUid=(Z)=>({before:{uid:Z}})})(X=qX.before||(qX.before={}));let $;(function(s5){s5.end=l1({after:"end"}),s5.fromUri=(Z)=>({before:{uri:Z}}),s5.fromUid=(Z)=>({before:{uid:Z}})})($=qX.after||(qX.after={}))})(KX||(KX={}));//! Does location actually point to document.body?
var _G=(X,$=1000,Q=document.body,Y)=>new Promise((J)=>{const Z=(D)=>{V.disconnect(),J(D)},V=new MutationObserver(()=>{const D=document.querySelector(X);if(D&&(!Y||D!==Y))return Z(D)});if(V.observe(Q,{childList:!0,subtree:!0}),$)setTimeout(()=>Z(null),$)});var BX=(X)=>new Promise(($)=>setTimeout($,X));var BQ=(X)=>Spicetify.Platform.LibraryAPI.contains(...X),cG=(X,$)=>Spicetify.Platform.LibraryAPI[$?"add":"remove"](...X),xG=async(X)=>{const $=await BQ(X);return await K(X,S.reduceWithIndex([[],[]],(Q,Y,J)=>(Y[Number($[Q])].push(J),Y)),([Q,Y])=>{const J=[];if(Q.length)J.push(cG(Q,!0));if(Y.length)J.push(cG(Y,!1));return Promise.all(J)})};var{URI:Hu}=Spicetify,dG=async(X,$=0,Q=487)=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.getAlbum,{uri:X,locale:Spicetify.Locale.getLocale(),offset:$,limit:Q})).data.albumUnion;var nG=async(X,$)=>Spicetify.CosmosAsync.del(`https://api.spotify.com/v1/playlists/${X}/tracks`,{tracks:$.map((Q)=>({uri:Q}))}),ju=N7(50)(async(X)=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${X.join(",")}`)).artists),Pu=N7(1)(async([X])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${X}`)]),zu=N7(50)(async(X)=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${X.join(",")}`)).albums),Gu=N7(50)(async(X)=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${X.join(",")}`)).tracks);var fG=async(X,$=0,Q=100)=>(await Spicetify.Platform.LibraryAPI.getTracks({uri:X,offset:$,limit:Q})).items,LX=async(X)=>(await Spicetify.Platform.PlaylistAPI.getContents(X)).items,pG=async(X,$={})=>await Spicetify.Platform.RootlistAPI.createFolder(X,$);var oG=async(X,$={})=>await Spicetify.Platform.RootlistAPI.createPlaylist(X,$);var iG=async(X,$)=>await Spicetify.Platform.PlaylistPermissionsAPI.setBasePermission(X,$?"VIEWER":"BLOCKED");var rG=async(X)=>await Spicetify.Platform.RootlistAPI.getContents({folderUri:X});var sG=async(X,$,Q={})=>await Spicetify.Platform.PlaylistAPI.add(X,$,Q);var qI=async(X,$,Q,Y="")=>{const J=new URL("https://ws.audioscrobbler.com/2.0/");return J.searchParams.append("method","track.getInfo"),J.searchParams.append("api_key",X),J.searchParams.append("artist",$),J.searchParams.append("track",Q),J.searchParams.append("format","json"),J.searchParams.append("username",Y),await fetch(J).then((Z)=>Z.json())},Vu=mG(qI);var x=RX(aG(),1),$V=RX(XV(),1);class q0{X;$;Q;stopHistoryListener;setRerender=null;constructor(X,$,Q={}){this.name=X;this.sectionId=$;this.sectionFields=Q}static waitForReact=async()=>{while(!(Spicetify.React&&Spicetify.ReactDOM))BX(100);return this};pushSettings=async()=>{while(!Spicetify?.Platform?.History?.listen)await BX(100);if(this.stopHistoryListener)this.stopHistoryListener();if(this.stopHistoryListener=Spicetify.Platform.History.listen(({pathname:X=""})=>{if(X==="/preferences")this.render()}),Spicetify.Platform.History.location.pathname==="/preferences")await this.render()};toObject=()=>new Proxy({},{get:(X,$)=>q0.getFieldValue(this.getId($.toString()))});rerender=()=>{if(this.setRerender)this.setRerender(Math.random())};render=async()=>{while(!document.getElementById("desktop.settings.selectLanguage")){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await BX(100)}const X=document.querySelector(".x-settings-container");let $=Array.from(X.children).find(({id:Q})=>Q===this.sectionId);if(!$)$=document.createElement("div"),$.id=this.sectionId,$.className="settingsContainer",X.appendChild($);$V.default.render(x.default.createElement(this.FieldsContainer,null),$)};addButton=(X,$,Q,Y=a5,J={})=>{const Z=this.getId(X);return J.onClick=Y,this.sectionFields[X]={id:Z,type:d0.BUTTON,description:$,text:Q,events:J},this};addToggle=(X,$,Q=F1.of(!0),Y=a5,J={})=>{const Z=this.getId(X);return q0.setDefaultFieldValue(Z,Q),J.onChange=Y,this.sectionFields[X]={id:Z,type:d0.TOGGLE,description:$,events:J},this};addInput=(X,$,Q,Y=a5,J="text",Z={})=>{const V=this.getId(X);return q0.setDefaultFieldValue(V,Q),Z.onChange=Y,this.sectionFields[X]={id:V,type:d0.INPUT,description:$,inputType:J,events:Z},this};addDropDown=(X,$,Q,Y=F1.of(0),J=a5,Z={})=>{const V=this.getId(X);return q0.setDefaultFieldValue(V,Y),Z.onChange=J,this.sectionFields[X]={id:V,type:d0.DROPDOWN,description:$,options:Q,events:Z},this};addHidden=(X,$)=>{const Q=this.getId(X);return q0.setDefaultFieldValue(Q,$),this.sectionFields[X]={id:Q,type:d0.HIDDEN,description:""},this};getId=(X)=>`extensions:${this.sectionId}:${X}`;useStateFor=(X)=>{const[$,Q]=x.useState(q0.getFieldValue(X));return[$,(Y)=>{if(Y!==void 0)Q(Y),q0.setFieldValue(X,Y)}]};static getFieldValue=(X)=>{return JSON.parse(Spicetify.LocalStorage.get(X)??"null")};static setFieldValue=(X,$)=>{Spicetify.LocalStorage.set(X,JSON.stringify($))};static setDefaultFieldValue=async(X,$)=>{if(q0.getFieldValue(X)===null)q0.setFieldValue(X,await $())};FieldsContainer=()=>{const[X,$]=x.useState(0);return this.setRerender=$,x.default.createElement("div",{className:"x-settings-section",key:X},x.default.createElement("h2",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-cello-textBase-type"},this.name),Object.entries(this.sectionFields).map(([Q,Y])=>{return x.default.createElement(this.Field,{field:Y})}))};Field=({field:X})=>{const $=lG("type");return x.default.createElement("div",{className:"x-settings-row"},x.default.createElement(this.SettingDescription,{id:X.id,description:X.description}),x.default.createElement("div",{className:"x-settings-secondColumn"},kG([[$(d0.INPUT),this.SettingInputField],[$(d0.BUTTON),this.SettingButtonField],[$(d0.TOGGLE),this.SettingToggleField],[$(d0.DROPDOWN),this.SettingDropdownField]])(this.SettingHidden)(X)))};SettingDescription=({id:X,description:$})=>x.default.createElement("div",{className:"x-settings-firstColumn"},x.default.createElement("label",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-viola-textSubdued-type",htmlFor:X},$));SettingButtonField=(X)=>x.default.createElement("span",{className:""},x.default.createElement("button",{id:X.id,className:"Button-sc-y0gtbx-0 Button-sm-buttonSecondary-useBrowserDefaultFocusStyle x-settings-button",...X.events,type:X.type},X.text));SettingToggleField=(X)=>{const[$,Q]=this.useStateFor(X.id);return x.default.createElement("label",{className:"x-settings-secondColumn x-toggle-wrapper"},x.default.createElement("input",{id:X.id,className:"x-toggle-input",type:"checkbox",checked:q0.getFieldValue(X.id),...X.events,onChange:(Y)=>{Q(Y.currentTarget.checked),X.events.onChange?.(Y)}}),x.default.createElement("span",{className:"x-toggle-indicatorWrapper"},x.default.createElement("span",{className:"x-toggle-indicator"})))};SettingInputField=(X)=>{const[$,Q]=this.useStateFor(X.id);return x.default.createElement("input",{className:"x-settings-input",id:X.id,dir:"ltr",value:q0.getFieldValue(X.id),type:X.inputType,...X.events,onChange:(Y)=>{Q(Y.currentTarget.value),X.events.onChange?.(Y)}})};SettingDropdownField=(X)=>{const[$,Q]=this.useStateFor(X.id);return x.default.createElement("select",{className:"main-dropDown-dropDown",id:X.id,...X.events,onChange:(Y)=>{Q(Y.currentTarget.selectedIndex),X.events.onChange?.(Y)}},X.options.map((Y,J)=>x.default.createElement("option",{selected:J===q0.getFieldValue(X.id),value:J+1},Y)))};SettingHidden=()=>x.default.createElement(x.default.Fragment,null)}var d0;(function(Z){Z["HIDDEN"]="hidden";Z["INPUT"]="input";Z["DROPDOWN"]="dropdown";Z["BUTTON"]="button";Z["TOGGLE"]="toggle"})(d0||(d0={}));var{URI:QV}=Spicetify,KI=(X,$,Q)=>{const J=document.createElementNS("http://www.w3.org/2000/svg","svg"),Z=`${X}-${$}`;J.id=Z,J.style.minHeight=`${Q}px`,J.style.minWidth=`${Q}px`,J.setAttributeNS(null,"width",`${Q}px`),J.setAttributeNS(null,"height",`${Q}px`),J.setAttributeNS(null,"viewBox","0 0 32 32");const V=document.createElementNS("http://www.w3.org/2000/svg","defs");J.append(V);const D=document.createElementNS("http://www.w3.org/2000/svg","linearGradient");V.append(D),D.id=`${Z}-gradient`;const L=document.createElementNS("http://www.w3.org/2000/svg","stop");D.append(L),L.id=`${Z}-gradient-left`,L.setAttributeNS(null,"offset","50%"),L.setAttributeNS(null,"stop-color","var(--spice-button-disabled)");const B=document.createElementNS("http://www.w3.org/2000/svg","stop");D.append(B),B.id=`${Z}-gradient-right`,B.setAttributeNS(null,"offset","50%"),B.setAttributeNS(null,"stop-color","var(--spice-button-disabled)");const R=document.createElementNS("http://www.w3.org/2000/svg","path");return J.append(R),R.setAttributeNS(null,"fill",`url(#${D.id})`),R.setAttributeNS(null,"d","M20.388,10.918L32,12.118l-8.735,7.749L25.914,31.4l-9.893-6.088L6.127,31.4l2.695-11.533L0,12.118l11.547-1.2L16.026,0.6L20.388,10.918z"),[J,[L,B]]},wX=(X,$)=>{const Q=`stars-${X}`,Y=document.createElement("span");Y.className="stars",Y.id=Q,Y.style.whiteSpace="nowrap",Y.style.alignItems="center",Y.style.display="flex";const J=C5.range(1,5).map((Z)=>KI(Q,Z,$));return K(J,S.unzip,([Z])=>Z,S.map((Z)=>Y.append(Z))),[Y,J]},u1=(X)=>($)=>{const Q=(Y)=>(J)=>$[Math.floor(J/2)][J%2].setAttributeNS(null,"stop-color",`var(--spice-button${Y?"":"-disabled"})`);K(C5.range(0,9),S.spanLeft((Y)=>Y<X),({init:Y,rest:J})=>{Y.map(Q(!0)),J.map(Q(!1))})},LQ=(X,$)=>(Q)=>{const Y=X.getBoundingClientRect(),J=Q.clientX-Y.left,Z=T0.halfStarRatings&&J<JV;return 2*($+1)-Number(Z)},YV=(X,$,Q)=>async(Y)=>{const J=Q(),Z=n0[J];let V=LQ($,X)(Y);const D=UX(T0.heartThreshold);if(D){const B=V>=D,[R]=await BQ([J]);if(R!==B)xG([J])}if(Z===V)V=0;if(Z)K(t5.slice(0,Z+1),S.filter(Boolean),S.map((B)=>QV.from(B).id),S.map((B)=>nG(B,[J])));if(n0[J]=V,V){let B=t5[V];if(!B)B=await oG(CX(V),KX.after.fromUri(T0.ratingsFolderUri)),iG(B,!1),t5[V]=B;sG(B,[J])}TX();const L=V5(`${QV.fromString(J).id}`);if(L)K(L,NX(V)),L.style.visibility=V?"visible":"hidden"};var ZV="Ratings",T7=16,JV=T7/2,UX=(X)=>Number(X)*2,CX=(X)=>(X/2).toFixed(1),HV=(X)=>Array.from(X.children),BI=(X)=>Array.from(X.firstChild.firstChild.childNodes),jV=I(HV,S.map(BI)),NX=(X)=>I(jV,u1(X)),V5=(X)=>document.getElementById(`stars-${X}`),bu=I(V5,HV),PV=I(V5,jV),zV=()=>Array.from(document.querySelectorAll(".main-trackList-indexable")),GV=(X)=>X.querySelector(".main-trackList-trackListHeader")?.firstChild,VV=(X)=>Array.from(X.querySelectorAll("div.main-trackList-trackListRow")),DV=(X)=>{const $=X.querySelector("div.main-trackList-rowSectionEnd");return[Number($.getAttribute("aria-colindex")),$]},qV=(X)=>X.querySelector(".Button-sm-16-buttonTertiary-iconOnly-useBrowserDefaultFocusStyle, .Button-textBrightAccent-sm-16-buttonTertiary-iconOnly-useBrowserDefaultFocusStyle"),KV=(X)=>(X=Object.values(X)[0].child.child.child.child,X.pendingProps.uri??X.child.pendingProps.uri);var BV=new q0("Star Ratings","star-ratings").addToggle("hideHearts","Hide Hearts").addToggle("halfStarRatings","Half star ratings").addToggle("showInTrackLists","Show in tracklists").addToggle("nowPlayingStarsOnRight","Place the stars for now playing track on the right").addInput("heartThreshold","Threshold for liking trakcs",F1.of("3.5")).addInput("skipThreshold","Threshold for skipping trakcs",F1.of("1.5")).addInput("ratingsFolderUri","Ratings folder uri",async()=>(await pG(ZV)).uri,vX);BV.pushSettings();var T0=BV.toObject();var LI=(X)=>Math.exp(X),LV=(X)=>K(X,S.map(($)=>n0[$]),S.filter(Boolean),S.map(($)=>[$,LI($)]),T1.unzip,([$,Q])=>T1.reduceWithIndex(0,(Y,J,Z)=>J+Z*Q[Y])($)/T1.reduce(0,(Y,J)=>Y+J)(Q)||0),wQ=([X,$],Q)=>{const[Y,J]=K($,T1.unzip);X.addEventListener("mouseout",()=>u1(n0[Q()]??0)(J)),K(Y,T1.mapWithIndex((Z,V)=>{V.addEventListener("mousemove",I(LQ(V,Z),W7(u1)(J))),V.addEventListener("click",YV(Z,Y[Z],Q))}))},vX=async()=>{const X=await rG(T0.ratingsFolderUri),$=K(P4(0,10),S.map((Q)=>[CX(Q),Q]),u9.fromEntries);t5=K(X.items,S.map((Q)=>[Q.type,Q.uri,$[Q.name]]),S.reduce([],(Q,[Y,J,Z])=>(Y==="playlist"&&Z?Q[Z]=J:[],Q))),globalThis.tracksRatings=n0=await K(t5,S.map(LX),(Q)=>Promise.all(Q),i5(S.map((Q)=>Q??[])),i5(S.map(S.map((Q)=>Q.uri))),i5(S.flatMap((Q,Y)=>Q.map((J)=>[J,Y]))),i5(S.reduce({},(Q,[Y,J])=>Object.assign(Q,{[Y]:Math.max(J,Q[Y]??0)}))))},t5=[],n0={};var{URI:f0}=Spicetify,wI=[null,null,null,null,"[index] 16px [first] 4fr [var1] 2fr [var2] 1fr [last] minmax(120px,1fr)","[index] 16px [first] 6fr [var1] 4fr [var2] 3fr [var3] 2fr [last] minmax(120px,1fr)","[index] 16px [first] 6fr [var1] 4fr [var2] 3fr [var3] minmax(120px,2fr) [var3] 2fr [last] minmax(120px,1fr)"];vX();var UI=I(zV,S.map((X)=>{const $=VV(X);if($.length===0)return;const Q=(D)=>D.getElementsByClassName("stars").length>0,Y=f0.fromString(Spicetify.Platform.History.location.pathname),J=f0.isArtist(Y)?$[0]:GV(X)??$[0],[Z]=DV(J),V=wI[Z-K(J,Q,Number)];if(!V)return;J.style.gridTemplateColumns=V,K($,S.map((D)=>{const L=qV(D);if(L)L.style.display=T0.hideHearts?"none":"flex";if(Q(D))return;let B=D.querySelector(".starRatings");if(!B){const R7=D.querySelector(".main-trackList-rowSectionEnd"),S7=Number(R7?.getAttribute("aria-colindex"));B=document.createElement("div"),B.setAttribute("aria-colindex",String(S7)),R7?.setAttribute("aria-colindex",String(S7+1)),B.role="gridcell",B.style.display="flex",B.classList.add("main-trackList-rowSectionVariable"),B.classList.add("starRatings"),D.insertBefore(B,R7),D.style.gridTemplateColumns=V}const R=KV(D),K0=f0.fromString(R);if(!f0.isTrack(K0))return;const[O0,S1]=wX(K0.id,T7);B.appendChild(O0),K(S1,S.unzip,([R7,S7])=>S7,u1(n0[R]??0)),wQ([O0,S1],()=>R);const p0=()=>O0.style.visibility=n0[R]?"visible":"hidden";D.addEventListener("mouseover",()=>O0.style.visibility="visible"),D.addEventListener("mouseout",p0),p0()}))})),v7,wV=new MutationObserver(()=>T0.showInTrackLists?UI():void 0);new MutationObserver(()=>{const X=v7;if(v7=document.querySelector("main"),v7&&!v7.isEqualNode(X)){if(X)wV.disconnect();wV.observe(v7,{childList:!0,subtree:!0})}}).observe(document.body,{childList:!0,subtree:!0});var CI=async(X,$)=>{const Q=f0.fromString(X);if(!$)$=PV("collection");let Y;if(f0.isAlbum(Q))Y=K(await dG(`${Q}`),u,A7.get("tracks.items"),S.map(I(u,A7.get("track.uri"))));else if(f0.isArtist(Q))Y=K(await fG(`${Q}`),S.map(A7.get("uri")));else if(f0.isPlaylistV1OrV2(Q))Y=K(await LX(`${Q}`),S.map(A7.get("uri")));else throw"me out the window";u1(LV(Y))($)},UQ;Spicetify.Platform.History.listen(async({pathname:X})=>{if(!sH([f0.isAlbum,f0.isArtist,f0.isPlaylistV1OrV2])(X))return;UQ=await _G(".main-actionBar-ActionBar .main-playButton-PlayButton",0,document.body,UQ);const[Q,Y]=wX("collection",T7*2);V5("collection")?.remove(),UQ.after(Q);const J=K(Y,S.unzip,([Z,V])=>V);CI(X,J)});var NI=()=>{if(document.querySelectorAll(".stars-now-playing").length!==0)return;const X=T0.nowPlayingStarsOnRight?".main-nowPlayingBar-extraControls":".main-nowPlayingWidget-trackInfo",$=document.querySelector(X);if(!$)return;const[Q,Y]=wX("now-playing",T7);if(Q.style.display="none",Q.style.marginLeft="8px",Q.style.marginRight="8px",!T0.nowPlayingStarsOnRight)$.after(Q);else $.prepend(Q);wQ([Q,Y],()=>Spicetify.Player.data.track?.uri)};NI();var TX=()=>{const X=Spicetify.Player.data.track?.uri,$=V5("now-playing");$.style.display=Spicetify.URI.isTrack(X)?"flex":"none",K($,NX(n0[X]??0))};Spicetify.Player.addEventListener("songchange",()=>{const X=Spicetify.Player.data.track?.uri;if(Number(T0.skipThreshold)&&(n0[X]||Number.MAX_SAFE_INTEGER)<=UX(T0.skipThreshold))return Spicetify.Player.next();TX()});TX();export{TX as updateNowPlayingStars};

//# debugId=DC5885914AA5F65064756e2164756e21
//# sourceMappingURL=data:application/json;base64,
