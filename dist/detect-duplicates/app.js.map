{
  "version": 3,
  "sources": ["../../shared/util.ts", "../../extensions/star-ratings-2/util.ts", "../../shared/listeners.ts", "../../extensions/detect-duplicates/app.ts", "../../shared/GraphQL/Definitions/searchTracks.ts", "../../shared/GraphQL/searchTracks.ts", "../../shared/api.ts", "../../shared/deps.ts", "../../shared/fp.ts"],
  "sourcesContent": ["export type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nconst { URI } = Spicetify\r\nconst { PlayerAPI } = Spicetify.Platform\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: () => ({ before: \"start\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: () => ({ after: \"end\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport class PermanentMutationObserver extends MutationObserver {\r\n    target: HTMLElement | null = null\r\n\r\n    constructor(\r\n        targetSelector: string,\r\n        callback: MutationCallback,\r\n        opts: MutationObserverInit = {\r\n            childList: true,\r\n            subtree: true,\r\n        },\r\n    ) {\r\n        super(callback)\r\n        new MutationObserver(() => {\r\n            const nextTarget = document.querySelector<HTMLElement>(targetSelector)\r\n            if (nextTarget && !nextTarget.isEqualNode(this.target)) {\r\n                this.target && this.disconnect()\r\n                this.target = nextTarget\r\n                this.observe(this.target, opts)\r\n            }\r\n        }).observe(document.body, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n    }\r\n}\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 5000,\r\n    location = document.body,\r\n    notEl?: E | null,\r\n) =>\r\n    new Promise((resolve: (value: E) => void, reject) => {\r\n        const onMutation = () => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el) {\r\n                if (notEl && el === notEl) {\r\n                } else {\r\n                    observer.disconnect()\r\n                    return resolve(el)\r\n                }\r\n            }\r\n        }\r\n\r\n        const observer = new MutationObserver(onMutation)\r\n        onMutation()\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout)\r\n            setTimeout(() => {\r\n                observer.disconnect()\r\n                console.debug(\"waitForElement: timed out waiting for\", selector)\r\n                reject()\r\n            }, timeout)\r\n    })\r\n\r\nexport const formatUri = (uri: string) => URI.fromString(uri).toURI()\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const mainElement = document.querySelector(\"main\")!\r\nexport const [REACT_FIBER, REACT_PROPS] = Object.keys(mainElement)\r\n\r\nexport const createQueueItem =\r\n    (queued: boolean) =>\r\n    ({ uri, uid = \"\" }: { uri: string; uid?: string }) => ({\r\n        contextTrack: {\r\n            uri,\r\n            uid,\r\n            metadata: {\r\n                is_queued: queued.toString(),\r\n            },\r\n        },\r\n        removed: [],\r\n        blocked: [],\r\n        provider: queued ? (\"queue\" as const) : (\"context\" as const),\r\n    })\r\n\r\nexport const setQueue = async (\r\n    nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>,\r\n    contextUri?: string,\r\n) => {\r\n    const { _queue, _client } = PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    const res = await _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    })\r\n\r\n    await PlayerAPI.skipToNext()\r\n\r\n    if (contextUri) {\r\n        await new Promise<void>(resolve => {\r\n            PlayerAPI.getEvents().addListener(\"queue_update\", () => resolve(), { once: true })\r\n        })\r\n        await setPlayingContext(contextUri)\r\n    }\r\n\r\n    return res\r\n}\r\n\r\nexport const setPlayingContext = (uri: string) => {\r\n    const { sessionId } = PlayerAPI._state\r\n    return PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri })\r\n}\r\n", "import { REACT_PROPS } from \"../../shared/util.ts\"\r\n\r\nexport const RATINGS_FOLDER_NAME = \"Ratings\"\r\n\r\nexport const getTrackLists = () =>\r\n    Array.from(document.querySelectorAll<HTMLDivElement>(\".main-trackList-trackList.main-trackList-indexable\"))\r\nexport const getTrackListTracks = (trackList: HTMLDivElement) =>\r\n    Array.from(trackList.querySelectorAll<HTMLDivElement>(\".main-trackList-trackListRow\"))\r\n\r\nexport const getTrackListTrackUri = (track: HTMLDivElement) => {\r\n    const rowSectionEnd = track.querySelector<HTMLDivElement>(\".main-trackList-rowSectionEnd\")!\r\n    const reactProps = rowSectionEnd[REACT_PROPS]\r\n    const { props } =\r\n        // artist & local tracks & albums\r\n        reactProps.children.at?.(-1).props.menu ??\r\n        // playlists\r\n        reactProps.children.props.children.at(-1).props.menu\r\n\r\n    return props.uri\r\n}\r\n\r\nexport const getNowPlayingBar = () => document.querySelector<HTMLDivElement>(\"div.main-nowPlayingBar-nowPlayingBar\")!\r\nexport const getCollectionActionBarRow = () => document.querySelector<HTMLDivElement>(`div.main-actionBar-ActionBarRow`)\r\n\r\nexport const playlistButtonSelector = `button[aria-label=\"Add to Liked Songs\"], button[aria-label=\"Add to playlist\"], button[aria-label=\"Remove recommendation\"]`\r\nexport const getPlaylistButton = (parent: HTMLElement) =>\r\n    parent.querySelector<HTMLButtonElement>(playlistButtonSelector)!\r\nexport const getCollectionPlaylistButton = () => {\r\n    const ab = getCollectionActionBarRow()\r\n    return ab?.querySelector<HTMLButtonElement>(\r\n        `button[aria-label=\"Remove from Your Library\"], button[aria-label=\"Save to Your Library\"]`,\r\n    )\r\n}\r\n", "import { getTrackListTracks, getTrackLists } from \"../extensions/star-ratings-2/util.ts\"\r\nimport { _ } from \"./deps.ts\"\r\n\r\nimport { PermanentMutationObserver, REACT_FIBER } from \"./util.ts\"\r\n\r\nconst { Player, URI } = Spicetify\r\nconst { PlayerAPI, History } = Spicetify.Platform\r\n\r\nexport const onHistoryChanged = (\r\n    toMatchTo: string | RegExp | ((location: string) => boolean),\r\n    callback: (uri: string) => void,\r\n    dropDuplicates = true,\r\n) => {\r\n    const createMatchFn = (toMatchTo: string | RegExp | ((input: string) => boolean)) => {\r\n        switch (typeof toMatchTo) {\r\n            case \"string\":\r\n                return (input: string) => input?.startsWith(toMatchTo) ?? false\r\n\r\n            case \"function\":\r\n                return toMatchTo\r\n\r\n            default:\r\n                return (input: string) => toMatchTo.test(input)\r\n        }\r\n    }\r\n\r\n    let lastPathname = \"\"\r\n    const matchFn = createMatchFn(toMatchTo)\r\n\r\n    const historyChanged = ({ pathname }: any) => {\r\n        if (matchFn(pathname)) {\r\n            if (dropDuplicates && lastPathname === pathname) {\r\n            } else callback(URI.fromString(pathname).toURI())\r\n        }\r\n        lastPathname = pathname\r\n    }\r\n\r\n    historyChanged(History.location ?? {})\r\n    return History.listen(historyChanged)\r\n}\r\n\r\nexport const onSongChanged = (callback: (state: Spicetify.Platform.PlayerAPI.PlayerState) => void) => {\r\n    callback(PlayerAPI._state)\r\n    Player.addEventListener(\"songchange\", event => callback(event!.data))\r\n}\r\n\r\nexport const onPlayedPaused = (callback: (state: Spicetify.Platform.PlayerAPI.PlayerState) => void) => {\r\n    callback(PlayerAPI._state)\r\n    Player.addEventListener(\"onplaypause\", event => callback(event!.data))\r\n}\r\n\r\nconst PRESENTATION_KEY = Symbol(\"presentation\")\r\n\r\ntype TrackListElement = HTMLDivElement & { [PRESENTATION_KEY]?: HTMLDivElement }\r\ntype TrackElement = HTMLDivElement & { props?: Record<string, any> }\r\n\r\ntype TrackListMutationListener = (trackList: Required<TrackListElement>, tracks: Array<Required<TrackElement>>) => void\r\nexport const onTrackListMutationListeners = new Array<TrackListMutationListener>()\r\n\r\nconst _onTrackListMutation = (\r\n    trackList: Required<TrackListElement>,\r\n    record: MutationRecord[],\r\n    observer: MutationObserver,\r\n) => {\r\n    const tracks = getTrackListTracks(trackList[PRESENTATION_KEY]) as Array<Required<TrackElement>>\r\n\r\n    const reactFiber = trackList[PRESENTATION_KEY][REACT_FIBER].alternate\r\n    const reactTracks = reactFiber.pendingProps.children as any[]\r\n    const tracksProps = reactTracks.map((child: any) => child.props as Record<string, any>)\r\n\r\n    tracks.forEach((track, i) => (track.props = tracksProps[i]))\r\n\r\n    const fullyRenderedTracks = tracks.filter(track => track.props?.uri)\r\n\r\n    onTrackListMutationListeners.map(listener => listener(trackList, fullyRenderedTracks))\r\n}\r\n\r\nnew PermanentMutationObserver(\"main\", () => {\r\n    const trackLists = getTrackLists() as Array<TrackListElement>\r\n    trackLists\r\n        .filter(trackList => !trackList[PRESENTATION_KEY])\r\n        .forEach(trackList => {\r\n            trackList[PRESENTATION_KEY] = trackList.lastElementChild!.firstElementChild!\r\n                .nextElementSibling! as HTMLDivElement\r\n\r\n            new MutationObserver((record, observer) =>\r\n                _onTrackListMutation(trackList as Required<TrackListElement>, record, observer),\r\n            ).observe(trackList[PRESENTATION_KEY], { childList: true })\r\n        })\r\n})\r\n", "import { onTrackListMutationListeners } from \"../../shared/listeners.ts\"\r\n\r\nimport Dexie, { Table } from \"https://esm.sh/dexie\"\r\n\r\ninterface IsrcObject {\r\n    isrc: string\r\n    uri: string\r\n}\r\n\r\nconst db = new (class extends Dexie {\r\n    webTracks!: Table<Track>\r\n    isrcs!: Table<IsrcObject>\r\n\r\n    constructor() {\r\n        super(\"library-data\")\r\n        this.version(1).stores({\r\n            webTracks: \"&uri\",\r\n            isrcs: \"&isrc, uri\",\r\n        })\r\n    }\r\n})()\r\n\r\nimport { searchTracks } from \"../../shared/GraphQL/searchTracks.ts\"\r\nimport { spotifyApi } from \"../../shared/api.ts\"\r\nimport { chunkify50 } from \"../../shared/fp.ts\"\r\nimport { Track } from \"https://esm.sh/v135/@fostertheweb/spotify-web-api-ts-sdk@1.2.1/dist/mjs/types.js\"\r\nimport { _ } from \"../../shared/deps.ts\"\r\n\r\nconst { URI } = Spicetify\r\n\r\nexport const getMainUrisForIsrcs = async (isrcs: string[]) => {\r\n    const tracks = await db.isrcs.bulkGet(isrcs)\r\n    const missedTracks = tracks.reduce((missed, track, i) => (track || missed.push(i), missed), [] as number[])\r\n\r\n    if (missedTracks.length) {\r\n        const missedIsrcs = missedTracks.map(i => isrcs[i])\r\n        const resultsIsrcs = await Promise.allSettled(missedIsrcs.map(isrc => searchTracks(`isrc:${isrc}`, 0, 1)))\r\n        const filledTracks = _.compact(\r\n            resultsIsrcs.map((resultsIsrc, i) => {\r\n                const isrc = isrcs[i]\r\n                if (resultsIsrc.status === \"fulfilled\") {\r\n                    const uri = resultsIsrc.value[0]?.item.data.uri\r\n                    if (!uri) {\r\n                        console.error(\"Couldn't get matching track for isrc:\", isrc)\r\n                        return\r\n                    }\r\n                    return { isrc, uri }\r\n                }\r\n                console.error(\"Failed searching track for isrc:\", isrc)\r\n            }),\r\n        )\r\n        db.isrcs.bulkAdd(filledTracks)\r\n        missedTracks.forEach((missedTrack, i) => {\r\n            tracks[missedTrack] = filledTracks[i]\r\n        })\r\n    }\r\n\r\n    return tracks.map(track => track?.uri)\r\n}\r\n\r\nexport const getISRCsForUris = async (uris: string[]) => {\r\n    const tracks = await db.webTracks.bulkGet(uris)\r\n    const missedTracks = tracks.reduce((missed, track, i) => (track || missed.push(i), missed), [] as number[])\r\n\r\n    if (missedTracks.length) {\r\n        const missedIds = missedTracks.map(i => URI.fromString(uris[i]).id!)\r\n        const filledTracks = await chunkify50(is => spotifyApi.tracks.get(is))(missedIds)\r\n        db.webTracks.bulkAdd(filledTracks)\r\n        missedTracks.forEach((missedTrack, i) => {\r\n            tracks[missedTrack] = filledTracks[i]\r\n        })\r\n    }\r\n\r\n    return tracks.map(track => track!.external_ids.isrc)\r\n}\r\n\r\nconst greyOutTrack = (track: HTMLDivElement) => {\r\n    track.style.backgroundColor = \"gray\"\r\n    track.style.opacity = \"0.3\"\r\n}\r\n\r\nonTrackListMutationListeners.push(async (_, tracks) => {\r\n    const uris = tracks.map(track => track.props.uri)\r\n    const isrcs = await getISRCsForUris(uris)\r\n    const isrcUris = await getMainUrisForIsrcs(isrcs)\r\n    tracks.map((track, i) => {\r\n        const isrcUri = isrcUris[i]\r\n        if (isrcUri && uris[i] !== isrcUri) {\r\n            greyOutTrack(track)\r\n        }\r\n    })\r\n})\r\n", "// Spotify for Windows (64 bit)\r\n// 1.2.26.1187.g36b715a1\r\n// Spicetify v2.30.0\r\n// xpui_2023-12-04_1701707306292_36b715a\r\n// cef_119.4.4+g5d1e039+chromium-119.0.6045.199\r\n// Runtime: Alloy\r\n// xpui-routes-search.js\r\n\r\nconst Sa = {\r\n    kind: \"Document\",\r\n    definitions: [\r\n        {\r\n            kind: \"FragmentDefinition\",\r\n            name: {\r\n                kind: \"Name\",\r\n                value: \"searchImageURLAndSize\",\r\n            },\r\n            typeCondition: {\r\n                kind: \"NamedType\",\r\n                name: {\r\n                    kind: \"Name\",\r\n                    value: \"ImageSource\",\r\n                },\r\n            },\r\n            selectionSet: {\r\n                kind: \"SelectionSet\",\r\n                selections: [\r\n                    {\r\n                        kind: \"Field\",\r\n                        name: {\r\n                            kind: \"Name\",\r\n                            value: \"url\",\r\n                        },\r\n                    },\r\n                    {\r\n                        kind: \"Field\",\r\n                        name: {\r\n                            kind: \"Name\",\r\n                            value: \"width\",\r\n                        },\r\n                    },\r\n                    {\r\n                        kind: \"Field\",\r\n                        name: {\r\n                            kind: \"Name\",\r\n                            value: \"height\",\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        },\r\n    ],\r\n}\r\n\r\nconst Na = {\r\n    kind: \"Document\",\r\n    definitions: [\r\n        {\r\n            kind: \"FragmentDefinition\",\r\n            name: {\r\n                kind: \"Name\",\r\n                value: \"searchImageSources\",\r\n            },\r\n            typeCondition: {\r\n                kind: \"NamedType\",\r\n                name: {\r\n                    kind: \"Name\",\r\n                    value: \"Image\",\r\n                },\r\n            },\r\n            selectionSet: {\r\n                kind: \"SelectionSet\",\r\n                selections: [\r\n                    {\r\n                        kind: \"Field\",\r\n                        name: {\r\n                            kind: \"Name\",\r\n                            value: \"sources\",\r\n                        },\r\n                        selectionSet: {\r\n                            kind: \"SelectionSet\",\r\n                            selections: [\r\n                                {\r\n                                    kind: \"FragmentSpread\",\r\n                                    name: {\r\n                                        kind: \"Name\",\r\n                                        value: \"searchImageURLAndSize\",\r\n                                    },\r\n                                },\r\n                            ],\r\n                        },\r\n                    },\r\n                    {\r\n                        kind: \"Field\",\r\n                        name: {\r\n                            kind: \"Name\",\r\n                            value: \"extractedColors\",\r\n                        },\r\n                        selectionSet: {\r\n                            kind: \"SelectionSet\",\r\n                            selections: [\r\n                                {\r\n                                    kind: \"Field\",\r\n                                    name: {\r\n                                        kind: \"Name\",\r\n                                        value: \"colorDark\",\r\n                                    },\r\n                                    selectionSet: {\r\n                                        kind: \"SelectionSet\",\r\n                                        selections: [\r\n                                            {\r\n                                                kind: \"Field\",\r\n                                                name: {\r\n                                                    kind: \"Name\",\r\n                                                    value: \"hex\",\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                kind: \"Field\",\r\n                                                name: {\r\n                                                    kind: \"Name\",\r\n                                                    value: \"isFallback\",\r\n                                                },\r\n                                            },\r\n                                        ],\r\n                                    },\r\n                                },\r\n                            ],\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        },\r\n    ],\r\n}\r\n\r\nconst ja = {\r\n    kind: \"Document\",\r\n    definitions: [\r\n        {\r\n            kind: \"FragmentDefinition\",\r\n            name: {\r\n                kind: \"Name\",\r\n                value: \"searchTrackDesktop\",\r\n            },\r\n            typeCondition: {\r\n                kind: \"NamedType\",\r\n                name: {\r\n                    kind: \"Name\",\r\n                    value: \"TrackResponseWrapper\",\r\n                },\r\n            },\r\n            selectionSet: {\r\n                kind: \"SelectionSet\",\r\n                selections: [\r\n                    {\r\n                        kind: \"Field\",\r\n                        name: {\r\n                            kind: \"Name\",\r\n                            value: \"data\",\r\n                        },\r\n                        selectionSet: {\r\n                            kind: \"SelectionSet\",\r\n                            selections: [\r\n                                {\r\n                                    kind: \"Field\",\r\n                                    name: {\r\n                                        kind: \"Name\",\r\n                                        value: \"__typename\",\r\n                                    },\r\n                                },\r\n                                {\r\n                                    kind: \"InlineFragment\",\r\n                                    typeCondition: {\r\n                                        kind: \"NamedType\",\r\n                                        name: {\r\n                                            kind: \"Name\",\r\n                                            value: \"Track\",\r\n                                        },\r\n                                    },\r\n                                    selectionSet: {\r\n                                        kind: \"SelectionSet\",\r\n                                        selections: [\r\n                                            {\r\n                                                kind: \"Field\",\r\n                                                name: {\r\n                                                    kind: \"Name\",\r\n                                                    value: \"uri\",\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                kind: \"Field\",\r\n                                                name: {\r\n                                                    kind: \"Name\",\r\n                                                    value: \"id\",\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                kind: \"Field\",\r\n                                                name: {\r\n                                                    kind: \"Name\",\r\n                                                    value: \"name\",\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                kind: \"Field\",\r\n                                                name: {\r\n                                                    kind: \"Name\",\r\n                                                    value: \"albumOfTrack\",\r\n                                                },\r\n                                                selectionSet: {\r\n                                                    kind: \"SelectionSet\",\r\n                                                    selections: [\r\n                                                        {\r\n                                                            kind: \"Field\",\r\n                                                            name: {\r\n                                                                kind: \"Name\",\r\n                                                                value: \"uri\",\r\n                                                            },\r\n                                                        },\r\n                                                        {\r\n                                                            kind: \"Field\",\r\n                                                            name: {\r\n                                                                kind: \"Name\",\r\n                                                                value: \"name\",\r\n                                                            },\r\n                                                        },\r\n                                                        {\r\n                                                            kind: \"Field\",\r\n                                                            name: {\r\n                                                                kind: \"Name\",\r\n                                                                value: \"coverArt\",\r\n                                                            },\r\n                                                            selectionSet: {\r\n                                                                kind: \"SelectionSet\",\r\n                                                                selections: [\r\n                                                                    {\r\n                                                                        kind: \"FragmentSpread\",\r\n                                                                        name: {\r\n                                                                            kind: \"Name\",\r\n                                                                            value: \"searchImageSources\",\r\n                                                                        },\r\n                                                                    },\r\n                                                                ],\r\n                                                            },\r\n                                                        },\r\n                                                        {\r\n                                                            kind: \"Field\",\r\n                                                            name: {\r\n                                                                kind: \"Name\",\r\n                                                                value: \"id\",\r\n                                                            },\r\n                                                        },\r\n                                                    ],\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                kind: \"Field\",\r\n                                                name: {\r\n                                                    kind: \"Name\",\r\n                                                    value: \"artists\",\r\n                                                },\r\n                                                selectionSet: {\r\n                                                    kind: \"SelectionSet\",\r\n                                                    selections: [\r\n                                                        {\r\n                                                            kind: \"Field\",\r\n                                                            name: {\r\n                                                                kind: \"Name\",\r\n                                                                value: \"items\",\r\n                                                            },\r\n                                                            selectionSet: {\r\n                                                                kind: \"SelectionSet\",\r\n                                                                selections: [\r\n                                                                    {\r\n                                                                        kind: \"Field\",\r\n                                                                        name: {\r\n                                                                            kind: \"Name\",\r\n                                                                            value: \"uri\",\r\n                                                                        },\r\n                                                                    },\r\n                                                                    {\r\n                                                                        kind: \"Field\",\r\n                                                                        name: {\r\n                                                                            kind: \"Name\",\r\n                                                                            value: \"profile\",\r\n                                                                        },\r\n                                                                        selectionSet: {\r\n                                                                            kind: \"SelectionSet\",\r\n                                                                            selections: [\r\n                                                                                {\r\n                                                                                    kind: \"Field\",\r\n                                                                                    name: {\r\n                                                                                        kind: \"Name\",\r\n                                                                                        value: \"name\",\r\n                                                                                    },\r\n                                                                                },\r\n                                                                            ],\r\n                                                                        },\r\n                                                                    },\r\n                                                                ],\r\n                                                            },\r\n                                                        },\r\n                                                    ],\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                kind: \"Field\",\r\n                                                name: {\r\n                                                    kind: \"Name\",\r\n                                                    value: \"contentRating\",\r\n                                                },\r\n                                                selectionSet: {\r\n                                                    kind: \"SelectionSet\",\r\n                                                    selections: [\r\n                                                        {\r\n                                                            kind: \"Field\",\r\n                                                            name: {\r\n                                                                kind: \"Name\",\r\n                                                                value: \"label\",\r\n                                                            },\r\n                                                        },\r\n                                                    ],\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                kind: \"Field\",\r\n                                                name: {\r\n                                                    kind: \"Name\",\r\n                                                    value: \"duration\",\r\n                                                },\r\n                                                selectionSet: {\r\n                                                    kind: \"SelectionSet\",\r\n                                                    selections: [\r\n                                                        {\r\n                                                            kind: \"Field\",\r\n                                                            name: {\r\n                                                                kind: \"Name\",\r\n                                                                value: \"totalMilliseconds\",\r\n                                                            },\r\n                                                        },\r\n                                                    ],\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                kind: \"Field\",\r\n                                                name: {\r\n                                                    kind: \"Name\",\r\n                                                    value: \"playability\",\r\n                                                },\r\n                                                selectionSet: {\r\n                                                    kind: \"SelectionSet\",\r\n                                                    selections: [\r\n                                                        {\r\n                                                            kind: \"Field\",\r\n                                                            name: {\r\n                                                                kind: \"Name\",\r\n                                                                value: \"playable\",\r\n                                                            },\r\n                                                        },\r\n                                                    ],\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                kind: \"Field\",\r\n                                                name: {\r\n                                                    kind: \"Name\",\r\n                                                    value: \"associations\",\r\n                                                },\r\n                                                selectionSet: {\r\n                                                    kind: \"SelectionSet\",\r\n                                                    selections: [\r\n                                                        {\r\n                                                            kind: \"Field\",\r\n                                                            name: {\r\n                                                                kind: \"Name\",\r\n                                                                value: \"associatedVideos\",\r\n                                                            },\r\n                                                            selectionSet: {\r\n                                                                kind: \"SelectionSet\",\r\n                                                                selections: [\r\n                                                                    {\r\n                                                                        kind: \"Field\",\r\n                                                                        name: {\r\n                                                                            kind: \"Name\",\r\n                                                                            value: \"totalCount\",\r\n                                                                        },\r\n                                                                    },\r\n                                                                ],\r\n                                                            },\r\n                                                        },\r\n                                                    ],\r\n                                                },\r\n                                            },\r\n                                        ],\r\n                                    },\r\n                                },\r\n                            ],\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        },\r\n    ],\r\n}\r\n\r\nexport const searchTracksDefinition = {\r\n    kind: \"Document\",\r\n    definitions: [\r\n        {\r\n            kind: \"OperationDefinition\",\r\n            operation: \"query\",\r\n            name: {\r\n                kind: \"Name\",\r\n                value: \"searchTracks\",\r\n            },\r\n            variableDefinitions: [\r\n                {\r\n                    kind: \"VariableDefinition\",\r\n                    variable: {\r\n                        kind: \"Variable\",\r\n                        name: {\r\n                            kind: \"Name\",\r\n                            value: \"searchTerm\",\r\n                        },\r\n                    },\r\n                    type: {\r\n                        kind: \"NonNullType\",\r\n                        type: {\r\n                            kind: \"NamedType\",\r\n                            name: {\r\n                                kind: \"Name\",\r\n                                value: \"String\",\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    kind: \"VariableDefinition\",\r\n                    variable: {\r\n                        kind: \"Variable\",\r\n                        name: {\r\n                            kind: \"Name\",\r\n                            value: \"limit\",\r\n                        },\r\n                    },\r\n                    type: {\r\n                        kind: \"NamedType\",\r\n                        name: {\r\n                            kind: \"Name\",\r\n                            value: \"Int\",\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    kind: \"VariableDefinition\",\r\n                    variable: {\r\n                        kind: \"Variable\",\r\n                        name: {\r\n                            kind: \"Name\",\r\n                            value: \"offset\",\r\n                        },\r\n                    },\r\n                    type: {\r\n                        kind: \"NamedType\",\r\n                        name: {\r\n                            kind: \"Name\",\r\n                            value: \"Int\",\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n            selectionSet: {\r\n                kind: \"SelectionSet\",\r\n                selections: [\r\n                    {\r\n                        kind: \"Field\",\r\n                        name: {\r\n                            kind: \"Name\",\r\n                            value: \"searchV2\",\r\n                        },\r\n                        arguments: [\r\n                            {\r\n                                kind: \"Argument\",\r\n                                name: {\r\n                                    kind: \"Name\",\r\n                                    value: \"query\",\r\n                                },\r\n                                value: {\r\n                                    kind: \"Variable\",\r\n                                    name: {\r\n                                        kind: \"Name\",\r\n                                        value: \"searchTerm\",\r\n                                    },\r\n                                },\r\n                            },\r\n                            {\r\n                                kind: \"Argument\",\r\n                                name: {\r\n                                    kind: \"Name\",\r\n                                    value: \"limit\",\r\n                                },\r\n                                value: {\r\n                                    kind: \"Variable\",\r\n                                    name: {\r\n                                        kind: \"Name\",\r\n                                        value: \"limit\",\r\n                                    },\r\n                                },\r\n                            },\r\n                            {\r\n                                kind: \"Argument\",\r\n                                name: {\r\n                                    kind: \"Name\",\r\n                                    value: \"offset\",\r\n                                },\r\n                                value: {\r\n                                    kind: \"Variable\",\r\n                                    name: {\r\n                                        kind: \"Name\",\r\n                                        value: \"offset\",\r\n                                    },\r\n                                },\r\n                            },\r\n                        ],\r\n                        selectionSet: {\r\n                            kind: \"SelectionSet\",\r\n                            selections: [\r\n                                {\r\n                                    kind: \"Field\",\r\n                                    name: {\r\n                                        kind: \"Name\",\r\n                                        value: \"query\",\r\n                                    },\r\n                                },\r\n                                {\r\n                                    kind: \"Field\",\r\n                                    name: {\r\n                                        kind: \"Name\",\r\n                                        value: \"tracksV2\",\r\n                                    },\r\n                                    selectionSet: {\r\n                                        kind: \"SelectionSet\",\r\n                                        selections: [\r\n                                            {\r\n                                                kind: \"Field\",\r\n                                                name: {\r\n                                                    kind: \"Name\",\r\n                                                    value: \"totalCount\",\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                kind: \"Field\",\r\n                                                name: {\r\n                                                    kind: \"Name\",\r\n                                                    value: \"items\",\r\n                                                },\r\n                                                selectionSet: {\r\n                                                    kind: \"SelectionSet\",\r\n                                                    selections: [\r\n                                                        {\r\n                                                            kind: \"Field\",\r\n                                                            name: {\r\n                                                                kind: \"Name\",\r\n                                                                value: \"matchedFields\",\r\n                                                            },\r\n                                                        },\r\n                                                        {\r\n                                                            kind: \"Field\",\r\n                                                            name: {\r\n                                                                kind: \"Name\",\r\n                                                                value: \"item\",\r\n                                                            },\r\n                                                            selectionSet: {\r\n                                                                kind: \"SelectionSet\",\r\n                                                                selections: [\r\n                                                                    {\r\n                                                                        kind: \"FragmentSpread\",\r\n                                                                        name: {\r\n                                                                            kind: \"Name\",\r\n                                                                            value: \"searchTrackDesktop\",\r\n                                                                        },\r\n                                                                    },\r\n                                                                ],\r\n                                                            },\r\n                                                        },\r\n                                                    ],\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                kind: \"Field\",\r\n                                                name: {\r\n                                                    kind: \"Name\",\r\n                                                    value: \"pagingInfo\",\r\n                                                },\r\n                                                selectionSet: {\r\n                                                    kind: \"SelectionSet\",\r\n                                                    selections: [\r\n                                                        {\r\n                                                            kind: \"Field\",\r\n                                                            name: {\r\n                                                                kind: \"Name\",\r\n                                                                value: \"nextOffset\",\r\n                                                            },\r\n                                                        },\r\n                                                        {\r\n                                                            kind: \"Field\",\r\n                                                            name: {\r\n                                                                kind: \"Name\",\r\n                                                                value: \"limit\",\r\n                                                            },\r\n                                                        },\r\n                                                    ],\r\n                                                },\r\n                                            },\r\n                                        ],\r\n                                    },\r\n                                },\r\n                            ],\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        },\r\n        ...ja.definitions,\r\n        ...Na.definitions,\r\n        ...Sa.definitions,\r\n    ],\r\n}\r\n", "import { Items } from \"./sharedTypes.ts\"\r\nimport { searchTracksDefinition } from \"./Definitions/searchTracks.ts\"\r\n\r\nconst { GraphQL } = Spicetify\r\n\r\ntype Track = {\r\n    __typename: \"Track\"\r\n    uri: string\r\n    name: string\r\n    albumOfTrack: {\r\n        uri: string\r\n        name: string\r\n        coverArt: {\r\n            extractedColors: {\r\n                colorDark: {\r\n                    hex: string\r\n                    isFallback: boolean\r\n                }\r\n            }\r\n            sources: Array<Spicetify.Platform.ImageSized>\r\n        }\r\n        id: string\r\n    }\r\n    artists: Items<{\r\n        uri: string\r\n        profile: {\r\n            name: string\r\n        }\r\n    }>\r\n    contentRating: {\r\n        label: \"NONE\" | string\r\n    }\r\n    duration: {\r\n        totalMilliseconds: number\r\n    }\r\n    playability: {\r\n        playable: boolean\r\n    }\r\n    associations: any\r\n}\r\n\r\ntype TrackResponseWrapper = {\r\n    data: Track\r\n}\r\n\r\ntype searchModalResultsRes = Array<{\r\n    matchedFields: string[]\r\n    item: TrackResponseWrapper\r\n}>\r\nexport const searchTracks = async (q: string, offset = 0, limit = 50, topResultsNum = 20, includeAudiobooks = true) => {\r\n    const res = await GraphQL.Request(searchTracksDefinition, {\r\n        searchTerm: q,\r\n        offset,\r\n        limit,\r\n        numberOfTopResults: topResultsNum,\r\n        includeAudiobooks,\r\n    })\r\n\r\n    return res.data.searchV2.tracksV2.items as searchModalResultsRes\r\n}\r\n", "import { AccessToken, SpotifyApi } from \"https://esm.sh/@fostertheweb/spotify-web-api-ts-sdk\"\r\n\r\nimport { _ } from \"./deps.ts\"\r\n\r\nconst { CosmosAsync } = Spicetify\r\n\r\nexport const spotifyApi = SpotifyApi.withAccessToken(\"client-id\", {} as AccessToken, {\r\n    // @ts-ignore\r\n    fetch(url, opts) {\r\n        const { method } = opts!\r\n        // @ts-ignore\r\n        return CosmosAsync.resolve(method, url)\r\n    },\r\n    deserializer: {\r\n        deserialize(res) {\r\n            return (res as unknown as Spicetify.CosmosAsync.Response).body\r\n        },\r\n    },\r\n})\r\n\r\n/*                          Spotify Web API                                   */\r\n\r\nexport const fetchWebSoundOfSpotifyPlaylist = async (genre: string) => {\r\n    const name = `The Sound Of ${genre}`\r\n    const re = new RegExp(`^${_.escapeRegExp(name)}$`, \"i\")\r\n    const res = await spotifyApi.search(name, [\"playlist\"])\r\n    const item = res.playlists.items.find(item => item?.owner.id === \"thesoundsofspotify\" && re.test(item.name))\r\n    return item?.uri\r\n}\r\n\r\n/*                          Last FM                                       */\r\n\r\nexport interface fetchLastFMTrackResMinimal {\r\n    track: {\r\n        name: string\r\n        mbid: string\r\n        url: string\r\n        duration: string\r\n        listeners: string\r\n        playcount: string\r\n        artist: {\r\n            name: string\r\n            mbid: string\r\n            url: string\r\n        }\r\n        album: {\r\n            artist: string\r\n            title: string\r\n            mbid: string\r\n            url: string\r\n        }\r\n        userplaycount: string\r\n        userloved: string\r\n        toptags: {\r\n            tag: Array<{\r\n                name: string\r\n                url: string\r\n            }>\r\n        }\r\n        wiki: {\r\n            published: string\r\n            summary: string\r\n            content: string\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchLastFMTrack = async (LFMApiKey: string, artist: string, trackName: string, lastFmUsername = \"\") => {\r\n    const url = new URL(\"https://ws.audioscrobbler.com/2.0/\")\r\n    url.searchParams.append(\"method\", \"track.getInfo\")\r\n    url.searchParams.append(\"api_key\", LFMApiKey)\r\n    url.searchParams.append(\"artist\", artist)\r\n    url.searchParams.append(\"track\", trackName)\r\n    url.searchParams.append(\"format\", \"json\")\r\n    url.searchParams.append(\"username\", lastFmUsername)\r\n\r\n    const res = (await fetch(url).then(res => res.json())) as fetchLastFMTrackResMinimal\r\n\r\n    return res.track\r\n}\r\n\r\n/*                          Youtube                                       */\r\n\r\nexport interface SearchYoutubeResMinimal {\r\n    items: Array<{\r\n        id: {\r\n            videoId: string\r\n        }\r\n        snippet: {\r\n            publishedAt: string\r\n            channelId: string\r\n            title: string\r\n            description: string\r\n            channelTitle: string\r\n            publishTime: string\r\n        }\r\n    }>\r\n}\r\n\r\nexport const searchYoutube = async (YouTubeApiKey: string, searchString: string) => {\r\n    const url = new URL(\"https://www.googleapis.com/youtube/v3/search\")\r\n    url.searchParams.append(\"part\", \"snippet\")\r\n    url.searchParams.append(\"maxResults\", \"10\")\r\n    url.searchParams.append(\"q\", searchString)\r\n    url.searchParams.append(\"type\", \"video\")\r\n    url.searchParams.append(\"key\", YouTubeApiKey)\r\n\r\n    return (await fetch(url).then(res => res.json())) as SearchYoutubeResMinimal\r\n}\r\n", "// @deno-types=\"npm:@types/lodash\"\r\nimport { default as ld } from \"https://esm.sh/lodash\"\r\nexport const _ = ld\r\n\r\n// @deno-types=\"npm:@types/lodash/fp\"\r\nimport { default as ld_fp } from \"https://esm.sh/lodash/fp\"\r\nexport const fp = ld_fp\r\n", "import { _ } from \"./deps.ts\"\r\n\r\nconst { Snackbar } = Spicetify\r\n\r\ntype async = {\r\n    <A, B>(f: (a: A) => Promise<B>): (fa: Promise<A>) => Promise<B>\r\n    <A, B>(f: (a: A) => B): (fa: Promise<A>) => Promise<B>\r\n}\r\nexport const pMchain: async =\r\n    <A, R>(f: (a: A) => R) =>\r\n    async (fa: A) =>\r\n        f(await fa)\r\n\r\nexport const chunkify50 =\r\n    <A, R>(fn: (a: Array<A>) => R) =>\r\n    async (args: Array<A>) => {\r\n        const a = await Promise.all(_.chunk(args, 50).map(fn))\r\n        return a.flat()\r\n    }\r\n\r\nexport const progressify = <F extends (...args: any) => any>(f: F, n: number) => {\r\n    let i = n,\r\n        lastProgress = 0\r\n    return async function (..._: Parameters<F>): Promise<Awaited<ReturnType<F>>> {\r\n        const res = (await f(...arguments)) as Awaited<ReturnType<F>>,\r\n            progress = Math.round((1 - --i / n) * 100)\r\n        if (progress > lastProgress) {\r\n            ;(Snackbar as any).updater.enqueueSetState(Snackbar, () => ({\r\n                snacks: [],\r\n                queue: [],\r\n            }))\r\n            Snackbar.enqueueSnackbar(`Loading: ${progress}%`, {\r\n                variant: \"default\",\r\n                autoHideDuration: 200,\r\n                transitionDuration: {\r\n                    enter: 0,\r\n                    exit: 0,\r\n                },\r\n            })\r\n        }\r\n        lastProgress = progress\r\n        return res\r\n    }\r\n}\r\n\r\nexport type OneUplet<E> = [E]\r\nexport type TwoUplet<E> = [E, E]\r\nexport type Triplet<E> = [E, E, E]\r\nexport type Quadruplet<E> = [E, E, E, E]\r\nexport const zip_n_uplets =\r\n    <R>(n: number) =>\r\n    <A>(a: A[]) =>\r\n        a.map((_, i, a) => a.slice(i, i + n)).slice(0, 1 - n) as R[]\r\n"],
  "mappings": "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",
  "names": ["URI", "PlayerAPI", "URI", "_"]
}
