{
  "version": 3,
  "sources": ["../../extensions/star-ratings/app.ts", "../../shared/fp.ts", "../../shared/util.ts", "../../shared/api.ts", "../../extensions/star-ratings/ratings.ts", "../../extensions/star-ratings/settings.ts", "../../shared/settings.tsx", "../../shared/modules.ts", "../../extensions/star-ratings/util.ts", "../../extensions/star-ratings/stars.ts"],
  "sourcesContent": ["import { array as ar, function as f } from \"https://esm.sh/fp-ts\"\r\nimport { anyPass } from \"https://esm.sh/fp-ts-std/Predicate\"\r\nimport { fetchGQLAlbum, fetchPlatArtistLikedTracks, fetchPlatPlaylistContents } from \"../../shared/api.ts\"\r\nimport { SpotifyURI, waitForElement } from \"../../shared/util.ts\"\r\nimport { addRatingsListenersToStars, aggregateRatings, loadRatings, tracksRatings } from \"./ratings.ts\"\r\nimport { CONFIG } from \"./settings.ts\"\r\nimport { StarStops, createStars, setStarsGradientByRating } from \"./stars.ts\"\r\nimport {\r\n    STAR_SIZE,\r\n    getFirstPlus,\r\n    getLastColIndex,\r\n    getStarsContainer,\r\n    getStarsStops,\r\n    getTrackListHeader,\r\n    getTrackListTrackUri,\r\n    getTrackListTracks,\r\n    getTrackLists,\r\n    setStarsGradientFromContainerByRating,\r\n    starsS2N,\r\n} from \"./util.ts\"\r\n\r\nconst { URI } = Spicetify\r\n\r\nconst customTrackListColCss = [\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    \"[index] 16px [first] 4fr [var1] 2fr [var2] 1fr [last] minmax(120px,1fr)\",\r\n    \"[index] 16px [first] 6fr [var1] 4fr [var2] 3fr [var3] 2fr [last] minmax(120px,1fr)\",\r\n    \"[index] 16px [first] 6fr [var1] 4fr [var2] 3fr [var3] minmax(120px,2fr) [var3] 2fr [last] minmax(120px,1fr)\",\r\n]\r\n\r\nloadRatings()\r\n\r\n// TRACKLISTS\r\n\r\nconst updateTrackListStars = f.flow(\r\n    getTrackLists,\r\n    ar.map(trackList => {\r\n        const trackListTracks = getTrackListTracks(trackList)\r\n        if (trackListTracks.length === 0) return\r\n\r\n        const hasStars = (parent: HTMLElement) => parent.getElementsByClassName(\"stars\").length > 0\r\n        const locationUri = URI.fromString(Spicetify.Platform.History.location.pathname)\r\n\r\n        const firstElement = URI.isArtist(locationUri!)\r\n            ? trackListTracks[0]\r\n            : getTrackListHeader(trackList) ?? trackListTracks[0]\r\n\r\n        const [lastColIndex] = getLastColIndex(firstElement)\r\n        const newTrackListColCss = customTrackListColCss[lastColIndex - f.pipe(firstElement, hasStars, Number)]\r\n\r\n        if (!newTrackListColCss) return\r\n        firstElement.style.gridTemplateColumns = newTrackListColCss\r\n\r\n        f.pipe(\r\n            trackListTracks,\r\n            ar.map(track => {\r\n                const heart = getFirstPlus(track)\r\n                if (heart) heart.style.display = CONFIG.hideHearts ? \"none\" : \"flex\"\r\n\r\n                if (hasStars(track)) return\r\n\r\n                let ratingColumn: HTMLDivElement | null = track.querySelector(\".starRatings\")\r\n                if (!ratingColumn) {\r\n                    const lastColumn = track.querySelector(\".main-trackList-rowSectionEnd\")\r\n                    const colIndex = Number(lastColumn?.getAttribute(\"aria-colindex\"))\r\n\r\n                    ratingColumn = document.createElement(\"div\")\r\n                    ratingColumn.setAttribute(\"aria-colindex\", String(colIndex))\r\n                    lastColumn?.setAttribute(\"aria-colindex\", String(colIndex + 1))\r\n                    ratingColumn.role = \"gridcell\"\r\n                    ratingColumn.style.display = \"flex\"\r\n                    ratingColumn.classList.add(\"main-trackList-rowSectionVariable\")\r\n                    ratingColumn.classList.add(\"starRatings\")\r\n                    track.insertBefore(ratingColumn, lastColumn)\r\n                    track.style.gridTemplateColumns = newTrackListColCss!\r\n                }\r\n\r\n                const trackUri = getTrackListTrackUri(track)\r\n                const uri = URI.fromString(trackUri)\r\n\r\n                if (!URI.isTrack(uri!)) return\r\n\r\n                const [starsContainer, starsConstructs] = createStars(uri!.id!, STAR_SIZE)\r\n                ratingColumn.appendChild(starsContainer)\r\n                f.pipe(\r\n                    starsConstructs,\r\n                    ar.unzip,\r\n                    ([_, starsStops]) => starsStops,\r\n                    setStarsGradientByRating(tracksRatings[trackUri] ?? 0),\r\n                )\r\n                addRatingsListenersToStars([starsContainer, starsConstructs], () => trackUri)\r\n\r\n                const setVisibleCond = () =>\r\n                    (starsContainer.style.visibility = tracksRatings[trackUri] ? \"visible\" : \"hidden\")\r\n\r\n                track.addEventListener(\"mouseover\", () => (starsContainer.style.visibility = \"visible\"))\r\n                track.addEventListener(\"mouseout\", setVisibleCond)\r\n                setVisibleCond()\r\n            }),\r\n        )\r\n    }),\r\n)\r\n\r\nlet mainElement: HTMLElement\r\nconst mainElementObserver = new MutationObserver(() => (CONFIG.showInTrackLists ? updateTrackListStars() : undefined))\r\n\r\nnew MutationObserver(() => {\r\n    const oldMainElement = mainElement\r\n    mainElement = document.querySelector<HTMLElement>(\"main\")!\r\n    if (mainElement && !mainElement.isEqualNode(oldMainElement)) {\r\n        if (oldMainElement) mainElementObserver.disconnect()\r\n        mainElementObserver.observe(mainElement, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n    }\r\n}).observe(document.body, {\r\n    childList: true,\r\n    subtree: true,\r\n})\r\n\r\n// COLLECTION\r\n\r\nconst updateCollectionStars = async (pathname: SpotifyURI, starsStops?: StarStops[]) => {\r\n    const uri = URI.fromString(pathname) as Required<Spicetify.URI>\r\n\r\n    if (!starsStops) starsStops = getStarsStops(\"collection\")\r\n\r\n    let uris\r\n    if (URI.isAlbum(uri))\r\n        uris = f.pipe(\r\n            await fetchGQLAlbum(`${uri}`),\r\n            x => x.tracks.items,\r\n            ar.map(x => x.track.uri),\r\n        )\r\n    else if (URI.isArtist(uri))\r\n        uris = f.pipe(\r\n            await fetchPlatArtistLikedTracks(`${uri}`),\r\n            ar.map(x => x.uri),\r\n        )\r\n    else if (URI.isPlaylistV1OrV2(uri))\r\n        uris = f.pipe(\r\n            await fetchPlatPlaylistContents(`${uri}`),\r\n            ar.map(x => x.uri),\r\n        )\r\n    else throw \"me out the window\"\r\n\r\n    setStarsGradientByRating(aggregateRatings(uris))(starsStops)\r\n}\r\n\r\nlet lastCollectionPlayButton: Element\r\nSpicetify.Platform.History.listen(async ({ pathname }: { pathname: string }) => {\r\n    const pageHasHeart = anyPass([URI.isAlbum, URI.isArtist, URI.isPlaylistV1OrV2])\r\n    if (!pageHasHeart(pathname)) return\r\n\r\n    lastCollectionPlayButton = (await waitForElement(\r\n        \".main-actionBar-ActionBar .main-playButton-PlayButton\",\r\n        0,\r\n        document.body,\r\n        lastCollectionPlayButton,\r\n    ))!\r\n\r\n    const [collectionStarsContainer, collectionStarsConstructs] = createStars(\"collection\", STAR_SIZE * 2)\r\n    getStarsContainer(\"collection\")?.remove()\r\n    lastCollectionPlayButton!.after(collectionStarsContainer)\r\n\r\n    const collectionStarsStops = f.pipe(collectionStarsConstructs, ar.unzip, ([_, starsStops]) => starsStops)\r\n\r\n    updateCollectionStars(pathname, collectionStarsStops)\r\n})\r\n\r\n// NOW PLAYING\r\n\r\nconst createNowPlayingStars = () => {\r\n    if (document.querySelectorAll(\".stars-now-playing\").length !== 0) return\r\n\r\n    const nowPlayingElementSelector = CONFIG.nowPlayingStarsOnRight\r\n        ? \".main-nowPlayingBar-extraControls\"\r\n        : \".main-nowPlayingWidget-trackInfo\"\r\n    const nowPlayingElement = document.querySelector(nowPlayingElementSelector)\r\n    if (!nowPlayingElement) return\r\n\r\n    const [nowPlayingStarsContainer, nowPlayingStarConstruct] = createStars(\"now-playing\", STAR_SIZE)\r\n    nowPlayingStarsContainer.style.display = \"none\"\r\n    nowPlayingStarsContainer.style.marginLeft = \"8px\"\r\n    nowPlayingStarsContainer.style.marginRight = \"8px\"\r\n\r\n    if (!CONFIG.nowPlayingStarsOnRight) nowPlayingElement.after(nowPlayingStarsContainer)\r\n    else nowPlayingElement.prepend(nowPlayingStarsContainer)\r\n\r\n    addRatingsListenersToStars(\r\n        [nowPlayingStarsContainer, nowPlayingStarConstruct],\r\n        () => Spicetify.Player.data.track?.uri!,\r\n    )\r\n}\r\n\r\ncreateNowPlayingStars()\r\n\r\nexport const updateNowPlayingStars = () => {\r\n    const trackUri = Spicetify.Player.data.track?.uri!\r\n    const nowPlayingStarsContainer = getStarsContainer(\"now-playing\")\r\n\r\n    nowPlayingStarsContainer.style.display = Spicetify.URI.isTrack(trackUri) ? \"flex\" : \"none\"\r\n\r\n    f.pipe(nowPlayingStarsContainer, setStarsGradientFromContainerByRating(tracksRatings[trackUri] ?? 0))\r\n}\r\n\r\nSpicetify.Player.addEventListener(\"songchange\", () => {\r\n    const trackUri = Spicetify.Player.data.item.uri!\r\n    if (\r\n        Number(CONFIG.skipThreshold) &&\r\n        (tracksRatings[trackUri] || Number.MAX_SAFE_INTEGER) <= starsS2N(CONFIG.skipThreshold)\r\n    )\r\n        return Spicetify.Player.next()\r\n\r\n    updateNowPlayingStars()\r\n})\r\nupdateNowPlayingStars()\r\n", "import {\r\n    array as ar,\r\n    eq,\r\n    string as str,\r\n    record as rec,\r\n    refinement as ref,\r\n    semigroup as sg,\r\n    function as f,\r\n} from \"https://esm.sh/fp-ts\"\r\nimport { guard, memoize } from \"https://esm.sh/fp-ts-std/Function\"\r\n\r\ntype refineBranch<A, B extends A, R> = [ref.Refinement<A, B>, (x: B) => R]\r\nexport const guard2 = <A, A1 extends A, A2 extends A, R>(branches: [refineBranch<A, A1, R>, refineBranch<A, A2, R>]) =>\r\n    guard(branches as unknown as [refineBranch<A, A, R>, refineBranch<A, A, R>])\r\nexport const guard3 = <A, A1 extends A, A2 extends A, A3 extends A, R>(\r\n    branches: [refineBranch<A, A1, R>, refineBranch<A, A2, R>, refineBranch<A, A3, R>],\r\n) => guard(branches as unknown as [refineBranch<A, A, R>, refineBranch<A, A, R>, refineBranch<A, A, R>])\r\nexport const guard4 = <A, A1 extends A, A2 extends A, A3 extends A, A4 extends A, R>(\r\n    branches: [refineBranch<A, A1, R>, refineBranch<A, A2, R>, refineBranch<A, A3, R>, refineBranch<A, A4, R>],\r\n) =>\r\n    guard(\r\n        branches as unknown as [\r\n            refineBranch<A, A, R>,\r\n            refineBranch<A, A, R>,\r\n            refineBranch<A, A, R>,\r\n            refineBranch<A, A, R>,\r\n        ],\r\n    )\r\nexport const guard5 = <A, A1 extends A, A2 extends A, A3 extends A, A4 extends A, A5 extends A, R>(\r\n    branches: [\r\n        refineBranch<A, A1, R>,\r\n        refineBranch<A, A2, R>,\r\n        refineBranch<A, A3, R>,\r\n        refineBranch<A, A4, R>,\r\n        refineBranch<A, A5, R>,\r\n    ],\r\n) =>\r\n    guard(\r\n        branches as unknown as [\r\n            refineBranch<A, A, R>,\r\n            refineBranch<A, A, R>,\r\n            refineBranch<A, A, R>,\r\n            refineBranch<A, A, R>,\r\n            refineBranch<A, A, R>,\r\n        ],\r\n    )\r\n\r\nexport const objConcat2 = <A1, A2>() => rec.getUnionSemigroup(sg.first<any>()).concat as (x: A1, y: A2) => A1 & A2\r\nexport const objConcat = <A>() => ar.reduce({} as A, objConcat2<A, A>())\r\n\r\ntype async = {\r\n    <A, B>(f: (a: A) => Promise<B>): (fa: Promise<A>) => Promise<B>\r\n    <A, B>(f: (a: A) => B): (fa: Promise<A>) => Promise<B>\r\n}\r\nexport const pMchain: async =\r\n    <A, R>(f: (a: A) => R) =>\r\n    async (fa: A) =>\r\n        f(await fa)\r\n\r\nexport const is =\r\n    <A>(c: keyof A) =>\r\n    <B extends A>(a: A[typeof c]) =>\r\n    (field: A): field is B =>\r\n        field[c] === a\r\n\r\nexport const tapAny =\r\n    <A>(f: (a: A) => void) =>\r\n    (fa: A) => {\r\n        f(fa)\r\n        return fa\r\n    }\r\n\r\nexport const chunckify =\r\n    (n: number) =>\r\n    <A, R>(g: (a: A[]) => Promise<R[]>) =>\r\n        f.flow(ar.chunksOf(n)<A>, ar.map(g), ps => Promise.all(ps), pMchain(ar.flatten))\r\n\r\nexport const withProgress =\r\n    <F extends (f: (...a: any) => any) => (fa: any) => any>(map: F) =>\r\n    (f: Parameters<F>[0]) =>\r\n    (fa: Parameters<ReturnType<F>>[0]): ReturnType<ReturnType<F>> => {\r\n        let i = 0\r\n        return map(async (...a: Parameters<Parameters<F>[0]>) => {\r\n            // @ts-expect-error: Fuck me\r\n            const ret = await f(...a)\r\n            const progress = Math.round((i++ / Object.values(fa).length) * 100)\r\n            Spicetify.showNotification(`Loading: ${progress}%`, false, 200)\r\n            return ret\r\n        })(fa)\r\n    }\r\n\r\nexport const memoize2 = <A extends any[], R>(fn: (...args: A) => R) =>\r\n    f.pipe(fn, f.tupled, memoize<A>(eq.contramap(JSON.stringify)(str.Eq)), f.untupled)\r\n", "// export interface SpotifyID\r\n//     extends Newtype<{ readonly SpotifyID: unique symbol }, string> {}\r\n// export interface SpotifyURI\r\n//     extends Newtype<{ readonly SpotifyURI: unique symbol }, string> {}\r\n\r\nimport { array as a, function as f } from \"https://esm.sh/fp-ts\"\r\n\r\nexport type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nexport type SpotifyLocObj = {\r\n    before?: \"start\" | { uri: SpotifyURI } | { uid: string }\r\n    after?: \"end\" | { uri: SpotifyURI } | { uid: string }\r\n}\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: f.constant({ before: \"start\" } as SpotifyLocObj),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: f.constant({ after: \"end\" } as SpotifyLocObj),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const escapeRegex = (str: string) => str.replace(/[.*+?^${}()|[\\]\\\\]/g, `\\\\$&`)\r\n\r\nexport const titleCase = (str: string) => str.replace(/\\b\\w/g, l => l.toUpperCase())\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 1000,\r\n    location = document.body,\r\n    notEl?: E,\r\n) =>\r\n    new Promise((resolve: (value: Element | null) => void) => {\r\n        const res = (v: any) => {\r\n            observer.disconnect()\r\n            resolve(v)\r\n        }\r\n\r\n        const observer = new MutationObserver(() => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el && (!notEl || el !== notEl)) return res(el)\r\n        })\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout) setTimeout(() => res(null), timeout)\r\n    })\r\n\r\nexport const trapElement = <E extends Element>(\r\n    selector: string,\r\n    callback: (el: E | null, lastEl: E | null) => void,\r\n    location = document.body,\r\n) => {\r\n    let lastEl: E | null = null\r\n\r\n    const observer = new MutationObserver(() => {\r\n        const el = document.querySelector<E>(selector)\r\n        if (el !== lastEl) callback(el, lastEl)\r\n        lastEl = el\r\n    })\r\n\r\n    observer.observe(location, {\r\n        childList: true,\r\n        subtree: true,\r\n    })\r\n}\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const getReactProps = (element: Element) =>\r\n    element[Object.keys(element).find(k => k.startsWith(\"__reactProps$\")) as keyof typeof element]\r\n\r\nexport const isLiked = (uris: SpotifyURI[]) => Spicetify.Platform.LibraryAPI.contains(...uris) as Promise<boolean[]>\r\n\r\nexport const setLiked = (uris: SpotifyURI[], liked: boolean) =>\r\n    Spicetify.Platform.LibraryAPI[liked ? \"add\" : \"remove\"](...uris)\r\n\r\nexport const toggleLiked = async (uris: SpotifyURI[]) => {\r\n    const liked = await isLiked(uris)\r\n\r\n    return await f.pipe(\r\n        uris,\r\n        a.reduceWithIndex(\r\n            [[] as SpotifyURI[], [] as SpotifyURI[]] as const,\r\n            (i, acc, uri) => (acc[Number(liked[i])].push(uri), acc),\r\n        ),\r\n        ([toAdd, toRem]) => {\r\n            const ps = []\r\n            if (toAdd.length) ps.push(setLiked(toAdd, true))\r\n            if (toRem.length) ps.push(setLiked(toRem, false))\r\n            return Promise.all(ps)\r\n        },\r\n    )\r\n}\r\n\r\nexport const createQueueItem = (queued: boolean) => (uri: SpotifyURI) => ({\r\n    contextTrack: {\r\n        uri,\r\n        uid: \"\",\r\n        metadata: {\r\n            is_queued: queued.toString(),\r\n        },\r\n    },\r\n    removed: [],\r\n    blocked: [],\r\n    provider: queued ? \"queue\" : \"context\",\r\n})\r\n\r\nexport const setQueue = async (nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>) => {\r\n    const { _queue, _client } = Spicetify.Platform.PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    return _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    }) as Promise<{ error: number; reasons: string }>\r\n}\r\n\r\nexport const setPlayingContext = (uri: SpotifyURI) => {\r\n    const { sessionId } = Spicetify.Platform.PlayerAPI.getState()\r\n    return Spicetify.Platform.PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri }) as Promise<undefined>\r\n}\r\n", "import { chunckify, memoize2 } from \"./fp.ts\"\r\nimport { SpotifyID, SpotifyLocObj, SpotifyURI, escapeRegex } from \"./util.ts\"\r\n\r\n/*                          GraphQL                                           */\r\n\r\nexport const fetchGQLAlbum = async (uri: SpotifyURI, offset = 0, limit = 487) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.getAlbum, {\r\n            uri,\r\n            locale: Spicetify.Locale.getLocale(),\r\n            offset,\r\n            limit,\r\n        })\r\n    ).data.albumUnion as fetchGQLAlbumRes\r\n\r\ntype fetchArtistGQLRes = any\r\nexport const fetchGQLArtistOverview = async (uri: SpotifyURI) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistOverview, {\r\n            uri,\r\n            locale: Spicetify.Locale.getLocale(),\r\n            includePrerelease: true,\r\n        })\r\n    ).data.artistUnion as fetchArtistGQLRes\r\n\r\ntype fetchGQLArtistDiscographyRes = any\r\nexport const fetchGQLArtistDiscography = async (uri: SpotifyURI, offset = 0, limit = 116) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistDiscographyAll, {\r\n            uri,\r\n            offset,\r\n            limit,\r\n        })\r\n    ).data.artistUnion.discography.all.items as fetchGQLArtistDiscographyRes\r\n\r\nexport const fetchGQLArtistRelated = async (uri: SpotifyURI) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistRelated, {\r\n            uri,\r\n            locale: Spicetify.Locale.getLocale(),\r\n        })\r\n    ).data.artistUnion.relatedContent.relatedArtists.items as fetchGQLArtistRelatedRes\r\n\r\n/*                          Spotify Web API                                   */\r\n\r\nexport const removeWebPlaylistTracks = async (playlist: SpotifyID, tracks: SpotifyURI[]) =>\r\n    Spicetify.CosmosAsync.del(`https://api.spotify.com/v1/playlists/${playlist}/tracks`, {\r\n        tracks: tracks.map(uri => ({ uri })),\r\n    })\r\n\r\nexport const fetchWebArtistsSpot = chunckify(50)(\r\n    async (ids: SpotifyID[]) =>\r\n        (await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${ids.join(\",\")}`))\r\n            .artists as SpotApiArtist[],\r\n)\r\n\r\nexport const fetchWebPlaylistsSpot = chunckify(1)(\r\n    // @ts-ignore chunkify will never call with empty array\r\n    async ([id]: [SpotifyID]) => [\r\n        (await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${id}`)) as SpotApiPlaylist,\r\n    ],\r\n)\r\nexport const fetchWebAlbumsSpot = chunckify(50)(\r\n    async (ids: SpotifyID[]) =>\r\n        (await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${ids.join(\",\")}`))\r\n            .albums as SpotApiAlbum[],\r\n)\r\n\r\nexport const fetchWebTracksSpot = chunckify(50)(\r\n    async (ids: SpotifyID[]) =>\r\n        (await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${ids.join(\",\")}`))\r\n            .tracks as SpotApiTrack[],\r\n)\r\n\r\nexport const searchWebItemSpot = async (q: string, type: string[]) =>\r\n    Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/search?q=${encodeURIComponent(q)}&type=${type.join(\",\")}`)\r\n\r\nexport const fetchWebSoundOfSpotifyPlaylist = async (genre: string) => {\r\n    const name = `The Sound Of ${genre}`\r\n    const re = new RegExp(`^${escapeRegex(name)}$`, \"i\")\r\n    const res = await searchWebItemSpot(name, [\"playlist\"])\r\n    const item = res.playlists.items[0]\r\n    return item?.owner.id === \"thesoundsofspotify\" && re.test(item.name) ? item.uri : null\r\n}\r\n\r\n/*                          Platform                                          */\r\n\r\nexport const fetchPlatLikedTracks = async () =>\r\n    (\r\n        await Spicetify.Platform.LibraryAPI.getTracks({\r\n            limit: Number.MAX_SAFE_INTEGER,\r\n        })\r\n    ).items as fetchPlatArtistLikedTracksRes\r\nexport const fetchPlatArtistLikedTracks = async (uri: SpotifyURI, offset = 0, limit = 100) =>\r\n    (await Spicetify.Platform.LibraryAPI.getTracks({ uri, offset, limit })).items as fetchPlatArtistLikedTracksRes\r\n\r\nexport const fetchPlatPlaylistContents = async (uri: SpotifyURI) =>\r\n    (await Spicetify.Platform.PlaylistAPI.getContents(uri)).items as fetchWebPlaylistRes\r\n\r\nexport const createPlatFolder = async (name: string, location: SpotifyLocObj = {}) =>\r\n    await Spicetify.Platform.RootlistAPI.createFolder(name, location)\r\n\r\nexport const likePlatPlaylist = async (uri: SpotifyURI) => await Spicetify.Platform.RootlistAPI.add([uri])\r\n\r\n/* Replaced by createSPPlaylistFromTracks */\r\nexport const createPlatPlaylist = async (name: string, location: SpotifyLocObj = {}) =>\r\n    await Spicetify.Platform.RootlistAPI.createPlaylist(name, location)\r\n\r\nexport const createSPPlaylistFromTracks = (name: string, tracks: SpotifyURI[], folder?: SpotifyURI) =>\r\n    Spicetify.CosmosAsync.post(\"sp://core-playlist/v1/rootlist?responseFormat=protobufJson\", {\r\n        operation: \"create\",\r\n        ...(folder ? { after: folder } : {}),\r\n        name,\r\n        playlist: true,\r\n        uris: tracks,\r\n    })\r\n\r\nexport const setPlatPlaylistVisibility = async (playlist: SpotifyURI, visibleForAll: boolean) =>\r\n    await Spicetify.Platform.PlaylistPermissionsAPI.setBasePermission(playlist, visibleForAll ? \"VIEWER\" : \"BLOCKED\")\r\nexport const setPlatPlaylistPublished = async (playlist: SpotifyURI, published: boolean) =>\r\n    await Spicetify.Platform.RootlistAPI.setPublishedState(playlist, published)\r\n\r\nexport const fetchPlatFolder = async (folder?: SpotifyURI) =>\r\n    (await Spicetify.Platform.RootlistAPI.getContents({ folderUri: folder })) as fetchPlatFolderRes\r\nexport const fetchPlatRootFolder = () => fetchPlatFolder(undefined)\r\n\r\nexport const addPlatPlaylistTracks = async (playlist: SpotifyURI, tracks: SpotifyURI[], location: SpotifyLocObj = {}) =>\r\n    await Spicetify.Platform.PlaylistAPI.add(playlist, tracks, location)\r\n\r\nexport const movePlatPlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    tracks: Array<{ uid: string }>,\r\n    location: SpotifyLocObj = {},\r\n) => await Spicetify.Platform.PlaylistAPI.move(playlist, tracks, location)\r\n\r\nexport const removePlatPlaylistTracks = async (playlist: SpotifyURI, tracks: Array<{ uid: string }>) =>\r\n    Spicetify.Platform.PlaylistAPI.remove(playlist, tracks)\r\n\r\nexport const fetchPlatPlaylistEnhancedSongs300 = async (uri: SpotifyURI, offset = 0, limit = 300) =>\r\n    (await Spicetify.Platform.EnhanceAPI.getPage(uri, /* iteration */ 0, /* sessionId */ 0, offset, limit)).enhancePage\r\n        .pageItems as any[]\r\nexport const fetchPlatPlaylistEnhancedSongs = async (uri: SpotifyURI, offset = 0): Promise<any[]> => {\r\n    const nextPageItems = await fetchPlatPlaylistEnhancedSongs300(uri, offset)\r\n    if (nextPageItems?.length < 300) return nextPageItems\r\n    else return nextPageItems.concat(fetchPlatPlaylistEnhancedSongs(uri, offset + 300))\r\n}\r\n\r\nexport const fetchLocalTracks = async () => await Spicetify.Platform.LocalFilesAPI.getTracks()\r\n\r\n/*                          Non Spotify                                       */\r\n\r\nexport const fetchTrackLFMAPI = async (LFMApiKey: string, artist: string, trackName: string, lastFmUsername = \"\") => {\r\n    const url = new URL(\"https://ws.audioscrobbler.com/2.0/\")\r\n    url.searchParams.append(\"method\", \"track.getInfo\")\r\n    url.searchParams.append(\"api_key\", LFMApiKey)\r\n    url.searchParams.append(\"artist\", artist)\r\n    url.searchParams.append(\"track\", trackName)\r\n    url.searchParams.append(\"format\", \"json\")\r\n    url.searchParams.append(\"username\", lastFmUsername)\r\n\r\n    return (await fetch(url).then(res => res.json())) as fetchTrackLFMAPIRes\r\n}\r\n\r\nexport const fetchTrackLFMAPIMemoized = memoize2(fetchTrackLFMAPI)\r\n\r\nexport const searchYoutube = async (YouTubeApiKey: string, searchString: string) => {\r\n    const url = new URL(\"https://www.googleapis.com/youtube/v3/search\")\r\n    url.searchParams.append(\"part\", \"snippet\")\r\n    url.searchParams.append(\"maxResults\", \"10\")\r\n    url.searchParams.append(\"q\", searchString)\r\n    url.searchParams.append(\"type\", \"video\")\r\n    url.searchParams.append(\"key\", YouTubeApiKey)\r\n\r\n    return (await fetch(url).then(res => res.json())) as any[]\r\n}\r\n\r\n/*                          Types                                             */\r\n\r\nexport interface fetchGQLAlbumRes {\r\n    __typename: \"album\"\r\n    uri: SpotifyURI\r\n    name: string\r\n    artists: {\r\n        totalCount: number\r\n        items: Array<{\r\n            id: string\r\n            uri: SpotifyURI\r\n            profile: {\r\n                name: string\r\n            }\r\n            visuals: {\r\n                avatarImage: {\r\n                    sources: SpotApiImage[]\r\n                }\r\n            }\r\n            sharingInfo: {\r\n                shareUrl: string\r\n            }\r\n        }>\r\n    }\r\n    coverArt: {\r\n        extractedColors: {\r\n            colorRaw: {\r\n                hex: string\r\n            }\r\n            colorLight: {\r\n                hex: string\r\n            }\r\n            colorDark: {\r\n                hex: string\r\n            }\r\n        }\r\n        sources: SpotApiImage[]\r\n    }\r\n    discs: {\r\n        totalCount: number\r\n        items: Array<{\r\n            number: number\r\n            tracks: {\r\n                totalCount: number\r\n            }\r\n        }>\r\n    }\r\n    releases: {\r\n        totalCount: number\r\n        items: Array<{\r\n            uri: SpotifyURI\r\n            name: string\r\n        }>\r\n    }\r\n    type: string\r\n    date: {\r\n        isoString: string\r\n        precision: string\r\n    }\r\n    playability: {\r\n        playable: boolean\r\n        reason: string\r\n    }\r\n    label: string\r\n    copyright: {\r\n        totalCount: number\r\n        items: Array<{\r\n            type: string\r\n            text: string\r\n        }>\r\n    }\r\n    courtesyLine: string\r\n    saved: boolean\r\n    sharingInfo: {\r\n        shareUrl: string\r\n        shareId: string\r\n    }\r\n    tracks: {\r\n        totalCount: number\r\n        items: Array<{\r\n            uid: string\r\n            track: {\r\n                saved: boolean\r\n                uri: SpotifyURI\r\n                name: string\r\n                playcount: string\r\n                discNumber: number\r\n                trackNumber: number\r\n                contentRating: {\r\n                    label: string\r\n                }\r\n                relinkingInformation: any\r\n                duration: {\r\n                    totalMilliseconds: number\r\n                }\r\n                playability: {\r\n                    playable: boolean\r\n                }\r\n                artists: {\r\n                    items: Array<{\r\n                        uri: SpotifyURI\r\n                        profile: {\r\n                            name: string\r\n                        }\r\n                    }>\r\n                }\r\n            }\r\n        }>\r\n    }\r\n    moreAlbumsByArtist: {\r\n        items: Array<{\r\n            discography: {\r\n                popularReleasesAlbums: {\r\n                    items: Array<{\r\n                        id: string\r\n                        uri: SpotifyURI\r\n                        name: string\r\n                        date: {\r\n                            year: number\r\n                        }\r\n                        coverArt: {\r\n                            sources: SpotApiImage[]\r\n                        }\r\n                        playability: {\r\n                            playable: boolean\r\n                            reason: string\r\n                        }\r\n                        sharingInfo: {\r\n                            shareId: string\r\n                            shareUrl: string\r\n                        }\r\n                        type: string\r\n                    }>\r\n                }\r\n            }\r\n        }>\r\n    }\r\n}\r\n\r\nexport type fetchGQLArtistRelatedRes = Array<{\r\n    id: string\r\n    uri: SpotifyURI\r\n    profile: {\r\n        name: string\r\n    }\r\n    visuals: {\r\n        avatarImage: {\r\n            sources: SpotApiImage[]\r\n        }\r\n    }\r\n}>\r\n\r\nexport type fetchPlatArtistLikedTracksRes = Array<{\r\n    type: string\r\n    uri: string\r\n    name: string\r\n    duration: SpotApiDuration\r\n    album: SpotApiAlbumMin\r\n    artists: SpotApiArtistMin[]\r\n    discNumber: number\r\n    trackNumber: number\r\n    isExplicit: boolean\r\n    isPlayable: boolean\r\n    isLocal: boolean\r\n    is19PlusOnly: boolean\r\n    addedAt: string\r\n}>\r\n\r\nexport type fetchWebPlaylistRes = Array<{\r\n    uid: string\r\n    playIndex: null\r\n    addedAt: string\r\n    addedBy: {\r\n        type: string\r\n        uri: SpotifyURI\r\n        username: string\r\n        displayName: string\r\n        images: SpotApiImage2[]\r\n    }\r\n    formatListAttributes: {}\r\n    type: \"track\"\r\n    uri: SpotifyURI\r\n    name: string\r\n    album: SpotApiAlbumMin\r\n    artists: SpotApiArtistMin[]\r\n    discNumber: number\r\n    trackNumber: number\r\n    duration: SpotApiDuration\r\n    isExplicit: boolean\r\n    isLocal: boolean\r\n    isPlayable: boolean\r\n    is19PlusOnly: boolean\r\n}>\r\n\r\nexport interface fetchTrackLFMAPIRes {\r\n    track: {\r\n        name: string\r\n        mbid: string\r\n        url: string\r\n        duration: string\r\n        streamable: {\r\n            \"#text\": string\r\n            fulltrack: string\r\n        }\r\n        listeners: string\r\n        playcount: string\r\n        artist: {\r\n            name: string\r\n            mbid: string\r\n            url: string\r\n        }\r\n        album: {\r\n            artist: string\r\n            title: string\r\n            mbid: string\r\n            url: string\r\n            image: Array<{\r\n                \"#text\": string\r\n                size: string\r\n            }>\r\n            \"@attr\": {\r\n                position: string\r\n            }\r\n        }\r\n        userplaycount: string\r\n        userloved: string\r\n        toptags: {\r\n            tag: Array<{\r\n                name: string\r\n                url: string\r\n            }>\r\n        }\r\n        wiki: {\r\n            published: string\r\n            summary: string\r\n            content: string\r\n        }\r\n    }\r\n}\r\n\r\n//\r\n\r\nexport interface SpotApiAlbumMin {\r\n    type: \"album\"\r\n    uri: SpotifyURI\r\n    name: string\r\n    artist: SpotApiArtistMin\r\n    images: SpotApiImage2[]\r\n}\r\n\r\nexport interface SpotApiImage2 {\r\n    url: string\r\n    label: \"small\" | \"standard\" | \"large\" | \"xlarge\"\r\n}\r\n\r\nexport interface SpotApiTrack {\r\n    album: SpotApiAlbum\r\n    artists: SpotApiArtist[]\r\n    available_markets: string[]\r\n    disc_number: number\r\n    duration_ms: number\r\n    explicit: boolean\r\n    external_ids: SpotApiEIDs\r\n    external_urls: SpotApiEUrls\r\n    href: string\r\n    id: string\r\n    is_playable: boolean\r\n    linked_from: {}\r\n    restrictions: SpotApiRestrictions\r\n    name: string\r\n    popularity: number\r\n    preview_url: string\r\n    track_number: number\r\n    type: string\r\n    uri: SpotifyURI\r\n    is_local: boolean\r\n}\r\n\r\nexport interface SpotApiArtist {\r\n    external_urls: SpotApiEUrls\r\n    followers: SpotApiFollowers\r\n    genres: string[]\r\n    href: string\r\n    id: string\r\n    images: SpotApiImage[]\r\n    name: string\r\n    popularity: number\r\n    type: string\r\n    uri: SpotifyURI\r\n}\r\n\r\nexport interface SpotApiArtistMin {\r\n    type: \"artist\"\r\n    uri: SpotifyURI\r\n    name: string\r\n}\r\n\r\nexport interface SpotApiAlbum {\r\n    album_type: string\r\n    total_tracks: number\r\n    available_markets: string[]\r\n    external_urls: SpotApiEUrls\r\n    href: string\r\n    id: string\r\n    images: SpotApiImage[]\r\n    name: string\r\n    release_date: string\r\n    release_date_precision: string\r\n    restrictions: SpotApiRestrictions\r\n    type: string\r\n    uri: SpotifyURI\r\n    copyrights: Array<{\r\n        text: string\r\n        type: string\r\n    }>\r\n    external_ids: SpotApiEIDs\r\n    genres: string[]\r\n    label: string\r\n    popularity: number\r\n    album_group: string\r\n    artists: Array<{\r\n        external_urls: SpotApiEUrls\r\n        href: string\r\n        id: string\r\n        name: string\r\n        type: string\r\n        uri: SpotifyURI\r\n    }>\r\n}\r\n\r\nexport interface SpotApiEUrls {\r\n    spotify: string\r\n}\r\n\r\nexport interface SpotApiEIDs {\r\n    isrc: string\r\n    ean: string\r\n    upc: string\r\n}\r\n\r\nexport interface SpotApiImage {\r\n    url: string\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport interface SpotApiRestrictions {\r\n    reason: string\r\n}\r\n\r\nexport interface SpotApiFollowers {\r\n    href: string\r\n    total: number\r\n}\r\nexport interface SpotApiDuration {\r\n    milliseconds: number\r\n}\r\nexport interface SpotApiPlaylist {\r\n    collaborative: boolean\r\n    description: string\r\n    external_urls: SpotApiEUrls\r\n    followers: {\r\n        href: string\r\n        total: number\r\n    }\r\n    href: string\r\n    id: SpotifyID\r\n    images: SpotApiImage[]\r\n    name: string\r\n    owner: SpotApiOwner\r\n    public: boolean\r\n    snapshot_id: string\r\n    tracks: {\r\n        href: string\r\n        limit: number\r\n        next: string\r\n        offset: number\r\n        previous: string\r\n        total: number\r\n        items: Array<{\r\n            added_at: string\r\n            added_by: SpotApiOwner\r\n            is_local: boolean\r\n            track: SpotApiTrack\r\n        }>\r\n    }\r\n    type: string\r\n    uri: SpotifyURI\r\n}\r\n\r\nexport interface SpotApiOwner {\r\n    external_urls: SpotApiEUrls\r\n    followers?: {\r\n        href: string\r\n        total: number\r\n    }\r\n    href: string\r\n    id: SpotifyID\r\n    type: string\r\n    uri: SpotifyURI\r\n    display_name?: string\r\n    name?: string\r\n}\r\n\r\n//TODO: Better TS interface for recursive fetchPlatFolderRes\r\nexport interface fetchPlatFolderRes {\r\n    type: \"folder\" | \"placeholder\" | \"playlist\"\r\n    addedAt: string\r\n    items?: Array<fetchPlatFolderRes>\r\n    name?: string\r\n    uri: string\r\n    description?: string\r\n    images?: SpotApiImage2[]\r\n    madeFor?: null\r\n    owner?: {\r\n        type: \"user\"\r\n        uri: string\r\n        username: string\r\n        displayName: string\r\n        images: any[]\r\n    }\r\n    totalLength?: number\r\n    unfilteredTotalLength?: number\r\n    totalLikes?: null\r\n    duration?: null\r\n    isCollaborative?: boolean\r\n    isLoaded?: boolean\r\n    isOwnedBySelf?: boolean\r\n    isPublished?: boolean\r\n    hasEpisodes?: null\r\n    hasSpotifyTracks?: null\r\n    hasSpotifyAudiobooks?: null\r\n    canAdd?: boolean\r\n    canRemove?: boolean\r\n    canPlay?: null\r\n    formatListData?: {\r\n        type: string\r\n        attributes: { [key: string]: string }\r\n    } | null\r\n    canReportAnnotationAbuse?: boolean\r\n    hasDateAdded?: boolean\r\n    permissions?: null\r\n    collaborators?: {\r\n        count: number\r\n        items: any[]\r\n    }\r\n    isNotFound?: boolean\r\n    isForbidden?: boolean\r\n}\r\n", "import { array as ar, function as f, nonEmptyArray as nea, readonlyArray, record } from \"https://esm.sh/fp-ts\"\r\nimport { fetchPlatFolder, fetchPlatPlaylistContents } from \"../../shared/api.ts\"\r\nimport { pMchain } from \"../../shared/fp.ts\"\r\nimport { SpotifyURI } from \"../../shared/util.ts\"\r\nimport { CONFIG } from \"./settings.ts\"\r\nimport {\r\n    StarStops,\r\n    calculateRatingFromMouseEvent,\r\n    createStars,\r\n    onStarClick,\r\n    setStarsGradientByRating,\r\n} from \"./stars.ts\"\r\nimport { starsN2S } from \"./util.ts\"\r\n\r\nconst w = (n: number) => Math.exp(n)\r\nexport const aggregateRatings = (uris: SpotifyURI[]) =>\r\n    f.pipe(\r\n        uris,\r\n        ar.map(uri => tracksRatings[uri]),\r\n        ar.filter(Boolean),\r\n        ar.map(r => [r, w(r)] as const),\r\n        readonlyArray.unzip<number, number>,\r\n        ([rs, wrs]) =>\r\n            readonlyArray.reduceWithIndex(0, (i, s, r: number) => s + r * wrs[i])(rs) /\r\n                readonlyArray.reduce(0, (s, wr: number) => s + wr)(wrs) || 0,\r\n    )\r\n\r\nexport const addRatingsListenersToStars = (\r\n    [starsContainer, starsConstructs]: ReturnType<typeof createStars>,\r\n    getTrackUri: () => SpotifyURI,\r\n) => {\r\n    const [starsElements, starsSVGStops] = f.pipe(starsConstructs, readonlyArray.unzip) as [\r\n        SVGSVGElement[],\r\n        StarStops[],\r\n    ]\r\n\r\n    starsContainer.addEventListener(\"mouseout\", () =>\r\n        setStarsGradientByRating(tracksRatings[getTrackUri()] ?? 0)(starsSVGStops),\r\n    )\r\n\r\n    f.pipe(\r\n        starsElements,\r\n        readonlyArray.mapWithIndex((nth, starElement) => {\r\n            starElement.addEventListener(\r\n                \"mousemove\",\r\n                f.flow(\r\n                    calculateRatingFromMouseEvent(starElement, nth),\r\n                    f.flip(setStarsGradientByRating)(starsSVGStops),\r\n                ),\r\n            )\r\n\r\n            starElement.addEventListener(\"click\", onStarClick(nth, starsElements[nth], getTrackUri))\r\n        }),\r\n    )\r\n}\r\n\r\nexport const loadRatings = async () => {\r\n    const ratingsFolder = await fetchPlatFolder(CONFIG.ratingsFolderUri)\r\n\r\n    const starsS2Narray = f.pipe(\r\n        nea.range(0, 10),\r\n        ar.map(s => [starsN2S(s), s] as [string, number]),\r\n        record.fromEntries,\r\n    )\r\n\r\n    playlistUris = f.pipe(\r\n        ratingsFolder!.items!,\r\n        ar.map(p => [p.type, p.uri, starsS2Narray[p.name!]] as [string, SpotifyURI, number]),\r\n        ar.reduce(\r\n            [] as SpotifyURI[],\r\n            (acc, [type, uri, starsN]) => (type === \"playlist\" && starsN ? (acc[starsN] = uri) : [], acc),\r\n        ),\r\n    )\r\n\r\n    // @ts-ignore\r\n    globalThis.tracksRatings = tracksRatings = await f.pipe(\r\n        playlistUris,\r\n        ar.map(fetchPlatPlaylistContents),\r\n        ps => Promise.all(ps), // Promise.all flips empty to undefined\r\n        pMchain(ar.map(tracks => tracks ?? [])),\r\n        pMchain(ar.map(ar.map(t => t.uri))),\r\n        pMchain(ar.flatMap((trackUris, rating) => trackUris.map(trackUri => [trackUri, rating] as const))),\r\n        pMchain(\r\n            ar.reduce({} as Record<string, number>, (acc, [trackUri, rating]) =>\r\n                Object.assign(acc, {\r\n                    [trackUri]: Math.max(rating, acc[trackUri] ?? 0),\r\n                }),\r\n            ),\r\n        ),\r\n    )\r\n}\r\n\r\nexport let playlistUris: SpotifyURI[] = []\r\nexport let tracksRatings: Record<SpotifyURI, number> = {}\r\n", "import { task } from \"https://esm.sh/fp-ts\"\r\nimport { createPlatFolder } from \"../../shared/api.ts\"\r\nimport { SettingsSection } from \"../../shared/settings.tsx\"\r\nimport { SpotifyURI } from \"../../shared/util.ts\"\r\nimport { loadRatings } from \"./ratings.ts\"\r\nimport { RATINGS_FOLDER_NAME } from \"./util.ts\"\r\n\r\nconst settings = new SettingsSection(\"Star Ratings\", \"star-ratings\")\r\n    .addToggle({ id: \"hideHearts\", desc: \"Hide Hearts\" })\r\n    .addToggle({ id: \"halfStarRatings\", desc: \"Half star ratings\" })\r\n    .addToggle({ id: \"showInTrackLists\", desc: \"Show in tracklists\" })\r\n    .addToggle({ id: \"nowPlayingStarsOnRight\", desc: \"Place the stars for now playing track on the right\" })\r\n    .addInput({ id: \"heartThreshold\", desc: \"Threshold for liking trakcs\", inputType: \"text\" }, task.of(\"3.5\"))\r\n    .addInput({ id: \"skipThreshold\", desc: \"Threshold for skipping trakcs\", inputType: \"text\" }, task.of(\"1.5\"))\r\n    .addInput(\r\n        {\r\n            id: \"ratingsFolderUri\",\r\n            desc: \"Ratings folder uri\",\r\n            inputType: \"text\",\r\n            onChange: loadRatings,\r\n        },\r\n        async () => (await createPlatFolder(RATINGS_FOLDER_NAME)).uri,\r\n    )\r\n\r\nsettings.pushSettings()\r\n\r\nexport const CONFIG = settings.toObject() as {\r\n    hideHearts: boolean\r\n    halfStarRatings: string\r\n    showInTrackLists: boolean\r\n    nowPlayingStarsOnRight: boolean\r\n    heartThreshold: string\r\n    skipThreshold: string\r\n    ratingsFolderUri: SpotifyURI\r\n}\r\n", "import { task } from \"https://esm.sh/fp-ts\"\r\nimport { guard3, is } from \"./fp.ts\"\r\nimport { sleep } from \"./util.ts\"\r\nimport { SectionTitle, SectionWrapper, SettingColumn, SettingText, SettingToggle } from \"./modules.ts\"\r\n\r\nconst { React, ReactDOM } = Spicetify\r\nconst { ButtonSecondary } = Spicetify.ReactComponent as any\r\n\r\ntype FieldToProps<A> = Omit<A, \"type\">\r\n\r\nexport const enum FieldType {\r\n    BUTTON = \"button\",\r\n    TOGGLE = \"toggle\",\r\n    INPUT = \"input\",\r\n    HIDDEN = \"hidden\",\r\n}\r\n\r\nexport interface BaseField {\r\n    id: string\r\n    type: FieldType\r\n    desc: string\r\n}\r\n\r\nexport type SettingsField = HiddenField | InputField | ButtonField | ToggleField\r\n\r\nexport interface ButtonField extends BaseField {\r\n    type: FieldType.BUTTON\r\n    text: string\r\n    onClick?: () => void\r\n}\r\nexport interface ToggleField extends BaseField {\r\n    type: FieldType.TOGGLE\r\n    onSelected?: (checked: boolean) => void\r\n}\r\n\r\nexport interface InputField extends BaseField {\r\n    type: FieldType.INPUT\r\n    inputType: string\r\n    onChange?: (value: string) => void\r\n}\r\n\r\nexport interface HiddenField extends BaseField {\r\n    type: FieldType.HIDDEN\r\n}\r\n\r\nexport class SettingsSection {\r\n    private stopHistoryListener: any\r\n\r\n    constructor(public name: string, public id: string, public sectionFields: { [key: string]: SettingsField } = {}) {}\r\n\r\n    pushSettings = () => {\r\n        if (this.stopHistoryListener) this.stopHistoryListener()\r\n\r\n        this.stopHistoryListener = Spicetify.Platform.History.listen(() => this.render())\r\n        this.render()\r\n    }\r\n\r\n    toObject = () =>\r\n        new Proxy(\r\n            {},\r\n            {\r\n                get: (target, prop) => SettingsSection.getFieldValue(this.getId(prop.toString())),\r\n            },\r\n        )\r\n\r\n    private render = async () => {\r\n        while (!document.getElementById(\"desktop.settings.selectLanguage\")) {\r\n            if (Spicetify.Platform.History.location.pathname !== \"/preferences\") return\r\n            await sleep(100)\r\n        }\r\n\r\n        const allSettingsContainer = document.querySelector(\".x-settings-container\")!\r\n\r\n        let pluginSettingsContainer = Array.from(allSettingsContainer.children).find(({ id }) => id === this.id)\r\n\r\n        if (!pluginSettingsContainer) {\r\n            pluginSettingsContainer = document.createElement(\"div\")\r\n            pluginSettingsContainer.id = this.id\r\n            pluginSettingsContainer.className = \"settingsContainer\"\r\n            allSettingsContainer.appendChild(pluginSettingsContainer)\r\n        }\r\n\r\n        ReactDOM.render(<this.FieldsContainer />, pluginSettingsContainer)\r\n    }\r\n\r\n    addButton = (props: FieldToProps<ButtonField>) => {\r\n        this.addField(FieldType.BUTTON, props)\r\n        return this\r\n    }\r\n\r\n    addToggle = (props: FieldToProps<ToggleField>, defaultValue = task.of(false)) => {\r\n        this.addField(FieldType.TOGGLE, props, defaultValue)\r\n        return this\r\n    }\r\n\r\n    addInput = (props: FieldToProps<InputField>, defaultValue = task.of(\"\")) => {\r\n        this.addField(FieldType.INPUT, props, defaultValue)\r\n        return this\r\n    }\r\n\r\n    private addField(type: FieldType, opts: FieldToProps<SettingsField>, defaultValue?: any) {\r\n        if (defaultValue !== undefined) {\r\n            const settingId = this.getId(opts.id)\r\n            SettingsSection.setDefaultFieldValue(settingId, defaultValue)\r\n        }\r\n        const field = Object.assign({}, opts, { type }) as SettingsField\r\n        this.sectionFields[opts.id] = field\r\n    }\r\n\r\n    getId = (nameId: string) => [\"extensions\", this.id, nameId].join(\":\")\r\n\r\n    private useStateFor = <A,>(id: string) => {\r\n        const [value, setValueState] = React.useState(SettingsSection.getFieldValue<A>(id))\r\n\r\n        return [\r\n            value,\r\n            (newValue: A) => {\r\n                if (newValue !== undefined) {\r\n                    setValueState(newValue)\r\n                    SettingsSection.setFieldValue(id!, newValue)\r\n                }\r\n            },\r\n        ] as const\r\n    }\r\n\r\n    static getFieldValue = <R,>(id: string): R => JSON.parse(Spicetify.LocalStorage.get(id) ?? \"null\")\r\n\r\n    static setFieldValue = (id: string, newValue: any) => Spicetify.LocalStorage.set(id, JSON.stringify(newValue))\r\n\r\n    private static setDefaultFieldValue = async (id: string, defaultValue: task.Task<any>) => {\r\n        if (SettingsSection.getFieldValue(id) === null) SettingsSection.setFieldValue(id, await defaultValue())\r\n    }\r\n\r\n    private FieldsContainer = () => (\r\n        <SectionWrapper filterMatchQuery={this.name}>\r\n            {/* <SectionTitle>{this.name}</SectionTitle>\r\n            {Object.values(this.sectionFields).map(field => {\r\n                const isType = is<SettingsField>(\"type\")\r\n\r\n                return guard3([\r\n                    [isType<InputField>(FieldType.INPUT), this.InputField],\r\n                    [isType(FieldType.BUTTON), this.ButtonField],\r\n                    [isType(FieldType.TOGGLE), this.ToggleField],\r\n                ])(() => <></>)(field)\r\n            })} */}\r\n        </SectionWrapper>\r\n    )\r\n\r\n    SettingField = ({ field, children }: { field: SettingsField; children: any }) => (\r\n        <></>\r\n        // <SettingColumn filterMatchQuery={field.id}>\r\n        //     <div className=\"x-settings-firstColumn\">\r\n        //         <SettingText htmlFor={field.id}>{field.desc}</SettingText>\r\n        //     </div>\r\n        //     <div className=\"x-settings-secondColumn\">{children}</div>\r\n        // </SettingColumn>\r\n    )\r\n\r\n    ButtonField = (field: ButtonField) => (\r\n        <></>\r\n        // <this.SettingField field={field}>\r\n        //     <ButtonSecondary id={field.id} buttonSize=\"sm\" onClick={field.onClick} className=\"x-settings-button\">\r\n        //         {field.text}\r\n        //     </ButtonSecondary>\r\n        // </this.SettingField>\r\n    )\r\n\r\n    ToggleField = (field: ToggleField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<boolean>(id)\r\n        return (\r\n            <></>\r\n            // <this.SettingField field={field}>\r\n            //     <SettingToggle\r\n            //         id={field.id}\r\n            //         value={SettingsSection.getFieldValue(id)}\r\n            //         onSelected={(checked: boolean) => {\r\n            //             setValue(checked)\r\n            //             field.onSelected?.(checked)\r\n            //         }}\r\n            //         className=\"x-settings-button\"\r\n            //     />\r\n            // </this.SettingField>\r\n        )\r\n    }\r\n\r\n    InputField = (field: InputField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<string>(id)\r\n        return (\r\n            <></>\r\n            // <this.SettingField field={field}>\r\n            //     <input\r\n            //         className=\"x-settings-input\"\r\n            //         id={field.id}\r\n            //         dir=\"ltr\"\r\n            //         value={SettingsSection.getFieldValue(id)}\r\n            //         type={field.inputType}\r\n            //         onChange={e => {\r\n            //             const value = e.currentTarget.value\r\n            //             setValue(value)\r\n            //             field.onChange?.(value)\r\n            //         }}\r\n            //     />\r\n            // </this.SettingField>\r\n        )\r\n    }\r\n}\r\n", "import { allPass } from \"https://esm.sh/fp-ts-std@0.18.0/Predicate\"\r\n\r\n// @ts-expect-error webpackChunkOpen is only defined in the browser\r\nconst require = webpackChunkopen.push([[Symbol(\"Dummy module to extract require method\")], {}, re => re])\r\nconst cache = Object.keys(require.m).map(id => require(id))\r\nexport const modules = cache\r\n    .filter((module): module is Object => typeof module === \"object\")\r\n    .flatMap(module => Object.values(module))\r\nexport const functionModules = modules.filter((module): module is Function => typeof module === \"function\")\r\n\r\nexport const reactObjects = modules.filter(m => m?.$$typeof)\r\nconst reactMemoSymbol = Spicetify.React.memo().$$typeof\r\nexport const reactMemos = reactObjects.filter(m => m.$$typeof === reactMemoSymbol)\r\n\r\nconst findModuleByItsString = (modules: Array<any>, ...filters: Array<string | RegExp>) =>\r\n    modules.find(f =>\r\n        allPass(\r\n            filters.map(filter =>\r\n                typeof filter === \"string\" ? (s: string) => s.includes(filter) : (s: string) => filter.test(s),\r\n            ),\r\n        )(f.toString()),\r\n    ) as any\r\n\r\nexport const CheckedPlaylistButtonIcon = findModuleByItsString(\r\n    functionModules,\r\n    \"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z\",\r\n)\r\n\r\nexport const SectionWrapper = findModuleByItsString(functionModules, /^function .\\(.\\)\\{return\\(0,.\\.jsx\\)\\(/)\r\nexport const SectionTitle = findModuleByItsString(functionModules, \"textToHighlight\")\r\nexport const SettingColumn = findModuleByItsString(\r\n    functionModules,\r\n    \"setSectionFilterMatchQueryValue\",\r\n    \"filterMatchQuery\",\r\n)\r\nexport const SettingText = findModuleByItsString(functionModules, \"textSubdued\", \"viola\")\r\nexport const SettingToggle = findModuleByItsString(functionModules, \"condensed\", \"onSelected\")\r\n\r\nexport const curationButtonClass = modules.find(m => m?.curationButton)!.curationButton\r\n", "import { array as a, function as f } from \"https://esm.sh/fp-ts\"\r\nimport { StarStops, setStarsGradientByRating } from \"./stars.ts\"\r\n\r\nexport const RATINGS_FOLDER_NAME = \"Ratings\"\r\n\r\nexport const STAR_SIZE = 16\r\nexport const HALF_STAR_LENGTH = STAR_SIZE / 2\r\n\r\nexport const starsS2N = (S: string) => Number(S) * 2\r\nexport const starsN2S = (N: number) => (N / 2).toFixed(1)\r\n\r\nexport const getStarsFromStarsContainer = (starsElement: HTMLSpanElement) =>\r\n    Array.from(starsElement.children) as SVGSVGElement[]\r\nexport const getStarStopsFromStar = (star: SVGSVGElement) =>\r\n    Array.from(star.firstChild!.firstChild!.childNodes) as StarStops\r\nexport const getStarsStopsFromStarsContainer = f.flow(getStarsFromStarsContainer, a.map(getStarStopsFromStar))\r\n\r\nexport const setStarsGradientFromContainerByRating = (rating: number) =>\r\n    f.flow(getStarsStopsFromStarsContainer, setStarsGradientByRating(rating))\r\n\r\nexport const getStarsContainer = (idSuffix: string) => document.getElementById(`stars-${idSuffix}`) as HTMLSpanElement\r\nexport const getStars = f.flow(getStarsContainer, getStarsFromStarsContainer)\r\nexport const getStarsStops = f.flow(getStarsContainer, getStarsStopsFromStarsContainer)\r\n\r\nexport const getTrackLists = () => Array.from(document.querySelectorAll<HTMLDivElement>(\".main-trackList-indexable\"))\r\nexport const getTrackListHeader = (trackList: HTMLDivElement) =>\r\n    trackList.querySelector(\".main-trackList-trackListHeader\")?.firstChild as HTMLDivElement\r\nexport const getTrackListTracks = (trackList: HTMLDivElement) =>\r\n    Array.from(trackList.querySelectorAll<HTMLDivElement>(\"div.main-trackList-trackListRow\"))\r\n\r\nexport const getLastColIndex = (parent: HTMLElement) => {\r\n    const lastCol = parent.querySelector<HTMLDivElement>(\"div.main-trackList-rowSectionEnd\")!\r\n    const lastColIndex = Number(lastCol.getAttribute(\"aria-colindex\"))\r\n    return [lastColIndex, lastCol] as [number, HTMLDivElement]\r\n}\r\n\r\nexport const getFirstPlus = (parent: HTMLElement) =>\r\n    parent.querySelector<HTMLButtonElement>(\r\n        \".Button-sm-16-buttonTertiary-iconOnly-useBrowserDefaultFocusStyle, .Button-textBrightAccent-sm-16-buttonTertiary-iconOnly-useBrowserDefaultFocusStyle\",\r\n    )!\r\n\r\nexport const getTrackListTrackUri = (track: HTMLDivElement) => (\r\n    (track = Object.values(track)[0].child.child.child.child),\r\n    (track as any).pendingProps.uri ?? (track as any).child.pendingProps.uri\r\n)\r\n", "import { array as ar, function as f, nonEmptyArray } from \"https://esm.sh/fp-ts\"\r\nimport {\r\n    addPlatPlaylistTracks,\r\n    createPlatPlaylist,\r\n    removeWebPlaylistTracks,\r\n    setPlatPlaylistVisibility,\r\n} from \"../../shared/api.ts\"\r\nimport { SpotifyLoc, SpotifyURI, isLiked, toggleLiked } from \"../../shared/util.ts\"\r\nimport { updateNowPlayingStars } from \"./app.ts\"\r\nimport { playlistUris, tracksRatings } from \"./ratings.ts\"\r\nimport { CONFIG } from \"./settings.ts\"\r\nimport {\r\n    HALF_STAR_LENGTH,\r\n    getStarsContainer,\r\n    setStarsGradientFromContainerByRating,\r\n    starsN2S,\r\n    starsS2N,\r\n} from \"./util.ts\"\r\n\r\nconst { URI } = Spicetify\r\n\r\nexport type StarStops = [SVGStopElement, SVGStopElement]\r\n\r\nconst createStar = (starsId: string, nth: number, size: number) => {\r\n    const xmlns = \"http://www.w3.org/2000/svg\"\r\n    const star = document.createElementNS(xmlns, \"svg\")\r\n    const id = `${starsId}-${nth}`\r\n    star.id = id\r\n    star.style.minHeight = `${size}px`\r\n    star.style.minWidth = `${size}px`\r\n    star.setAttributeNS(null, \"width\", `${size}px`)\r\n    star.setAttributeNS(null, \"height\", `${size}px`)\r\n    star.setAttributeNS(null, \"viewBox\", `0 0 32 32`)\r\n\r\n    const defs = document.createElementNS(xmlns, \"defs\")\r\n    star.append(defs)\r\n\r\n    const gradient = document.createElementNS(xmlns, \"linearGradient\")\r\n    defs.append(gradient)\r\n    gradient.id = `${id}-gradient`\r\n\r\n    const stop1 = document.createElementNS(xmlns, \"stop\")\r\n    gradient.append(stop1)\r\n    stop1.id = `${id}-gradient-left`\r\n    stop1.setAttributeNS(null, \"offset\", \"50%\")\r\n    stop1.setAttributeNS(null, \"stop-color\", \"var(--spice-button-disabled)\")\r\n\r\n    const stop2 = document.createElementNS(xmlns, \"stop\")\r\n    gradient.append(stop2)\r\n    stop2.id = `${id}-gradient-right`\r\n    stop2.setAttributeNS(null, \"offset\", \"50%\")\r\n    stop2.setAttributeNS(null, \"stop-color\", \"var(--spice-button-disabled)\")\r\n\r\n    const path = document.createElementNS(xmlns, \"path\")\r\n    star.append(path)\r\n    path.setAttributeNS(null, \"fill\", `url(#${gradient.id})`)\r\n    path.setAttributeNS(\r\n        null,\r\n        \"d\",\r\n        \"M20.388,10.918L32,12.118l-8.735,7.749L25.914,31.4l-9.893-6.088L6.127,31.4l2.695-11.533L0,12.118l11.547-1.2L16.026,0.6L20.388,10.918z\",\r\n    )\r\n\r\n    return [star, [stop1, stop2]] as [SVGElement, StarStops]\r\n}\r\nexport const createStars = (idSuffix: string, size: number) => {\r\n    const id = `stars-${idSuffix}`\r\n    const starsContainer = document.createElement(\"span\")\r\n    {\r\n        starsContainer.className = \"stars\"\r\n        starsContainer.id = id\r\n        starsContainer.style.whiteSpace = \"nowrap\"\r\n        starsContainer.style.alignItems = \"center\"\r\n        starsContainer.style.display = \"flex\"\r\n    }\r\n\r\n    const starsConstructs = nonEmptyArray.range(1, 5).map(i => createStar(id, i, size))\r\n    f.pipe(\r\n        starsConstructs,\r\n        ar.unzip,\r\n        ([starElements]) => starElements,\r\n        ar.map(starElement => starsContainer.append(starElement)),\r\n    )\r\n    return [starsContainer, starsConstructs] as [HTMLSpanElement, ReturnType<typeof createStar>[]]\r\n}\r\n\r\nexport const setStarsGradientByRating = (rating: number) => (starsSVGStops: StarStops[]) => {\r\n    const setHalfStarLit = (lit: boolean) => (nth: number) =>\r\n        starsSVGStops[Math.floor(nth / 2)][nth % 2].setAttributeNS(\r\n            null,\r\n            \"stop-color\",\r\n            `var(--spice-button${lit ? \"\" : \"-disabled\"})`,\r\n        )\r\n\r\n    f.pipe(\r\n        nonEmptyArray.range(0, 9),\r\n        ar.spanLeft(hi => hi < rating),\r\n        ({ init, rest }) => {\r\n            init.map(setHalfStarLit(true))\r\n            rest.map(setHalfStarLit(false))\r\n        },\r\n    )\r\n}\r\n\r\nexport const calculateRatingFromMouseEvent = (starElement: SVGSVGElement, nth: number) => (e: MouseEvent) => {\r\n    const rect = starElement.getBoundingClientRect()\r\n    const leftOffsetFromHeart = e.clientX - rect.left\r\n    const isHalf = CONFIG.halfStarRatings && leftOffsetFromHeart < HALF_STAR_LENGTH\r\n    return 2 * (nth + 1) - Number(isHalf)\r\n}\r\n\r\nexport const onStarClick =\r\n    (nth: number, starElement: SVGSVGElement, getTrackUri: () => SpotifyURI) => async (e: MouseEvent) => {\r\n        const trackUri = getTrackUri()\r\n        const oldRating = tracksRatings[trackUri]\r\n        let newRating = calculateRatingFromMouseEvent(starElement, nth)(e)\r\n\r\n        const heartThreshold = starsS2N(CONFIG.heartThreshold)\r\n        if (heartThreshold) {\r\n            const shouldBeHearted = newRating >= heartThreshold\r\n            const [isHearted] = await isLiked([trackUri])\r\n\r\n            if (isHearted !== shouldBeHearted) toggleLiked([trackUri])\r\n        }\r\n\r\n        if (oldRating === newRating) newRating = 0\r\n\r\n        if (oldRating)\r\n            f.pipe(\r\n                playlistUris.slice(0, oldRating + 1),\r\n                ar.filter(Boolean),\r\n                ar.map(playlistUri => URI.from(playlistUri)!.id!),\r\n                ar.map(playlistId => removeWebPlaylistTracks(playlistId, [trackUri])),\r\n            )\r\n\r\n        tracksRatings[trackUri] = newRating\r\n\r\n        if (newRating) {\r\n            let playlistUri = playlistUris[newRating]\r\n            if (!playlistUri) {\r\n                playlistUri = await createPlatPlaylist(\r\n                    starsN2S(newRating),\r\n                    SpotifyLoc.after.fromUri(CONFIG.ratingsFolderUri),\r\n                )\r\n                setPlatPlaylistVisibility(playlistUri, false)\r\n                playlistUris[newRating] = playlistUri\r\n            }\r\n\r\n            addPlatPlaylistTracks(playlistUri, [trackUri])\r\n        }\r\n\r\n        updateNowPlayingStars()\r\n        const trackStarsContainer = getStarsContainer(`${URI.fromString(trackUri)!.id}`)\r\n        if (trackStarsContainer) {\r\n            f.pipe(trackStarsContainer, setStarsGradientFromContainerByRating(newRating))\r\n            trackStarsContainer.style.visibility = newRating ? \"visible\" : \"hidden\"\r\n        }\r\n    }\r\n"],
  "mappings": ";AAAA,SAAS,SAASA,KAAI,YAAYC,UAAS;AAC3C,SAAS,eAAe;;;ACDxB;AAAA,EACI,SAAS;AAAA,EACT;AAAA,EACA,UAAU;AAAA,EACV,UAAU;AAAA,EAEV,aAAa;AAAA,EACb,YAAY;AAAA,OACT;AACP,SAAS,OAAO,eAAe;AA6CxB,IAAM,UACT,CAAOC,OACP,OAAO,OACHA,GAAE,MAAM,EAAE;AAeX,IAAM,YACT,CAAC,MACD,CAAO,MACH,EAAE,KAAK,GAAG,SAAS,CAAC,GAAM,GAAG,IAAI,CAAC,GAAG,QAAM,QAAQ,IAAI,EAAE,GAAG,QAAQ,GAAG,OAAO,CAAC;AAgBhF,IAAM,WAAW,CAAqB,OACzC,EAAE,KAAK,IAAI,EAAE,QAAQ,QAAW,GAAG,UAAU,KAAK,SAAS,EAAE,IAAI,EAAE,CAAC,GAAG,EAAE,QAAQ;;;ACvFrF,SAAS,SAAS,GAAG,YAAYC,UAAS;AAUnC,IAAM,aAAa;AAAA,EACtB,QAAQ;AAAA,IACJ,OAAOA,GAAE,SAAS,EAAE,QAAQ,QAAQ,CAAkB;AAAA,IACtD,SAAS,CAAC,SAAqB,EAAE,QAAQ,EAAE,IAAI,EAAE;AAAA,IACjD,SAAS,CAAC,SAAiB,EAAE,QAAQ,EAAE,IAAI,EAAE;AAAA,EACjD;AAAA,EACA,OAAO;AAAA,IACH,KAAKA,GAAE,SAAS,EAAE,OAAO,MAAM,CAAkB;AAAA,IACjD,SAAS,CAAC,SAAqB,EAAE,OAAO,EAAE,IAAI,EAAE;AAAA,IAChD,SAAS,CAAC,SAAiB,EAAE,OAAO,EAAE,IAAI,EAAE;AAAA,EAChD;AACJ;AAiBO,IAAM,iBAAiB,CAC1B,UACA,UAAU,KACV,WAAW,SAAS,MACpB,UAEA,IAAI,QAAQ,CAAC,YAA6C;AACtD,QAAM,MAAM,CAAC,MAAW;AACpB,aAAS,WAAW;AACpB,YAAQ,CAAC;AAAA,EACb;AAEA,QAAM,WAAW,IAAI,iBAAiB,MAAM;AACxC,UAAM,KAAK,SAAS,cAAiB,QAAQ;AAC7C,QAAI,OAAO,CAAC,SAAS,OAAO;AAAQ,aAAO,IAAI,EAAE;AAAA,EACrD,CAAC;AAED,WAAS,QAAQ,UAAU;AAAA,IACvB,WAAW;AAAA,IACX,SAAS;AAAA,EACb,CAAC;AAED,MAAI;AAAS,eAAW,MAAM,IAAI,IAAI,GAAG,OAAO;AACpD,CAAC;AAqBE,IAAM,QAAQ,CAAC,OAAe,IAAI,QAAQ,aAAW,WAAW,SAAS,EAAE,CAAC;AAK5E,IAAM,UAAU,CAAC,SAAuB,UAAU,SAAS,WAAW,SAAS,GAAG,IAAI;AAEtF,IAAM,WAAW,CAAC,MAAoB,UACzC,UAAU,SAAS,WAAW,QAAQ,QAAQ,QAAQ,EAAE,GAAG,IAAI;AAE5D,IAAM,cAAc,OAAO,SAAuB;AACrD,QAAM,QAAQ,MAAM,QAAQ,IAAI;AAEhC,SAAO,MAAMC,GAAE;AAAA,IACX;AAAA,IACA,EAAE;AAAA,MACE,CAAC,CAAC,GAAmB,CAAC,CAAiB;AAAA,MACvC,CAAC,GAAG,KAAK,SAAS,IAAI,OAAO,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,GAAG;AAAA,IACvD;AAAA,IACA,CAAC,CAAC,OAAO,KAAK,MAAM;AAChB,YAAM,KAAK,CAAC;AACZ,UAAI,MAAM;AAAQ,WAAG,KAAK,SAAS,OAAO,IAAI,CAAC;AAC/C,UAAI,MAAM;AAAQ,WAAG,KAAK,SAAS,OAAO,KAAK,CAAC;AAChD,aAAO,QAAQ,IAAI,EAAE;AAAA,IACzB;AAAA,EACJ;AACJ;;;AC5GO,IAAM,gBAAgB,OAAO,KAAiB,SAAS,GAAG,QAAQ,SAEjE,MAAM,UAAU,QAAQ,QAAQ,UAAU,QAAQ,YAAY,UAAU;AAAA,EACpE;AAAA,EACA,QAAQ,UAAU,OAAO,UAAU;AAAA,EACnC;AAAA,EACA;AACJ,CAAC,GACH,KAAK;AAgCJ,IAAM,0BAA0B,OAAO,UAAqB,WAC/D,UAAU,YAAY,IAAI,wCAAwC,QAAQ,WAAW;AAAA,EACjF,QAAQ,OAAO,IAAI,UAAQ,EAAE,IAAI,EAAE;AACvC,CAAC;AAEE,IAAM,sBAAsB,UAAU,EAAE;AAAA,EAC3C,OAAO,SACF,MAAM,UAAU,YAAY,IAAI,0CAA0C,IAAI,KAAK,GAAG,CAAC,EAAE,GACrF;AACb;AAEO,IAAM,wBAAwB,UAAU,CAAC;AAAA;AAAA,EAE5C,OAAO,CAAC,EAAE,MAAmB;AAAA,IACxB,MAAM,UAAU,YAAY,IAAI,wCAAwC,EAAE,EAAE;AAAA,EACjF;AACJ;AACO,IAAM,qBAAqB,UAAU,EAAE;AAAA,EAC1C,OAAO,SACF,MAAM,UAAU,YAAY,IAAI,yCAAyC,IAAI,KAAK,GAAG,CAAC,EAAE,GACpF;AACb;AAEO,IAAM,qBAAqB,UAAU,EAAE;AAAA,EAC1C,OAAO,SACF,MAAM,UAAU,YAAY,IAAI,yCAAyC,IAAI,KAAK,GAAG,CAAC,EAAE,GACpF;AACb;AAqBO,IAAM,6BAA6B,OAAO,KAAiB,SAAS,GAAG,QAAQ,SACjF,MAAM,UAAU,SAAS,WAAW,UAAU,EAAE,KAAK,QAAQ,MAAM,CAAC,GAAG;AAErE,IAAM,4BAA4B,OAAO,SAC3C,MAAM,UAAU,SAAS,YAAY,YAAY,GAAG,GAAG;AAErD,IAAM,mBAAmB,OAAO,MAAc,WAA0B,CAAC,MAC5E,MAAM,UAAU,SAAS,YAAY,aAAa,MAAM,QAAQ;AAK7D,IAAM,qBAAqB,OAAO,MAAc,WAA0B,CAAC,MAC9E,MAAM,UAAU,SAAS,YAAY,eAAe,MAAM,QAAQ;AAW/D,IAAM,4BAA4B,OAAO,UAAsB,kBAClE,MAAM,UAAU,SAAS,uBAAuB,kBAAkB,UAAU,gBAAgB,WAAW,SAAS;AAI7G,IAAM,kBAAkB,OAAO,WACjC,MAAM,UAAU,SAAS,YAAY,YAAY,EAAE,WAAW,OAAO,CAAC;AAGpE,IAAM,wBAAwB,OAAO,UAAsB,QAAsB,WAA0B,CAAC,MAC/G,MAAM,UAAU,SAAS,YAAY,IAAI,UAAU,QAAQ,QAAQ;AAwBhE,IAAM,mBAAmB,OAAO,WAAmB,QAAgB,WAAmB,iBAAiB,OAAO;AACjH,QAAM,MAAM,IAAI,IAAI,oCAAoC;AACxD,MAAI,aAAa,OAAO,UAAU,eAAe;AACjD,MAAI,aAAa,OAAO,WAAW,SAAS;AAC5C,MAAI,aAAa,OAAO,UAAU,MAAM;AACxC,MAAI,aAAa,OAAO,SAAS,SAAS;AAC1C,MAAI,aAAa,OAAO,UAAU,MAAM;AACxC,MAAI,aAAa,OAAO,YAAY,cAAc;AAElD,SAAQ,MAAM,MAAM,GAAG,EAAE,KAAK,SAAO,IAAI,KAAK,CAAC;AACnD;AAEO,IAAM,2BAA2B,SAAS,gBAAgB;;;ACnKjE,SAAS,SAASC,KAAI,YAAYC,IAAG,iBAAiB,KAAK,eAAe,cAAc;;;ACAxF,SAAS,QAAAC,aAAY;;;ACArB,SAAS,YAAY;;;ACArB,SAAS,eAAe;AAGxB,IAAMC,WAAU,iBAAiB,KAAK,CAAC,CAAC,OAAO,wCAAwC,CAAC,GAAG,CAAC,GAAG,QAAM,EAAE,CAAC;AACxG,IAAM,QAAQ,OAAO,KAAKA,SAAQ,CAAC,EAAE,IAAI,QAAMA,SAAQ,EAAE,CAAC;AACnD,IAAM,UAAU,MAClB,OAAO,CAAC,WAA6B,OAAO,WAAW,QAAQ,EAC/D,QAAQ,YAAU,OAAO,OAAO,MAAM,CAAC;AACrC,IAAM,kBAAkB,QAAQ,OAAO,CAAC,WAA+B,OAAO,WAAW,UAAU;AAEnG,IAAM,eAAe,QAAQ,OAAO,OAAK,GAAG,QAAQ;AAC3D,IAAM,kBAAkB,UAAU,MAAM,KAAK,EAAE;AACxC,IAAM,aAAa,aAAa,OAAO,OAAK,EAAE,aAAa,eAAe;AAEjF,IAAM,wBAAwB,CAACC,aAAwB,YACnDA,SAAQ;AAAA,EAAK,CAAAC,OACT;AAAA,IACI,QAAQ;AAAA,MAAI,YACR,OAAO,WAAW,WAAW,CAAC,MAAc,EAAE,SAAS,MAAM,IAAI,CAAC,MAAc,OAAO,KAAK,CAAC;AAAA,IACjG;AAAA,EACJ,EAAEA,GAAE,SAAS,CAAC;AAClB;AAEG,IAAM,4BAA4B;AAAA,EACrC;AAAA,EACA;AACJ;AAEO,IAAM,iBAAiB,sBAAsB,iBAAiB,wCAAwC;AACtG,IAAM,eAAe,sBAAsB,iBAAiB,iBAAiB;AAC7E,IAAM,gBAAgB;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AACJ;AACO,IAAM,cAAc,sBAAsB,iBAAiB,eAAe,OAAO;AACjF,IAAM,gBAAgB,sBAAsB,iBAAiB,aAAa,YAAY;AAEtF,IAAM,sBAAsB,QAAQ,KAAK,OAAK,GAAG,cAAc,EAAG;;;ADjCzE,IAAM,EAAE,OAAO,SAAS,IAAI;AAC5B,IAAM,EAAE,gBAAgB,IAAI,UAAU;AAuC/B,IAAM,kBAAN,MAAM,iBAAgB;AAAA,EAGzB,YAAmB,MAAqB,IAAmB,gBAAkD,CAAC,GAAG;AAA9F;AAAqB;AAAmB;AAE3D,wBAAe,MAAM;AACjB,UAAI,KAAK;AAAqB,aAAK,oBAAoB;AAEvD,WAAK,sBAAsB,UAAU,SAAS,QAAQ,OAAO,MAAM,KAAK,OAAO,CAAC;AAChF,WAAK,OAAO;AAAA,IAChB;AAEA,oBAAW,MACP,IAAI;AAAA,MACA,CAAC;AAAA,MACD;AAAA,QACI,KAAK,CAAC,QAAQ,SAAS,iBAAgB,cAAc,KAAK,MAAM,KAAK,SAAS,CAAC,CAAC;AAAA,MACpF;AAAA,IACJ;AAEJ,SAAQ,SAAS,YAAY;AACzB,aAAO,CAAC,SAAS,eAAe,iCAAiC,GAAG;AAChE,YAAI,UAAU,SAAS,QAAQ,SAAS,aAAa;AAAgB;AACrE,cAAM,MAAM,GAAG;AAAA,MACnB;AAEA,YAAM,uBAAuB,SAAS,cAAc,uBAAuB;AAE3E,UAAI,0BAA0B,MAAM,KAAK,qBAAqB,QAAQ,EAAE,KAAK,CAAC,EAAE,GAAG,MAAM,OAAO,KAAK,EAAE;AAEvG,UAAI,CAAC,yBAAyB;AAC1B,kCAA0B,SAAS,cAAc,KAAK;AACtD,gCAAwB,KAAK,KAAK;AAClC,gCAAwB,YAAY;AACpC,6BAAqB,YAAY,uBAAuB;AAAA,MAC5D;AAEA,eAAS,OAAO,oCAAC,KAAK,iBAAL,IAAqB,GAAI,uBAAuB;AAAA,IACrE;AAEA,qBAAY,CAAC,UAAqC;AAC9C,WAAK,SAAS,uBAAkB,KAAK;AACrC,aAAO;AAAA,IACX;AAEA,qBAAY,CAAC,OAAkC,eAAe,KAAK,GAAG,KAAK,MAAM;AAC7E,WAAK,SAAS,uBAAkB,OAAO,YAAY;AACnD,aAAO;AAAA,IACX;AAEA,oBAAW,CAAC,OAAiC,eAAe,KAAK,GAAG,EAAE,MAAM;AACxE,WAAK,SAAS,qBAAiB,OAAO,YAAY;AAClD,aAAO;AAAA,IACX;AAWA,iBAAQ,CAAC,WAAmB,CAAC,cAAc,KAAK,IAAI,MAAM,EAAE,KAAK,GAAG;AAEpE,SAAQ,cAAc,CAAK,OAAe;AACtC,YAAM,CAAC,OAAO,aAAa,IAAI,MAAM,SAAS,iBAAgB,cAAiB,EAAE,CAAC;AAElF,aAAO;AAAA,QACH;AAAA,QACA,CAAC,aAAgB;AACb,cAAI,aAAa,QAAW;AACxB,0BAAc,QAAQ;AACtB,6BAAgB,cAAc,IAAK,QAAQ;AAAA,UAC/C;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAUA,SAAQ,kBAAkB,MACtB,oCAAC,kBAAe,kBAAkB,KAAK,MAWvC;AAGJ,wBAAe,CAAC,EAAE,OAAO,SAAS,MAC9B,wDAAE;AASN,uBAAc,CAAC,UACX,wDAAE;AAQN,uBAAc,CAAC,UAAuB;AAClC,YAAM,KAAK,KAAK,MAAM,MAAM,EAAE;AAC9B,YAAM,CAAC,OAAO,QAAQ,IAAI,KAAK,YAAqB,EAAE;AACtD,aACI,wDAAE;AAAA,IAaV;AAEA,sBAAa,CAAC,UAAsB;AAChC,YAAM,KAAK,KAAK,MAAM,MAAM,EAAE;AAC9B,YAAM,CAAC,OAAO,QAAQ,IAAI,KAAK,YAAoB,EAAE;AACrD,aACI,wDAAE;AAAA,IAgBV;AAAA,EA9JkH;AAAA,EAoD1G,SAAS,MAAiB,MAAmC,cAAoB;AACrF,QAAI,iBAAiB,QAAW;AAC5B,YAAM,YAAY,KAAK,MAAM,KAAK,EAAE;AACpC,uBAAgB,qBAAqB,WAAW,YAAY;AAAA,IAChE;AACA,UAAM,QAAQ,OAAO,OAAO,CAAC,GAAG,MAAM,EAAE,KAAK,CAAC;AAC9C,SAAK,cAAc,KAAK,EAAE,IAAI;AAAA,EAClC;AAAA,EAkBA;AAAA,SAAO,gBAAgB,CAAK,OAAkB,KAAK,MAAM,UAAU,aAAa,IAAI,EAAE,KAAK,MAAM;AAAA;AAAA,EAEjG;AAAA,SAAO,gBAAgB,CAAC,IAAY,aAAkB,UAAU,aAAa,IAAI,IAAI,KAAK,UAAU,QAAQ,CAAC;AAAA;AAAA,EAE7G;AAAA,SAAe,uBAAuB,OAAO,IAAY,iBAAiC;AACtF,UAAI,iBAAgB,cAAc,EAAE,MAAM;AAAM,yBAAgB,cAAc,IAAI,MAAM,aAAa,CAAC;AAAA,IAC1G;AAAA;AA4EJ;;;AE/MA,SAAS,SAASC,IAAG,YAAYC,UAAS;;;ACA1C,SAAS,SAASC,KAAI,YAAYC,IAAG,qBAAqB;AAmB1D,IAAM,EAAE,IAAI,IAAI;AAIhB,IAAM,aAAa,CAAC,SAAiB,KAAa,SAAiB;AAC/D,QAAM,QAAQ;AACd,QAAM,OAAO,SAAS,gBAAgB,OAAO,KAAK;AAClD,QAAM,KAAK,GAAG,OAAO,IAAI,GAAG;AAC5B,OAAK,KAAK;AACV,OAAK,MAAM,YAAY,GAAG,IAAI;AAC9B,OAAK,MAAM,WAAW,GAAG,IAAI;AAC7B,OAAK,eAAe,MAAM,SAAS,GAAG,IAAI,IAAI;AAC9C,OAAK,eAAe,MAAM,UAAU,GAAG,IAAI,IAAI;AAC/C,OAAK,eAAe,MAAM,WAAW,WAAW;AAEhD,QAAM,OAAO,SAAS,gBAAgB,OAAO,MAAM;AACnD,OAAK,OAAO,IAAI;AAEhB,QAAM,WAAW,SAAS,gBAAgB,OAAO,gBAAgB;AACjE,OAAK,OAAO,QAAQ;AACpB,WAAS,KAAK,GAAG,EAAE;AAEnB,QAAM,QAAQ,SAAS,gBAAgB,OAAO,MAAM;AACpD,WAAS,OAAO,KAAK;AACrB,QAAM,KAAK,GAAG,EAAE;AAChB,QAAM,eAAe,MAAM,UAAU,KAAK;AAC1C,QAAM,eAAe,MAAM,cAAc,8BAA8B;AAEvE,QAAM,QAAQ,SAAS,gBAAgB,OAAO,MAAM;AACpD,WAAS,OAAO,KAAK;AACrB,QAAM,KAAK,GAAG,EAAE;AAChB,QAAM,eAAe,MAAM,UAAU,KAAK;AAC1C,QAAM,eAAe,MAAM,cAAc,8BAA8B;AAEvE,QAAM,OAAO,SAAS,gBAAgB,OAAO,MAAM;AACnD,OAAK,OAAO,IAAI;AAChB,OAAK,eAAe,MAAM,QAAQ,QAAQ,SAAS,EAAE,GAAG;AACxD,OAAK;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAEA,SAAO,CAAC,MAAM,CAAC,OAAO,KAAK,CAAC;AAChC;AACO,IAAM,cAAc,CAAC,UAAkB,SAAiB;AAC3D,QAAM,KAAK,SAAS,QAAQ;AAC5B,QAAM,iBAAiB,SAAS,cAAc,MAAM;AACpD;AACI,mBAAe,YAAY;AAC3B,mBAAe,KAAK;AACpB,mBAAe,MAAM,aAAa;AAClC,mBAAe,MAAM,aAAa;AAClC,mBAAe,MAAM,UAAU;AAAA,EACnC;AAEA,QAAM,kBAAkB,cAAc,MAAM,GAAG,CAAC,EAAE,IAAI,OAAK,WAAW,IAAI,GAAG,IAAI,CAAC;AAClF,EAAAC,GAAE;AAAA,IACE;AAAA,IACAC,IAAG;AAAA,IACH,CAAC,CAAC,YAAY,MAAM;AAAA,IACpBA,IAAG,IAAI,iBAAe,eAAe,OAAO,WAAW,CAAC;AAAA,EAC5D;AACA,SAAO,CAAC,gBAAgB,eAAe;AAC3C;AAEO,IAAM,2BAA2B,CAAC,WAAmB,CAAC,kBAA+B;AACxF,QAAM,iBAAiB,CAAC,QAAiB,CAAC,QACtC,cAAc,KAAK,MAAM,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE;AAAA,IACxC;AAAA,IACA;AAAA,IACA,qBAAqB,MAAM,KAAK,WAAW;AAAA,EAC/C;AAEJ,EAAAD,GAAE;AAAA,IACE,cAAc,MAAM,GAAG,CAAC;AAAA,IACxBC,IAAG,SAAS,QAAM,KAAK,MAAM;AAAA,IAC7B,CAAC,EAAE,MAAM,KAAK,MAAM;AAChB,WAAK,IAAI,eAAe,IAAI,CAAC;AAC7B,WAAK,IAAI,eAAe,KAAK,CAAC;AAAA,IAClC;AAAA,EACJ;AACJ;AAEO,IAAM,gCAAgC,CAAC,aAA4B,QAAgB,CAAC,MAAkB;AACzG,QAAM,OAAO,YAAY,sBAAsB;AAC/C,QAAM,sBAAsB,EAAE,UAAU,KAAK;AAC7C,QAAM,SAAS,OAAO,mBAAmB,sBAAsB;AAC/D,SAAO,KAAK,MAAM,KAAK,OAAO,MAAM;AACxC;AAEO,IAAM,cACT,CAAC,KAAa,aAA4B,gBAAkC,OAAO,MAAkB;AACjG,QAAM,WAAW,YAAY;AAC7B,QAAM,YAAY,cAAc,QAAQ;AACxC,MAAI,YAAY,8BAA8B,aAAa,GAAG,EAAE,CAAC;AAEjE,QAAM,iBAAiB,SAAS,OAAO,cAAc;AACrD,MAAI,gBAAgB;AAChB,UAAM,kBAAkB,aAAa;AACrC,UAAM,CAAC,SAAS,IAAI,MAAM,QAAQ,CAAC,QAAQ,CAAC;AAE5C,QAAI,cAAc;AAAiB,kBAAY,CAAC,QAAQ,CAAC;AAAA,EAC7D;AAEA,MAAI,cAAc;AAAW,gBAAY;AAEzC,MAAI;AACA,IAAAD,GAAE;AAAA,MACE,aAAa,MAAM,GAAG,YAAY,CAAC;AAAA,MACnCC,IAAG,OAAO,OAAO;AAAA,MACjBA,IAAG,IAAI,iBAAe,IAAI,KAAK,WAAW,EAAG,EAAG;AAAA,MAChDA,IAAG,IAAI,gBAAc,wBAAwB,YAAY,CAAC,QAAQ,CAAC,CAAC;AAAA,IACxE;AAEJ,gBAAc,QAAQ,IAAI;AAE1B,MAAI,WAAW;AACX,QAAI,cAAc,aAAa,SAAS;AACxC,QAAI,CAAC,aAAa;AACd,oBAAc,MAAM;AAAA,QAChB,SAAS,SAAS;AAAA,QAClB,WAAW,MAAM,QAAQ,OAAO,gBAAgB;AAAA,MACpD;AACA,gCAA0B,aAAa,KAAK;AAC5C,mBAAa,SAAS,IAAI;AAAA,IAC9B;AAEA,0BAAsB,aAAa,CAAC,QAAQ,CAAC;AAAA,EACjD;AAEA,wBAAsB;AACtB,QAAM,sBAAsB,kBAAkB,GAAG,IAAI,WAAW,QAAQ,EAAG,EAAE,EAAE;AAC/E,MAAI,qBAAqB;AACrB,IAAAD,GAAE,KAAK,qBAAqB,sCAAsC,SAAS,CAAC;AAC5E,wBAAoB,MAAM,aAAa,YAAY,YAAY;AAAA,EACnE;AACJ;;;ADzJG,IAAM,sBAAsB;AAE5B,IAAM,YAAY;AAClB,IAAM,mBAAmB,YAAY;AAErC,IAAM,WAAW,CAAC,MAAc,OAAO,CAAC,IAAI;AAC5C,IAAM,WAAW,CAAC,OAAe,IAAI,GAAG,QAAQ,CAAC;AAEjD,IAAM,6BAA6B,CAAC,iBACvC,MAAM,KAAK,aAAa,QAAQ;AAC7B,IAAM,uBAAuB,CAAC,SACjC,MAAM,KAAK,KAAK,WAAY,WAAY,UAAU;AAC/C,IAAM,kCAAkCE,GAAE,KAAK,4BAA4BC,GAAE,IAAI,oBAAoB,CAAC;AAEtG,IAAM,wCAAwC,CAAC,WAClDD,GAAE,KAAK,iCAAiC,yBAAyB,MAAM,CAAC;AAErE,IAAM,oBAAoB,CAAC,aAAqB,SAAS,eAAe,SAAS,QAAQ,EAAE;AAC3F,IAAM,WAAWA,GAAE,KAAK,mBAAmB,0BAA0B;AACrE,IAAM,gBAAgBA,GAAE,KAAK,mBAAmB,+BAA+B;AAE/E,IAAM,gBAAgB,MAAM,MAAM,KAAK,SAAS,iBAAiC,2BAA2B,CAAC;AAC7G,IAAM,qBAAqB,CAAC,cAC/B,UAAU,cAAc,iCAAiC,GAAG;AACzD,IAAM,qBAAqB,CAAC,cAC/B,MAAM,KAAK,UAAU,iBAAiC,iCAAiC,CAAC;AAErF,IAAM,kBAAkB,CAAC,WAAwB;AACpD,QAAM,UAAU,OAAO,cAA8B,kCAAkC;AACvF,QAAM,eAAe,OAAO,QAAQ,aAAa,eAAe,CAAC;AACjE,SAAO,CAAC,cAAc,OAAO;AACjC;AAEO,IAAM,eAAe,CAAC,WACzB,OAAO;AAAA,EACH;AACJ;AAEG,IAAM,uBAAuB,CAAC,WAChC,QAAQ,OAAO,OAAO,KAAK,EAAE,CAAC,EAAE,MAAM,MAAM,MAAM,OAClD,MAAc,aAAa,OAAQ,MAAc,MAAM,aAAa;;;AHpCzE,IAAM,WAAW,IAAI,gBAAgB,gBAAgB,cAAc,EAC9D,UAAU,EAAE,IAAI,cAAc,MAAM,cAAc,CAAC,EACnD,UAAU,EAAE,IAAI,mBAAmB,MAAM,oBAAoB,CAAC,EAC9D,UAAU,EAAE,IAAI,oBAAoB,MAAM,qBAAqB,CAAC,EAChE,UAAU,EAAE,IAAI,0BAA0B,MAAM,qDAAqD,CAAC,EACtG,SAAS,EAAE,IAAI,kBAAkB,MAAM,+BAA+B,WAAW,OAAO,GAAGE,MAAK,GAAG,KAAK,CAAC,EACzG,SAAS,EAAE,IAAI,iBAAiB,MAAM,iCAAiC,WAAW,OAAO,GAAGA,MAAK,GAAG,KAAK,CAAC,EAC1G;AAAA,EACG;AAAA,IACI,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,WAAW;AAAA,IACX,UAAU;AAAA,EACd;AAAA,EACA,aAAa,MAAM,iBAAiB,mBAAmB,GAAG;AAC9D;AAEJ,SAAS,aAAa;AAEf,IAAM,SAAS,SAAS,SAAS;;;ADZxC,IAAM,IAAI,CAAC,MAAc,KAAK,IAAI,CAAC;AAC5B,IAAM,mBAAmB,CAAC,SAC7BC,GAAE;AAAA,EACE;AAAA,EACAC,IAAG,IAAI,SAAO,cAAc,GAAG,CAAC;AAAA,EAChCA,IAAG,OAAO,OAAO;AAAA,EACjBA,IAAG,IAAI,OAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAU;AAAA,EAC9B,cAAc;AAAA,EACd,CAAC,CAAC,IAAI,GAAG,MACL,cAAc,gBAAgB,GAAG,CAAC,GAAG,GAAG,MAAc,IAAI,IAAI,IAAI,CAAC,CAAC,EAAE,EAAE,IACpE,cAAc,OAAO,GAAG,CAAC,GAAG,OAAe,IAAI,EAAE,EAAE,GAAG,KAAK;AACvE;AAEG,IAAM,6BAA6B,CACtC,CAAC,gBAAgB,eAAe,GAChC,gBACC;AACD,QAAM,CAAC,eAAe,aAAa,IAAID,GAAE,KAAK,iBAAiB,cAAc,KAAK;AAKlF,iBAAe;AAAA,IAAiB;AAAA,IAAY,MACxC,yBAAyB,cAAc,YAAY,CAAC,KAAK,CAAC,EAAE,aAAa;AAAA,EAC7E;AAEA,EAAAA,GAAE;AAAA,IACE;AAAA,IACA,cAAc,aAAa,CAAC,KAAK,gBAAgB;AAC7C,kBAAY;AAAA,QACR;AAAA,QACAA,GAAE;AAAA,UACE,8BAA8B,aAAa,GAAG;AAAA,UAC9CA,GAAE,KAAK,wBAAwB,EAAE,aAAa;AAAA,QAClD;AAAA,MACJ;AAEA,kBAAY,iBAAiB,SAAS,YAAY,KAAK,cAAc,GAAG,GAAG,WAAW,CAAC;AAAA,IAC3F,CAAC;AAAA,EACL;AACJ;AAEO,IAAM,cAAc,YAAY;AACnC,QAAM,gBAAgB,MAAM,gBAAgB,OAAO,gBAAgB;AAEnE,QAAM,gBAAgBA,GAAE;AAAA,IACpB,IAAI,MAAM,GAAG,EAAE;AAAA,IACfC,IAAG,IAAI,OAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAqB;AAAA,IAChD,OAAO;AAAA,EACX;AAEA,iBAAeD,GAAE;AAAA,IACb,cAAe;AAAA,IACfC,IAAG,IAAI,OAAK,CAAC,EAAE,MAAM,EAAE,KAAK,cAAc,EAAE,IAAK,CAAC,CAAiC;AAAA,IACnFA,IAAG;AAAA,MACC,CAAC;AAAA,MACD,CAAC,KAAK,CAAC,MAAM,KAAK,MAAM,OAAO,SAAS,cAAc,SAAU,IAAI,MAAM,IAAI,MAAO,CAAC,GAAG;AAAA,IAC7F;AAAA,EACJ;AAGA,aAAW,gBAAgB,gBAAgB,MAAMD,GAAE;AAAA,IAC/C;AAAA,IACAC,IAAG,IAAI,yBAAyB;AAAA,IAChC,QAAM,QAAQ,IAAI,EAAE;AAAA;AAAA,IACpB,QAAQA,IAAG,IAAI,YAAU,UAAU,CAAC,CAAC,CAAC;AAAA,IACtC,QAAQA,IAAG,IAAIA,IAAG,IAAI,OAAK,EAAE,GAAG,CAAC,CAAC;AAAA,IAClC,QAAQA,IAAG,QAAQ,CAAC,WAAW,WAAW,UAAU,IAAI,cAAY,CAAC,UAAU,MAAM,CAAU,CAAC,CAAC;AAAA,IACjG;AAAA,MACIA,IAAG;AAAA,QAAO,CAAC;AAAA,QAA6B,CAAC,KAAK,CAAC,UAAU,MAAM,MAC3D,OAAO,OAAO,KAAK;AAAA,UACf,CAAC,QAAQ,GAAG,KAAK,IAAI,QAAQ,IAAI,QAAQ,KAAK,CAAC;AAAA,QACnD,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AACJ;AAEO,IAAI,eAA6B,CAAC;AAClC,IAAI,gBAA4C,CAAC;;;AJxExD,IAAM,EAAE,KAAAC,KAAI,IAAI;AAEhB,IAAM,wBAAwB;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAEA,YAAY;AAIZ,IAAM,uBAAuBC,GAAE;AAAA,EAC3B;AAAA,EACAC,IAAG,IAAI,eAAa;AAChB,UAAM,kBAAkB,mBAAmB,SAAS;AACpD,QAAI,gBAAgB,WAAW;AAAG;AAElC,UAAM,WAAW,CAAC,WAAwB,OAAO,uBAAuB,OAAO,EAAE,SAAS;AAC1F,UAAM,cAAcF,KAAI,WAAW,UAAU,SAAS,QAAQ,SAAS,QAAQ;AAE/E,UAAM,eAAeA,KAAI,SAAS,WAAY,IACxC,gBAAgB,CAAC,IACjB,mBAAmB,SAAS,KAAK,gBAAgB,CAAC;AAExD,UAAM,CAAC,YAAY,IAAI,gBAAgB,YAAY;AACnD,UAAM,qBAAqB,sBAAsB,eAAeC,GAAE,KAAK,cAAc,UAAU,MAAM,CAAC;AAEtG,QAAI,CAAC;AAAoB;AACzB,iBAAa,MAAM,sBAAsB;AAEzC,IAAAA,GAAE;AAAA,MACE;AAAA,MACAC,IAAG,IAAI,WAAS;AACZ,cAAM,QAAQ,aAAa,KAAK;AAChC,YAAI;AAAO,gBAAM,MAAM,UAAU,OAAO,aAAa,SAAS;AAE9D,YAAI,SAAS,KAAK;AAAG;AAErB,YAAI,eAAsC,MAAM,cAAc,cAAc;AAC5E,YAAI,CAAC,cAAc;AACf,gBAAM,aAAa,MAAM,cAAc,+BAA+B;AACtE,gBAAM,WAAW,OAAO,YAAY,aAAa,eAAe,CAAC;AAEjE,yBAAe,SAAS,cAAc,KAAK;AAC3C,uBAAa,aAAa,iBAAiB,OAAO,QAAQ,CAAC;AAC3D,sBAAY,aAAa,iBAAiB,OAAO,WAAW,CAAC,CAAC;AAC9D,uBAAa,OAAO;AACpB,uBAAa,MAAM,UAAU;AAC7B,uBAAa,UAAU,IAAI,mCAAmC;AAC9D,uBAAa,UAAU,IAAI,aAAa;AACxC,gBAAM,aAAa,cAAc,UAAU;AAC3C,gBAAM,MAAM,sBAAsB;AAAA,QACtC;AAEA,cAAM,WAAW,qBAAqB,KAAK;AAC3C,cAAM,MAAMF,KAAI,WAAW,QAAQ;AAEnC,YAAI,CAACA,KAAI,QAAQ,GAAI;AAAG;AAExB,cAAM,CAAC,gBAAgB,eAAe,IAAI,YAAY,IAAK,IAAK,SAAS;AACzE,qBAAa,YAAY,cAAc;AACvC,QAAAC,GAAE;AAAA,UACE;AAAA,UACAC,IAAG;AAAA,UACH,CAAC,CAAC,GAAG,UAAU,MAAM;AAAA,UACrB,yBAAyB,cAAc,QAAQ,KAAK,CAAC;AAAA,QACzD;AACA,mCAA2B,CAAC,gBAAgB,eAAe,GAAG,MAAM,QAAQ;AAE5E,cAAM,iBAAiB,MAClB,eAAe,MAAM,aAAa,cAAc,QAAQ,IAAI,YAAY;AAE7E,cAAM,iBAAiB,aAAa,MAAO,eAAe,MAAM,aAAa,SAAU;AACvF,cAAM,iBAAiB,YAAY,cAAc;AACjD,uBAAe;AAAA,MACnB,CAAC;AAAA,IACL;AAAA,EACJ,CAAC;AACL;AAEA,IAAI;AACJ,IAAM,sBAAsB,IAAI,iBAAiB,MAAO,OAAO,mBAAmB,qBAAqB,IAAI,MAAU;AAErH,IAAI,iBAAiB,MAAM;AACvB,QAAM,iBAAiB;AACvB,gBAAc,SAAS,cAA2B,MAAM;AACxD,MAAI,eAAe,CAAC,YAAY,YAAY,cAAc,GAAG;AACzD,QAAI;AAAgB,0BAAoB,WAAW;AACnD,wBAAoB,QAAQ,aAAa;AAAA,MACrC,WAAW;AAAA,MACX,SAAS;AAAA,IACb,CAAC;AAAA,EACL;AACJ,CAAC,EAAE,QAAQ,SAAS,MAAM;AAAA,EACtB,WAAW;AAAA,EACX,SAAS;AACb,CAAC;AAID,IAAM,wBAAwB,OAAO,UAAsB,eAA6B;AACpF,QAAM,MAAMF,KAAI,WAAW,QAAQ;AAEnC,MAAI,CAAC;AAAY,iBAAa,cAAc,YAAY;AAExD,MAAI;AACJ,MAAIA,KAAI,QAAQ,GAAG;AACf,WAAOC,GAAE;AAAA,MACL,MAAM,cAAc,GAAG,GAAG,EAAE;AAAA,MAC5B,OAAK,EAAE,OAAO;AAAA,MACdC,IAAG,IAAI,OAAK,EAAE,MAAM,GAAG;AAAA,IAC3B;AAAA,WACKF,KAAI,SAAS,GAAG;AACrB,WAAOC,GAAE;AAAA,MACL,MAAM,2BAA2B,GAAG,GAAG,EAAE;AAAA,MACzCC,IAAG,IAAI,OAAK,EAAE,GAAG;AAAA,IACrB;AAAA,WACKF,KAAI,iBAAiB,GAAG;AAC7B,WAAOC,GAAE;AAAA,MACL,MAAM,0BAA0B,GAAG,GAAG,EAAE;AAAA,MACxCC,IAAG,IAAI,OAAK,EAAE,GAAG;AAAA,IACrB;AAAA;AACC,UAAM;AAEX,2BAAyB,iBAAiB,IAAI,CAAC,EAAE,UAAU;AAC/D;AAEA,IAAI;AACJ,UAAU,SAAS,QAAQ,OAAO,OAAO,EAAE,SAAS,MAA4B;AAC5E,QAAM,eAAe,QAAQ,CAACF,KAAI,SAASA,KAAI,UAAUA,KAAI,gBAAgB,CAAC;AAC9E,MAAI,CAAC,aAAa,QAAQ;AAAG;AAE7B,6BAA4B,MAAM;AAAA,IAC9B;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT;AAAA,EACJ;AAEA,QAAM,CAAC,0BAA0B,yBAAyB,IAAI,YAAY,cAAc,YAAY,CAAC;AACrG,oBAAkB,YAAY,GAAG,OAAO;AACxC,2BAA0B,MAAM,wBAAwB;AAExD,QAAM,uBAAuBC,GAAE,KAAK,2BAA2BC,IAAG,OAAO,CAAC,CAAC,GAAG,UAAU,MAAM,UAAU;AAExG,wBAAsB,UAAU,oBAAoB;AACxD,CAAC;AAID,IAAM,wBAAwB,MAAM;AAChC,MAAI,SAAS,iBAAiB,oBAAoB,EAAE,WAAW;AAAG;AAElE,QAAM,4BAA4B,OAAO,yBACnC,sCACA;AACN,QAAM,oBAAoB,SAAS,cAAc,yBAAyB;AAC1E,MAAI,CAAC;AAAmB;AAExB,QAAM,CAAC,0BAA0B,uBAAuB,IAAI,YAAY,eAAe,SAAS;AAChG,2BAAyB,MAAM,UAAU;AACzC,2BAAyB,MAAM,aAAa;AAC5C,2BAAyB,MAAM,cAAc;AAE7C,MAAI,CAAC,OAAO;AAAwB,sBAAkB,MAAM,wBAAwB;AAAA;AAC/E,sBAAkB,QAAQ,wBAAwB;AAEvD;AAAA,IACI,CAAC,0BAA0B,uBAAuB;AAAA,IAClD,MAAM,UAAU,OAAO,KAAK,OAAO;AAAA,EACvC;AACJ;AAEA,sBAAsB;AAEf,IAAM,wBAAwB,MAAM;AACvC,QAAM,WAAW,UAAU,OAAO,KAAK,OAAO;AAC9C,QAAM,2BAA2B,kBAAkB,aAAa;AAEhE,2BAAyB,MAAM,UAAU,UAAU,IAAI,QAAQ,QAAQ,IAAI,SAAS;AAEpF,EAAAD,GAAE,KAAK,0BAA0B,sCAAsC,cAAc,QAAQ,KAAK,CAAC,CAAC;AACxG;AAEA,UAAU,OAAO,iBAAiB,cAAc,MAAM;AAClD,QAAM,WAAW,UAAU,OAAO,KAAK,KAAK;AAC5C,MACI,OAAO,OAAO,aAAa,MAC1B,cAAc,QAAQ,KAAK,OAAO,qBAAqB,SAAS,OAAO,aAAa;AAErF,WAAO,UAAU,OAAO,KAAK;AAEjC,wBAAsB;AAC1B,CAAC;AACD,sBAAsB;",
  "names": ["ar", "f", "f", "f", "f", "ar", "f", "task", "require", "modules", "f", "a", "f", "ar", "f", "f", "ar", "f", "a", "task", "f", "ar", "URI", "f", "ar"]
}
