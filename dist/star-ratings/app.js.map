{
  "version": 3,
  "sources": ["../../extensions/star-ratings/app.ts", "../../shared/util.ts", "../../extensions/star-ratings-2/util.ts", "../../shared/listeners.ts", "../../shared/modules.ts", "../../shared/deps.ts", "../../shared/settings.tsx", "../../extensions/star-ratings/settings.ts", "../../shared/platformApi.ts", "../../extensions/star-ratings/util.ts"],
  "sourcesContent": ["import { html, render } from \"https://esm.sh/lit\"\r\n\r\nimport { onTrackListMutationListeners } from \"../../shared/listeners.ts\"\r\n\r\nimport { CONFIG } from \"./settings.ts\"\r\nimport { getLastCol, getTrackListHeader, getTracksPlaylists } from \"./util.ts\"\r\n\r\nconst customTrackListColCss = [\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    \"[index] 16px [first] 4fr [var1] 2fr [var2] 1fr [last] minmax(120px,1fr)\",\r\n    \"[index] 16px [first] 6fr [var1] 4fr [var2] 3fr [var3] 2fr [last] minmax(120px,1fr)\",\r\n    \"[index] 16px [first] 6fr [var1] 4fr [var2] 3fr [var3] minmax(120px,2fr) [var3] 2fr [last] minmax(120px,1fr)\",\r\n]\r\n\r\nonTrackListMutationListeners.push((tracklist, tracks) => {\r\n    if (!CONFIG.showInTrackLists) return\r\n    if (tracks.length === 0) return\r\n\r\n    const hasStars = (parent: HTMLElement) => parent.getElementsByClassName(\"stars\").length > 0\r\n\r\n    const trackListHeader = getTrackListHeader(tracklist)\r\n    const firstElement = trackListHeader ?? tracks[0]\r\n\r\n    const [lastColIndex] = getLastCol(firstElement)\r\n    const lastColOffset = hasStars(firstElement) ? 1 : 0\r\n    const newTrackListColCss = customTrackListColCss[lastColIndex - lastColOffset]\r\n\r\n    if (!newTrackListColCss) return\r\n    if (trackListHeader) {\r\n        trackListHeader.style.gridTemplateColumns = newTrackListColCss\r\n    }\r\n\r\n    tracks.map(track => {\r\n        if (hasStars(track)) return\r\n\r\n        let addedColumnWrapper: HTMLDivElement | null = track.querySelector(\"div.ratings-column-wrapper\")\r\n        if (!addedColumnWrapper) {\r\n            const [colIndex, lastColumn] = getLastCol(track)\r\n\r\n            lastColumn?.setAttribute(\"aria-colindex\", String(colIndex + 1))\r\n\r\n            addedColumnWrapper = document.createElement(\"div\")\r\n            addedColumnWrapper.setAttribute(\"aria-colindex\", String(colIndex))\r\n            addedColumnWrapper.role = \"gridcell\"\r\n            addedColumnWrapper.style.display = \"flex\"\r\n            addedColumnWrapper.classList.add(\"ratings-column-wrapper\", \"main-trackList-rowSectionVariable\")\r\n            track.insertBefore(addedColumnWrapper, lastColumn)\r\n            track.style.gridTemplateColumns = newTrackListColCss!\r\n\r\n            const trackUri = track.props.uri\r\n\r\n            render(html`<label-container .playlists=${TRACK_PLAYLISTS[trackUri] ?? []} />`, addedColumnWrapper)\r\n        }\r\n    })\r\n})\r\nconst TRACK_PLAYLISTS = await getTracksPlaylists()\r\n", "export type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nconst { URI } = Spicetify\r\nconst { PlayerAPI } = Spicetify.Platform\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: () => ({ before: \"start\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: () => ({ after: \"end\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport class PermanentMutationObserver extends MutationObserver {\r\n    target: HTMLElement | null = null\r\n\r\n    constructor(\r\n        targetSelector: string,\r\n        callback: MutationCallback,\r\n        opts: MutationObserverInit = {\r\n            childList: true,\r\n            subtree: true,\r\n        },\r\n    ) {\r\n        super(callback)\r\n        new MutationObserver(() => {\r\n            const nextTarget = document.querySelector<HTMLElement>(targetSelector)\r\n            if (nextTarget && !nextTarget.isEqualNode(this.target)) {\r\n                this.target && this.disconnect()\r\n                this.target = nextTarget\r\n                this.observe(this.target, opts)\r\n            }\r\n        }).observe(document.body, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n    }\r\n}\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 5000,\r\n    location = document.body,\r\n    notEl?: E | null,\r\n) =>\r\n    new Promise((resolve: (value: E) => void, reject) => {\r\n        const onMutation = () => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el) {\r\n                if (notEl && el === notEl) {\r\n                } else {\r\n                    observer.disconnect()\r\n                    return resolve(el)\r\n                }\r\n            }\r\n        }\r\n\r\n        const observer = new MutationObserver(onMutation)\r\n        onMutation()\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout)\r\n            setTimeout(() => {\r\n                observer.disconnect()\r\n                console.debug(\"waitForElement: timed out waiting for\", selector)\r\n                reject()\r\n            }, timeout)\r\n    })\r\n\r\nexport const formatUri = (uri: string) => URI.fromString(uri).toURI()\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const mainElement = document.querySelector(\"main\")!\r\nexport const [REACT_FIBER, REACT_PROPS] = Object.keys(mainElement)\r\n\r\nexport const createQueueItem =\r\n    (queued: boolean) =>\r\n    ({ uri, uid = \"\" }: { uri: string; uid?: string }) => ({\r\n        contextTrack: {\r\n            uri,\r\n            uid,\r\n            metadata: {\r\n                is_queued: queued.toString(),\r\n            },\r\n        },\r\n        removed: [],\r\n        blocked: [],\r\n        provider: queued ? (\"queue\" as const) : (\"context\" as const),\r\n    })\r\n\r\nexport const setQueue = async (\r\n    nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>,\r\n    contextUri?: string,\r\n) => {\r\n    const { _queue, _client } = PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    const res = await _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    })\r\n\r\n    await PlayerAPI.skipToNext()\r\n\r\n    if (contextUri) {\r\n        await new Promise<void>(resolve => {\r\n            PlayerAPI.getEvents().addListener(\"queue_update\", () => resolve(), { once: true })\r\n        })\r\n        await setPlayingContext(contextUri)\r\n    }\r\n\r\n    return res\r\n}\r\n\r\nexport const setPlayingContext = (uri: string) => {\r\n    const { sessionId } = PlayerAPI._state\r\n    return PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri })\r\n}\r\n", "import { REACT_PROPS } from \"../../shared/util.ts\"\r\n\r\nexport const RATINGS_FOLDER_NAME = \"Ratings\"\r\n\r\nexport const getTrackLists = () =>\r\n    Array.from(document.querySelectorAll<HTMLDivElement>(\".main-trackList-trackList.main-trackList-indexable\"))\r\nexport const getTrackListTracks = (trackList: HTMLDivElement) =>\r\n    Array.from(trackList.querySelectorAll<HTMLDivElement>(\".main-trackList-trackListRow\"))\r\n\r\nexport const getTrackListTrackUri = (track: HTMLDivElement) => {\r\n    const rowSectionEnd = track.querySelector<HTMLDivElement>(\".main-trackList-rowSectionEnd\")!\r\n    const reactProps = rowSectionEnd[REACT_PROPS]\r\n    const { props } =\r\n        // artist & local tracks & albums\r\n        reactProps.children.at?.(-1).props.menu ??\r\n        // playlists\r\n        reactProps.children.props.children.at(-1).props.menu\r\n\r\n    return props.uri\r\n}\r\n\r\nexport const getNowPlayingBar = () => document.querySelector<HTMLDivElement>(\"div.main-nowPlayingBar-nowPlayingBar\")!\r\nexport const getCollectionActionBarRow = () => document.querySelector<HTMLDivElement>(`div.main-actionBar-ActionBarRow`)\r\n\r\nexport const playlistButtonSelector = `button[aria-label=\"Add to Liked Songs\"], button[aria-label=\"Add to playlist\"], button[aria-label=\"Remove recommendation\"]`\r\nexport const getPlaylistButton = (parent: HTMLElement) =>\r\n    parent.querySelector<HTMLButtonElement>(playlistButtonSelector)!\r\nexport const getCollectionPlaylistButton = () => {\r\n    const ab = getCollectionActionBarRow()\r\n    return ab?.querySelector<HTMLButtonElement>(\r\n        `button[aria-label=\"Remove from Your Library\"], button[aria-label=\"Save to Your Library\"]`,\r\n    )\r\n}\r\n", "import { getTrackListTracks, getTrackLists } from \"../extensions/star-ratings-2/util.ts\"\r\nimport { _ } from \"./deps.ts\"\r\n\r\nimport { PermanentMutationObserver, REACT_FIBER } from \"./util.ts\"\r\n\r\nconst { Player, URI } = Spicetify\r\nconst { PlayerAPI, History } = Spicetify.Platform\r\n\r\nexport const onHistoryChanged = (\r\n    toMatchTo: string | RegExp | ((location: string) => boolean),\r\n    callback: (uri: string) => void,\r\n    dropDuplicates = true,\r\n) => {\r\n    const createMatchFn = (toMatchTo: string | RegExp | ((input: string) => boolean)) => {\r\n        switch (typeof toMatchTo) {\r\n            case \"string\":\r\n                return (input: string) => input?.startsWith(toMatchTo) ?? false\r\n\r\n            case \"function\":\r\n                return toMatchTo\r\n\r\n            default:\r\n                return (input: string) => toMatchTo.test(input)\r\n        }\r\n    }\r\n\r\n    let lastPathname = \"\"\r\n    const matchFn = createMatchFn(toMatchTo)\r\n\r\n    const historyChanged = ({ pathname }: any) => {\r\n        if (matchFn(pathname)) {\r\n            if (dropDuplicates && lastPathname === pathname) {\r\n            } else callback(URI.fromString(pathname).toURI())\r\n        }\r\n        lastPathname = pathname\r\n    }\r\n\r\n    historyChanged(History.location ?? {})\r\n    return History.listen(historyChanged)\r\n}\r\n\r\nexport const onSongChanged = (callback: (state: Spicetify.Platform.PlayerAPI.PlayerState) => void) => {\r\n    callback(PlayerAPI._state)\r\n    Player.addEventListener(\"songchange\", event => callback(event!.data))\r\n}\r\n\r\nexport const onPlayedPaused = (callback: (state: Spicetify.Platform.PlayerAPI.PlayerState) => void) => {\r\n    callback(PlayerAPI._state)\r\n    Player.addEventListener(\"onplaypause\", event => callback(event!.data))\r\n}\r\n\r\nconst PRESENTATION_KEY = Symbol(\"presentation\")\r\n\r\ntype TrackListElement = HTMLDivElement & { [PRESENTATION_KEY]?: HTMLDivElement }\r\ntype TrackElement = HTMLDivElement & { props?: Record<string, any> }\r\n\r\ntype TrackListMutationListener = (trackList: Required<TrackListElement>, tracks: Array<Required<TrackElement>>) => void\r\nexport const onTrackListMutationListeners = new Array<TrackListMutationListener>()\r\n\r\nconst _onTrackListMutation = (\r\n    trackList: Required<TrackListElement>,\r\n    record: MutationRecord[],\r\n    observer: MutationObserver,\r\n) => {\r\n    const tracks = getTrackListTracks(trackList[PRESENTATION_KEY]) as Array<Required<TrackElement>>\r\n\r\n    const reactFiber = trackList[PRESENTATION_KEY][REACT_FIBER].alternate\r\n    const reactTracks = reactFiber.pendingProps.children as any[]\r\n    const tracksProps = reactTracks.map((child: any) => child.props as Record<string, any>)\r\n\r\n    tracks.forEach((track, i) => (track.props = tracksProps[i]))\r\n\r\n    const fullyRenderedTracks = tracks.filter(track => track.props?.uri)\r\n\r\n    onTrackListMutationListeners.map(listener => listener(trackList, fullyRenderedTracks))\r\n}\r\n\r\nnew PermanentMutationObserver(\"main\", () => {\r\n    const trackLists = getTrackLists() as Array<TrackListElement>\r\n    trackLists\r\n        .filter(trackList => !trackList[PRESENTATION_KEY])\r\n        .forEach(trackList => {\r\n            trackList[PRESENTATION_KEY] = trackList.lastElementChild!.firstElementChild!\r\n                .nextElementSibling! as HTMLDivElement\r\n\r\n            new MutationObserver((record, observer) =>\r\n                _onTrackListMutation(trackList as Required<TrackListElement>, record, observer),\r\n            ).observe(trackList[PRESENTATION_KEY], { childList: true })\r\n        })\r\n})\r\n", "// @ts-expect-error webpackChunkOpen is only defined in the browser\r\nconst require = webpackChunkopen.push([[Symbol(\"Dummy chunk to extract require method\")], {}, require => require])\r\nconst modules = Object.keys(require.m)\r\n    .map(id => require(id))\r\n    .filter((module): module is Object => typeof module === \"object\")\r\nexport const exportedMembers = modules.flatMap(module => Object.values(module)).filter(Boolean)\r\nexport const exportedFunctions = exportedMembers.filter((module): module is Function => typeof module === \"function\")\r\n\r\nconst exportedReactObjects = Object.groupBy(exportedMembers, x => x.$$typeof)\r\nconst exportedContexts = exportedReactObjects[Symbol.for(\"react.context\")]!\r\nconst exportedForwardRefs = exportedReactObjects[Symbol.for(\"react.forward_ref\")]!\r\nconst exportedMemos = exportedReactObjects[Symbol.for(\"react.memo\")]!\r\n\r\nconst findByStrings = (modules: Array<any>, ...filters: Array<string | RegExp>) =>\r\n    modules.find(f =>\r\n        filters\r\n            .map(filter =>\r\n                typeof filter === \"string\" ? (s: string) => s.includes(filter) : (s: string) => filter.test(s),\r\n            )\r\n            .every(filterFn => filterFn(f.toString())),\r\n    )\r\n\r\nexport const CheckedPlaylistButtonIcon = findByStrings(\r\n    exportedFunctions,\r\n    \"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z\",\r\n)\r\n\r\nexport const Highlight = findByStrings(exportedFunctions, \"hightlightClassName\", \"textToHighlight\")\r\n\r\nexport const SettingColumn = findByStrings(exportedFunctions, \"setSectionFilterMatchQueryValue\", \"filterMatchQuery\")\r\nexport const SettingText = findByStrings(exportedFunctions, \"textSubdued\", \"dangerouslySetInnerHTML\")\r\nexport const SettingToggle = findByStrings(exportedFunctions, \"condensed\", \"onSelected\")\r\n\r\nexport const curationButtonClass = exportedMembers.find(m => m?.curationButton)!.curationButton\r\n\r\nexport const rs_w = exportedForwardRefs.filter(x => x.render?.toString().includes(\"hasLeadingOrMedia\"))\r\n", "// @deno-types=\"npm:@types/lodash\"\r\nimport { default as ld } from \"https://esm.sh/lodash\"\r\nexport const _ = ld\r\n\r\n// @deno-types=\"npm:@types/lodash/fp\"\r\nimport { default as ld_fp } from \"https://esm.sh/lodash/fp\"\r\nexport const fp = ld_fp\r\n", "import { SettingColumn, SettingText, SettingToggle } from \"./modules.ts\"\r\nimport { sleep } from \"./util.ts\"\r\nimport { _ } from \"./deps.ts\"\r\n\r\ntype Task<A> = (() => Awaited<A>) | (() => Promise<Awaited<A>>)\r\n\r\nconst { React, ReactDOM, LocalStorage } = Spicetify\r\nconst { ButtonSecondary } = Spicetify.ReactComponent\r\nconst { History } = Spicetify.Platform\r\n\r\ntype FieldToProps<A> = Omit<A, \"type\">\r\n\r\nexport enum FieldType {\r\n    BUTTON = \"button\",\r\n    TOGGLE = \"toggle\",\r\n    INPUT = \"input\",\r\n    HIDDEN = \"hidden\",\r\n}\r\n\r\nexport interface BaseField {\r\n    id: string\r\n    type: FieldType\r\n    desc: string\r\n}\r\n\r\nexport type SettingsField = HiddenField | InputField | ButtonField | ToggleField\r\n\r\nexport interface ButtonField extends BaseField {\r\n    type: FieldType.BUTTON\r\n    text: string\r\n    onClick?: () => void\r\n}\r\nexport interface ToggleField extends BaseField {\r\n    type: FieldType.TOGGLE\r\n    onSelected?: (checked: boolean) => void\r\n}\r\n\r\nexport interface InputField extends BaseField {\r\n    type: FieldType.INPUT\r\n    inputType: string\r\n    onChange?: (value: string) => void\r\n}\r\n\r\nexport interface HiddenField extends BaseField {\r\n    type: FieldType.HIDDEN\r\n}\r\n\r\nif (!globalThis.__renderSettingSections) {\r\n    globalThis.__settingSections = new Set()\r\n    globalThis.__renderSettingSections = () => Array.from(globalThis.__settingSections)\r\n}\r\n\r\nexport class SettingsSection {\r\n    public id: string\r\n\r\n    constructor(public name: string, public sectionFields: { [key: string]: React.JSX.Element } = {}) {\r\n        this.id = _.kebabCase(name)\r\n    }\r\n\r\n    pushSettings = () => {\r\n        __settingSections.add(<this.SettingsSection />)\r\n    }\r\n\r\n    toObject = () =>\r\n        new Proxy(\r\n            {},\r\n            {\r\n                get: (target, prop) => SettingsSection.getFieldValue(this.getId(prop.toString())),\r\n                set: (target, prop, newValue) => {\r\n                    const id = this.getId(prop.toString())\r\n                    if (SettingsSection.getFieldValue(id) === newValue) return false\r\n                    SettingsSection.setFieldValue(id, newValue)\r\n                    return true\r\n                },\r\n            },\r\n        )\r\n\r\n    addButton = (props: FieldToProps<ButtonField>) => {\r\n        this.addField(FieldType.BUTTON, props, this.ButtonField)\r\n        return this\r\n    }\r\n\r\n    addToggle = (props: FieldToProps<ToggleField>, defaultValue: Task<boolean> = () => false) => {\r\n        this.addField(FieldType.TOGGLE, props, this.ToggleField, defaultValue)\r\n        return this\r\n    }\r\n\r\n    addInput = (props: FieldToProps<InputField>, defaultValue: Task<string> = () => \"\") => {\r\n        this.addField(FieldType.INPUT, props, this.InputField, defaultValue)\r\n        return this\r\n    }\r\n\r\n    private addField<SF extends SettingsField>(\r\n        type: SF[\"type\"],\r\n        opts: FieldToProps<SF>,\r\n        fieldComponent: (field: SF) => React.JSX.Element,\r\n        defaultValue?: any,\r\n    ) {\r\n        if (defaultValue !== undefined) {\r\n            const settingId = this.getId(opts.id)\r\n            SettingsSection.setDefaultFieldValue(settingId, defaultValue)\r\n        }\r\n        const field = Object.assign({}, opts, { type }) as SF\r\n        this.sectionFields[opts.id] = fieldComponent(field)\r\n    }\r\n\r\n    getId = (nameId: string) => [\"extensions\", this.id, nameId].join(\":\")\r\n\r\n    private useStateFor = <A,>(id: string) => {\r\n        const [value, setValueState] = React.useState(SettingsSection.getFieldValue<A>(id))\r\n\r\n        return [\r\n            value,\r\n            (newValue: A) => {\r\n                if (newValue !== undefined) {\r\n                    setValueState(newValue)\r\n                    SettingsSection.setFieldValue(id, newValue)\r\n                }\r\n            },\r\n        ] as const\r\n    }\r\n\r\n    static getFieldValue = <R,>(id: string): R => JSON.parse(LocalStorage.get(id) ?? \"null\")\r\n\r\n    static setFieldValue = (id: string, newValue: any) => LocalStorage.set(id, JSON.stringify(newValue))\r\n\r\n    private static setDefaultFieldValue = async (id: string, defaultValue: Task<any>) => {\r\n        if (SettingsSection.getFieldValue(id) === null) SettingsSection.setFieldValue(id, await defaultValue())\r\n    }\r\n\r\n    private SettingsSection = () => (\r\n        <__SettingSection filterMatchQuery={this.name}>\r\n            <__SectionTitle>{this.name}</__SectionTitle>\r\n            {Object.values(this.sectionFields)}\r\n        </__SettingSection>\r\n    )\r\n\r\n    SettingField = ({ field, children }: { field: SettingsField; children?: any }) => (\r\n        <SettingColumn filterMatchQuery={field.id}>\r\n            <div className=\"x-settings-firstColumn\">\r\n                <SettingText htmlFor={field.id}>{field.desc}</SettingText>\r\n            </div>\r\n            <div className=\"x-settings-secondColumn\">{children}</div>\r\n        </SettingColumn>\r\n    )\r\n\r\n    ButtonField = (field: ButtonField) => (\r\n        <this.SettingField field={field}>\r\n            <ButtonSecondary id={field.id} buttonSize=\"sm\" onClick={field.onClick} className=\"x-settings-button\">\r\n                {field.text}\r\n            </ButtonSecondary>\r\n        </this.SettingField>\r\n    )\r\n\r\n    ToggleField = (field: ToggleField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<boolean>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <SettingToggle\r\n                    id={field.id}\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    onSelected={(checked: boolean) => {\r\n                        setValue(checked)\r\n                        field.onSelected?.(checked)\r\n                    }}\r\n                    className=\"x-settings-button\"\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n\r\n    InputField = (field: InputField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<string>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <input\r\n                    className=\"x-settings-input\"\r\n                    id={field.id}\r\n                    dir=\"ltr\"\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    type={field.inputType}\r\n                    onChange={e => {\r\n                        const value = e.currentTarget.value\r\n                        setValue(value)\r\n                        field.onChange?.(value)\r\n                    }}\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n}\r\n", "import { SettingsSection } from \"../../shared/settings.tsx\"\r\n\r\nconst settings = new SettingsSection(\"Star Ratings\").addToggle({ id: \"showInTrackLists\", desc: \"Show in tracklists\" })\r\n\r\nsettings.pushSettings()\r\n\r\nexport const CONFIG = settings.toObject() as {\r\n    showInTrackLists: boolean\r\n}\r\n", "import { SpotifyLoc, SpotifyURI } from \"./util.ts\"\r\n\r\nconst { CosmosAsync } = Spicetify\r\nconst { LibraryAPI, PlaylistAPI, RootlistAPI, PlaylistPermissionsAPI, EnhanceAPI, LocalFilesAPI } = Spicetify.Platform\r\n\r\nexport const areTracksLiked = (uris: SpotifyURI[]) => LibraryAPI.contains(...uris)\r\n\r\nexport const setTracksLiked = (uris: SpotifyURI[], liked: boolean) => LibraryAPI[liked ? \"add\" : \"remove\"]({ uris })\r\n\r\nexport const toggleTracksLiked = async (uris: SpotifyURI[]) => {\r\n    const liked = await areTracksLiked(uris)\r\n\r\n    const urisByLiked = Object.groupBy(uris, (_, index) => (liked[index] ? \"liked\" : \"notLiked\"))\r\n\r\n    const ps = []\r\n    urisByLiked.liked?.length && ps.push(setTracksLiked(urisByLiked.liked, false))\r\n    urisByLiked.notLiked?.length && ps.push(setTracksLiked(urisByLiked.notLiked, true))\r\n\r\n    return Promise.all(ps)\r\n}\r\n\r\nexport const fetchLikedTracks = async () =>\r\n    (\r\n        await LibraryAPI.getTracks({\r\n            limit: Number.MAX_SAFE_INTEGER,\r\n        })\r\n    ).items\r\nexport const fetchArtistLikedTracks = async (uri: SpotifyURI, offset = 0, limit = 100) =>\r\n    (await LibraryAPI.getTracks({ uri, offset, limit })).items\r\n\r\nexport const fetchPlaylistContents = async (uri: SpotifyURI) => (await PlaylistAPI.getContents(uri)).items\r\n\r\nexport const createFolder = async (name: string, location: Spicetify.Platform.RootlistAPI.Location = {}) =>\r\n    await RootlistAPI.createFolder(name, location)\r\n\r\nexport const addPlaylist = async (playlist: SpotifyURI, folder?: SpotifyURI) =>\r\n    await RootlistAPI.add([playlist], folder ? SpotifyLoc.after.fromUri(folder) : {})\r\n\r\n/* Replaced by createPlaylistFromTracks */\r\nexport const createPlaylist = async (name: string, location: Spicetify.Platform.RootlistAPI.Location = {}) =>\r\n    await RootlistAPI.createPlaylist(name, location)\r\n\r\nexport const createPlaylistFromTracks = (name: string, tracks: SpotifyURI[], folder?: SpotifyURI) =>\r\n    CosmosAsync.post(\"sp://core-playlist/v1/rootlist?responseFormat=protobufJson\", {\r\n        operation: \"create\",\r\n        ...(folder ? { after: folder } : {}),\r\n        name,\r\n        playlist: true,\r\n        uris: tracks,\r\n    })\r\n\r\nexport const setPlaylistVisibility = async (playlist: SpotifyURI, visibleForAll: boolean) =>\r\n    await PlaylistPermissionsAPI.setBasePermission(playlist, visibleForAll ? \"VIEWER\" : \"BLOCKED\")\r\nexport const setPlaylistPublished = async (playlist: SpotifyURI, published: boolean) =>\r\n    await RootlistAPI.setPublishedState(playlist, published)\r\n\r\nexport const fetchFolder = async (folder?: SpotifyURI) => await RootlistAPI.getContents({ folderUri: folder })\r\nexport const fetchRootFolder = () => fetchFolder(undefined)\r\n\r\nexport const addPlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    tracks: SpotifyURI[],\r\n    location: Spicetify.Platform.RootlistAPI.Location = {},\r\n) => await PlaylistAPI.add(playlist, tracks, location)\r\n\r\nexport const movePlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    uids: string[],\r\n    location: Spicetify.Platform.RootlistAPI.Location = {},\r\n) =>\r\n    await PlaylistAPI.move(\r\n        playlist,\r\n        uids.map(uid => ({ uid })),\r\n        location,\r\n    )\r\n\r\nexport const removePlaylistTracks = (playlist: SpotifyURI, tracks: Array<{ uid: string }>) =>\r\n    PlaylistAPI.remove(playlist, tracks)\r\n\r\nexport const fetchPlaylistEnhancedSongs300 = async (uri: SpotifyURI, offset = 0, limit = 300) =>\r\n    (await EnhanceAPI.getPage(uri, /* iteration */ 0, /* sessionId */ 0, offset, limit)).enhancePage.pageItems\r\nexport const fetchPlaylistEnhancedSongs = async (\r\n    uri: SpotifyURI,\r\n    offset = 0,\r\n): Promise<Array<Spicetify.Platform.EnhanceAPI.EnhanceItem>> => {\r\n    const nextPageItems = await fetchPlaylistEnhancedSongs300(uri, offset)\r\n    if (nextPageItems?.length < 300) return nextPageItems\r\n    else return nextPageItems.concat(await fetchPlaylistEnhancedSongs(uri, offset + 300))\r\n}\r\n\r\nexport const fetchLocalTracks = async () => await LocalFilesAPI.getTracks()\r\n", "import { _ } from \"../../shared/deps.ts\"\r\nimport { fetchRootFolder } from \"../../shared/platformApi.ts\"\r\n\r\nexport type Playlist = Spicetify.Platform.RootlistAPI.Playlist\r\nexport type Folder = Spicetify.Platform.RootlistAPI.Folder\r\n\r\nconst { PlaylistAPI } = Spicetify.Platform\r\n\r\nexport const getTrackListHeader = (trackList: HTMLDivElement) =>\r\n    trackList.querySelector(\".main-trackList-trackListHeader\")?.firstChild as HTMLDivElement\r\n\r\nexport const getLastCol = (parent: HTMLElement) => {\r\n    const lastCol = parent.querySelector<HTMLDivElement>(\"div.main-trackList-rowSectionEnd\")!\r\n    const lastColIndex = Number(lastCol.getAttribute(\"aria-colindex\"))\r\n    return [lastColIndex, lastCol] as [number, HTMLDivElement]\r\n}\r\n\r\nexport const getOwnedPlaylists = async () => {\r\n    const rootFolder = await fetchRootFolder()\r\n\r\n    const traverse = (item: Folder | Playlist): Playlist[] => {\r\n        switch (item.type) {\r\n            case \"folder\":\r\n                return item.items.flatMap(traverse)\r\n            case \"playlist\":\r\n                return item.isOwnedBySelf ? [item] : []\r\n        }\r\n    }\r\n\r\n    return traverse(rootFolder)\r\n}\r\n\r\nexport const getTracksPlaylists = async () => {\r\n    const ownedPlaylists = await getOwnedPlaylists()\r\n    const tracks = await Promise.all(ownedPlaylists.map(playlist => PlaylistAPI.getContents(playlist.uri)))\r\n    const [playlists, uris] = _.unzip(\r\n        tracks.flatMap((tracks, i) => tracks.items.map(track => [ownedPlaylists[i], track.uri] as const)),\r\n    ) as [Playlist[], string[]]\r\n\r\n    return Object.groupBy(playlists, (_, i) => uris[i]) as Record<string, Playlist[]>\r\n}\r\n"],
  "mappings": "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",
  "names": ["URI", "PlayerAPI", "require", "modules", "History", "value", "PlaylistAPI", "tracks", "_"]
}
