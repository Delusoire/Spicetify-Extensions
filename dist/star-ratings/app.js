import{array as b,function as g}from"https://esm.sh/fp-ts";import{anyPass as Yt}from"https://esm.sh/fp-ts-std/Predicate";import{array as V,eq as Bt,string as Nt,record as ne,semigroup as oe,function as E}from"https://esm.sh/fp-ts";import{guard as Ot,memoize as Gt}from"https://esm.sh/fp-ts-std/Function";var K=t=>Ot(t);var x=t=>async e=>t(await e),Y=t=>e=>i=>i[t]===e;var I=t=>e=>E.flow(V.chunksOf(t),V.map(e),i=>Promise.all(i),x(V.flatten));var tt=t=>E.pipe(t,E.tupled,Gt(Bt.contramap(JSON.stringify)(Nt.Eq)),E.untupled);import{array as Mt,function as $}from"https://esm.sh/fp-ts";var it={before:{start:$.constant({before:"start"}),fromUri:t=>({before:{uri:t}}),fromUid:t=>({before:{uid:t}})},after:{end:$.constant({after:"end"}),fromUri:t=>({after:{uri:t}}),fromUid:t=>({after:{uid:t}})}};var rt=(t,e=1e3,i=document.body,s)=>new Promise(r=>{let n=l=>{o.disconnect(),r(l)},o=new MutationObserver(()=>{let l=document.querySelector(t);if(l&&(!s||l!==s))return n(l)});o.observe(i,{childList:!0,subtree:!0}),e&&setTimeout(()=>n(null),e)});var st=t=>new Promise(e=>setTimeout(e,t));var q=t=>Spicetify.Platform.LibraryAPI.contains(...t),et=(t,e)=>Spicetify.Platform.LibraryAPI[e?"add":"remove"](...t),nt=async t=>{let e=await q(t);return await $.pipe(t,Mt.reduceWithIndex([[],[]],(i,s,r)=>(s[Number(e[i])].push(r),s)),([i,s])=>{let r=[];return i.length&&r.push(et(i,!0)),s.length&&r.push(et(s,!1)),Promise.all(r)})};var at=async(t,e=0,i=487)=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.getAlbum,{uri:t,locale:Spicetify.Locale.getLocale(),offset:e,limit:i})).data.albumUnion;var ot=async(t,e)=>Spicetify.CosmosAsync.del(`https://api.spotify.com/v1/playlists/${t}/tracks`,{tracks:e.map(i=>({uri:i}))}),Ae=I(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${t.join(",")}`)).artists),he=I(1)(async([t])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${t}`)]),be=I(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${t.join(",")}`)).albums),xe=I(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${t.join(",")}`)).tracks);var lt=async(t,e=0,i=100)=>(await Spicetify.Platform.LibraryAPI.getTracks({uri:t,offset:e,limit:i})).items,U=async t=>(await Spicetify.Platform.PlaylistAPI.getContents(t)).items,pt=async(t,e={})=>await Spicetify.Platform.RootlistAPI.createFolder(t,e);var ct=async(t,e={})=>await Spicetify.Platform.RootlistAPI.createPlaylist(t,e);var dt=async(t,e)=>await Spicetify.Platform.PlaylistPermissionsAPI.setBasePermission(t,e?"VIEWER":"BLOCKED");var ut=async t=>await Spicetify.Platform.RootlistAPI.getContents({folderUri:t});var mt=async(t,e,i={})=>await Spicetify.Platform.PlaylistAPI.add(t,e,i);var Ht=async(t,e,i,s="")=>{let r=new URL("https://ws.audioscrobbler.com/2.0/");return r.searchParams.append("method","track.getInfo"),r.searchParams.append("api_key",t),r.searchParams.append("artist",e),r.searchParams.append("track",i),r.searchParams.append("format","json"),r.searchParams.append("username",s),await fetch(r).then(n=>n.json())},Re=tt(Ht);import{array as u,readonlyArray as L,record as Xt,function as A,nonEmptyArray as Zt}from"https://esm.sh/fp-ts";import{task as vt}from"https://esm.sh/fp-ts";import{task as yt}from"https://esm.sh/fp-ts";var{React:p,ReactDOM:Dt}=Spicetify,{ButtonSecondary:_t}=Spicetify.ReactComponent,ft=webpackChunkopen.push([[Symbol()],{},t=>t]),Vt=Object.keys(ft.m).map(t=>ft(t)),$t=Vt.filter(t=>typeof t=="object").map(t=>{try{return Object.values(t)}catch{}}).flat(),j=$t.filter(t=>typeof t=="function"),qt=j.find(t=>t.toString().includes("setSectionFilterMatchQueryValue")),jt=j.find(t=>t.toString().includes("textSubdued")&&t.toString().includes("viola")),Qt=j.find(t=>t.toString().includes("condensed")&&t.toString().includes("onSelected"));var C=class t{constructor(e,i,s={}){this.name=e;this.sectionId=i;this.sectionFields=s;this.pushSettings=()=>{this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(()=>this.render()),this.render()};this.toObject=()=>new Proxy({},{get:(e,i)=>t.getFieldValue(this.getId(i.toString()))});this.render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await st(100)}let e=document.querySelector(".x-settings-container"),i=Array.from(e.children).find(({id:s})=>s===this.sectionId);i||(i=document.createElement("div"),i.id=this.sectionId,i.className="settingsContainer",e.appendChild(i)),Dt.render(p.createElement(this.FieldsContainer,null),i)};this.addButton=e=>(this.addField("button",e),this);this.addToggle=(e,i=yt.of(!1))=>(this.addField("toggle",e,i),this);this.addInput=(e,i=yt.of(""))=>(this.addField("input",e,i),this);this.getId=e=>`extensions:${this.sectionId}:${e}`;this.useStateFor=e=>{let[i,s]=p.useState(t.getFieldValue(e));return[i,r=>{r!==void 0&&(s(r),t.setFieldValue(e,r))}]};this.FieldsContainer=()=>p.createElement("div",{className:"x-settings-section"},p.createElement("h2",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-cello-textBase-type"},this.name),Object.entries(this.sectionFields).map(([e,i])=>p.createElement(this.Field,{field:i})));this.Field=({field:e})=>{let i=Y("type");return K([[i("input"),this.InputField],[i("button"),this.ButtonField],[i("toggle"),this.ToggleField]])(()=>p.createElement(p.Fragment,null))(e)};this.SettingField=({field:e,children:i})=>p.createElement(qt,{filterMatchQuery:e.id},p.createElement("div",{className:"x-settings-firstColumn"},p.createElement(jt,{htmlFor:e.id},e.desc)),p.createElement("div",{className:"x-settings-secondColumn"},i));this.ButtonField=e=>p.createElement(this.SettingField,{field:e},p.createElement(_t,{id:e.id,buttonSize:"sm",onClick:e.onClick,className:"x-settings-button"},e.text));this.ToggleField=e=>{let[i,s]=this.useStateFor(e.id);return p.createElement(this.SettingField,{field:e},p.createElement(Qt,{id:e.id,checked:t.getFieldValue(e.id),onSelected:r=>{s(r),e.onSelected?.(r)},className:"x-settings-button"}))};this.InputField=e=>{let[i,s]=this.useStateFor(e.id);return p.createElement(this.SettingField,{field:e},p.createElement("input",{className:"x-settings-input",id:e.id,dir:"ltr",value:t.getFieldValue(e.id),type:e.inputType,onChange:r=>{let n=r.currentTarget.value;s(n),e.onChange?.(n)}}))}}addField(e,i,s){if(s!==void 0){let n=this.getId(i.id);t.setDefaultFieldValue(n,s)}let r=Object.assign({},i,{type:e});this.sectionFields[i.id]=r}static{this.getFieldValue=e=>JSON.parse(Spicetify.LocalStorage.get(e)??"null")}static{this.setFieldValue=(e,i)=>Spicetify.LocalStorage.set(e,JSON.stringify(i))}static{this.setDefaultFieldValue=async(e,i)=>{t.getFieldValue(e)===null&&t.setFieldValue(e,await i())}}};import{array as zt,function as D}from"https://esm.sh/fp-ts";import{array as R,nonEmptyArray as St,function as B}from"https://esm.sh/fp-ts";var{URI:gt}=Spicetify,Wt=(t,e,i)=>{let s="http://www.w3.org/2000/svg",r=document.createElementNS(s,"svg"),n=`${t}-${e}`;r.id=n,r.style.minHeight=`${i}px`,r.style.minWidth=`${i}px`,r.setAttributeNS(null,"width",`${i}px`),r.setAttributeNS(null,"height",`${i}px`),r.setAttributeNS(null,"viewBox","0 0 32 32");let o=document.createElementNS(s,"defs");r.append(o);let l=document.createElementNS(s,"linearGradient");o.append(l),l.id=`${n}-gradient`;let d=document.createElementNS(s,"stop");l.append(d),d.id=`${n}-gradient-left`,d.setAttributeNS(null,"offset","50%"),d.setAttributeNS(null,"stop-color","var(--spice-button-disabled)");let a=document.createElementNS(s,"stop");l.append(a),a.id=`${n}-gradient-right`,a.setAttributeNS(null,"offset","50%"),a.setAttributeNS(null,"stop-color","var(--spice-button-disabled)");let f=document.createElementNS(s,"path");return r.append(f),f.setAttributeNS(null,"fill",`url(#${l.id})`),f.setAttributeNS(null,"d","M20.388,10.918L32,12.118l-8.735,7.749L25.914,31.4l-9.893-6.088L6.127,31.4l2.695-11.533L0,12.118l11.547-1.2L16.026,0.6L20.388,10.918z"),[r,[d,a]]},N=(t,e)=>{let i=`stars-${t}`,s=document.createElement("span");s.className="stars",s.id=i,s.style.whiteSpace="nowrap",s.style.alignItems="center",s.style.display="flex";let r=St.range(1,5).map(n=>Wt(i,n,e));return B.pipe(r,R.unzip,([n])=>n,R.map(n=>s.append(n))),[s,r]},S=t=>e=>{let i=s=>r=>e[Math.floor(r/2)][r%2].setAttributeNS(null,"stop-color",`var(--spice-button${s?"":"-disabled"})`);B.pipe(St.range(0,9),R.spanLeft(s=>s<t),({init:s,rest:r})=>{s.map(i(!0)),r.map(i(!1))})},Q=(t,e)=>i=>{let s=t.getBoundingClientRect(),r=i.clientX-s.left,n=c.halfStarRatings&&r<ht;return 2*(e+1)-Number(n)},At=(t,e,i)=>async s=>{let r=i(),n=m[r],o=Q(e,t)(s),l=O(c.heartThreshold);if(l){let a=o>=l,[f]=await q([r]);f!==a&&nt([r])}if(n===o&&(o=0),n&&B.pipe(P.slice(0,n+1),R.filter(Boolean),R.map(a=>gt.from(a).id),R.map(a=>ot(a,[r]))),m[r]=o,o){let a=P[o];a||(a=await ct(G(o),it.after.fromUri(c.ratingsFolderUri)),dt(a,!1),P[o]=a),mt(a,[r])}H();let d=h(`${gt.fromString(r).id}`);d&&(B.pipe(d,M(o)),d.style.visibility=o?"visible":"hidden")};var bt="Ratings",T=16,ht=T/2,O=t=>Number(t)*2,G=t=>(t/2).toFixed(1),xt=t=>Array.from(t.children),Jt=t=>Array.from(t.firstChild.firstChild.childNodes),Rt=D.flow(xt,zt.map(Jt)),M=t=>D.flow(Rt,S(t)),h=t=>document.getElementById(`stars-${t}`),De=D.flow(h,xt),Pt=D.flow(h,Rt),It=()=>Array.from(document.querySelectorAll(".main-trackList-indexable")),Tt=t=>t.querySelector(".main-trackList-trackListHeader")?.firstChild,Lt=t=>Array.from(t.querySelectorAll("div.main-trackList-trackListRow")),Ft=t=>{let e=t.querySelector("div.main-trackList-rowSectionEnd");return[Number(e.getAttribute("aria-colindex")),e]},kt=t=>t.querySelector(".Button-sm-16-buttonTertiary-iconOnly-useBrowserDefaultFocusStyle, .Button-textBrightAccent-sm-16-buttonTertiary-iconOnly-useBrowserDefaultFocusStyle"),wt=t=>(t=Object.values(t)[0].child.child.child.child,t.pendingProps.uri??t.child.pendingProps.uri);var Et=new C("Star Ratings","star-ratings").addToggle({id:"hideHearts",desc:"Hide Hearts"}).addToggle({id:"halfStarRatings",desc:"Half star ratings"}).addToggle({id:"showInTrackLists",desc:"Show in tracklists"}).addToggle({id:"nowPlayingStarsOnRight",desc:"Place the stars for now playing track on the right"}).addInput({id:"heartThreshold",desc:"Threshold for liking trakcs",inputType:"text"},vt.of("3.5")).addInput({id:"skipThreshold",desc:"Threshold for skipping trakcs",inputType:"text"},vt.of("1.5")).addInput({id:"ratingsFolderUri",desc:"Ratings folder uri",inputType:"text",onChange:_},async()=>(await pt(bt)).uri);Et.pushSettings();var c=Et.toObject();var Kt=t=>Math.exp(t),Ut=t=>A.pipe(t,u.map(e=>m[e]),u.filter(Boolean),u.map(e=>[e,Kt(e)]),L.unzip,([e,i])=>L.reduceWithIndex(0,(s,r,n)=>r+n*i[s])(e)/L.reduce(0,(s,r)=>s+r)(i)||0),W=([t,e],i)=>{let[s,r]=A.pipe(e,L.unzip);t.addEventListener("mouseout",()=>S(m[i()]??0)(r)),A.pipe(s,L.mapWithIndex((n,o)=>{o.addEventListener("mousemove",A.flow(Q(o,n),A.flip(S)(r))),o.addEventListener("click",At(n,s[n],i))}))},_=async()=>{let t=await ut(c.ratingsFolderUri),e=A.pipe(Zt.range(0,10),u.map(i=>[G(i),i]),Xt.fromEntries);P=A.pipe(t.items,u.map(i=>[i.type,i.uri,e[i.name]]),u.reduce([],(i,[s,r,n])=>(s==="playlist"&&n&&(i[n]=r),i))),globalThis.tracksRatings=m=await A.pipe(P,u.map(U),i=>Promise.all(i),x(u.map(i=>i??[])),x(u.map(u.map(i=>i.uri))),x(u.flatMap((i,s)=>i.map(r=>[r,s]))),x(u.reduce({},(i,[s,r])=>Object.assign(i,{[s]:Math.max(r,i[s]??0)}))))},P=[],m={};var{URI:y}=Spicetify,te=[null,null,null,null,"[index] 16px [first] 4fr [var1] 2fr [var2] 1fr [last] minmax(120px,1fr)","[index] 16px [first] 6fr [var1] 4fr [var2] 3fr [var3] 2fr [last] minmax(120px,1fr)","[index] 16px [first] 6fr [var1] 4fr [var2] 3fr [var3] minmax(120px,2fr) [var3] 2fr [last] minmax(120px,1fr)"];_();var ee=g.flow(It,b.map(t=>{let e=Lt(t);if(e.length===0)return;let i=l=>l.getElementsByClassName("stars").length>0,s=y.fromString(Spicetify.Platform.History.location.pathname),r=y.isArtist(s)?e[0]:Tt(t)??e[0],[n]=Ft(r),o=te[n-g.pipe(r,i,Number)];o&&(r.style.gridTemplateColumns=o,g.pipe(e,b.map(l=>{let d=kt(l);if(d&&(d.style.display=c.hideHearts?"none":"flex"),i(l))return;let a=l.querySelector(".starRatings");if(!a){let w=l.querySelector(".main-trackList-rowSectionEnd"),v=Number(w?.getAttribute("aria-colindex"));a=document.createElement("div"),a.setAttribute("aria-colindex",String(v)),w?.setAttribute("aria-colindex",String(v+1)),a.role="gridcell",a.style.display="flex",a.classList.add("main-trackList-rowSectionVariable"),a.classList.add("starRatings"),l.insertBefore(a,w),l.style.gridTemplateColumns=o}let f=wt(l),J=y.fromString(f);if(!y.isTrack(J))return;let[k,X]=N(J.id,T);a.appendChild(k),g.pipe(X,b.unzip,([w,v])=>v,S(m[f]??0)),W([k,X],()=>f);let Z=()=>k.style.visibility=m[f]?"visible":"hidden";l.addEventListener("mouseover",()=>k.style.visibility="visible"),l.addEventListener("mouseout",Z),Z()})))})),F,Ct=new MutationObserver(()=>c.showInTrackLists?ee():void 0);new MutationObserver(()=>{let t=F;F=document.querySelector("main"),F&&!F.isEqualNode(t)&&(t&&Ct.disconnect(),Ct.observe(F,{childList:!0,subtree:!0}))}).observe(document.body,{childList:!0,subtree:!0});var ie=async(t,e)=>{let i=y.fromString(t);e||(e=Pt("collection"));let s;if(y.isAlbum(i))s=g.pipe(await at(`${i}`),r=>r.tracks.items,b.map(r=>r.track.uri));else if(y.isArtist(i))s=g.pipe(await lt(`${i}`),b.map(r=>r.uri));else if(y.isPlaylistV1OrV2(i))s=g.pipe(await U(`${i}`),b.map(r=>r.uri));else throw"me out the window";S(Ut(s))(e)},z;Spicetify.Platform.History.listen(async({pathname:t})=>{if(!Yt([y.isAlbum,y.isArtist,y.isPlaylistV1OrV2])(t))return;z=await rt(".main-actionBar-ActionBar .main-playButton-PlayButton",0,document.body,z);let[i,s]=N("collection",T*2);h("collection")?.remove(),z.after(i);let r=g.pipe(s,b.unzip,([n,o])=>o);ie(t,r)});var re=()=>{if(document.querySelectorAll(".stars-now-playing").length!==0)return;let t=c.nowPlayingStarsOnRight?".main-nowPlayingBar-extraControls":".main-nowPlayingWidget-trackInfo",e=document.querySelector(t);if(!e)return;let[i,s]=N("now-playing",T);i.style.display="none",i.style.marginLeft="8px",i.style.marginRight="8px",c.nowPlayingStarsOnRight?e.prepend(i):e.after(i),W([i,s],()=>Spicetify.Player.data.track?.uri)};re();var H=()=>{let t=Spicetify.Player.data.track?.uri,e=h("now-playing");e.style.display=Spicetify.URI.isTrack(t)?"flex":"none",g.pipe(e,M(m[t]??0))};Spicetify.Player.addEventListener("songchange",()=>{let t=Spicetify.Player.data.item.uri;if(Number(c.skipThreshold)&&(m[t]||Number.MAX_SAFE_INTEGER)<=O(c.skipThreshold))return Spicetify.Player.next();H()});H();export{H as updateNowPlayingStars};
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,
