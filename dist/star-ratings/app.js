import{array as b,function as f}from"https://esm.sh/fp-ts";import{anyPass as Qt}from"https://esm.sh/fp-ts-std/Predicate";import{array as q,eq as Ct,string as Bt,record as Kt,semigroup as te,function as E}from"https://esm.sh/fp-ts";import{guard as Nt,memoize as Dt}from"https://esm.sh/fp-ts-std/Function";var Y=e=>Nt(e);var x=e=>async t=>e(await t),tt=e=>t=>r=>r[e]===t;var I=e=>t=>E.flow(q.chunksOf(e),q.map(t),r=>Promise.all(r),x(q.flatten));var et=e=>E.pipe(e,E.tupled,Dt(Ct.contramap(JSON.stringify)(Bt.Eq)),E.untupled);import{array as Ht,function as j}from"https://esm.sh/fp-ts";var it={before:{start:j.constant({before:"start"}),fromUri:e=>({before:{uri:e}}),fromUid:e=>({before:{uid:e}})},after:{end:j.constant({after:"end"}),fromUri:e=>({after:{uri:e}}),fromUid:e=>({after:{uid:e}})}};var st=(e,t=1e3,r=document.body,s)=>new Promise(i=>{let n=o=>{a.disconnect(),i(o)},a=new MutationObserver(()=>{let o=document.querySelector(e);if(o&&(!s||o!==s))return n(o)});a.observe(r,{childList:!0,subtree:!0}),t&&setTimeout(()=>n(null),t)});var U=e=>new Promise(t=>setTimeout(t,e));var Q=e=>Spicetify.Platform.LibraryAPI.contains(...e),rt=(e,t)=>Spicetify.Platform.LibraryAPI[t?"add":"remove"](...e),nt=async e=>{let t=await Q(e);return await j.pipe(e,Ht.reduceWithIndex([[],[]],(r,s,i)=>(s[Number(t[r])].push(i),s)),([r,s])=>{let i=[];return r.length&&i.push(rt(r,!0)),s.length&&i.push(rt(s,!1)),Promise.all(i)})};var at=async(e,t=0,r=487)=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.getAlbum,{uri:e,locale:Spicetify.Locale.getLocale(),offset:t,limit:r})).data.albumUnion;var ot=async(e,t)=>Spicetify.CosmosAsync.del(`https://api.spotify.com/v1/playlists/${e}/tracks`,{tracks:t.map(r=>({uri:r}))}),ue=I(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${e.join(",")}`)).artists),de=I(1)(async([e])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${e}`)]),me=I(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${e.join(",")}`)).albums),ye=I(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${e.join(",")}`)).tracks);var lt=async(e,t=0,r=100)=>(await Spicetify.Platform.LibraryAPI.getTracks({uri:e,offset:t,limit:r})).items,C=async e=>(await Spicetify.Platform.PlaylistAPI.getContents(e)).items,pt=async(e,t={})=>await Spicetify.Platform.RootlistAPI.createFolder(e,t);var ct=async(e,t={})=>await Spicetify.Platform.RootlistAPI.createPlaylist(e,t);var ut=async(e,t)=>await Spicetify.Platform.PlaylistPermissionsAPI.setBasePermission(e,t?"VIEWER":"BLOCKED");var dt=async e=>await Spicetify.Platform.RootlistAPI.getContents({folderUri:e});var mt=async(e,t,r={})=>await Spicetify.Platform.PlaylistAPI.add(e,t,r);var Mt=async(e,t,r,s="")=>{let i=new URL("https://ws.audioscrobbler.com/2.0/");return i.searchParams.append("method","track.getInfo"),i.searchParams.append("api_key",e),i.searchParams.append("artist",t),i.searchParams.append("track",r),i.searchParams.append("format","json"),i.searchParams.append("username",s),await fetch(i).then(n=>n.json())},ge=et(Mt);import{array as d,readonlyArray as T,record as $t,function as A,nonEmptyArray as qt}from"https://esm.sh/fp-ts";import{task as Ft}from"https://esm.sh/fp-ts";import{task as yt}from"https://esm.sh/fp-ts";import{constVoid as B}from"https://esm.sh/fp-ts/function";var{React:p,ReactDOM:Ot}=Spicetify,N=class e{constructor(t,r,s={}){this.name=t;this.sectionId=r;this.sectionFields=s;this.setRerender=null;this.pushSettings=async()=>{for(;!Spicetify?.Platform?.History?.listen;)await U(100);this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(({pathname:t=""})=>{t==="/preferences"&&this.render()}),Spicetify.Platform.History.location.pathname==="/preferences"&&await this.render()};this.toObject=()=>new Proxy({},{get:(t,r)=>e.getFieldValue(this.getId(r.toString()))});this.rerender=()=>{this.setRerender&&this.setRerender(Math.random())};this.render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await U(100)}let t=document.querySelector(".x-settings-container"),r=Array.from(t.children).find(({id:s})=>s===this.sectionId);r||(r=document.createElement("div"),r.id=this.sectionId,r.className="settingsContainer",t.appendChild(r)),Ot.render(p.createElement(this.FieldsContainer,null),r)};this.addButton=(t,r,s,i=B,n={})=>{let a=this.getId(t);return n.onClick=i,this.sectionFields[t]={id:a,type:"button",description:r,text:s,events:n},this};this.addToggle=(t,r,s=yt.of(!0),i=B,n={})=>{let a=this.getId(t);return e.setDefaultFieldValue(a,s),n.onChange=i,this.sectionFields[t]={id:a,type:"toggle",description:r,events:n},this};this.addInput=(t,r,s,i=B,n="text",a={})=>{let o=this.getId(t);return e.setDefaultFieldValue(o,s),a.onChange=i,this.sectionFields[t]={id:o,type:"input",description:r,inputType:n,events:a},this};this.addDropDown=(t,r,s,i=yt.of(0),n=B,a={})=>{let o=this.getId(t);return e.setDefaultFieldValue(o,i),a.onChange=n,this.sectionFields[t]={id:o,type:"dropdown",description:r,options:s,events:a},this};this.addHidden=(t,r)=>{let s=this.getId(t);return e.setDefaultFieldValue(s,r),this.sectionFields[t]={id:s,type:"hidden",description:""},this};this.getId=t=>`extensions:${this.sectionId}:${t}`;this.useStateFor=t=>{let[r,s]=p.useState(e.getFieldValue(t));return[r,i=>{i!==void 0&&(s(i),e.setFieldValue(t,i))}]};this.FieldsContainer=()=>{let[t,r]=p.useState(0);return this.setRerender=r,p.createElement("div",{className:"x-settings-section",key:t},p.createElement("h2",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-cello-textBase-type"},this.name),Object.entries(this.sectionFields).map(([s,i])=>p.createElement(this.Field,{field:i})))};this.Field=({field:t})=>{let r=tt("type");return p.createElement("div",{className:"x-settings-row"},p.createElement(this.SettingDescription,{id:t.id,description:t.description}),p.createElement("div",{className:"x-settings-secondColumn"},Y([[r("input"),this.SettingInputField],[r("button"),this.SettingButtonField],[r("toggle"),this.SettingToggleField],[r("dropdown"),this.SettingDropdownField]])(this.SettingHidden)(t)))};this.SettingDescription=({id:t,description:r})=>p.createElement("div",{className:"x-settings-firstColumn"},p.createElement("label",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-viola-textSubdued-type",htmlFor:t},r));this.SettingButtonField=t=>p.createElement("span",{className:""},p.createElement("button",{id:t.id,className:"Button-sc-y0gtbx-0 Button-sm-buttonSecondary-useBrowserDefaultFocusStyle x-settings-button",...t.events,type:t.type},t.text));this.SettingToggleField=t=>{let[r,s]=this.useStateFor(t.id);return p.createElement("label",{className:"x-settings-secondColumn x-toggle-wrapper"},p.createElement("input",{id:t.id,className:"x-toggle-input",type:"checkbox",checked:e.getFieldValue(t.id),...t.events,onChange:i=>{s(i.currentTarget.checked),t.events.onChange?.(i)}}),p.createElement("span",{className:"x-toggle-indicatorWrapper"},p.createElement("span",{className:"x-toggle-indicator"})))};this.SettingInputField=t=>{let[r,s]=this.useStateFor(t.id);return p.createElement("input",{className:"x-settings-input",id:t.id,dir:"ltr",value:e.getFieldValue(t.id),type:t.inputType,...t.events,onChange:i=>{s(i.currentTarget.value),t.events.onChange?.(i)}})};this.SettingDropdownField=t=>{let[r,s]=this.useStateFor(t.id);return p.createElement("select",{className:"main-dropDown-dropDown",id:t.id,...t.events,onChange:i=>{s(i.currentTarget.selectedIndex),t.events.onChange?.(i)}},t.options.map((i,n)=>p.createElement("option",{selected:n===e.getFieldValue(t.id),value:n+1},i)))};this.SettingHidden=()=>p.createElement(p.Fragment,null)}static{this.waitForReact=async()=>{for(;!(Spicetify.React&&Spicetify.ReactDOM);)U(100);return this}}static{this.getFieldValue=t=>JSON.parse(Spicetify.LocalStorage.get(t)??"null")}static{this.setFieldValue=(t,r)=>{Spicetify.LocalStorage.set(t,JSON.stringify(r))}}static{this.setDefaultFieldValue=async(t,r)=>{e.getFieldValue(t)===null&&e.setFieldValue(t,await r())}}};import{array as _t,function as V}from"https://esm.sh/fp-ts";import{array as R,nonEmptyArray as ft,function as D}from"https://esm.sh/fp-ts";var{URI:gt}=Spicetify,Gt=(e,t,r)=>{let s="http://www.w3.org/2000/svg",i=document.createElementNS(s,"svg"),n=`${e}-${t}`;i.id=n,i.style.minHeight=`${r}px`,i.style.minWidth=`${r}px`,i.setAttributeNS(null,"width",`${r}px`),i.setAttributeNS(null,"height",`${r}px`),i.setAttributeNS(null,"viewBox","0 0 32 32");let a=document.createElementNS(s,"defs");i.append(a);let o=document.createElementNS(s,"linearGradient");a.append(o),o.id=`${n}-gradient`;let u=document.createElementNS(s,"stop");o.append(u),u.id=`${n}-gradient-left`,u.setAttributeNS(null,"offset","50%"),u.setAttributeNS(null,"stop-color","var(--spice-button-disabled)");let l=document.createElementNS(s,"stop");o.append(l),l.id=`${n}-gradient-right`,l.setAttributeNS(null,"offset","50%"),l.setAttributeNS(null,"stop-color","var(--spice-button-disabled)");let g=document.createElementNS(s,"path");return i.append(g),g.setAttributeNS(null,"fill",`url(#${o.id})`),g.setAttributeNS(null,"d","M20.388,10.918L32,12.118l-8.735,7.749L25.914,31.4l-9.893-6.088L6.127,31.4l2.695-11.533L0,12.118l11.547-1.2L16.026,0.6L20.388,10.918z"),[i,[u,l]]},H=(e,t)=>{let r=`stars-${e}`,s=document.createElement("span");s.className="stars",s.id=r,s.style.whiteSpace="nowrap",s.style.alignItems="center",s.style.display="flex";let i=ft.range(1,5).map(n=>Gt(r,n,t));return D.pipe(i,R.unzip,([n])=>n,R.map(n=>s.append(n))),[s,i]},S=e=>t=>{let r=s=>i=>t[Math.floor(i/2)][i%2].setAttributeNS(null,"stop-color",`var(--spice-button${s?"":"-disabled"})`);D.pipe(ft.range(0,9),R.spanLeft(s=>s<e),({init:s,rest:i})=>{s.map(r(!0)),i.map(r(!1))})},W=(e,t)=>r=>{let s=e.getBoundingClientRect(),i=r.clientX-s.left,n=c.halfStarRatings&&i<At;return 2*(t+1)-Number(n)},St=(e,t,r)=>async s=>{let i=r(),n=m[i],a=W(t,e)(s),o=M(c.heartThreshold);if(o){let l=a>=o,[g]=await Q([i]);g!==l&&nt([i])}if(n===a&&(a=0),n&&D.pipe(P.slice(0,n+1),R.filter(Boolean),R.map(l=>gt.from(l).id),R.map(l=>ot(l,[i]))),m[i]=a,a){let l=P[a];l||(l=await ct(O(a),it.after.fromUri(c.ratingsFolderUri)),ut(l,!1),P[a]=l),mt(l,[i])}_();let u=h(`${gt.fromString(i).id}`);u&&(D.pipe(u,G(a)),u.style.visibility=a?"visible":"hidden")};var ht="Ratings",L=16,At=L/2,M=e=>Number(e)*2,O=e=>(e/2).toFixed(1),bt=e=>Array.from(e.children),Vt=e=>Array.from(e.firstChild.firstChild.childNodes),xt=V.flow(bt,_t.map(Vt)),G=e=>V.flow(xt,S(e)),h=e=>document.getElementById(`stars-${e}`),Be=V.flow(h,bt),Rt=V.flow(h,xt),Pt=()=>Array.from(document.querySelectorAll(".main-trackList-indexable")),It=e=>e.querySelector(".main-trackList-trackListHeader")?.firstChild,Lt=e=>Array.from(e.querySelectorAll("div.main-trackList-trackListRow")),Tt=e=>{let t=e.querySelector("div.main-trackList-rowSectionEnd");return[Number(t.getAttribute("aria-colindex")),t]},vt=e=>e.querySelector(".Button-sm-16-buttonTertiary-iconOnly-useBrowserDefaultFocusStyle, .Button-textBrightAccent-sm-16-buttonTertiary-iconOnly-useBrowserDefaultFocusStyle"),wt=e=>(e=Object.values(e)[0].child.child.child.child,e.pendingProps.uri??e.child.pendingProps.uri);var kt=new N("Star Ratings","star-ratings").addToggle("hideHearts","Hide Hearts").addToggle("halfStarRatings","Half star ratings").addToggle("showInTrackLists","Show in tracklists").addToggle("nowPlayingStarsOnRight","Place the stars for now playing track on the right").addInput("heartThreshold","Threshold for liking trakcs",Ft.of("3.5")).addInput("skipThreshold","Threshold for skipping trakcs",Ft.of("1.5")).addInput("ratingsFolderUri","Ratings folder uri",async()=>(await pt(ht)).uri,$);kt.pushSettings();var c=kt.toObject();var jt=e=>Math.exp(e),Et=e=>A.pipe(e,d.map(t=>m[t]),d.filter(Boolean),d.map(t=>[t,jt(t)]),T.unzip,([t,r])=>T.reduceWithIndex(0,(s,i,n)=>i+n*r[s])(t)/T.reduce(0,(s,i)=>s+i)(r)||0),z=([e,t],r)=>{let[s,i]=A.pipe(t,T.unzip);e.addEventListener("mouseout",()=>S(m[r()]??0)(i)),A.pipe(s,T.mapWithIndex((n,a)=>{a.addEventListener("mousemove",A.flow(W(a,n),A.flip(S)(i))),a.addEventListener("click",St(n,s[n],r))}))},$=async()=>{let e=await dt(c.ratingsFolderUri),t=A.pipe(qt.range(0,10),d.map(r=>[O(r),r]),$t.fromEntries);P=A.pipe(e.items,d.map(r=>[r.type,r.uri,t[r.name]]),d.reduce([],(r,[s,i,n])=>(s==="playlist"&&n&&(r[n]=i),r))),globalThis.tracksRatings=m=await A.pipe(P,d.map(C),r=>Promise.all(r),x(d.map(r=>r??[])),x(d.map(d.map(r=>r.uri))),x(d.flatMap((r,s)=>r.map(i=>[i,s]))),x(d.reduce({},(r,[s,i])=>Object.assign(r,{[s]:Math.max(i,r[s]??0)}))))},P=[],m={};var{URI:y}=Spicetify,Wt=[null,null,null,null,"[index] 16px [first] 4fr [var1] 2fr [var2] 1fr [last] minmax(120px,1fr)","[index] 16px [first] 6fr [var1] 4fr [var2] 3fr [var3] 2fr [last] minmax(120px,1fr)","[index] 16px [first] 6fr [var1] 4fr [var2] 3fr [var3] minmax(120px,2fr) [var3] 2fr [last] minmax(120px,1fr)"];$();var zt=f.flow(Pt,b.map(e=>{let t=Lt(e);if(t.length===0)return;let r=o=>o.getElementsByClassName("stars").length>0,s=y.fromString(Spicetify.Platform.History.location.pathname),i=y.isArtist(s)?t[0]:It(e)??t[0],[n]=Tt(i),a=Wt[n-f.pipe(i,r,Number)];a&&(i.style.gridTemplateColumns=a,f.pipe(t,b.map(o=>{let u=vt(o);if(u&&(u.style.display=c.hideHearts?"none":"flex"),r(o))return;let l=o.querySelector(".starRatings");if(!l){let F=o.querySelector(".main-trackList-rowSectionEnd"),k=Number(F?.getAttribute("aria-colindex"));l=document.createElement("div"),l.setAttribute("aria-colindex",String(k)),F?.setAttribute("aria-colindex",String(k+1)),l.role="gridcell",l.style.display="flex",l.classList.add("main-trackList-rowSectionVariable"),l.classList.add("starRatings"),o.insertBefore(l,F),o.style.gridTemplateColumns=a}let g=wt(o),X=y.fromString(g);if(!y.isTrack(X))return;let[w,Z]=H(X.id,L);l.appendChild(w),f.pipe(Z,b.unzip,([F,k])=>k,S(m[g]??0)),z([w,Z],()=>g);let K=()=>w.style.visibility=m[g]?"visible":"hidden";o.addEventListener("mouseover",()=>w.style.visibility="visible"),o.addEventListener("mouseout",K),K()})))})),v,Ut=new MutationObserver(()=>c.showInTrackLists?zt():void 0);new MutationObserver(()=>{let e=v;v=document.querySelector("main"),v&&!v.isEqualNode(e)&&(e&&Ut.disconnect(),Ut.observe(v,{childList:!0,subtree:!0}))}).observe(document.body,{childList:!0,subtree:!0});var Jt=async(e,t)=>{let r=y.fromString(e);t||(t=Rt("collection"));let s;if(y.isAlbum(r))s=f.pipe(await at(`${r}`),i=>i.tracks.items,b.map(i=>i.track.uri));else if(y.isArtist(r))s=f.pipe(await lt(`${r}`),b.map(i=>i.uri));else if(y.isPlaylistV1OrV2(r))s=f.pipe(await C(`${r}`),b.map(i=>i.uri));else throw"me out the window";S(Et(s))(t)},J;Spicetify.Platform.History.listen(async({pathname:e})=>{if(!Qt([y.isAlbum,y.isArtist,y.isPlaylistV1OrV2])(e))return;J=await st(".main-actionBar-ActionBar .main-playButton-PlayButton",0,document.body,J);let[r,s]=H("collection",L*2);h("collection")?.remove(),J.after(r);let i=f.pipe(s,b.unzip,([n,a])=>a);Jt(e,i)});var Xt=()=>{if(document.querySelectorAll(".stars-now-playing").length!==0)return;let e=c.nowPlayingStarsOnRight?".main-nowPlayingBar-extraControls":".main-nowPlayingWidget-trackInfo",t=document.querySelector(e);if(!t)return;let[r,s]=H("now-playing",L);r.style.display="none",r.style.marginLeft="8px",r.style.marginRight="8px",c.nowPlayingStarsOnRight?t.prepend(r):t.after(r),z([r,s],()=>Spicetify.Player.data.track?.uri)};Xt();var _=()=>{let e=Spicetify.Player.data.track?.uri,t=h("now-playing");t.style.display=Spicetify.URI.isTrack(e)?"flex":"none",f.pipe(t,G(m[e]??0))};Spicetify.Player.addEventListener("songchange",()=>{let e=Spicetify.Player.data.item.uri;if(Number(c.skipThreshold)&&(m[e]||Number.MAX_SAFE_INTEGER)<=M(c.skipThreshold))return Spicetify.Player.next();_()});_();export{_ as updateNowPlayingStars};
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,
