{
  "version": 3,
  "sources": ["../../extensions/bad-lyrics/app.ts", "../../shared/util.ts", "../../extensions/bad-lyrics/utils/PlayerW.ts", "../../extensions/star-ratings-2/util.ts", "../../shared/listeners.ts", "../../shared/deps.ts", "../../extensions/bad-lyrics/utils/LyricsProvider.ts", "../../extensions/bad-lyrics/utils/Song.ts", "../../extensions/bad-lyrics/components.ts", "../../extensions/bad-lyrics/pkgs/spring.ts"],
  "sourcesContent": ["import { render } from \"https://esm.sh/lit\"\r\n\r\nimport { PermanentMutationObserver } from \"../../shared/util.ts\"\r\n\r\nimport { PlayerW } from \"./utils/PlayerW.ts\"\r\nimport { LyricsContainer } from \"./components.ts\"\r\n\r\nnew PermanentMutationObserver(\"aside\", () => {\r\n    const lyricsContainer = document.querySelector<HTMLDivElement>(\".main-nowPlayingView-lyricsContent\")\r\n    if (!lyricsContainer || lyricsContainer.classList.contains(\"injected\")) return\r\n    lyricsContainer.classList.add(\"injected\")\r\n    const lyricsContainerClone = lyricsContainer.cloneNode(false) as typeof lyricsContainer\r\n    lyricsContainer.replaceWith(lyricsContainerClone)\r\n\r\n    const ourLyricsContainer = new LyricsContainer()\r\n    ourLyricsContainer.song = PlayerW.GetSong() ?? null\r\n    PlayerW.songChangedSubject.subscribe(song => (ourLyricsContainer.song = song ?? null))\r\n    PlayerW.scaledProgressChangedSubject.subscribe(progress => ourLyricsContainer.updateProgress(progress))\r\n    render(ourLyricsContainer, lyricsContainerClone)\r\n})\r\n", "export type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nconst { URI } = Spicetify\r\nconst { PlayerAPI } = Spicetify.Platform\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: () => ({ before: \"start\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: () => ({ after: \"end\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport class PermanentMutationObserver extends MutationObserver {\r\n    target: HTMLElement | null = null\r\n\r\n    constructor(\r\n        targetSelector: string,\r\n        callback: MutationCallback,\r\n        opts: MutationObserverInit = {\r\n            childList: true,\r\n            subtree: true,\r\n        },\r\n    ) {\r\n        super(callback)\r\n        new MutationObserver(() => {\r\n            const nextTarget = document.querySelector<HTMLElement>(targetSelector)\r\n            if (nextTarget && !nextTarget.isEqualNode(this.target)) {\r\n                this.target && this.disconnect()\r\n                this.target = nextTarget\r\n                this.observe(this.target, opts)\r\n            }\r\n        }).observe(document.body, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n    }\r\n}\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 1000,\r\n    location = document.body,\r\n    notEl?: E | null,\r\n) =>\r\n    new Promise((resolve: (value: Element) => void, reject) => {\r\n        const onMutation = () => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el) {\r\n                if (notEl && el === notEl) {\r\n                } else {\r\n                    observer.disconnect()\r\n                    return resolve(el)\r\n                }\r\n            }\r\n        }\r\n\r\n        const observer = new MutationObserver(onMutation)\r\n        onMutation()\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout)\r\n            setTimeout(() => {\r\n                observer.disconnect()\r\n                reject()\r\n            }, timeout)\r\n    })\r\n\r\nexport const formatUri = (uri: string) => URI.fromString(uri).toURI()\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const mainElement = document.querySelector(\"main\")!\r\nexport const [REACT_FIBER, REACT_PROPS] = Object.keys(mainElement)\r\n\r\nexport const createQueueItem =\r\n    (queued: boolean) =>\r\n    ({ uri, uid = \"\" }: { uri: string; uid?: string }) => ({\r\n        contextTrack: {\r\n            uri,\r\n            uid,\r\n            metadata: {\r\n                is_queued: queued.toString(),\r\n            },\r\n        },\r\n        removed: [],\r\n        blocked: [],\r\n        provider: queued ? (\"queue\" as const) : (\"context\" as const),\r\n    })\r\n\r\nexport const setQueue = async (\r\n    nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>,\r\n    contextUri?: string,\r\n) => {\r\n    const { _queue, _client } = PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    const res = await _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    })\r\n\r\n    await PlayerAPI.skipToNext()\r\n\r\n    if (contextUri) {\r\n        await new Promise<void>(resolve => {\r\n            PlayerAPI._events.addListener(\"queue_update\", () => resolve(), { once: true })\r\n        })\r\n        await setPlayingContext(contextUri)\r\n    }\r\n\r\n    return res\r\n}\r\n\r\nexport const setPlayingContext = (uri: string) => {\r\n    const { sessionId } = PlayerAPI._state\r\n    return PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri })\r\n}\r\n", "import { Subject, animationFrameScheduler, asyncScheduler } from \"https://esm.sh/rxjs\"\r\n\r\nimport { onPlayedPaused, onSongChanged } from \"../../../shared/listeners.ts\"\r\n\r\nimport { Song } from \"./Song.ts\"\r\n\r\nconst { PlayerAPI } = Spicetify.Platform\r\n\r\nexport const PlayerW = new (class {\r\n    private Song?: Song\r\n    isPaused = PlayerAPI._state.isPaused\r\n    scaledProgress = 0\r\n\r\n    songChangedSubject = new Subject<Song | void>()\r\n    isPausedChangedSubject = new Subject<boolean>()\r\n    scaledProgressChangedSubject = new Subject<number>()\r\n\r\n    GetSong = () => this.Song\r\n\r\n    constructor() {\r\n        onSongChanged(state => {\r\n            const { item } = state\r\n\r\n            if (item && item.type === \"track\") {\r\n                const uri = item.uri\r\n                const name = item.name\r\n                const artist = item.metadata.artist_name\r\n                const album = item.album.name\r\n                const duration = item.duration.milliseconds\r\n                const isPaused = state.isPaused\r\n                const metadata = item.metadata\r\n                this.Song = new Song({ uri, name, artist, album, duration, isPaused, metadata })\r\n            } else {\r\n                this.Song = undefined\r\n            }\r\n\r\n            this.songChangedSubject.next(this.Song)\r\n        })\r\n\r\n        onPlayedPaused(state => {\r\n            const isPausedNext = state.isPaused ?? true\r\n            if (this.isPaused !== isPausedNext) {\r\n                if (!isPausedNext) {\r\n                    this.startTimestepping()\r\n                }\r\n                this.isPaused = !this.isPaused\r\n                this.isPausedChangedSubject.next(this.isPaused)\r\n            }\r\n        })\r\n    }\r\n\r\n    private triggerTimestampSync() {\r\n        let autoSyncs = 1\r\n        asyncScheduler.schedule(\r\n            function (self) {\r\n                if (self!.isPaused) return\r\n\r\n                if (!PlayerAPI._events.emitResumeSync()) {\r\n                    PlayerAPI._contextPlayer.resume({})\r\n                }\r\n\r\n                autoSyncs++\r\n\r\n                const timeout = Math.expm1((Math.LN2 / 2) * autoSyncs)\r\n\r\n                this.schedule(self, timeout)\r\n            },\r\n            Math.SQRT2 - 1,\r\n            this,\r\n        )\r\n    }\r\n\r\n    private startTimestepping() {\r\n        let oldScaledProgress = Spicetify.Player.getProgressPercent()\r\n        animationFrameScheduler.schedule(\r\n            function (self) {\r\n                if (self!.isPaused) return\r\n\r\n                self!.scaledProgress = Spicetify.Player.getProgressPercent()\r\n                if (self!.scaledProgress !== oldScaledProgress) {\r\n                    self!.scaledProgressChangedSubject.next(self!.scaledProgress)\r\n                }\r\n                oldScaledProgress = self!.scaledProgress\r\n                this.schedule(self)\r\n            },\r\n            undefined,\r\n            this,\r\n        )\r\n\r\n        this.triggerTimestampSync()\r\n    }\r\n})()\r\n", "import { REACT_PROPS } from \"../../shared/util.ts\"\r\n\r\nexport const RATINGS_FOLDER_NAME = \"Ratings\"\r\n\r\nexport const getTrackLists = () =>\r\n    Array.from(document.querySelectorAll<HTMLDivElement>(\".main-trackList-trackList.main-trackList-indexable\"))\r\nexport const getTrackListTracks = (trackList: HTMLDivElement) =>\r\n    Array.from(trackList.querySelectorAll<HTMLDivElement>(\".main-trackList-trackListRow\"))\r\n\r\nexport const getTrackListTrackUri = (track: HTMLDivElement) => {\r\n    const rowSectionEnd = track.querySelector<HTMLDivElement>(\".main-trackList-rowSectionEnd\")!\r\n    const reactProps = rowSectionEnd[REACT_PROPS]\r\n    const { props } =\r\n        // artist & local tracks & albums\r\n        reactProps.children.at?.(-1).props.menu ??\r\n        // playlists\r\n        reactProps.children.props.children.at(-1).props.menu\r\n\r\n    return props.uri\r\n}\r\n\r\nexport const getNowPlayingBar = () => document.querySelector<HTMLDivElement>(\"div.main-nowPlayingBar-nowPlayingBar\")!\r\nexport const getCollectionActionBarRow = () => document.querySelector<HTMLDivElement>(`div.main-actionBar-ActionBarRow`)\r\n\r\nexport const playlistButtonSelector = `button[aria-label=\"Add to Liked Songs\"], button[aria-label=\"Add to playlist\"], button[aria-label=\"Remove recommendation\"]`\r\nexport const getPlaylistButton = (parent: HTMLElement) =>\r\n    parent.querySelector<HTMLButtonElement>(playlistButtonSelector)!\r\nexport const getCollectionPlaylistButton = () => {\r\n    const ab = getCollectionActionBarRow()\r\n    return ab?.querySelector<HTMLButtonElement>(\r\n        `button[aria-label=\"Remove from Your Library\"], button[aria-label=\"Save to Your Library\"]`,\r\n    )\r\n}\r\n", "import { getTrackListTracks, getTrackLists } from \"../extensions/star-ratings-2/util.ts\"\r\n\r\nimport { PermanentMutationObserver, REACT_FIBER } from \"./util.ts\"\r\n\r\nconst { Player, URI } = Spicetify\r\nconst { PlayerAPI, History } = Spicetify.Platform\r\n\r\nexport const onHistoryChanged = (\r\n    toMatchTo: string | RegExp | ((location: string) => boolean),\r\n    callback: (uri: string) => void,\r\n    dropDuplicates = true,\r\n) => {\r\n    const createMatchFn = (toMatchTo: string | RegExp | ((input: string) => boolean)) => {\r\n        switch (typeof toMatchTo) {\r\n            case \"string\":\r\n                return (input: string) => input?.startsWith(toMatchTo) ?? false\r\n\r\n            case \"function\":\r\n                return toMatchTo\r\n\r\n            default:\r\n                return (input: string) => toMatchTo.test(input)\r\n        }\r\n    }\r\n\r\n    let lastPathname = \"\"\r\n    const matchFn = createMatchFn(toMatchTo)\r\n\r\n    const historyChanged = ({ pathname }: any) => {\r\n        if (matchFn(pathname)) {\r\n            if (dropDuplicates && lastPathname === pathname) {\r\n            } else callback(URI.fromString(pathname).toURI())\r\n        }\r\n        lastPathname = pathname\r\n    }\r\n\r\n    historyChanged(History.location ?? {})\r\n    return History.listen(historyChanged)\r\n}\r\n\r\nexport const onSongChanged = (callback: (state: Spicetify.Platform.PlayerAPI.PlayerState) => void) => {\r\n    callback(PlayerAPI._state)\r\n    Player.addEventListener(\"songchange\", event => callback(event!.data))\r\n}\r\n\r\nexport const onPlayedPaused = (callback: (state: Spicetify.Platform.PlayerAPI.PlayerState) => void) => {\r\n    callback(PlayerAPI._state)\r\n    Player.addEventListener(\"onplaypause\", event => callback(event!.data))\r\n}\r\n\r\ntype TrackListElement = HTMLDivElement & { presentation?: HTMLDivElement }\r\ntype TrackElement = HTMLDivElement & { props?: Record<string, any> }\r\n\r\ntype TrackListMutationListener = (trackList: Required<TrackListElement>, tracks: Array<Required<TrackElement>>) => void\r\nexport const onTrackListMutationListeners = new Array<TrackListMutationListener>()\r\n\r\nconst _onTrackListMutation = (\r\n    trackList: Required<TrackListElement>,\r\n    record: MutationRecord[],\r\n    observer: MutationObserver,\r\n) => {\r\n    const tracks = getTrackListTracks(trackList.presentation) as Array<Required<TrackElement>>\r\n\r\n    const reactFiber = trackList.presentation[REACT_FIBER].alternate\r\n    const reactTracks = reactFiber.pendingProps.children as any[]\r\n    const tracksProps = reactTracks.map((child: any) => child.props as Record<string, any>)\r\n\r\n    tracks.forEach((track, i) => (track.props = tracksProps[i]))\r\n\r\n    const fullyRenderedTracks = tracks.filter(track => track.props.uri)\r\n\r\n    onTrackListMutationListeners.map(listener => listener(trackList, fullyRenderedTracks))\r\n}\r\n\r\nnew PermanentMutationObserver(\"main\", () => {\r\n    const trackLists = getTrackLists() as Array<TrackListElement>\r\n    trackLists\r\n        .filter(trackList => !trackList.presentation)\r\n        .forEach(trackList => {\r\n            trackList.presentation = trackList.lastElementChild!.firstElementChild!\r\n                .nextElementSibling! as HTMLDivElement\r\n\r\n            new MutationObserver((record, observer) =>\r\n                _onTrackListMutation(trackList as Required<TrackListElement>, record, observer),\r\n            ).observe(trackList.presentation, { childList: true })\r\n        })\r\n})\r\n", "// @deno-types=\"npm:@types/lodash\"\r\nimport { default as ld } from \"https://esm.sh/lodash\"\r\nexport const _ = ld\r\n\r\n// @deno-types=\"npm:@types/lodash/fp\"\r\nimport { default as ld_fp } from \"https://esm.sh/lodash/fp\"\r\nexport const fp = ld_fp\r\n", "import { _ } from \"../../../shared/deps.ts\"\r\n\r\nconst headers = {\r\n    authority: \"apic-desktop.musixmatch.com\",\r\n    cookie: \"x-mxm-token-guid=\",\r\n}\r\n\r\nconst CONFIG = {\r\n    musixmatchToken: undefined as unknown as string,\r\n}\r\n\r\n// if (!CONFIG.musixmatchToken) {\r\nconst url = new URL(\"https://apic-desktop.musixmatch.com/ws/1.1/token.get\")\r\nurl.searchParams.append(\"app_id\", \"web-desktop-app-v1.0\")\r\nSpicetify.CosmosAsync.get(url.toString(), undefined, _.omit(headers, \"cookie\")).then(res => {\r\n    if (res.message.header.status_code === 200 && res.message.body.user_token) {\r\n        CONFIG.musixmatchToken = res.message.body.user_token\r\n    }\r\n})\r\n// }\r\n\r\nexport type Lyrics = {\r\n    notSynced?: NotSynced\r\n    lineSynced?: LineSynced\r\n    wordSynced?: WordSynced\r\n}\r\n\r\nexport type SyncedPart = {\r\n    tsr: number\r\n    ter: number\r\n    part: Array<SyncedPart> | string\r\n}\r\n\r\nexport type Synced<A> = {\r\n    tsr: number\r\n    ter: number\r\n    part: A\r\n}\r\n\r\nexport enum LyricsType {\r\n    NONE,\r\n    NOT_SYNCED,\r\n    LINE_SYNCED,\r\n    WORD_SYNCED,\r\n}\r\n\r\nexport type NotSynced = Synced<Array<{ part: string }>> & { __type: LyricsType.NOT_SYNCED }\r\nexport type LineSynced = Synced<Array<Synced<string>>> & { __type: LyricsType.LINE_SYNCED }\r\nexport type WordSynced = Synced<Array<Synced<Array<Synced<string>>>>> & { __type: LyricsType.WORD_SYNCED }\r\n\r\nexport const findLyrics = async (info: {\r\n    uri: string\r\n    title: string\r\n    artist: string\r\n    album: string\r\n    durationS: number\r\n}) => {\r\n    const { lyrics, subtitles, track } = await fetchMxmMacroSubtitlesGet(\r\n        info.uri,\r\n        info.title,\r\n        info.artist,\r\n        info.album,\r\n        info.durationS,\r\n    )\r\n\r\n    const l: Lyrics = {}\r\n    if (!lyrics) return l\r\n\r\n    const wrapInContainerSyncedType = <T extends LyricsType, P>(s: T, a: P) => ({\r\n        __type: s,\r\n        tsr: 0,\r\n        ter: 1,\r\n        part: a,\r\n    })\r\n\r\n    if (track.has_richsync) {\r\n        const richSync = await fetchMxmTrackRichSyncGet(track.commontrack_id, track.track_length)\r\n        l.wordSynced = wrapInContainerSyncedType(\r\n            LyricsType.WORD_SYNCED,\r\n            richSync.map(rsLine => {\r\n                const tsr = rsLine.ts / track.track_length\r\n                const ter = rsLine.te / track.track_length\r\n                const duration = rsLine.te - rsLine.ts\r\n\r\n                const part = rsLine.l.map((word, index, words) => {\r\n                    const part = word.c\r\n                    const tsr = word.o / duration\r\n                    const ter = words[index + 1]?.o / duration || 1\r\n\r\n                    return { tsr, ter, part }\r\n                })\r\n\r\n                return { tsr, ter, part }\r\n            }),\r\n        )\r\n    }\r\n\r\n    if (track.has_subtitles) {\r\n        const subtitle = JSON.parse(subtitles[0].subtitle_body) as Array<{\r\n            text: string\r\n            time: { total: number; minutes: number; seconds: number; hundredths: number }\r\n        }>\r\n        l.lineSynced = wrapInContainerSyncedType(\r\n            LyricsType.LINE_SYNCED,\r\n            subtitle.map((sLine, index, subtitle) => {\r\n                const tsr = sLine.time.total / track.track_length\r\n                const ter = subtitle[index + 1]?.time.total / track.track_length || 1\r\n                return { tsr, ter, part: sLine.text }\r\n            }),\r\n        )\r\n    }\r\n\r\n    if (track.has_lyrics || track.has_lyrics_crowd) {\r\n        l.notSynced = wrapInContainerSyncedType(\r\n            LyricsType.NOT_SYNCED,\r\n            lyrics.lyrics_body.split(\"\\n\").map(lLine => ({ part: lLine })),\r\n        )\r\n    }\r\n\r\n    return l\r\n}\r\n\r\nconst getTranslation = async (trackId: string, lang = \"en\") => {\r\n    const res = await fetchMxmCrowdTrackTranslationsGet(trackId, lang)\r\n    return res.map(translation => ({\r\n        translation: translation.description,\r\n        matchedLine: translation.matched_line,\r\n    }))\r\n}\r\n\r\ntype MusicGenreList = Array<{\r\n    music_genre: {\r\n        music_genre_id: number\r\n        music_genre_parent_id: number\r\n        music_genre_name: string\r\n        music_genre_name_extended: string\r\n        music_genre_vanity: string\r\n    }\r\n}>\r\ntype MxMLyrics = {\r\n    lyrics_id: number\r\n    can_edit: 0 | 1\r\n    locked: 0 | 1\r\n    published_status: 0 | 1\r\n    action_requested: string\r\n    verified: 0 | 1\r\n    restricted: 0 | 1\r\n    instrumental: 0 | 1\r\n    explicit: 0 | 1\r\n    lyrics_body: string\r\n    lyrics_language: string\r\n    lyrics_language_description: string\r\n    script_tracking_url: string\r\n    pixel_tracking_url: string\r\n    html_tracking_url: string\r\n    lyrics_copyright: string\r\n    writer_list: string[]\r\n    publisher_list: string[]\r\n    backlink_url: string\r\n    updated_time: string\r\n}\r\ntype MxMSnippet = {\r\n    snippet_id: number\r\n    snippet_language: string\r\n    restricted: 0 | 1\r\n    instrumental: 0 | 1\r\n    snippet_body: string\r\n    script_tracking_url: string\r\n    pixel_tracking_url: string\r\n    html_tracking_url: string\r\n    updated_time: string\r\n}\r\ntype MxMSubtitle = {\r\n    subtitle_id: number\r\n    restricted: 0 | 1\r\n    published_status: number\r\n    subtitle_body: string\r\n    subtitle_avg_count: number\r\n    lyrics_copyright: string\r\n    subtitle_length: number\r\n    subtitle_language: string\r\n    subtitle_language_description: string\r\n    script_tracking_url: string\r\n    pixel_tracking_url: string\r\n    html_tracking_url: string\r\n    writer_list: string[]\r\n    publisher_list: string[]\r\n    updated_time: string\r\n}\r\ntype MxMTrack = {\r\n    track_id: number\r\n    track_mbid: string\r\n    track_isrc: string\r\n    commontrack_isrcs: Array<string[]>\r\n    track_spotify_id: string\r\n    commontrack_spotify_ids: string[]\r\n    commontrack_itunes_ids: number[]\r\n    track_soundcloud_id: number\r\n    track_xboxmusic_id: string\r\n    track_name: string\r\n    track_name_translation_list: any[]\r\n    track_rating: number\r\n    track_length: number\r\n    commontrack_id: number\r\n    instrumental: 0 | 1\r\n    explicit: 0 | 1\r\n    has_lyrics: 0 | 1\r\n    has_lyrics_crowd: 0 | 1\r\n    has_subtitles: 0 | 1\r\n    has_richsync: 0 | 1\r\n    has_track_structure: 0 | 1\r\n    num_favorite: number\r\n    lyrics_id: number\r\n    subtitle_id: number\r\n    album_id: number\r\n    album_name: string\r\n    album_vanity_id: string\r\n    artist_id: number\r\n    artist_mbid: string\r\n    artist_name: string\r\n    album_coverart_100x100: string\r\n    album_coverart_350x350: string\r\n    album_coverart_500x500: string\r\n    album_coverart_800x800: string\r\n    track_share_url: string\r\n    track_edit_url: string\r\n    commontrack_vanity_id: string\r\n    restricted: 0 | 1\r\n    first_release_date: string\r\n    updated_time: string\r\n    primary_genres: {\r\n        music_genre_list: MusicGenreList\r\n    }\r\n    secondary_genres: {\r\n        music_genre_list: MusicGenreList\r\n    }\r\n}\r\ntype MxMMacroSubtitles = {\r\n    lyrics: MxMLyrics\r\n    snippet: MxMSnippet\r\n    subtitles: Array<MxMSubtitle>\r\n    track: MxMTrack\r\n}\r\ntype None<A> = { [k in keyof A]: undefined }\r\nconst fetchMxmMacroSubtitlesGet = async (\r\n    uri: string,\r\n    title: string,\r\n    artist: string,\r\n    album: string,\r\n    durationS: number,\r\n    renewsLeft = 1,\r\n): Promise<MxMMacroSubtitles | None<MxMMacroSubtitles>> => {\r\n    const url = new URL(\"https://apic-desktop.musixmatch.com/ws/1.1/macro.subtitles.get\")\r\n    url.searchParams.append(\"format\", \"json\")\r\n    url.searchParams.append(\"namespace\", \"lyrics_richsynched\")\r\n    url.searchParams.append(\"subtitle_format\", \"mxm\")\r\n    url.searchParams.append(\"app_id\", \"web-desktop-app-v1.0\")\r\n    url.searchParams.append(\"q_album\", album)\r\n    url.searchParams.append(\"q_artist\", artist)\r\n    url.searchParams.append(\"q_artists\", artist)\r\n    url.searchParams.append(\"q_track\", title)\r\n    url.searchParams.append(\"track_spotify_id\", uri)\r\n    url.searchParams.append(\"q_duration\", encodeURIComponent(durationS))\r\n    url.searchParams.append(\"f_subtitle_length\", encodeURIComponent(Math.floor(durationS)))\r\n    url.searchParams.append(\"usertoken\", CONFIG.musixmatchToken)\r\n\r\n    const res = await Spicetify.CosmosAsync.get(url.toString(), undefined, headers)\r\n    if (res.message.header.hint === \"renew\") {\r\n        return renewsLeft > 0\r\n            ? fetchMxmMacroSubtitlesGet(uri, title, artist, album, durationS, 0)\r\n            : Promise.resolve({} as None<MxMMacroSubtitles>)\r\n    }\r\n    const {\r\n        \"track.lyrics.get\": trackLyricsGet,\r\n        \"track.snippet.get\": trackSnippetGet,\r\n        \"track.subtitles.get\": trackSubtitlesGet,\r\n        \"userblob.get\": userblobGet,\r\n        \"matcher.track.get\": matcherTrackGet,\r\n    } = res.message.body.macro_calls\r\n    debugger\r\n    return {\r\n        lyrics: trackLyricsGet.message.body.lyrics as MxMLyrics,\r\n        snippet: trackSnippetGet.message.body.snippet as MxMSnippet,\r\n        subtitles: trackSubtitlesGet.message.body.subtitle_list.map(\r\n            (subtitle_element: any) => subtitle_element.subtitle,\r\n        ) as Array<MxMSubtitle>,\r\n        track: matcherTrackGet.message.body.track as MxMTrack,\r\n    }\r\n}\r\n\r\nconst fetchMxmTrackRichSyncGet = async (commonTrackId: number, trackLength: number) => {\r\n    const url = new URL(\"https://apic-desktop.musixmatch.com/ws/1.1/track.richsync.get\")\r\n    url.searchParams.append(\"format\", \"json\")\r\n    url.searchParams.append(\"subtitle_format\", \"mxm\")\r\n    url.searchParams.append(\"app_id\", \"web-desktop-app-v1.0\")\r\n    url.searchParams.append(\"f_subtitle_length\", encodeURIComponent(trackLength))\r\n    url.searchParams.append(\"q_duration\", encodeURIComponent(trackLength))\r\n    url.searchParams.append(\"commontrack_id\", encodeURIComponent(commonTrackId))\r\n    url.searchParams.append(\"usertoken\", CONFIG.musixmatchToken)\r\n\r\n    const res = await Spicetify.CosmosAsync.get(url.toString(), undefined, headers)\r\n\r\n    return JSON.parse(res.message.body.richsync.richsync_body) as Array<{\r\n        ts: number\r\n        te: number\r\n        l: Array<{\r\n            c: string\r\n            o: number\r\n        }>\r\n        x: string\r\n    }>\r\n}\r\n\r\nconst fetchMxmCrowdTrackTranslationsGet = async (trackId: string, lang = \"en\") => {\r\n    const url = new URL(\"https://apic-desktop.musixmatch.com/ws/1.1/crowd.track.translations.get\")\r\n    url.searchParams.append(\"translation_fields_set\", \"minimal\")\r\n    url.searchParams.append(\"selected_language\", lang)\r\n    url.searchParams.append(\"comment_format\", \"text\")\r\n    url.searchParams.append(\"format\", \"json\")\r\n    url.searchParams.append(\"app_id\", \"web-desktop-app-v1.0\")\r\n    url.searchParams.append(\"track_id\", trackId)\r\n    url.searchParams.append(\"usertoken\", CONFIG.musixmatchToken)\r\n\r\n    const res = await Spicetify.CosmosAsync.get(url.toString(), undefined, headers)\r\n\r\n    return res.message.body.translations_list.map(\r\n        (translation_element: any) => translation_element.translation,\r\n    ) as Array<any>\r\n}\r\n", "import { Track } from \"https://esm.sh/v135/@fostertheweb/spotify-web-api-ts-sdk@1.2.1/dist/mjs/types.js\"\r\nimport { Lyrics, findLyrics } from \"./LyricsProvider.ts\"\r\n\r\nexport type SpotifyTrackInformation = Track\r\n\r\nexport class Song {\r\n    readonly uri: string\r\n    readonly name: string\r\n    readonly artist: string\r\n    readonly album: string\r\n    readonly duration: number\r\n    readonly isLocal: boolean\r\n    readonly lyrics: Promise<Lyrics>\r\n\r\n    isPaused: boolean\r\n    private timestamp = 0\r\n\r\n    constructor(opts: {\r\n        uri: string\r\n        name: string\r\n        artist: string\r\n        album: string\r\n        duration: number\r\n        isPaused: boolean\r\n        metadata: Spicetify.Platform.PlayerAPI.TrackMetadata\r\n    }) {\r\n        this.uri = opts.uri\r\n        this.name = opts.name\r\n        this.artist = opts.artist\r\n        this.album = opts.album\r\n        this.duration = opts.duration\r\n        this.isLocal = opts.metadata.is_local === \"true\"\r\n        this.isPaused = opts.isPaused\r\n\r\n        this.lyrics = findLyrics({\r\n            uri: this.uri,\r\n            title: this.name,\r\n            artist: this.artist,\r\n            album: this.album,\r\n            durationS: this.duration / 1000,\r\n        })\r\n    }\r\n\r\n    getTimestamp = () => this.timestamp\r\n\r\n    setTimestamp = (timestampMs: number) => Spicetify.Player.seek(timestampMs)\r\n}\r\n", "import { createContext, provide, consume } from \"https://esm.sh/@lit/context\"\r\nimport { Task } from \"https://esm.sh/@lit/task\"\r\nimport { hermite } from \"https://esm.sh/@thi.ng/ramp\"\r\nimport { LitElement, css, html } from \"https://esm.sh/lit\"\r\nimport { customElement, property, query, queryAll, state } from \"https://esm.sh/lit/decorators.js\"\r\nimport { map } from \"https://esm.sh/lit/directives/map.js\"\r\nimport { when } from \"https://esm.sh/lit/directives/when.js\"\r\n\r\nimport { _ } from \"../../shared/deps.ts\"\r\nimport { Spring } from \"./pkgs/spring.ts\"\r\nimport { LyricsType, SyncedPart } from \"./utils/LyricsProvider.ts\"\r\nimport { PlayerW } from \"./utils/PlayerW.ts\"\r\nimport { Song } from \"./utils/Song.ts\"\r\nimport { PropertyValueMap } from \"https://esm.sh/v133/@lit/reactive-element@2.0.1/development/reactive-element.js\"\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"lyrics-container\": LyricsContainer\r\n        \"animated-text-container\": AnimatedTextContainer\r\n        \"animated-text\": AnimatedText\r\n    }\r\n}\r\n\r\nconst SCROLL_TIMEOUT_MS = 3000\r\n\r\nconst createInterpolator = (...stops: number[][]) => {\r\n    const spline = hermite(stops)\r\n    return (t: number) => spline.at(t)\r\n}\r\n\r\nconst DefaultInterpolators = {\r\n    scale: createInterpolator([0, 0.7], [1, 1.3], [1.1, 1]),\r\n    opacity: createInterpolator([0, 0], [0.3, 0.5], [1, 1], [1.2, 0.7]),\r\n    yOffset: createInterpolator(\r\n        [0, 0],\r\n        [0.2, 0.03],\r\n        [0.3, 0.07],\r\n        [0.4, 0.14],\r\n        [0.5, 0.2],\r\n        [0.7, 0.25],\r\n        [0.8, 0.27],\r\n        [0.9, 0.13],\r\n        [1, 0],\r\n    ),\r\n    glow: createInterpolator([0, 0.7], [1, 1.3], [1.2, 0.8]),\r\n}\r\n\r\nconst globalRSPSpringCtx = createContext<Spring>(\"globalRSPSpring\")\r\nconst scrollTimeoutCtx = createContext<number>(\"scrollTimeout\")\r\nconst spotifyContainerCtx = createContext<HTMLElement | undefined>(\"spotifyContainer\")\r\nconst loadedLyricsTypeCtx = createContext<LyricsType>(\"loadedLyricsType\")\r\n\r\n@customElement(\"lyrics-container\")\r\nexport class LyricsContainer extends LitElement {\r\n    static styles = css`\r\n        :host > animated-text-container {\r\n            display: unset;\r\n        }\r\n    `\r\n\r\n    @property({ attribute: false })\r\n    song: Song | null = null\r\n\r\n    private lyricsTask = new Task(this, {\r\n        task: ([song]) => song?.lyrics,\r\n        args: () => [this.song],\r\n    })\r\n\r\n    @provide({ context: loadedLyricsTypeCtx })\r\n    @state()\r\n    loadedLyricsType = LyricsType.NONE\r\n\r\n    public updateProgress(progress: number) {\r\n        if (this.loadedLyricsType === LyricsType.NONE || this.loadedLyricsType === LyricsType.NOT_SYNCED) return\r\n        this.firstContainer.updateProgress(progress, 0, 0)\r\n    }\r\n\r\n    @query(\"animated-text-container\")\r\n    // @ts-expect-error only has a getter\r\n    firstContainer: AnimatedTextContainer\r\n\r\n    @provide({ context: globalRSPSpringCtx })\r\n    globalRSPSpring = new Spring(0, 1, 1)\r\n\r\n    @provide({ context: scrollTimeoutCtx })\r\n    scrollTimeout = 0\r\n\r\n    @provide({ context: spotifyContainerCtx })\r\n    spotifyContainer =\r\n        document.querySelector<HTMLElement>(\"aside div.main-nowPlayingView-lyricsContent.injected\") ?? undefined\r\n\r\n    firstUpdated(changedProperties: PropertyValueMap<this>) {\r\n        this.spotifyContainer?.addEventListener(\"scroll\", e => {\r\n            this.scrollTimeout = Date.now() + SCROLL_TIMEOUT_MS\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return this.song\r\n            ? this.lyricsTask.render({\r\n                  pending: () => {\r\n                      this.loadedLyricsType = LyricsType.NONE\r\n                      return html`<div class=\"fetching\">Fetching Lyrics...</div>`\r\n                  },\r\n                  complete: availableLyrics => {\r\n                      const lyrics = Object.values(availableLyrics!)[0]\r\n                      if (!lyrics) {\r\n                          this.loadedLyricsType = LyricsType.NONE\r\n                          return html`<div class=\"noLyrics\">No Lyrics Found</div>`\r\n                      }\r\n                      this.loadedLyricsType = lyrics.__type\r\n                      const isSynced = this.loadedLyricsType === LyricsType.WORD_SYNCED\r\n\r\n                      const style = [\r\n                          [\"--gradient-angle\", `${isSynced ? 90 : 180}deg`],\r\n                          [\"--animated-text-bg-color\", isSynced ? \"black\" : \"white\"],\r\n                          [\"\"],\r\n                      ]\r\n                          .map(a => a.join(\": \"))\r\n                          .join(\"; \")\r\n\r\n                      return html`\r\n                          <animated-text-container style=${style} .text=${lyrics.part}></animated-text-container>\r\n                      `\r\n                  },\r\n                  error: e => {\r\n                      this.loadedLyricsType = LyricsType.NONE\r\n                      console.error(e)\r\n                      return html`<div class=\"error\">Error</div>`\r\n                  },\r\n              })\r\n            : html`<div class=\"error\">No Song Loaded</div>`\r\n    }\r\n}\r\n\r\n@customElement(\"animated-text-container\")\r\nexport class AnimatedTextContainer extends LitElement {\r\n    static styles = css`\r\n        :host {\r\n            /* border: 0;\r\n            background-color: transparent; */\r\n        }\r\n    `\r\n\r\n    @property({ type: Array })\r\n    text = [] as Array<SyncedPart>\r\n    @property({ type: Number })\r\n    tsrAbsolute = 0\r\n    @property({ type: Number })\r\n    tsr = 0\r\n    @property({ type: Number })\r\n    ter = 1\r\n\r\n    @queryAll(\"animated-text-container, animated-text\")\r\n    // @ts-expect-error only has a getter\r\n    childs: NodeListOf<AnimatedText | AnimatedTextContainer>\r\n\r\n    updateProgress(rsp: number, index: number, depthToActiveAncestor: number) {\r\n        const calculateRSPForChild = (child: AnimatedText | AnimatedTextContainer) =>\r\n            (rsp - child.tsr) / (child.ter - child.tsr)\r\n\r\n        const childs = Array.from(this.childs)\r\n        const rsps = childs.map(calculateRSPForChild)\r\n\r\n        const activeIndex = rsps.findIndex(rsp => Math.floor(rsp) === 0)\r\n\r\n        childs.forEach((child, i) => {\r\n            index = child.updateProgress(rsps[i], index, depthToActiveAncestor + (i === activeIndex ? 0 : 1))\r\n        })\r\n\r\n        return index\r\n    }\r\n\r\n    private calculateTSRAForPart(part: SyncedPart) {\r\n        return this.tsrAbsolute + part.tsr * (this.ter - this.tsr)\r\n    }\r\n\r\n    render() {\r\n        return html`${map(this.text, part =>\r\n                when(\r\n                    Array.isArray(part.part),\r\n                    () =>\r\n                        html`<animated-text-container\r\n                            .text=${part.part}\r\n                            tsrAbsolute=${this.calculateTSRAForPart(part)}\r\n                            tsr=${part.tsr}\r\n                            ter=${part.ter}\r\n                        />`,\r\n                    () =>\r\n                        html`<animated-text\r\n                            text=${part.part}\r\n                            tsrAbsolute=${this.calculateTSRAForPart(part)}\r\n                            tsr=${part.tsr}\r\n                            ter=${part.ter}\r\n                        />`,\r\n                ),\r\n            )}<br />`\r\n    }\r\n}\r\n\r\n@customElement(\"animated-text\")\r\nexport class AnimatedText extends LitElement {\r\n    static styles = css`\r\n        :host {\r\n            cursor: pointer;\r\n            background-color: black;\r\n            -webkit-text-fill-color: transparent;\r\n            -webkit-background-clip: text;\r\n        }\r\n    `\r\n\r\n    gradientAlphaSpring = new Spring(0, 50, 1)\r\n\r\n    @property()\r\n    text = \"\"\r\n    @property({ type: Number })\r\n    tsrAbsolute = 0\r\n    @property({ type: Number })\r\n    tsr = 0\r\n    @property({ type: Number })\r\n    ter = 1\r\n\r\n    @consume({ context: globalRSPSpringCtx })\r\n    globalRSPSpring?: Spring\r\n    @consume({ context: scrollTimeoutCtx, subscribe: true })\r\n    scrollTimeout = 0\r\n    @consume({ context: spotifyContainerCtx })\r\n    spotifyContainer?: HTMLElement\r\n    @consume({ context: loadedLyricsTypeCtx })\r\n    loadedLyricsType = LyricsType.NONE\r\n\r\n    updateProgress(rsp: number, index: number, depthToActiveAncestor: number) {\r\n        const crsp = _.clamp(rsp, 0, 1) // clamped rsp\r\n        const isActive = depthToActiveAncestor === 0\r\n\r\n        if (isActive) {\r\n            this.globalRSPSpring!.setEquilibrium(index + crsp)\r\n\r\n            if (Date.now() > this.scrollTimeout && this.spotifyContainer) {\r\n                const lineHeightHeuristic = this.offsetHeight\r\n                const scrollTop = this.offsetTop - this.spotifyContainer.offsetTop - lineHeightHeuristic * 2\r\n                const verticalLinesToActive =\r\n                    Math.abs(scrollTop - this.spotifyContainer.scrollTop) / lineHeightHeuristic\r\n\r\n                if (_.inRange(verticalLinesToActive, 1.5, 3.5)) {\r\n                    this.spotifyContainer.scrollTo({\r\n                        top: scrollTop,\r\n                        behavior: \"smooth\",\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        const srsp = this.globalRSPSpring!.current - index // smoothed rsp (not clamped)\r\n\r\n        this.gradientAlphaSpring.setEquilibrium(0.9 ** (1 + depthToActiveAncestor))\r\n        if (!this.gradientAlphaSpring.isInEquilibrium()) {\r\n            const gradientAlpha = this.gradientAlphaSpring.current\r\n            this.style.setProperty(\"--gradient-alpha\", gradientAlpha.toFixed(2))\r\n        }\r\n\r\n        this.style.backgroundImage = `linear-gradient(var(--gradient-angle), rgba(255,255,255,var(--gradient-alpha)) ${\r\n            srsp * 90\r\n        }%, rgba(255,255,255,0) ${srsp * 110}%)`\r\n\r\n        return index + 1\r\n    }\r\n\r\n    render() {\r\n        return html`<span role=\"button\" @click=${() => PlayerW.GetSong()?.setTimestamp(this.tsrAbsolute)}\r\n            >${this.text}</span\r\n        >`\r\n    }\r\n}\r\n", "const TAU = Math.PI * 2\r\n\r\nconst SLEEPING_EPSILON = 1e-7\r\n\r\nexport class Spring {\r\n    private W0: number\r\n    private v: number\r\n\r\n    private sleeping = true\r\n\r\n    private p_e: number\r\n\r\n    private updatedTime = Date.now()\r\n\r\n    get current() {\r\n        const nextUpdatedTime = Date.now()\r\n        const current = this.update(nextUpdatedTime - this.updatedTime)\r\n        this.updatedTime = nextUpdatedTime\r\n        return current\r\n    }\r\n\r\n    constructor(private p: number, private dampingRatio: number, frequency: number) {\r\n        if (dampingRatio * frequency < 0) {\r\n            throw new Error(\"Spring does not converge.\")\r\n        }\r\n\r\n        this.v = 0\r\n        this.p_e = p\r\n        this.W0 = frequency * TAU\r\n    }\r\n\r\n    update(dt: number): number {\r\n        const offset = this.p - this.p_e\r\n        const dp = this.v * dt\r\n        const A = this.dampingRatio * this.W0\r\n        const Adt = A * dt\r\n        const decay = Math.exp(-Adt)\r\n\r\n        let newPosition, newVelocity\r\n\r\n        if (this.dampingRatio == 1) {\r\n            newPosition = this.p_e + (offset * (1 + Adt) + dp) * decay\r\n            newVelocity = (this.v * (1 - Adt) - offset * (A * Adt)) * decay\r\n        } else if (this.dampingRatio < 1) {\r\n            const W_W0 = Math.sqrt(1 - this.dampingRatio * this.dampingRatio)\r\n            const W = this.W0 * W_W0\r\n\r\n            const i = Math.cos(W * dt)\r\n            const j = Math.sin(W * dt)\r\n\r\n            newPosition = this.p_e + (offset * i + (dp + Adt * offset) * (j / (W * dt))) * decay\r\n            newVelocity = (this.v * (i - (A / W) * j) - offset * j * (this.W0 / W_W0)) * decay\r\n        } else if (this.dampingRatio > 1) {\r\n            const W_W0 = Math.sqrt(this.dampingRatio ** 2 - 1)\r\n            const W = this.W0 * W_W0\r\n\r\n            const r_average = -this.W0 * this.dampingRatio\r\n\r\n            const r_1 = r_average + W\r\n            const r_2 = r_average - W\r\n\r\n            const c_2 = (offset * r_1 - this.v) / (r_1 - r_2)\r\n            const c_1 = offset - c_2\r\n\r\n            const e_1 = c_1 * Math.exp(r_1 * dt)\r\n            const e_2 = c_2 * Math.exp(r_2 * dt)\r\n\r\n            newPosition = this.p_e + e_1 + e_2\r\n            newVelocity = r_1 * e_1 + r_2 * e_2\r\n        } else {\r\n            throw \"Solar flare detected.\"\r\n        }\r\n\r\n        this.p = newPosition\r\n        this.v = newVelocity\r\n\r\n        this.sleeping = Math.abs(this.v) <= SLEEPING_EPSILON\r\n\r\n        return newPosition\r\n    }\r\n\r\n    setEquilibrium(position: number) {\r\n        if (this.p_e != position) {\r\n            this.p_e = position\r\n            this.sleeping = false\r\n        }\r\n        return this.p_e\r\n    }\r\n\r\n    reset(position: number) {\r\n        this.v = 0\r\n        this.p = this.p_e = position\r\n        this.sleeping = true\r\n    }\r\n\r\n    isInEquilibrium = () => this.sleeping\r\n}\r\n"],
  "mappings": "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",
  "names": ["URI", "PlayerAPI", "PlayerAPI", "part", "tsr", "ter", "subtitle", "url", "PlayerAPI", "state", "rsp"]
}
