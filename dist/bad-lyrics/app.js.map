{
  "version": 3,
  "sources": ["../../extensions/bad-lyrics/app.ts", "../../shared/util.ts", "../../extensions/bad-lyrics/utils/PlayerW.ts", "../../extensions/star-ratings-2/util.ts", "../../shared/listeners.ts", "../../shared/deps.ts", "../../shared/fp.ts", "../../extensions/bad-lyrics/utils/LyricsProvider.ts", "../../extensions/bad-lyrics/utils/Song.ts", "../../extensions/bad-lyrics/components/components.ts", "../../shared/math.ts", "../../extensions/bad-lyrics/splines/monotoneNormalSpline.ts", "../../extensions/bad-lyrics/components/contexts.ts", "../../extensions/bad-lyrics/components/mixins.ts"],
  "sourcesContent": ["import { render } from \"https://esm.sh/lit\"\r\n\r\nimport { PermanentMutationObserver } from \"../../shared/util.ts\"\r\n\r\nimport { PlayerW } from \"./utils/PlayerW.ts\"\r\nimport { LyricsWrapper } from \"./components/components.ts\"\r\n\r\nconst injectLyrics = (selector: string) => () => {\r\n    const lyricsContainer = document.querySelector<HTMLDivElement>(selector)\r\n    if (!lyricsContainer || lyricsContainer.classList.contains(\"injected\")) return\r\n    lyricsContainer.classList.add(\"injected\")\r\n    const lyricsContainerClone = lyricsContainer.cloneNode(false) as typeof lyricsContainer\r\n    lyricsContainer.replaceWith(lyricsContainerClone)\r\n\r\n    const ourLyricsContainer = new LyricsWrapper(selector)\r\n    ourLyricsContainer.song = PlayerW.getSong() ?? null\r\n    PlayerW.songChangedSubject.subscribe(song => ourLyricsContainer.updateSong(song ?? null))\r\n    PlayerW.scaledProgressChangedSubject.subscribe(progress => ourLyricsContainer.updateProgress(progress))\r\n    render(ourLyricsContainer, lyricsContainerClone)\r\n}\r\n\r\nconst injectNPVLyrics = injectLyrics(\"aside .main-nowPlayingView-lyricsContent\")\r\nconst injectCinemaLyrics = injectLyrics(\"#lyrics-cinema .lyrics-lyrics-contentWrapper\")\r\ninjectNPVLyrics()\r\ninjectCinemaLyrics()\r\nnew PermanentMutationObserver(\".Root__right-sidebar\", injectNPVLyrics)\r\nnew PermanentMutationObserver(\".Root__lyrics-cinema\", injectCinemaLyrics)\r\n", "export type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nconst { URI } = Spicetify\r\nconst { PlayerAPI } = Spicetify.Platform\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: () => ({ before: \"start\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: () => ({ after: \"end\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport class PermanentMutationObserver extends MutationObserver {\r\n    target: HTMLElement | null = null\r\n\r\n    constructor(\r\n        targetSelector: string,\r\n        callback: MutationCallback,\r\n        opts: MutationObserverInit = {\r\n            childList: true,\r\n            subtree: true,\r\n        },\r\n    ) {\r\n        super(callback)\r\n        new MutationObserver(() => {\r\n            const nextTarget = document.querySelector<HTMLElement>(targetSelector)\r\n            if (nextTarget && !nextTarget.isEqualNode(this.target)) {\r\n                this.target && this.disconnect()\r\n                this.target = nextTarget\r\n                this.observe(this.target, opts)\r\n            }\r\n        }).observe(document.body, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n    }\r\n}\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 1000,\r\n    location = document.body,\r\n    notEl?: E | null,\r\n) =>\r\n    new Promise((resolve: (value: Element) => void, reject) => {\r\n        const onMutation = () => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el) {\r\n                if (notEl && el === notEl) {\r\n                } else {\r\n                    observer.disconnect()\r\n                    return resolve(el)\r\n                }\r\n            }\r\n        }\r\n\r\n        const observer = new MutationObserver(onMutation)\r\n        onMutation()\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout)\r\n            setTimeout(() => {\r\n                observer.disconnect()\r\n                reject()\r\n            }, timeout)\r\n    })\r\n\r\nexport const formatUri = (uri: string) => URI.fromString(uri).toURI()\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const mainElement = document.querySelector(\"main\")!\r\nexport const [REACT_FIBER, REACT_PROPS] = Object.keys(mainElement)\r\n\r\nexport const createQueueItem =\r\n    (queued: boolean) =>\r\n    ({ uri, uid = \"\" }: { uri: string; uid?: string }) => ({\r\n        contextTrack: {\r\n            uri,\r\n            uid,\r\n            metadata: {\r\n                is_queued: queued.toString(),\r\n            },\r\n        },\r\n        removed: [],\r\n        blocked: [],\r\n        provider: queued ? (\"queue\" as const) : (\"context\" as const),\r\n    })\r\n\r\nexport const setQueue = async (\r\n    nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>,\r\n    contextUri?: string,\r\n) => {\r\n    const { _queue, _client } = PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    const res = await _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    })\r\n\r\n    await PlayerAPI.skipToNext()\r\n\r\n    if (contextUri) {\r\n        await new Promise<void>(resolve => {\r\n            PlayerAPI._events.addListener(\"queue_update\", () => resolve(), { once: true })\r\n        })\r\n        await setPlayingContext(contextUri)\r\n    }\r\n\r\n    return res\r\n}\r\n\r\nexport const setPlayingContext = (uri: string) => {\r\n    const { sessionId } = PlayerAPI._state\r\n    return PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri })\r\n}\r\n", "import { Subject, animationFrameScheduler, asyncScheduler } from \"https://esm.sh/rxjs\"\r\n\r\nimport { onPlayedPaused, onSongChanged } from \"../../../shared/listeners.ts\"\r\n\r\nimport { Song } from \"./Song.ts\"\r\n\r\nconst { PlayerAPI } = Spicetify.Platform\r\n\r\nexport const PlayerW = new (class {\r\n    private Song?: Song\r\n    isPaused = PlayerAPI._state.isPaused\r\n    scaledProgress = 0\r\n\r\n    songChangedSubject = new Subject<Song | void>()\r\n    isPausedChangedSubject = new Subject<boolean>()\r\n    scaledProgressChangedSubject = new Subject<number>()\r\n\r\n    getSong = () => this.Song\r\n\r\n    constructor() {\r\n        onSongChanged(state => {\r\n            const { item } = state\r\n\r\n            if (item && item.type === \"track\") {\r\n                const uri = item.uri\r\n                const name = item.name\r\n                const artist = item.metadata.artist_name\r\n                const album = item.album.name\r\n                const duration = item.duration.milliseconds\r\n                const isPaused = state.isPaused\r\n                const metadata = item.metadata\r\n                this.Song = new Song({ uri, name, artist, album, duration, isPaused, metadata })\r\n            } else {\r\n                this.Song = undefined\r\n            }\r\n\r\n            this.songChangedSubject.next(this.Song)\r\n        })\r\n\r\n        onPlayedPaused(state => {\r\n            const isPausedNext = state.isPaused ?? true\r\n            if (this.isPaused !== isPausedNext) {\r\n                if (!isPausedNext) {\r\n                    this.startTimestepping()\r\n                }\r\n                this.isPaused = !this.isPaused\r\n                this.isPausedChangedSubject.next(this.isPaused)\r\n            }\r\n        })\r\n    }\r\n\r\n    private triggerTimestampSync() {\r\n        let autoSyncs = 0\r\n\r\n        const timeoutFn = () => 1000 * autoSyncs++\r\n\r\n        asyncScheduler.schedule(\r\n            function (self) {\r\n                if (self!.isPaused) return\r\n\r\n                if (!PlayerAPI._events.emitResumeSync()) {\r\n                    PlayerAPI._contextPlayer.resume({})\r\n                }\r\n\r\n                this.schedule(self, timeoutFn())\r\n            },\r\n            timeoutFn(),\r\n            this,\r\n        )\r\n    }\r\n\r\n    private tryUpdateScaledProgress(scaledProgress: number) {\r\n        if (this.scaledProgress === scaledProgress) return\r\n        this.scaledProgress = scaledProgress\r\n        this.scaledProgressChangedSubject.next(scaledProgress)\r\n    }\r\n\r\n    private startTimestepping() {\r\n        animationFrameScheduler.schedule(\r\n            function (self) {\r\n                if (self!.isPaused) return\r\n                self!.tryUpdateScaledProgress(Spicetify.Player.getProgressPercent())\r\n                this.schedule(self)\r\n            },\r\n            undefined,\r\n            this,\r\n        )\r\n\r\n        this.triggerTimestampSync()\r\n    }\r\n\r\n    setTimestamp = (timestamp: number) => {\r\n        Spicetify.Player.seek(timestamp) // ms or percent\r\n        this.tryUpdateScaledProgress(timestamp)\r\n    }\r\n})()\r\n", "import { REACT_PROPS } from \"../../shared/util.ts\"\r\n\r\nexport const RATINGS_FOLDER_NAME = \"Ratings\"\r\n\r\nexport const getTrackLists = () =>\r\n    Array.from(document.querySelectorAll<HTMLDivElement>(\".main-trackList-trackList.main-trackList-indexable\"))\r\nexport const getTrackListTracks = (trackList: HTMLDivElement) =>\r\n    Array.from(trackList.querySelectorAll<HTMLDivElement>(\".main-trackList-trackListRow\"))\r\n\r\nexport const getTrackListTrackUri = (track: HTMLDivElement) => {\r\n    const rowSectionEnd = track.querySelector<HTMLDivElement>(\".main-trackList-rowSectionEnd\")!\r\n    const reactProps = rowSectionEnd[REACT_PROPS]\r\n    const { props } =\r\n        // artist & local tracks & albums\r\n        reactProps.children.at?.(-1).props.menu ??\r\n        // playlists\r\n        reactProps.children.props.children.at(-1).props.menu\r\n\r\n    return props.uri\r\n}\r\n\r\nexport const getNowPlayingBar = () => document.querySelector<HTMLDivElement>(\"div.main-nowPlayingBar-nowPlayingBar\")!\r\nexport const getCollectionActionBarRow = () => document.querySelector<HTMLDivElement>(`div.main-actionBar-ActionBarRow`)\r\n\r\nexport const playlistButtonSelector = `button[aria-label=\"Add to Liked Songs\"], button[aria-label=\"Add to playlist\"], button[aria-label=\"Remove recommendation\"]`\r\nexport const getPlaylistButton = (parent: HTMLElement) =>\r\n    parent.querySelector<HTMLButtonElement>(playlistButtonSelector)!\r\nexport const getCollectionPlaylistButton = () => {\r\n    const ab = getCollectionActionBarRow()\r\n    return ab?.querySelector<HTMLButtonElement>(\r\n        `button[aria-label=\"Remove from Your Library\"], button[aria-label=\"Save to Your Library\"]`,\r\n    )\r\n}\r\n", "import { getTrackListTracks, getTrackLists } from \"../extensions/star-ratings-2/util.ts\"\r\n\r\nimport { PermanentMutationObserver, REACT_FIBER } from \"./util.ts\"\r\n\r\nconst { Player, URI } = Spicetify\r\nconst { PlayerAPI, History } = Spicetify.Platform\r\n\r\nexport const onHistoryChanged = (\r\n    toMatchTo: string | RegExp | ((location: string) => boolean),\r\n    callback: (uri: string) => void,\r\n    dropDuplicates = true,\r\n) => {\r\n    const createMatchFn = (toMatchTo: string | RegExp | ((input: string) => boolean)) => {\r\n        switch (typeof toMatchTo) {\r\n            case \"string\":\r\n                return (input: string) => input?.startsWith(toMatchTo) ?? false\r\n\r\n            case \"function\":\r\n                return toMatchTo\r\n\r\n            default:\r\n                return (input: string) => toMatchTo.test(input)\r\n        }\r\n    }\r\n\r\n    let lastPathname = \"\"\r\n    const matchFn = createMatchFn(toMatchTo)\r\n\r\n    const historyChanged = ({ pathname }: any) => {\r\n        if (matchFn(pathname)) {\r\n            if (dropDuplicates && lastPathname === pathname) {\r\n            } else callback(URI.fromString(pathname).toURI())\r\n        }\r\n        lastPathname = pathname\r\n    }\r\n\r\n    historyChanged(History.location ?? {})\r\n    return History.listen(historyChanged)\r\n}\r\n\r\nexport const onSongChanged = (callback: (state: Spicetify.Platform.PlayerAPI.PlayerState) => void) => {\r\n    callback(PlayerAPI._state)\r\n    Player.addEventListener(\"songchange\", event => callback(event!.data))\r\n}\r\n\r\nexport const onPlayedPaused = (callback: (state: Spicetify.Platform.PlayerAPI.PlayerState) => void) => {\r\n    callback(PlayerAPI._state)\r\n    Player.addEventListener(\"onplaypause\", event => callback(event!.data))\r\n}\r\n\r\ntype TrackListElement = HTMLDivElement & { presentation?: HTMLDivElement }\r\ntype TrackElement = HTMLDivElement & { props?: Record<string, any> }\r\n\r\ntype TrackListMutationListener = (trackList: Required<TrackListElement>, tracks: Array<Required<TrackElement>>) => void\r\nexport const onTrackListMutationListeners = new Array<TrackListMutationListener>()\r\n\r\nconst _onTrackListMutation = (\r\n    trackList: Required<TrackListElement>,\r\n    record: MutationRecord[],\r\n    observer: MutationObserver,\r\n) => {\r\n    const tracks = getTrackListTracks(trackList.presentation) as Array<Required<TrackElement>>\r\n\r\n    const reactFiber = trackList.presentation[REACT_FIBER].alternate\r\n    const reactTracks = reactFiber.pendingProps.children as any[]\r\n    const tracksProps = reactTracks.map((child: any) => child.props as Record<string, any>)\r\n\r\n    tracks.forEach((track, i) => (track.props = tracksProps[i]))\r\n\r\n    const fullyRenderedTracks = tracks.filter(track => track.props?.uri)\r\n\r\n    onTrackListMutationListeners.map(listener => listener(trackList, fullyRenderedTracks))\r\n}\r\n\r\nnew PermanentMutationObserver(\"main\", () => {\r\n    const trackLists = getTrackLists() as Array<TrackListElement>\r\n    trackLists\r\n        .filter(trackList => !trackList.presentation)\r\n        .forEach(trackList => {\r\n            trackList.presentation = trackList.lastElementChild!.firstElementChild!\r\n                .nextElementSibling! as HTMLDivElement\r\n\r\n            new MutationObserver((record, observer) =>\r\n                _onTrackListMutation(trackList as Required<TrackListElement>, record, observer),\r\n            ).observe(trackList.presentation, { childList: true })\r\n        })\r\n})\r\n", "// @deno-types=\"npm:@types/lodash\"\r\nimport { default as ld } from \"https://esm.sh/lodash\"\r\nexport const _ = ld\r\n\r\n// @deno-types=\"npm:@types/lodash/fp\"\r\nimport { default as ld_fp } from \"https://esm.sh/lodash/fp\"\r\nexport const fp = ld_fp\r\n", "import { _ } from \"./deps.ts\"\r\n\r\nconst { Snackbar } = Spicetify\r\n\r\ntype async = {\r\n    <A, B>(f: (a: A) => Promise<B>): (fa: Promise<A>) => Promise<B>\r\n    <A, B>(f: (a: A) => B): (fa: Promise<A>) => Promise<B>\r\n}\r\nexport const pMchain: async =\r\n    <A, R>(f: (a: A) => R) =>\r\n    async (fa: A) =>\r\n        f(await fa)\r\n\r\nexport const chunkify50 =\r\n    <A, R>(fn: (a: Array<A>) => R) =>\r\n    async (args: Array<A>) => {\r\n        const a = await Promise.all(_.chunk(args, 50).map(fn))\r\n        return a.flat()\r\n    }\r\n\r\nexport const progressify = <F extends (...args: any) => any>(f: F, n: number) => {\r\n    let i = n,\r\n        lastProgress = 0\r\n    return async function (..._: Parameters<F>): Promise<Awaited<ReturnType<F>>> {\r\n        const res = (await f(...arguments)) as Awaited<ReturnType<F>>,\r\n            progress = Math.round((1 - --i / n) * 100)\r\n        if (progress > lastProgress) {\r\n            ;(Snackbar as any).updater.enqueueSetState(Snackbar, () => ({\r\n                snacks: [],\r\n                queue: [],\r\n            }))\r\n            Snackbar.enqueueSnackbar(`Loading: ${progress}%`, {\r\n                variant: \"default\",\r\n                autoHideDuration: 200,\r\n                transitionDuration: {\r\n                    enter: 0,\r\n                    exit: 0,\r\n                },\r\n            })\r\n        }\r\n        lastProgress = progress\r\n        return res\r\n    }\r\n}\r\n\r\nexport type OneUplet<E> = [E]\r\nexport type TwoUplet<E> = [E, E]\r\nexport type Triplet<E> = [E, E, E]\r\nexport type Quadruplet<E> = [E, E, E, E]\r\nexport const zip_n_uplets =\r\n    <R>(n: number) =>\r\n    <A>(a: A[]) =>\r\n        a.map((_, i, a) => a.slice(i, i + n)).slice(0, 1 - n) as R[]\r\n", "import { _ } from \"../../../shared/deps.ts\"\r\nimport { OneUplet, TwoUplet, zip_n_uplets } from \"../../../shared/fp.ts\"\r\n\r\nconst headers = {\r\n    authority: \"apic-desktop.musixmatch.com\",\r\n    cookie: \"x-mxm-token-guid=\",\r\n}\r\n\r\nconst CONFIG = {\r\n    musixmatchToken: undefined as unknown as string,\r\n}\r\n\r\n// if (!CONFIG.musixmatchToken) {\r\nconst url = new URL(\"https://apic-desktop.musixmatch.com/ws/1.1/token.get\")\r\nurl.searchParams.append(\"app_id\", \"web-desktop-app-v1.0\")\r\nSpicetify.CosmosAsync.get(url.toString(), undefined, _.omit(headers, \"cookie\")).then(res => {\r\n    if (res.message.header.status_code === 200 && res.message.body.user_token) {\r\n        CONFIG.musixmatchToken = res.message.body.user_token\r\n    }\r\n})\r\n// }\r\n\r\nexport type Lyrics = {\r\n    notSynced?: NotSynced\r\n    lineSynced?: LineSynced\r\n    wordSynced?: WordSynced\r\n}\r\n\r\nexport type SyncedContent = {\r\n    tsp: number\r\n    tep: number\r\n    content: Array<SyncedContent> | string\r\n}\r\n\r\ntype SW<A> = {\r\n    tsp: 0\r\n    tep: 1\r\n    content: A\r\n}\r\n\r\nexport type S<A> = {\r\n    tsp: number\r\n    tep: number\r\n    content: A\r\n}\r\n\r\nexport enum LyricsType {\r\n    NOT_SYNCED,\r\n    LINE_SYNCED,\r\n    WORD_SYNCED,\r\n}\r\n\r\nexport const Filler = \"\u266A\"\r\n\r\nexport type NotSynced = SW<string> & { __type: LyricsType.NOT_SYNCED }\r\nexport type LineSynced = SW<Array<S<OneUplet<S<string>>>>> & { __type: LyricsType.LINE_SYNCED }\r\nexport type WordSynced = SW<Array<S<Array<S<string>>>>> & {\r\n    __type: LyricsType.WORD_SYNCED\r\n}\r\n\r\nexport const flattenLyrics = (lyrics: SyncedContent): Array<S<string>> =>\r\n    Array.isArray(lyrics.content) ? lyrics.content.flatMap(flattenLyrics) : [lyrics as S<string>]\r\n\r\nexport const findLyrics = async (info: {\r\n    uri: string\r\n    title: string\r\n    artist: string\r\n    album: string\r\n    durationS: number\r\n}) => {\r\n    const { lyrics, subtitles, track } = await fetchMxmMacroSubtitlesGet(\r\n        info.uri,\r\n        info.title,\r\n        info.artist,\r\n        info.album,\r\n        info.durationS,\r\n    )\r\n\r\n    const l: Lyrics = {}\r\n    if (!lyrics) return l\r\n\r\n    const wrapInContainerSyncedType = <T extends LyricsType, P>(__type: T, content: P) => ({\r\n        __type,\r\n        tsp: 0 as const,\r\n        tep: 1 as const,\r\n        content,\r\n    })\r\n\r\n    if (track.has_richsync) {\r\n        const richSync = await fetchMxmTrackRichSyncGet(track.commontrack_id, track.track_length)\r\n        const wordSynced = richSync.map(rsLine => {\r\n            const tsp = rsLine.ts / track.track_length\r\n            const tep = rsLine.te / track.track_length\r\n\r\n            const content = rsLine.l.map((word, index, words) => {\r\n                return {\r\n                    tsp: tsp + word.o / track.track_length,\r\n                    tep: tsp + words[index + 1]?.o / track.track_length || tep,\r\n                    content: word.c,\r\n                }\r\n            })\r\n\r\n            return { tsp, tep, content }\r\n        })\r\n\r\n        const wordSyncedFilled = _(\r\n            zip_n_uplets<TwoUplet<S<Array<S<string>>>>>(2)([{ tep: 0 }, ...wordSynced, { tsp: 1 }]),\r\n        )\r\n            .map(([prev, next]) => {\r\n                const tsp = prev.tep\r\n                const tep = next.tsp\r\n                const duration = (tep - tsp) * track.track_length * 1000\r\n\r\n                return (\r\n                    duration > 500 && {\r\n                        tsp,\r\n                        tep,\r\n                        content: [\r\n                            {\r\n                                tsp,\r\n                                tep,\r\n                                duration,\r\n                                content: Filler,\r\n                            },\r\n                        ],\r\n                    }\r\n                )\r\n            })\r\n            .zip(wordSynced)\r\n            .flatten()\r\n            .compact()\r\n            .value()\r\n\r\n        l.wordSynced = wrapInContainerSyncedType(LyricsType.WORD_SYNCED, wordSyncedFilled)\r\n    }\r\n\r\n    if (track.has_subtitles) {\r\n        const subtitle = JSON.parse(subtitles[0].subtitle_body) as Array<{\r\n            text: string\r\n            time: { total: number; minutes: number; seconds: number; hundredths: number }\r\n        }>\r\n        const lineSynced = subtitle.map((sLine, i, subtitle) => {\r\n            const tsp = sLine.time.total / track.track_length\r\n            const tep = subtitle[i + 1]?.time.total / track.track_length || 1\r\n            return { tsp, tep, content: [{ tsp, tep, content: sLine.text }] as OneUplet<S<string>> }\r\n        })\r\n        l.lineSynced = wrapInContainerSyncedType(LyricsType.LINE_SYNCED, lineSynced)\r\n    }\r\n\r\n    if (track.has_lyrics || track.has_lyrics_crowd) {\r\n        //l.notSynced = wrapInContainerSyncedType(LyricsType.NOT_SYNCED, lyrics.lyrics_body)\r\n    }\r\n\r\n    return l\r\n}\r\n\r\nconst getTranslation = async (trackId: string, lang = \"en\") => {\r\n    const res = await fetchMxmCrowdTrackTranslationsGet(trackId, lang)\r\n    return res.map(translation => ({\r\n        translation: translation.description,\r\n        matchedLine: translation.matched_line,\r\n    }))\r\n}\r\n\r\ntype MusicGenreList = Array<{\r\n    music_genre: {\r\n        music_genre_id: number\r\n        music_genre_parent_id: number\r\n        music_genre_name: string\r\n        music_genre_name_extended: string\r\n        music_genre_vanity: string\r\n    }\r\n}>\r\ntype MxMLyrics = {\r\n    lyrics_id: number\r\n    can_edit: 0 | 1\r\n    locked: 0 | 1\r\n    published_status: 0 | 1\r\n    action_requested: string\r\n    verified: 0 | 1\r\n    restricted: 0 | 1\r\n    instrumental: 0 | 1\r\n    explicit: 0 | 1\r\n    lyrics_body: string\r\n    lyrics_language: string\r\n    lyrics_language_description: string\r\n    script_tracking_url: string\r\n    pixel_tracking_url: string\r\n    html_tracking_url: string\r\n    lyrics_copyright: string\r\n    writer_list: string[]\r\n    publisher_list: string[]\r\n    backlink_url: string\r\n    updated_time: string\r\n}\r\ntype MxMSnippet = {\r\n    snippet_id: number\r\n    snippet_language: string\r\n    restricted: 0 | 1\r\n    instrumental: 0 | 1\r\n    snippet_body: string\r\n    script_tracking_url: string\r\n    pixel_tracking_url: string\r\n    html_tracking_url: string\r\n    updated_time: string\r\n}\r\ntype MxMSubtitle = {\r\n    subtitle_id: number\r\n    restricted: 0 | 1\r\n    published_status: number\r\n    subtitle_body: string\r\n    subtitle_avg_count: number\r\n    lyrics_copyright: string\r\n    subtitle_length: number\r\n    subtitle_language: string\r\n    subtitle_language_description: string\r\n    script_tracking_url: string\r\n    pixel_tracking_url: string\r\n    html_tracking_url: string\r\n    writer_list: string[]\r\n    publisher_list: string[]\r\n    updated_time: string\r\n}\r\ntype MxMTrack = {\r\n    track_id: number\r\n    track_mbid: string\r\n    track_isrc: string\r\n    commontrack_isrcs: Array<string[]>\r\n    track_spotify_id: string\r\n    commontrack_spotify_ids: string[]\r\n    commontrack_itunes_ids: number[]\r\n    track_soundcloud_id: number\r\n    track_xboxmusic_id: string\r\n    track_name: string\r\n    track_name_translation_list: any[]\r\n    track_rating: number\r\n    track_length: number\r\n    commontrack_id: number\r\n    instrumental: 0 | 1\r\n    explicit: 0 | 1\r\n    has_lyrics: 0 | 1\r\n    has_lyrics_crowd: 0 | 1\r\n    has_subtitles: 0 | 1\r\n    has_richsync: 0 | 1\r\n    has_track_structure: 0 | 1\r\n    num_favorite: number\r\n    lyrics_id: number\r\n    subtitle_id: number\r\n    album_id: number\r\n    album_name: string\r\n    album_vanity_id: string\r\n    artist_id: number\r\n    artist_mbid: string\r\n    artist_name: string\r\n    album_coverart_100x100: string\r\n    album_coverart_350x350: string\r\n    album_coverart_500x500: string\r\n    album_coverart_800x800: string\r\n    track_share_url: string\r\n    track_edit_url: string\r\n    commontrack_vanity_id: string\r\n    restricted: 0 | 1\r\n    first_release_date: string\r\n    updated_time: string\r\n    primary_genres: {\r\n        music_genre_list: MusicGenreList\r\n    }\r\n    secondary_genres: {\r\n        music_genre_list: MusicGenreList\r\n    }\r\n}\r\ntype MxMMacroSubtitles = {\r\n    lyrics: MxMLyrics\r\n    snippet: MxMSnippet\r\n    subtitles: Array<MxMSubtitle>\r\n    track: MxMTrack\r\n}\r\ntype None<A> = { [k in keyof A]: undefined }\r\nconst fetchMxmMacroSubtitlesGet = async (\r\n    uri: string,\r\n    title: string,\r\n    artist: string,\r\n    album: string,\r\n    durationS: number,\r\n    renewsLeft = 1,\r\n): Promise<MxMMacroSubtitles | None<MxMMacroSubtitles>> => {\r\n    const url = new URL(\"https://apic-desktop.musixmatch.com/ws/1.1/macro.subtitles.get\")\r\n    url.searchParams.append(\"format\", \"json\")\r\n    url.searchParams.append(\"namespace\", \"lyrics_richsynched\")\r\n    url.searchParams.append(\"subtitle_format\", \"mxm\")\r\n    url.searchParams.append(\"app_id\", \"web-desktop-app-v1.0\")\r\n    url.searchParams.append(\"q_album\", album)\r\n    url.searchParams.append(\"q_artist\", artist)\r\n    url.searchParams.append(\"q_artists\", artist)\r\n    url.searchParams.append(\"q_track\", title)\r\n    url.searchParams.append(\"track_spotify_id\", uri)\r\n    url.searchParams.append(\"q_duration\", encodeURIComponent(durationS))\r\n    url.searchParams.append(\"f_subtitle_length\", encodeURIComponent(Math.floor(durationS)))\r\n    url.searchParams.append(\"usertoken\", CONFIG.musixmatchToken)\r\n\r\n    const res = await Spicetify.CosmosAsync.get(url.toString(), undefined, headers)\r\n    if (res.message.header.hint === \"renew\") {\r\n        return renewsLeft > 0\r\n            ? fetchMxmMacroSubtitlesGet(uri, title, artist, album, durationS, 0)\r\n            : Promise.resolve({} as None<MxMMacroSubtitles>)\r\n    }\r\n    const {\r\n        \"track.lyrics.get\": trackLyricsGet,\r\n        \"track.snippet.get\": trackSnippetGet,\r\n        \"track.subtitles.get\": trackSubtitlesGet,\r\n        \"userblob.get\": userblobGet,\r\n        \"matcher.track.get\": matcherTrackGet,\r\n    } = res.message.body.macro_calls\r\n    return {\r\n        lyrics: trackLyricsGet.message.body.lyrics as MxMLyrics,\r\n        snippet: trackSnippetGet.message.body.snippet as MxMSnippet,\r\n        subtitles: trackSubtitlesGet.message.body.subtitle_list.map(\r\n            (subtitle_element: any) => subtitle_element.subtitle,\r\n        ) as Array<MxMSubtitle>,\r\n        track: matcherTrackGet.message.body.track as MxMTrack,\r\n    }\r\n}\r\n\r\nconst fetchMxmTrackRichSyncGet = async (commonTrackId: number, trackLength: number) => {\r\n    const url = new URL(\"https://apic-desktop.musixmatch.com/ws/1.1/track.richsync.get\")\r\n    url.searchParams.append(\"format\", \"json\")\r\n    url.searchParams.append(\"subtitle_format\", \"mxm\")\r\n    url.searchParams.append(\"app_id\", \"web-desktop-app-v1.0\")\r\n    url.searchParams.append(\"f_subtitle_length\", encodeURIComponent(trackLength))\r\n    url.searchParams.append(\"q_duration\", encodeURIComponent(trackLength))\r\n    url.searchParams.append(\"commontrack_id\", encodeURIComponent(commonTrackId))\r\n    url.searchParams.append(\"usertoken\", CONFIG.musixmatchToken)\r\n\r\n    const res = await Spicetify.CosmosAsync.get(url.toString(), undefined, headers)\r\n\r\n    return JSON.parse(res.message.body.richsync.richsync_body) as Array<{\r\n        ts: number\r\n        te: number\r\n        l: Array<{\r\n            c: string\r\n            o: number\r\n        }>\r\n        x: string\r\n    }>\r\n}\r\n\r\nconst fetchMxmCrowdTrackTranslationsGet = async (trackId: string, lang = \"en\") => {\r\n    const url = new URL(\"https://apic-desktop.musixmatch.com/ws/1.1/crowd.track.translations.get\")\r\n    url.searchParams.append(\"translation_fields_set\", \"minimal\")\r\n    url.searchParams.append(\"selected_language\", lang)\r\n    url.searchParams.append(\"comment_format\", \"text\")\r\n    url.searchParams.append(\"format\", \"json\")\r\n    url.searchParams.append(\"app_id\", \"web-desktop-app-v1.0\")\r\n    url.searchParams.append(\"track_id\", trackId)\r\n    url.searchParams.append(\"usertoken\", CONFIG.musixmatchToken)\r\n\r\n    const res = await Spicetify.CosmosAsync.get(url.toString(), undefined, headers)\r\n\r\n    return res.message.body.translations_list.map(\r\n        (translation_element: any) => translation_element.translation,\r\n    ) as Array<any>\r\n}\r\n", "import { Track } from \"https://esm.sh/v135/@fostertheweb/spotify-web-api-ts-sdk@1.2.1/dist/mjs/types.js\"\r\nimport { Lyrics, findLyrics } from \"./LyricsProvider.ts\"\r\n\r\nexport type SpotifyTrackInformation = Track\r\n\r\nexport class Song {\r\n    readonly uri: string\r\n    readonly name: string\r\n    readonly artist: string\r\n    readonly album: string\r\n    readonly duration: number\r\n    readonly isLocal: boolean\r\n    readonly lyrics: Promise<Lyrics>\r\n\r\n    isPaused: boolean\r\n    constructor(opts: {\r\n        uri: string\r\n        name: string\r\n        artist: string\r\n        album: string\r\n        duration: number\r\n        isPaused: boolean\r\n        metadata: Spicetify.Platform.PlayerAPI.TrackMetadata\r\n    }) {\r\n        this.uri = opts.uri\r\n        this.name = opts.name\r\n        this.artist = opts.artist\r\n        this.album = opts.album\r\n        this.duration = opts.duration\r\n        this.isLocal = opts.metadata.is_local === \"true\"\r\n        this.isPaused = opts.isPaused\r\n\r\n        this.lyrics = findLyrics({\r\n            uri: this.uri,\r\n            title: this.name,\r\n            artist: this.artist,\r\n            album: this.album,\r\n            durationS: this.duration / 1000,\r\n        })\r\n    }\r\n}\r\n", "import { provide } from \"https://esm.sh/@lit/context\"\r\nimport { Task } from \"https://esm.sh/@lit/task\"\r\nimport { LitElement, css, html } from \"https://esm.sh/lit\"\r\nimport { customElement, property, query, state } from \"https://esm.sh/lit/decorators.js\"\r\nimport { map } from \"https://esm.sh/lit/directives/map.js\"\r\nimport { when } from \"https://esm.sh/lit/directives/when.js\"\r\nimport { PropertyValueMap } from \"https://esm.sh/v133/@lit/reactive-element@2.0.1/development/reactive-element.js\"\r\n// import { hermite } from \"https://esm.sh/@thi.ng/ramp\"\r\n\r\nimport { _ } from \"../../../shared/deps.ts\"\r\nimport { remapScalar, vectorLerp } from \"../../../shared/math.ts\"\r\nimport { MonotoneNormalSpline } from \"../splines/monotoneNormalSpline.ts\"\r\nimport { LyricsType } from \"../utils/LyricsProvider.ts\"\r\nimport { PlayerW } from \"../utils/PlayerW.ts\"\r\nimport { Song } from \"../utils/Song.ts\"\r\nimport { loadedLyricsTypeCtx, scrollTimeoutCtx, spotifyContainerCtx } from \"./contexts.ts\"\r\nimport { AnimatedMixin, ScrolledMixin, SyncedContainerMixin, SyncedMixin } from \"./mixins.ts\"\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        [\"lyrics-wrapper\"]: LyricsWrapper\r\n        [\"lyrics-container\"]: LyricsContainer\r\n        [\"timeline-provider\"]: TimelineProvider\r\n        [\"detail-timeline-provider\"]: DetailTimelineProvider\r\n        [\"animated-text\"]: AnimatedText\r\n    }\r\n}\r\n\r\nconst opacityInterpolator = new MonotoneNormalSpline([\r\n    [0, 0],\r\n    [0.1, 0.1],\r\n    [0.2, 0.3],\r\n    [0.5, 0.55],\r\n    [0.7, 0.8],\r\n    [1, 1],\r\n    [1.2, 0.8],\r\n    [1.5, 0.7],\r\n])\r\nconst glowRadiusInterpolator = new MonotoneNormalSpline([\r\n    [0, 100],\r\n    [0.2, 7],\r\n    [0.4, 5],\r\n    [0.6, 3],\r\n    [0.7, 2],\r\n    [0.9, 1],\r\n    [1, 3],\r\n    [1.1, 7],\r\n    [1.25, 100],\r\n])\r\nconst glowAlphaInterpolator = new MonotoneNormalSpline([\r\n    [0, 0],\r\n    [0.1, 0.2],\r\n    [0.2, 0.35],\r\n    [0.5, 0.65],\r\n    [0.7, 0.9],\r\n    [1, 1],\r\n    [1.2, 0.6],\r\n    [1.5, 0],\r\n])\r\nconst scaleInterpolator = new MonotoneNormalSpline([\r\n    [-0.5, 1],\r\n    [-0.2, 0.99],\r\n    [-0.1, 0.98],\r\n    [0, 0.94],\r\n    [0.1, 0.99],\r\n    [0.2, 1],\r\n    [0.5, 1.02],\r\n    [0.7, 1.06],\r\n    [0.9, 1.04],\r\n    [1, 1.02],\r\n    [1.2, 1.01],\r\n    [1.5, 1],\r\n])\r\n\r\n@customElement(AnimatedText.NAME)\r\nexport class AnimatedText extends AnimatedMixin(SyncedMixin(LitElement)) {\r\n    static readonly NAME = \"animated-text\" as string\r\n\r\n    @property()\r\n    split!: boolean\r\n\r\n    static styles = css`\r\n        :host {\r\n            cursor: pointer;\r\n            background-color: black;\r\n            -webkit-text-fill-color: transparent;\r\n            -webkit-background-clip: text;\r\n            text-shadow: 0 0 var(--glow-radius, 0) rgba(255, 255, 255, var(--glow-alpha, 0));\r\n            transform: translateY(var(--y-offset, 0));\r\n            background-image: linear-gradient(\r\n                var(--gradient-angle),\r\n                rgba(255, 255, 255, var(--gradient-alpha)) var(--gradient-start),\r\n                rgba(255, 255, 255, 0) var(--gradient-end)\r\n            );\r\n        }\r\n    `\r\n\r\n    animateContent() {\r\n        const nextGradientAlpha = opacityInterpolator.at(this.csp).toFixed(5)\r\n        const nextGlowRadius = `${glowRadiusInterpolator.at(this.csp)}px`\r\n        const nextGlowAlpha = glowAlphaInterpolator.at(this.csp)\r\n        const nextYOffset = `-${this.offsetHeight * 0.1 * this.csp}px`\r\n        const nextGradientStart = `${this.csp * 95}%`\r\n        const nextGradientEnd = `${this.csp * 105}%`\r\n        const nextScale = scaleInterpolator.at(this.csp).toFixed(5)\r\n\r\n        this.style.setProperty(\"--gradient-alpha\", nextGradientAlpha)\r\n        this.style.setProperty(\"--glow-radius\", nextGlowRadius)\r\n        this.style.setProperty(\"--glow-alpha\", nextGlowAlpha)\r\n        this.style.setProperty(\"--gradient-start\", nextGradientStart)\r\n        this.style.setProperty(\"--gradient-end\", nextGradientEnd)\r\n        this.style.setProperty(\"--y-offset\", nextYOffset)\r\n        this.style.scale = nextScale\r\n    }\r\n\r\n    onClick() {\r\n        PlayerW.setTimestamp(this.tsp)\r\n    }\r\n\r\n    render() {\r\n        return html`<span role=\"button\" @click=${this.onClick}>${this.content}</span>`\r\n    }\r\n}\r\n\r\ninterface Spline<A> {\r\n    at(t: number): A\r\n}\r\n\r\n@customElement(DetailTimelineProvider.NAME)\r\nexport class DetailTimelineProvider extends SyncedContainerMixin(SyncedMixin(LitElement)) {\r\n    static readonly NAME = \"detail-timeline-provider\"\r\n\r\n    static styles = css`\r\n        :host {\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n        }\r\n    `\r\n\r\n    intermediatePositions?: number[]\r\n    lastPosition?: number\r\n\r\n    computeChildProgress(rp: number, child: number) {\r\n        if (!this.intermediatePositions) {\r\n            const childs = Array.from(this.childs)\r\n            const partialWidths = childs.reduce(\r\n                (partialWidths, child) => (\r\n                    partialWidths.push(partialWidths.at(-1)! + child.offsetWidth), partialWidths\r\n                ),\r\n                [0],\r\n            )\r\n            this.lastPosition = partialWidths.at(-1)!\r\n            this.intermediatePositions = partialWidths.map(pw => pw / this.lastPosition!)\r\n        }\r\n\r\n        return remapScalar(this.intermediatePositions![child], this.intermediatePositions![child + 1], rp)\r\n    }\r\n}\r\n\r\n@customElement(TimelineProvider.NAME)\r\nexport class TimelineProvider extends ScrolledMixin(SyncedContainerMixin(SyncedMixin(LitElement))) {\r\n    static readonly NAME = \"timeline-provider\"\r\n\r\n    static styles = css`\r\n        :host {\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n        }\r\n    `\r\n\r\n    intermediatePositions?: number[]\r\n    lastPosition?: number\r\n    timelineSpline?: Spline<number>\r\n\r\n    computeIntermediatePosition(rsp: number) {\r\n        if (!this.timelineSpline) {\r\n            const childs = Array.from(this.childs)\r\n            const partialWidths = childs.reduce(\r\n                (partialWidths, child) => (\r\n                    partialWidths.push(partialWidths.at(-1)! + child.offsetWidth), partialWidths\r\n                ),\r\n                [0],\r\n            )\r\n            this.lastPosition = partialWidths.at(-1)!\r\n            this.intermediatePositions = partialWidths.map(pw => pw / this.lastPosition!)\r\n\r\n            const pairs = _.zip(\r\n                childs.map(child => child.tsp).concat(childs.at(-1)!.tep),\r\n                this.intermediatePositions,\r\n            ) as Array<[number, number]>\r\n            const first = vectorLerp(pairs[0], pairs[1], -1)\r\n            const last = vectorLerp(pairs.at(-2)!, pairs.at(-1)!, 2)\r\n            this.timelineSpline = new MonotoneNormalSpline([first, ...pairs, last])\r\n        }\r\n\r\n        return this.timelineSpline.at(rsp)\r\n    }\r\n\r\n    computeChildProgress(rp: number, child: number) {\r\n        const sip = this.computeIntermediatePosition(rp)\r\n        return remapScalar(this.intermediatePositions![child], this.intermediatePositions![child + 1], sip)\r\n    }\r\n}\r\n\r\n@customElement(LyricsContainer.NAME)\r\nexport class LyricsContainer extends SyncedContainerMixin(SyncedMixin(LitElement)) {\r\n    static readonly NAME = \"lyrics-container\"\r\n\r\n    render() {\r\n        return html`<slot></slot>`\r\n    }\r\n}\r\n\r\n@customElement(LyricsWrapper.NAME)\r\nexport class LyricsWrapper extends LitElement {\r\n    static readonly NAME = \"lyrics-wrapper\"\r\n    static readonly SCROLL_TIMEOUT_MS = 500\r\n\r\n    constructor(query: string) {\r\n        super()\r\n        this.spotifyContainer = document.querySelector<HTMLElement>(query) ?? undefined\r\n    }\r\n\r\n    static styles = css`\r\n        :host > animated-content-container {\r\n            display: unset;\r\n        }\r\n    `\r\n\r\n    @property({ attribute: false })\r\n    song: Song | null = null\r\n\r\n    @provide({ context: loadedLyricsTypeCtx })\r\n    @state()\r\n    loadedLyricsType?: LyricsType\r\n\r\n    updateSong = (song: Song | null) => {\r\n        this.song = song\r\n        this.loadedLyricsType = undefined\r\n    }\r\n\r\n    private lyricsTask = new Task(this, {\r\n        task: async ([song]) => {\r\n            const availableLyrics = await song?.lyrics\r\n            const lyrics = Object.values(availableLyrics!)[0]\r\n            this.loadedLyricsType = lyrics?.__type\r\n            return lyrics\r\n        },\r\n        args: () => [this.song],\r\n    })\r\n\r\n    @query(LyricsContainer.NAME)\r\n    container?: LyricsContainer\r\n    public updateProgress(progress: number) {\r\n        if (this.loadedLyricsType === undefined || this.loadedLyricsType === LyricsType.NOT_SYNCED) return\r\n        this.container?.updateProgress(progress, 0)\r\n    }\r\n\r\n    @provide({ context: scrollTimeoutCtx })\r\n    scrollTimeout = 0\r\n\r\n    @provide({ context: spotifyContainerCtx })\r\n    spotifyContainer?: HTMLElement\r\n\r\n    firstUpdated(changedProperties: PropertyValueMap<this>) {\r\n        this.spotifyContainer?.addEventListener(\"scroll\", e => {\r\n            this.scrollTimeout = Date.now() + LyricsWrapper.SCROLL_TIMEOUT_MS\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (!this.song) {\r\n            return html`<div class=\"info\">No Song Loaded</div>`\r\n        }\r\n\r\n        return this.lyricsTask.render({\r\n            pending: () => {\r\n                return html`<div class=\"loading\">Fetching Lyrics...</div>`\r\n            },\r\n            complete: lyrics => {\r\n                if (!lyrics || lyrics.__type === LyricsType.NOT_SYNCED) {\r\n                    return html`<div class=\"error\">No Lyrics Found</div>`\r\n                }\r\n\r\n                const isWordSync = this.loadedLyricsType === LyricsType.WORD_SYNCED\r\n\r\n                return html`\r\n                    <style>\r\n                        * {\r\n                            --gradient-angle: ${this.loadedLyricsType === LyricsType.WORD_SYNCED ? 90 : 180}deg;\r\n                        }\r\n                    </style>\r\n                    <lyrics-container>\r\n                        ${when(\r\n                            isWordSync,\r\n                            () =>\r\n                                html`${map(\r\n                                    lyrics.content,\r\n                                    l =>\r\n                                        html`<timeline-provider tsp=${l.tsp} tep=${l.tep}\r\n                                            >${map(\r\n                                                l.content,\r\n                                                w =>\r\n                                                    html`<detail-timeline-provider tsp=${w.tsp} tep=${w.tep}\r\n                                                        >${map(\r\n                                                            w.content.split(\"\"),\r\n                                                            c =>\r\n                                                                html`<animated-text\r\n                                                                    tsp=${w.tsp}\r\n                                                                    content=${c === \" \" ? \"\u00A0\" : c}\r\n                                                                ></animated-text>`,\r\n                                                        )}</detail-timeline-provider\r\n                                                    >`,\r\n                                            )}</timeline-provider\r\n                                        >`,\r\n                                )}`,\r\n                            () =>\r\n                                html`${map(\r\n                                    lyrics.content,\r\n                                    l =>\r\n                                        html`<timeline-provider tsp=${l.tsp} tep=${l.tep}\r\n                                            >${map(\r\n                                                l.content,\r\n                                                wl =>\r\n                                                    html`<animated-text\r\n                                                        tsp=${wl.tsp}\r\n                                                        tep=${wl.tep}\r\n                                                        content=${wl.content}\r\n                                                    ></animated-text>`,\r\n                                            )}</timeline-provider\r\n                                        >`,\r\n                                )}`,\r\n                        )}</lyrics-container\r\n                    >,\r\n                `\r\n            },\r\n            error: e => {\r\n                console.error(e)\r\n                return html`<div class=\"error\">Error</div>`\r\n            },\r\n        })\r\n    }\r\n}\r\n", "import { _, fp } from \"./deps.ts\"\r\n\r\nexport type vector = number[]\r\nexport type matrix = vector[]\r\n\r\nexport const oppositeVector = (u: vector) => scalarMultVector(-1, u)\r\nexport const vectorAddVector = (u: vector, v: vector) => _.zip(u, v).map(([uxi, vxi]) => uxi! + vxi!)\r\nexport const vectorMultVector = (u: vector, v: vector) => _.zip(u, v).map(([uix, vix]) => uix! * vix!)\r\nexport const vectorDotVector = (u: vector, v: vector) => fp.sum(vectorMultVector(u, v))\r\nexport const vectorSubVector = (u: vector, v: vector) => vectorAddVector(u, oppositeVector(v))\r\nexport const scalarMultVector = (x: number, u: vector) => u.map(uxi => x * uxi)\r\nexport const vectorDivScalar = (u: vector, x: number) => scalarMultVector(1 / x, u)\r\nexport const scalarAddVector = (x: number, u: vector) => u.map(uxi => x + uxi)\r\nexport const vectorDist = (u: vector, v: vector) => Math.hypot(...vectorSubVector(v, u))\r\nexport const scalarLerp = (s: number, e: number, t: number) => s + (e - s) * t\r\nexport const vectorLerp = (u: vector, v: vector, t: number) =>\r\n    _.zip(u, v).map(([uxi, vxi]) => scalarLerp(uxi!, vxi!, t))\r\nexport const remapScalar = (s: number, e: number, x: number) => (x - s) / (e - s)\r\n\r\nexport const vectorCartesianVector = (u: vector, v: vector) => u.map(ux => v.map(vx => [ux, vx] as const))\r\n\r\nexport function matrixMultMatrix(m1: matrix, m2: matrix) {\r\n    if (!m1.length !== !m2[0].length) {\r\n        throw \"Arguments should be compatible\"\r\n    }\r\n\r\n    const atColumn = (m: matrix, column: number) => m.map(row => row[column])\r\n\r\n    const ijs = vectorCartesianVector(_.range(m1.length), _.range(m2[0].length))\r\n    return ijs.map(fp.map(([i, j]) => vectorDotVector(m1[i], atColumn(m2, j))))\r\n}\r\n", "import { MonotoneCubicHermitInterpolation } from \"https://esm.sh/v135/@adaskothebeast/splines@4.0.0/es2022/splines.mjs\"\r\n\r\nimport { _ } from \"../../../shared/deps.ts\"\r\n\r\nexport class MonotoneNormalSpline extends MonotoneCubicHermitInterpolation {\r\n    at(t: number) {\r\n        const t0 = this.xs[0],\r\n            tf = this.xs.at(-1)!\r\n        const ct = _.clamp(t, t0, tf)\r\n        return super.interpolate(ct)\r\n    }\r\n}\r\n", "import { createContext } from \"https://esm.sh/@lit/context\"\r\n\r\nimport { LyricsType } from \"../utils/LyricsProvider.ts\"\r\n\r\nexport const scrollTimeoutCtx = createContext<number>(\"scrollTimeout\")\r\nexport const spotifyContainerCtx = createContext<HTMLElement | undefined>(\"spotifyContainer\")\r\nexport const loadedLyricsTypeCtx = createContext<LyricsType | undefined>(\"loadedLyricsType\")\r\n", "import { consume } from \"https://esm.sh/@lit/context\"\r\nimport { LitElement, html } from \"https://esm.sh/lit\"\r\nimport { property, queryAssignedElements } from \"https://esm.sh/lit/decorators.js\"\r\n\r\nimport { _ } from \"../../../shared/deps.ts\"\r\n\r\nimport { scrollTimeoutCtx, spotifyContainerCtx } from \"./contexts.ts\"\r\n\r\ntype Constructor<T = {}> = new (...args: any[]) => T\r\n\r\nexport declare class SyncedMixinI {\r\n    content: string\r\n    tsp: number\r\n    tep: number\r\n\r\n    updateProgress(scaledProgress: number, depthToActiveAncestor: number): void\r\n}\r\n\r\nexport const SyncedMixin = <T extends Constructor<LitElement>>(superClass: T) => {\r\n    class mixedClass extends superClass {\r\n        @property()\r\n        content = \"\"\r\n        @property({ type: Number })\r\n        tsp = 0 // time start percent\r\n        @property({ type: Number })\r\n        tep = 1 // time end percent\r\n\r\n        updateProgress(scaledProgress: number, depthToActiveAncestor: number) {}\r\n    }\r\n\r\n    return mixedClass as Constructor<SyncedMixinI> & T\r\n}\r\n\r\nexport const AnimatedMixin = <T extends Constructor<LitElement & SyncedMixinI>>(superClass: T) => {\r\n    class mixedClass extends superClass {\r\n        csp!: number\r\n        dtaa!: number\r\n        updateProgress(scaledProgress: number, depthToActiveAncestor: number) {\r\n            super.updateProgress(scaledProgress, depthToActiveAncestor)\r\n            const clampedScaledProgress = _.clamp(scaledProgress, -0.5, 1.5)\r\n            if (this.shouldAnimate(clampedScaledProgress, depthToActiveAncestor)) {\r\n                this.csp = clampedScaledProgress\r\n                this.dtaa = depthToActiveAncestor\r\n                this.animateContent()\r\n            }\r\n        }\r\n        shouldAnimate(clampedScaledProgress: number, depthToActiveAncestor: number) {\r\n            return this.csp !== clampedScaledProgress || this.dtaa !== depthToActiveAncestor\r\n        }\r\n        animateContent() {}\r\n    }\r\n\r\n    return mixedClass\r\n}\r\n\r\nexport const ScrolledMixin = <T extends Constructor<LitElement & SyncedMixinI>>(superClass: T) => {\r\n    class mixedClass extends superClass {\r\n        @consume({ context: scrollTimeoutCtx, subscribe: true })\r\n        scrollTimeout = 0\r\n        @consume({ context: spotifyContainerCtx })\r\n        spotifyContainer?: HTMLElement\r\n\r\n        dtaa!: number\r\n\r\n        updateProgress(progress: number, depthToActiveAncestor: number) {\r\n            super.updateProgress(progress, depthToActiveAncestor)\r\n            const isActive = depthToActiveAncestor === 0\r\n            const wasActive = this.dtaa === 0\r\n            this.dtaa = depthToActiveAncestor\r\n\r\n            if (!isActive || wasActive) return\r\n            if (Date.now() < this.scrollTimeout || !this.spotifyContainer) return\r\n\r\n            const lineHeight = parseInt(document.defaultView!.getComputedStyle(this).lineHeight)\r\n            const scrollTop = this.offsetTop - this.spotifyContainer.offsetTop - lineHeight * 2\r\n            const verticalLinesToActive =\r\n                Math.abs(scrollTop - this.spotifyContainer.scrollTop) / this.spotifyContainer.offsetHeight\r\n\r\n            if (!_.inRange(verticalLinesToActive, 0.1, 0.75)) return\r\n\r\n            this.spotifyContainer.scrollTo({\r\n                top: scrollTop,\r\n                behavior: document.visibilityState === \"visible\" ? \"smooth\" : \"auto\",\r\n            })\r\n        }\r\n    }\r\n\r\n    return mixedClass\r\n}\r\n\r\nexport const SyncedContainerMixin = <T extends Constructor<LitElement & SyncedMixinI>>(superClass: T) => {\r\n    class mixedClass extends superClass {\r\n        @queryAssignedElements()\r\n        childs!: NodeListOf<LitElement & SyncedMixinI>\r\n\r\n        computeChildProgress(rp: number, child: number) {\r\n            return rp\r\n        }\r\n\r\n        updateProgress(rp: number, depthToActiveAncestor: number) {\r\n            super.updateProgress(rp, depthToActiveAncestor)\r\n            const childs = Array.from(this.childs)\r\n            if (childs.length === 0) return\r\n\r\n            childs.forEach((child, i) => {\r\n                const progress = this.computeChildProgress(rp, i)\r\n                const isActive = _.inRange(rp, child.tsp, child.tep)\r\n                child.updateProgress(progress, depthToActiveAncestor + (isActive ? 0 : 1))\r\n            })\r\n        }\r\n\r\n        render() {\r\n            return html`<slot></slot><br />`\r\n        }\r\n    }\r\n\r\n    return mixedClass\r\n}\r\n"],
  "mappings": "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",
  "names": ["URI", "PlayerAPI", "PlayerAPI", "_", "a", "subtitle", "url", "PlayerAPI", "state", "LitElement", "html", "property", "LitElement", "html", "property", "partialWidths", "child", "query"]
}
