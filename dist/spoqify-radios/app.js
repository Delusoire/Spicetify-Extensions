import{tupled as F}from"https://esm.sh/fp-ts/function";import{array as N,function as f}from"https://esm.sh/fp-ts";var A={before:{start:f.constant({before:"start"}),fromUri:e=>({before:{uri:e}}),fromUid:e=>({before:{uid:e}})},after:{end:f.constant({after:"end"}),fromUri:e=>({after:{uri:e}}),fromUid:e=>({after:{uid:e}})}};var y=e=>new Promise(t=>setTimeout(t,e));import{task as x}from"https://esm.sh/fp-ts";import{constVoid as d}from"https://esm.sh/fp-ts/function";import{array as m,eq as v,string as L,record as G,semigroup as j,function as u}from"https://esm.sh/fp-ts";import{guard as T,memoize as w}from"https://esm.sh/fp-ts-std/Function";var h=e=>T(e);var U=e=>async t=>e(await t),S=e=>t=>i=>i[e]===t;var l=e=>t=>u.flow(m.chunksOf(e),m.map(t),i=>Promise.all(i),U(m.flatten));var b=e=>u.pipe(e,u.tupled,w(v.contramap(JSON.stringify)(L.Eq)),u.untupled);var{React:n,ReactDOM:k}=Spicetify,g=class e{constructor(t,i,s={}){this.name=t;this.sectionId=i;this.sectionFields=s}stopHistoryListener;setRerender=null;static waitForReact=async()=>{for(;!(Spicetify.React&&Spicetify.ReactDOM);)y(100);return this};pushSettings=async()=>{for(;!Spicetify?.Platform?.History?.listen;)await y(100);this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(({pathname:t=""})=>{t==="/preferences"&&this.render()}),Spicetify.Platform.History.location.pathname==="/preferences"&&await this.render()};toObject=()=>new Proxy({},{get:(t,i)=>e.getFieldValue(this.getId(i.toString()))});rerender=()=>{this.setRerender&&this.setRerender(Math.random())};render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await y(100)}let t=document.querySelector(".x-settings-container"),i=Array.from(t.children).find(({id:s})=>s===this.sectionId);i||(i=document.createElement("div"),i.id=this.sectionId,i.className="settingsContainer",t.appendChild(i)),k.render(n.createElement(this.FieldsContainer,null),i)};addButton=(t,i,s,r=d,a={})=>{let o=this.getId(t);return a.onClick=r,this.sectionFields[t]={id:o,type:"button",description:i,text:s,events:a},this};addToggle=(t,i,s=x.of(!0),r=d,a={})=>{let o=this.getId(t);return e.setDefaultFieldValue(o,s),a.onChange=r,this.sectionFields[t]={id:o,type:"toggle",description:i,events:a},this};addInput=(t,i,s,r=d,a="text",o={})=>{let p=this.getId(t);return e.setDefaultFieldValue(p,s),o.onChange=r,this.sectionFields[t]={id:p,type:"input",description:i,inputType:a,events:o},this};addDropDown=(t,i,s,r=x.of(0),a=d,o={})=>{let p=this.getId(t);return e.setDefaultFieldValue(p,r),o.onChange=a,this.sectionFields[t]={id:p,type:"dropdown",description:i,options:s,events:o},this};addHidden=(t,i)=>{let s=this.getId(t);return e.setDefaultFieldValue(s,i),this.sectionFields[t]={id:s,type:"hidden",description:""},this};getId=t=>`extensions:${this.sectionId}:${t}`;useStateFor=t=>{let[i,s]=n.useState(e.getFieldValue(t));return[i,r=>{r!==void 0&&(s(r),e.setFieldValue(t,r))}]};static getFieldValue=t=>JSON.parse(Spicetify.LocalStorage.get(t)??"null");static setFieldValue=(t,i)=>{Spicetify.LocalStorage.set(t,JSON.stringify(i))};static setDefaultFieldValue=async(t,i)=>{e.getFieldValue(t)===null&&e.setFieldValue(t,await i())};FieldsContainer=()=>{let[t,i]=n.useState(0);return this.setRerender=i,n.createElement("div",{className:"x-settings-section",key:t},n.createElement("h2",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-cello-textBase-type"},this.name),Object.entries(this.sectionFields).map(([s,r])=>n.createElement(this.Field,{field:r})))};Field=({field:t})=>{let i=S("type");return n.createElement("div",{className:"x-settings-row"},n.createElement(this.SettingDescription,{id:t.id,description:t.description}),n.createElement("div",{className:"x-settings-secondColumn"},h([[i("input"),this.SettingInputField],[i("button"),this.SettingButtonField],[i("toggle"),this.SettingToggleField],[i("dropdown"),this.SettingDropdownField]])(this.SettingHidden)(t)))};SettingDescription=({id:t,description:i})=>n.createElement("div",{className:"x-settings-firstColumn"},n.createElement("label",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-viola-textSubdued-type",htmlFor:t},i));SettingButtonField=t=>n.createElement("span",{className:""},n.createElement("button",{id:t.id,className:"Button-sc-y0gtbx-0 Button-sm-buttonSecondary-useBrowserDefaultFocusStyle x-settings-button",...t.events,type:t.type},t.text));SettingToggleField=t=>{let[i,s]=this.useStateFor(t.id);return n.createElement("label",{className:"x-settings-secondColumn x-toggle-wrapper"},n.createElement("input",{id:t.id,className:"x-toggle-input",type:"checkbox",checked:e.getFieldValue(t.id),...t.events,onChange:r=>{s(r.currentTarget.checked),t.events.onChange?.(r)}}),n.createElement("span",{className:"x-toggle-indicatorWrapper"},n.createElement("span",{className:"x-toggle-indicator"})))};SettingInputField=t=>{let[i,s]=this.useStateFor(t.id);return n.createElement("input",{className:"x-settings-input",id:t.id,dir:"ltr",value:e.getFieldValue(t.id),type:t.inputType,...t.events,onChange:r=>{s(r.currentTarget.value),t.events.onChange?.(r)}})};SettingDropdownField=t=>{let[i,s]=this.useStateFor(t.id);return n.createElement("select",{className:"main-dropDown-dropDown",id:t.id,...t.events,onChange:r=>{s(r.currentTarget.selectedIndex),t.events.onChange?.(r)}},t.options.map((r,a)=>n.createElement("option",{selected:a===e.getFieldValue(t.id),value:a+1},r)))};SettingHidden=()=>n.createElement(n.Fragment,null)};var it=l(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${e.join(",")}`)).artists),rt=l(1)(async([e])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${e}`)]),st=l(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${e.join(",")}`)).albums),nt=l(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${e.join(",")}`)).tracks);var R=async(e,t={})=>await Spicetify.Platform.RootlistAPI.createFolder(e,t);var B=async(e,t,i,s="")=>{let r=new URL("https://ws.audioscrobbler.com/2.0/");return r.searchParams.append("method","track.getInfo"),r.searchParams.append("api_key",e),r.searchParams.append("artist",t),r.searchParams.append("track",i),r.searchParams.append("format","json"),r.searchParams.append("username",s),await fetch(r).then(a=>a.json())},at=b(B);var E="Anonymized Radios",P=new g("Spoqify-radios","spoqify-radios").addInput("anonymizedRadiosFolderUri","Anonymized Radios folder uri",async()=>(await R(E)).uri);P.pushSettings();var I=P.toObject();import{anyPass as D}from"https://esm.sh/fp-ts-std/Predicate";var{URI:c}=Spicetify,C=e=>{let t=new EventSource(`https://open.spoqify.com/anonymize?url=${e.substring(8)}`);t.addEventListener("done",i=>{t.close();let s=c.fromString(i.data);Spicetify.Platform.History.push(s.toURLPath(!0)),Spicetify.Platform.PlaylistAPI.add(s.toURI(),A.after.fromUri(I.anonymizedRadiosFolderUri))})};new Spicetify.ContextMenu.Item("Create anonymized radio",F(C),F(D([c.isAlbum,c.isArtist,c.isPlaylistV1OrV2,c.isTrack])),"podcasts").register();
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,
