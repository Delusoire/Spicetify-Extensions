import{tupled as R}from"https://esm.sh/fp-ts/function";import{array as M,function as u}from"https://esm.sh/fp-ts";var f={before:{start:u.constant({before:"start"}),fromUri:e=>({before:{uri:e}}),fromUid:e=>({before:{uid:e}})},after:{end:u.constant({after:"end"}),fromUri:e=>({after:{uri:e}}),fromUid:e=>({after:{uid:e}})}};var g=e=>new Promise(t=>setTimeout(t,e));import{task as h}from"https://esm.sh/fp-ts";import{array as d,eq as F,string as U,record as z,semigroup as W,function as p}from"https://esm.sh/fp-ts";import{guard as k,memoize as L}from"https://esm.sh/fp-ts-std/Function";var m=e=>k(e);var T=e=>async t=>e(await t),A=e=>t=>i=>i[e]===t;var o=e=>t=>p.flow(d.chunksOf(e),d.map(t),i=>Promise.all(i),T(d.flatten));var S=e=>p.pipe(e,p.tupled,L(F.contramap(JSON.stringify)(U.Eq)),p.untupled);var{React:s,ReactDOM:v}=Spicetify,{ButtonSecondary:w}=Spicetify.ReactComponent,b=webpackChunkopen.push([[Symbol()],{},e=>e]),B=Object.keys(b.m).map(e=>b(e)),E=B.filter(e=>typeof e=="object").map(e=>{try{return Object.values(e)}catch{}}).flat(),y=E.filter(e=>typeof e=="function"),C=y.find(e=>e.toString().includes("setSectionFilterMatchQueryValue")),O=y.find(e=>e.toString().includes("textSubdued")&&e.toString().includes("viola")),N=y.find(e=>e.toString().includes("condensed")&&e.toString().includes("onSelected"));var c=class e{constructor(t,i,n={}){this.name=t;this.sectionId=i;this.sectionFields=n;this.pushSettings=()=>{this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(()=>this.render()),this.render()};this.toObject=()=>new Proxy({},{get:(t,i)=>e.getFieldValue(this.getId(i.toString()))});this.render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await g(100)}let t=document.querySelector(".x-settings-container"),i=Array.from(t.children).find(({id:n})=>n===this.sectionId);i||(i=document.createElement("div"),i.id=this.sectionId,i.className="settingsContainer",t.appendChild(i)),v.render(s.createElement(this.FieldsContainer,null),i)};this.addButton=t=>(this.addField("button",t),this);this.addToggle=(t,i=h.of(!1))=>(this.addField("toggle",t,i),this);this.addInput=(t,i=h.of(""))=>(this.addField("input",t,i),this);this.getId=t=>`extensions:${this.sectionId}:${t}`;this.useStateFor=t=>{let[i,n]=s.useState(e.getFieldValue(t));return[i,r=>{r!==void 0&&(n(r),e.setFieldValue(t,r))}]};this.FieldsContainer=()=>s.createElement("div",{className:"x-settings-section"},s.createElement("h2",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-cello-textBase-type"},this.name),Object.entries(this.sectionFields).map(([t,i])=>s.createElement(this.Field,{field:i})));this.Field=({field:t})=>{let i=A("type");return m([[i("input"),this.InputField],[i("button"),this.ButtonField],[i("toggle"),this.ToggleField]])(()=>s.createElement(s.Fragment,null))(t)};this.SettingField=({field:t,children:i})=>s.createElement(C,{filterMatchQuery:t.id},s.createElement("div",{className:"x-settings-firstColumn"},s.createElement(O,{htmlFor:t.id},t.desc)),s.createElement("div",{className:"x-settings-secondColumn"},i));this.ButtonField=t=>s.createElement(this.SettingField,{field:t},s.createElement(w,{id:t.id,buttonSize:"sm",onClick:t.onClick,className:"x-settings-button"},t.text));this.ToggleField=t=>{let[i,n]=this.useStateFor(t.id);return s.createElement(this.SettingField,{field:t},s.createElement(N,{id:t.id,checked:e.getFieldValue(t.id),onSelected:r=>{n(r),t.onSelected?.(r)},className:"x-settings-button"}))};this.InputField=t=>{let[i,n]=this.useStateFor(t.id);return s.createElement(this.SettingField,{field:t},s.createElement("input",{className:"x-settings-input",id:t.id,dir:"ltr",value:e.getFieldValue(t.id),type:t.inputType,onChange:r=>{let a=r.currentTarget.value;n(a),t.onChange?.(a)}}))}}addField(t,i,n){if(n!==void 0){let a=this.getId(i.id);e.setDefaultFieldValue(a,n)}let r=Object.assign({},i,{type:t});this.sectionFields[i.id]=r}static{this.getFieldValue=t=>JSON.parse(Spicetify.LocalStorage.get(t)??"null")}static{this.setFieldValue=(t,i)=>Spicetify.LocalStorage.set(t,JSON.stringify(i))}static{this.setDefaultFieldValue=async(t,i)=>{e.getFieldValue(t)===null&&e.setFieldValue(t,await i())}}};var at=o(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${e.join(",")}`)).artists),ot=o(1)(async([e])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${e}`)]),lt=o(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${e.join(",")}`)).albums),pt=o(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${e.join(",")}`)).tracks);var x=async(e,t={})=>await Spicetify.Platform.RootlistAPI.createFolder(e,t);var D=async(e,t,i,n="")=>{let r=new URL("https://ws.audioscrobbler.com/2.0/");return r.searchParams.append("method","track.getInfo"),r.searchParams.append("api_key",e),r.searchParams.append("artist",t),r.searchParams.append("track",i),r.searchParams.append("format","json"),r.searchParams.append("username",n),await fetch(r).then(a=>a.json())},ct=S(D);var _="Anonymized Radios",P=new c("Spoqify-radios","spoqify-radios").addInput({id:"anonymizedRadiosFolderUri",desc:"Anonymized Radios folder uri",inputType:"text"},async()=>(await x(_)).uri);P.pushSettings();var I=P.toObject();import{anyPass as G}from"https://esm.sh/fp-ts-std/Predicate";var{URI:l}=Spicetify,j=e=>{let t=new EventSource(`https://open.spoqify.com/anonymize?url=${e.substring(8)}`);t.addEventListener("done",i=>{t.close();let n=l.fromString(i.data);Spicetify.Platform.History.push(n.toURLPath(!0)),Spicetify.Platform.PlaylistAPI.add(n.toURI(),f.after.fromUri(I.anonymizedRadiosFolderUri))})};new Spicetify.ContextMenu.Item("Create anonymized radio",R(j),R(G([l.isAlbum,l.isArtist,l.isPlaylistV1OrV2,l.isTrack])),"podcasts").register();
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,
