import{anyPass as h}from"https://esm.sh/fp-ts-std/Predicate";import{tupled as c}from"https://esm.sh/fp-ts/function";import{array as n,eq as u,string as A,record as I,semigroup as U,function as a}from"https://esm.sh/fp-ts";import{guard as L,memoize as g}from"https://esm.sh/fp-ts-std/Function";var d=t=>async e=>t(await e);var s=t=>e=>a.flow(n.chunksOf(t),n.map(e),r=>Promise.all(r),d(n.flatten));var p=t=>a.pipe(t,a.tupled,g(u.contramap(JSON.stringify)(A.Eq)),a.untupled);import{array as E,function as l}from"https://esm.sh/fp-ts";var _={before:{start:l.constant({before:"start"}),fromUri:t=>({before:{uri:t}}),fromUid:t=>({before:{uid:t}})},after:{end:l.constant({after:"end"}),fromUri:t=>({after:{uri:t}}),fromUid:t=>({after:{uid:t}})}};var j=s(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${t.join(",")}`)).artists),M=s(1)(async([t])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${t}`)]),q=s(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${t.join(",")}`)).albums),N=s(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${t.join(",")}`)).tracks);var b=async(t,e=0,r=300)=>(await Spicetify.Platform.EnhanceAPI.getPage(t,0,0,e,r)).enhancePage.pageItems,o=async(t,e=0)=>{let r=await b(t,e);return r?.length<300?r:r.concat(o(t,e+300))};var S=async(t,e,r,f="")=>{let i=new URL("https://ws.audioscrobbler.com/2.0/");return i.searchParams.append("method","track.getInfo"),i.searchParams.append("api_key",t),i.searchParams.append("artist",e),i.searchParams.append("track",r),i.searchParams.append("format","json"),i.searchParams.append("username",f),await fetch(i).then(m=>m.json())},$=p(S);var{URI:P}=Spicetify,y=new Array,R=async t=>{y=await o(t),Spicetify.Platform.PlayerAPI.clearQueue(),Spicetify.Platform.PlayerAPI.addToQueue(y)};new Spicetify.ContextMenu.Item("Play enhanced songs",c(R),c(h([P.isPlaylistV1OrV2])),"enhance").register();
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vZXh0ZW5zaW9ucy9wbGF5LWVuaGFuY2VkLXNvbmdzL2FwcC50cyIsICIuLi8uLi9zaGFyZWQvZnAudHMiLCAiLi4vLi4vc2hhcmVkL3V0aWwudHMiLCAiLi4vLi4vc2hhcmVkL2FwaS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgYW55UGFzcyB9IGZyb20gXCJodHRwczovL2VzbS5zaC9mcC10cy1zdGQvUHJlZGljYXRlXCJcclxuaW1wb3J0IHsgdHVwbGVkIH0gZnJvbSBcImh0dHBzOi8vZXNtLnNoL2ZwLXRzL2Z1bmN0aW9uXCJcclxuaW1wb3J0IHsgZmV0Y2hQbGF0UGxheWxpc3RFbmhhbmNlZFNvbmdzIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9hcGkudHNcIlxyXG5pbXBvcnQgeyBTcG90aWZ5VVJJIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC91dGlsLnRzXCJcclxuXHJcbmNvbnN0IHsgVVJJIH0gPSBTcGljZXRpZnlcclxuXHJcbmxldCBxdWV1ZSA9IG5ldyBBcnJheTxhbnk+KClcclxuY29uc3QgcGxheUVuaGFuY2VkU29uZ3MgPSBhc3luYyAodXJpOiBTcG90aWZ5VVJJKSA9PiB7XHJcbiAgICBxdWV1ZSA9IGF3YWl0IGZldGNoUGxhdFBsYXlsaXN0RW5oYW5jZWRTb25ncyh1cmkpXHJcbiAgICBTcGljZXRpZnkuUGxhdGZvcm0uUGxheWVyQVBJLmNsZWFyUXVldWUoKVxyXG4gICAgU3BpY2V0aWZ5LlBsYXRmb3JtLlBsYXllckFQSS5hZGRUb1F1ZXVlKHF1ZXVlKVxyXG59XHJcblxyXG4vLyBNZW51XHJcblxyXG5uZXcgU3BpY2V0aWZ5LkNvbnRleHRNZW51Lkl0ZW0oXHJcbiAgICBcIlBsYXkgZW5oYW5jZWQgc29uZ3NcIixcclxuICAgIHR1cGxlZChwbGF5RW5oYW5jZWRTb25ncykgYXMgYW55LFxyXG4gICAgdHVwbGVkKGFueVBhc3MoW1VSSS5pc1BsYXlsaXN0VjFPclYyXSkpIGFzIGFueSxcclxuICAgIFwiZW5oYW5jZVwiLFxyXG4pLnJlZ2lzdGVyKClcclxuIiwgImltcG9ydCB7XHJcbiAgICBhcnJheSBhcyBhcixcclxuICAgIGVxLFxyXG4gICAgc3RyaW5nIGFzIHN0cixcclxuICAgIHJlY29yZCBhcyByZWMsXHJcbiAgICByZWZpbmVtZW50IGFzIHJlZixcclxuICAgIHNlbWlncm91cCBhcyBzZyxcclxuICAgIGZ1bmN0aW9uIGFzIGYsXHJcbn0gZnJvbSBcImh0dHBzOi8vZXNtLnNoL2ZwLXRzXCJcclxuaW1wb3J0IHsgZ3VhcmQsIG1lbW9pemUgfSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvZnAtdHMtc3RkL0Z1bmN0aW9uXCJcclxuXHJcbnR5cGUgcmVmaW5lQnJhbmNoPEEsIEIgZXh0ZW5kcyBBLCBSPiA9IFtyZWYuUmVmaW5lbWVudDxBLCBCPiwgKHg6IEIpID0+IFJdXHJcbmV4cG9ydCBjb25zdCBndWFyZDIgPSA8QSwgQTEgZXh0ZW5kcyBBLCBBMiBleHRlbmRzIEEsIFI+KGJyYW5jaGVzOiBbcmVmaW5lQnJhbmNoPEEsIEExLCBSPiwgcmVmaW5lQnJhbmNoPEEsIEEyLCBSPl0pID0+XHJcbiAgICBndWFyZChicmFuY2hlcyBhcyB1bmtub3duIGFzIFtyZWZpbmVCcmFuY2g8QSwgQSwgUj4sIHJlZmluZUJyYW5jaDxBLCBBLCBSPl0pXHJcbmV4cG9ydCBjb25zdCBndWFyZDMgPSA8QSwgQTEgZXh0ZW5kcyBBLCBBMiBleHRlbmRzIEEsIEEzIGV4dGVuZHMgQSwgUj4oXHJcbiAgICBicmFuY2hlczogW3JlZmluZUJyYW5jaDxBLCBBMSwgUj4sIHJlZmluZUJyYW5jaDxBLCBBMiwgUj4sIHJlZmluZUJyYW5jaDxBLCBBMywgUj5dLFxyXG4pID0+IGd1YXJkKGJyYW5jaGVzIGFzIHVua25vd24gYXMgW3JlZmluZUJyYW5jaDxBLCBBLCBSPiwgcmVmaW5lQnJhbmNoPEEsIEEsIFI+LCByZWZpbmVCcmFuY2g8QSwgQSwgUj5dKVxyXG5leHBvcnQgY29uc3QgZ3VhcmQ0ID0gPEEsIEExIGV4dGVuZHMgQSwgQTIgZXh0ZW5kcyBBLCBBMyBleHRlbmRzIEEsIEE0IGV4dGVuZHMgQSwgUj4oXHJcbiAgICBicmFuY2hlczogW3JlZmluZUJyYW5jaDxBLCBBMSwgUj4sIHJlZmluZUJyYW5jaDxBLCBBMiwgUj4sIHJlZmluZUJyYW5jaDxBLCBBMywgUj4sIHJlZmluZUJyYW5jaDxBLCBBNCwgUj5dLFxyXG4pID0+XHJcbiAgICBndWFyZChcclxuICAgICAgICBicmFuY2hlcyBhcyB1bmtub3duIGFzIFtcclxuICAgICAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEEsIFI+LFxyXG4gICAgICAgICAgICByZWZpbmVCcmFuY2g8QSwgQSwgUj4sXHJcbiAgICAgICAgICAgIHJlZmluZUJyYW5jaDxBLCBBLCBSPixcclxuICAgICAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEEsIFI+LFxyXG4gICAgICAgIF0sXHJcbiAgICApXHJcbmV4cG9ydCBjb25zdCBndWFyZDUgPSA8QSwgQTEgZXh0ZW5kcyBBLCBBMiBleHRlbmRzIEEsIEEzIGV4dGVuZHMgQSwgQTQgZXh0ZW5kcyBBLCBBNSBleHRlbmRzIEEsIFI+KFxyXG4gICAgYnJhbmNoZXM6IFtcclxuICAgICAgICByZWZpbmVCcmFuY2g8QSwgQTEsIFI+LFxyXG4gICAgICAgIHJlZmluZUJyYW5jaDxBLCBBMiwgUj4sXHJcbiAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEEzLCBSPixcclxuICAgICAgICByZWZpbmVCcmFuY2g8QSwgQTQsIFI+LFxyXG4gICAgICAgIHJlZmluZUJyYW5jaDxBLCBBNSwgUj4sXHJcbiAgICBdLFxyXG4pID0+XHJcbiAgICBndWFyZChcclxuICAgICAgICBicmFuY2hlcyBhcyB1bmtub3duIGFzIFtcclxuICAgICAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEEsIFI+LFxyXG4gICAgICAgICAgICByZWZpbmVCcmFuY2g8QSwgQSwgUj4sXHJcbiAgICAgICAgICAgIHJlZmluZUJyYW5jaDxBLCBBLCBSPixcclxuICAgICAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEEsIFI+LFxyXG4gICAgICAgICAgICByZWZpbmVCcmFuY2g8QSwgQSwgUj4sXHJcbiAgICAgICAgXSxcclxuICAgIClcclxuXHJcbmV4cG9ydCBjb25zdCBvYmpDb25jYXQyID0gPEExLCBBMj4oKSA9PiByZWMuZ2V0VW5pb25TZW1pZ3JvdXAoc2cuZmlyc3Q8YW55PigpKS5jb25jYXQgYXMgKHg6IEExLCB5OiBBMikgPT4gQTEgJiBBMlxyXG5leHBvcnQgY29uc3Qgb2JqQ29uY2F0ID0gPEE+KCkgPT4gYXIucmVkdWNlKHt9IGFzIEEsIG9iakNvbmNhdDI8QSwgQT4oKSlcclxuXHJcbnR5cGUgYXN5bmMgPSB7XHJcbiAgICA8QSwgQj4oZjogKGE6IEEpID0+IFByb21pc2U8Qj4pOiAoZmE6IFByb21pc2U8QT4pID0+IFByb21pc2U8Qj5cclxuICAgIDxBLCBCPihmOiAoYTogQSkgPT4gQik6IChmYTogUHJvbWlzZTxBPikgPT4gUHJvbWlzZTxCPlxyXG59XHJcbmV4cG9ydCBjb25zdCBwTWNoYWluOiBhc3luYyA9XHJcbiAgICA8QSwgUj4oZjogKGE6IEEpID0+IFIpID0+XHJcbiAgICBhc3luYyAoZmE6IEEpID0+XHJcbiAgICAgICAgZihhd2FpdCBmYSlcclxuXHJcbmV4cG9ydCBjb25zdCBpcyA9XHJcbiAgICA8QT4oYzoga2V5b2YgQSkgPT5cclxuICAgIDxCIGV4dGVuZHMgQT4oYTogQVt0eXBlb2YgY10pID0+XHJcbiAgICAoZmllbGQ6IEEpOiBmaWVsZCBpcyBCID0+XHJcbiAgICAgICAgZmllbGRbY10gPT09IGFcclxuXHJcbmV4cG9ydCBjb25zdCB0YXBBbnkgPVxyXG4gICAgPEE+KGY6IChhOiBBKSA9PiB2b2lkKSA9PlxyXG4gICAgKGZhOiBBKSA9PiB7XHJcbiAgICAgICAgZihmYSlcclxuICAgICAgICByZXR1cm4gZmFcclxuICAgIH1cclxuXHJcbmV4cG9ydCBjb25zdCBjaHVuY2tpZnkgPVxyXG4gICAgKG46IG51bWJlcikgPT5cclxuICAgIDxBLCBSPihnOiAoYTogQVtdKSA9PiBQcm9taXNlPFJbXT4pID0+XHJcbiAgICAgICAgZi5mbG93KGFyLmNodW5rc09mKG4pPEE+LCBhci5tYXAoZyksIHBzID0+IFByb21pc2UuYWxsKHBzKSwgcE1jaGFpbihhci5mbGF0dGVuKSlcclxuXHJcbmV4cG9ydCBjb25zdCB3aXRoUHJvZ3Jlc3MgPVxyXG4gICAgPEYgZXh0ZW5kcyAoZjogKC4uLmE6IGFueSkgPT4gYW55KSA9PiAoZmE6IGFueSkgPT4gYW55PihtYXA6IEYpID0+XHJcbiAgICAoZjogUGFyYW1ldGVyczxGPlswXSkgPT5cclxuICAgIChmYTogUGFyYW1ldGVyczxSZXR1cm5UeXBlPEY+PlswXSk6IFJldHVyblR5cGU8UmV0dXJuVHlwZTxGPj4gPT4ge1xyXG4gICAgICAgIGxldCBpID0gMFxyXG4gICAgICAgIHJldHVybiBtYXAoYXN5bmMgKC4uLmE6IFBhcmFtZXRlcnM8UGFyYW1ldGVyczxGPlswXT4pID0+IHtcclxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogRnVjayBtZVxyXG4gICAgICAgICAgICBjb25zdCByZXQgPSBhd2FpdCBmKC4uLmEpXHJcbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5yb3VuZCgoaSsrIC8gT2JqZWN0LnZhbHVlcyhmYSkubGVuZ3RoKSAqIDEwMClcclxuICAgICAgICAgICAgU3BpY2V0aWZ5LnNob3dOb3RpZmljYXRpb24oYExvYWRpbmc6ICR7cHJvZ3Jlc3N9JWAsIGZhbHNlLCAyMDApXHJcbiAgICAgICAgICAgIHJldHVybiByZXRcclxuICAgICAgICB9KShmYSlcclxuICAgIH1cclxuXHJcbmV4cG9ydCBjb25zdCBtZW1vaXplMiA9IDxBIGV4dGVuZHMgYW55W10sIFI+KGZuOiAoLi4uYXJnczogQSkgPT4gUikgPT5cclxuICAgIGYucGlwZShmbiwgZi50dXBsZWQsIG1lbW9pemU8QT4oZXEuY29udHJhbWFwKEpTT04uc3RyaW5naWZ5KShzdHIuRXEpKSwgZi51bnR1cGxlZClcclxuIiwgIi8vIGV4cG9ydCBpbnRlcmZhY2UgU3BvdGlmeUlEXHJcbi8vICAgICBleHRlbmRzIE5ld3R5cGU8eyByZWFkb25seSBTcG90aWZ5SUQ6IHVuaXF1ZSBzeW1ib2wgfSwgc3RyaW5nPiB7fVxyXG4vLyBleHBvcnQgaW50ZXJmYWNlIFNwb3RpZnlVUklcclxuLy8gICAgIGV4dGVuZHMgTmV3dHlwZTx7IHJlYWRvbmx5IFNwb3RpZnlVUkk6IHVuaXF1ZSBzeW1ib2wgfSwgc3RyaW5nPiB7fVxyXG5cclxuaW1wb3J0IHsgYXJyYXkgYXMgYSwgZnVuY3Rpb24gYXMgZiB9IGZyb20gXCJodHRwczovL2VzbS5zaC9mcC10c1wiXHJcblxyXG5leHBvcnQgdHlwZSBTcG90aWZ5SUQgPSBzdHJpbmdcclxuZXhwb3J0IHR5cGUgU3BvdGlmeVVSSSA9IHN0cmluZ1xyXG5cclxuZXhwb3J0IHR5cGUgU3BvdGlmeUxvY09iaiA9IHtcclxuICAgIGJlZm9yZT86IFwic3RhcnRcIiB8IHsgdXJpOiBTcG90aWZ5VVJJIH0gfCB7IHVpZDogc3RyaW5nIH1cclxuICAgIGFmdGVyPzogXCJlbmRcIiB8IHsgdXJpOiBTcG90aWZ5VVJJIH0gfCB7IHVpZDogc3RyaW5nIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNwb3RpZnlMb2MgPSB7XHJcbiAgICBiZWZvcmU6IHtcclxuICAgICAgICBzdGFydDogZi5jb25zdGFudCh7IGJlZm9yZTogXCJzdGFydFwiIH0gYXMgU3BvdGlmeUxvY09iaiksXHJcbiAgICAgICAgZnJvbVVyaTogKHVyaTogU3BvdGlmeVVSSSkgPT4gKHsgYmVmb3JlOiB7IHVyaSB9IH0pLFxyXG4gICAgICAgIGZyb21VaWQ6ICh1aWQ6IHN0cmluZykgPT4gKHsgYmVmb3JlOiB7IHVpZCB9IH0pLFxyXG4gICAgfSxcclxuICAgIGFmdGVyOiB7XHJcbiAgICAgICAgZW5kOiBmLmNvbnN0YW50KHsgYWZ0ZXI6IFwiZW5kXCIgfSBhcyBTcG90aWZ5TG9jT2JqKSxcclxuICAgICAgICBmcm9tVXJpOiAodXJpOiBTcG90aWZ5VVJJKSA9PiAoeyBhZnRlcjogeyB1cmkgfSB9KSxcclxuICAgICAgICBmcm9tVWlkOiAodWlkOiBzdHJpbmcpID0+ICh7IGFmdGVyOiB7IHVpZCB9IH0pLFxyXG4gICAgfSxcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGVzY2FwZVJlZ2V4ID0gKHN0cjogc3RyaW5nKSA9PiBzdHIucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csIGBcXFxcJCZgKVxyXG5cclxuZXhwb3J0IGNvbnN0IHRpdGxlQ2FzZSA9IChzdHI6IHN0cmluZykgPT4gc3RyLnJlcGxhY2UoL1xcYlxcdy9nLCBsID0+IGwudG9VcHBlckNhc2UoKSlcclxuXHJcbmV4cG9ydCBjb25zdCBub3JtYWxpemVTdHIgPSAoc3RyOiBzdHJpbmcpID0+XHJcbiAgICBzdHJcclxuICAgICAgICAubm9ybWFsaXplKFwiTkZLRFwiKVxyXG4gICAgICAgIC5yZXBsYWNlKC9cXCguKlxcKS9nLCBcIlwiKVxyXG4gICAgICAgIC5yZXBsYWNlKC9cXFsuKlxcXS9nLCBcIlwiKVxyXG4gICAgICAgIC5yZXBsYWNlKC8tXywvZywgXCIgXCIpXHJcbiAgICAgICAgLnJlcGxhY2UoL1teYS16QS1aMC05IF0vZywgXCJcIilcclxuICAgICAgICAucmVwbGFjZSgvXFxzKy9nLCBcIiBcIilcclxuICAgICAgICAudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgIC50cmltKClcclxuXHJcbi8vISBEb2VzIGxvY2F0aW9uIGFjdHVhbGx5IHBvaW50IHRvIGRvY3VtZW50LmJvZHk/XHJcbmV4cG9ydCBjb25zdCB3YWl0Rm9yRWxlbWVudCA9IDxFIGV4dGVuZHMgRWxlbWVudD4oXHJcbiAgICBzZWxlY3Rvcjogc3RyaW5nLFxyXG4gICAgdGltZW91dCA9IDEwMDAsXHJcbiAgICBsb2NhdGlvbiA9IGRvY3VtZW50LmJvZHksXHJcbiAgICBub3RFbD86IEUsXHJcbikgPT5cclxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlOiAodmFsdWU6IEVsZW1lbnQgfCBudWxsKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gKHY6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KClcclxuICAgICAgICAgICAgcmVzb2x2ZSh2KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxFPihzZWxlY3RvcilcclxuICAgICAgICAgICAgaWYgKGVsICYmICghbm90RWwgfHwgZWwgIT09IG5vdEVsKSkgcmV0dXJuIHJlcyhlbClcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGxvY2F0aW9uLCB7XHJcbiAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcclxuICAgICAgICAgICAgc3VidHJlZTogdHJ1ZSxcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBpZiAodGltZW91dCkgc2V0VGltZW91dCgoKSA9PiByZXMobnVsbCksIHRpbWVvdXQpXHJcbiAgICB9KVxyXG5cclxuZXhwb3J0IGNvbnN0IHRyYXBFbGVtZW50ID0gPEUgZXh0ZW5kcyBFbGVtZW50PihcclxuICAgIHNlbGVjdG9yOiBzdHJpbmcsXHJcbiAgICBjYWxsYmFjazogKGVsOiBFIHwgbnVsbCwgbGFzdEVsOiBFIHwgbnVsbCkgPT4gdm9pZCxcclxuICAgIGxvY2F0aW9uID0gZG9jdW1lbnQuYm9keSxcclxuKSA9PiB7XHJcbiAgICBsZXQgbGFzdEVsOiBFIHwgbnVsbCA9IG51bGxcclxuXHJcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcclxuICAgICAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8RT4oc2VsZWN0b3IpXHJcbiAgICAgICAgaWYgKGVsICE9PSBsYXN0RWwpIGNhbGxiYWNrKGVsLCBsYXN0RWwpXHJcbiAgICAgICAgbGFzdEVsID0gZWxcclxuICAgIH0pXHJcblxyXG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShsb2NhdGlvbiwge1xyXG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcclxuICAgICAgICBzdWJ0cmVlOiB0cnVlLFxyXG4gICAgfSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHNsZWVwID0gKG1zOiBudW1iZXIpID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpXHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UmVhY3RQcm9wcyA9IChlbGVtZW50OiBFbGVtZW50KSA9PlxyXG4gICAgZWxlbWVudFtPYmplY3Qua2V5cyhlbGVtZW50KS5maW5kKGsgPT4gay5zdGFydHNXaXRoKFwiX19yZWFjdFByb3BzJFwiKSkgYXMga2V5b2YgdHlwZW9mIGVsZW1lbnRdXHJcblxyXG5leHBvcnQgY29uc3QgaXNMaWtlZCA9ICh1cmlzOiBTcG90aWZ5VVJJW10pID0+IFNwaWNldGlmeS5QbGF0Zm9ybS5MaWJyYXJ5QVBJLmNvbnRhaW5zKC4uLnVyaXMpIGFzIFByb21pc2U8Ym9vbGVhbltdPlxyXG5cclxuZXhwb3J0IGNvbnN0IHNldExpa2VkID0gKHVyaXM6IFNwb3RpZnlVUklbXSwgbGlrZWQ6IGJvb2xlYW4pID0+XHJcbiAgICBTcGljZXRpZnkuUGxhdGZvcm0uTGlicmFyeUFQSVtsaWtlZCA/IFwiYWRkXCIgOiBcInJlbW92ZVwiXSguLi51cmlzKVxyXG5cclxuZXhwb3J0IGNvbnN0IHRvZ2dsZUxpa2VkID0gYXN5bmMgKHVyaXM6IFNwb3RpZnlVUklbXSkgPT4ge1xyXG4gICAgY29uc3QgbGlrZWQgPSBhd2FpdCBpc0xpa2VkKHVyaXMpXHJcblxyXG4gICAgcmV0dXJuIGF3YWl0IGYucGlwZShcclxuICAgICAgICB1cmlzLFxyXG4gICAgICAgIGEucmVkdWNlV2l0aEluZGV4KFxyXG4gICAgICAgICAgICBbW10gYXMgU3BvdGlmeVVSSVtdLCBbXSBhcyBTcG90aWZ5VVJJW11dIGFzIGNvbnN0LFxyXG4gICAgICAgICAgICAoaSwgYWNjLCB1cmkpID0+IChhY2NbTnVtYmVyKGxpa2VkW2ldKV0ucHVzaCh1cmkpLCBhY2MpLFxyXG4gICAgICAgICksXHJcbiAgICAgICAgKFt0b0FkZCwgdG9SZW1dKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBzID0gW11cclxuICAgICAgICAgICAgaWYgKHRvQWRkLmxlbmd0aCkgcHMucHVzaChzZXRMaWtlZCh0b0FkZCwgdHJ1ZSkpXHJcbiAgICAgICAgICAgIGlmICh0b1JlbS5sZW5ndGgpIHBzLnB1c2goc2V0TGlrZWQodG9SZW0sIGZhbHNlKSlcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHBzKVxyXG4gICAgICAgIH0sXHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVRdWV1ZUl0ZW0gPSAocXVldWVkOiBib29sZWFuKSA9PiAodXJpOiBTcG90aWZ5VVJJKSA9PiAoe1xyXG4gICAgY29udGV4dFRyYWNrOiB7XHJcbiAgICAgICAgdXJpLFxyXG4gICAgICAgIHVpZDogXCJcIixcclxuICAgICAgICBtZXRhZGF0YToge1xyXG4gICAgICAgICAgICBpc19xdWV1ZWQ6IHF1ZXVlZC50b1N0cmluZygpLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlZDogW10sXHJcbiAgICBibG9ja2VkOiBbXSxcclxuICAgIHByb3ZpZGVyOiBxdWV1ZWQgPyBcInF1ZXVlXCIgOiBcImNvbnRleHRcIixcclxufSlcclxuXHJcbmV4cG9ydCBjb25zdCBzZXRRdWV1ZSA9IGFzeW5jIChuZXh0VHJhY2tzOiBBcnJheTxSZXR1cm5UeXBlPFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZVF1ZXVlSXRlbT4+PikgPT4ge1xyXG4gICAgY29uc3QgeyBfcXVldWUsIF9jbGllbnQgfSA9IFNwaWNldGlmeS5QbGF0Zm9ybS5QbGF5ZXJBUEkuX3F1ZXVlXHJcbiAgICBjb25zdCB7IHByZXZUcmFja3MsIHF1ZXVlUmV2aXNpb24gfSA9IF9xdWV1ZVxyXG5cclxuICAgIHJldHVybiBfY2xpZW50LnNldFF1ZXVlKHtcclxuICAgICAgICBuZXh0VHJhY2tzLFxyXG4gICAgICAgIHByZXZUcmFja3MsXHJcbiAgICAgICAgcXVldWVSZXZpc2lvbixcclxuICAgIH0pIGFzIFByb21pc2U8eyBlcnJvcjogbnVtYmVyOyByZWFzb25zOiBzdHJpbmcgfT5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHNldFBsYXlpbmdDb250ZXh0ID0gKHVyaTogU3BvdGlmeVVSSSkgPT4ge1xyXG4gICAgY29uc3QgeyBzZXNzaW9uSWQgfSA9IFNwaWNldGlmeS5QbGF0Zm9ybS5QbGF5ZXJBUEkuZ2V0U3RhdGUoKVxyXG4gICAgcmV0dXJuIFNwaWNldGlmeS5QbGF0Zm9ybS5QbGF5ZXJBUEkudXBkYXRlQ29udGV4dChzZXNzaW9uSWQsIHsgdXJpLCB1cmw6IFwiY29udGV4dDovL1wiICsgdXJpIH0pIGFzIFByb21pc2U8dW5kZWZpbmVkPlxyXG59XHJcbiIsICJpbXBvcnQgeyBjaHVuY2tpZnksIG1lbW9pemUyIH0gZnJvbSBcIi4vZnAudHNcIlxyXG5pbXBvcnQgeyBTcG90aWZ5SUQsIFNwb3RpZnlMb2NPYmosIFNwb3RpZnlVUkksIGVzY2FwZVJlZ2V4IH0gZnJvbSBcIi4vdXRpbC50c1wiXHJcblxyXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgR3JhcGhRTCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoR1FMQWxidW0gPSBhc3luYyAodXJpOiBTcG90aWZ5VVJJLCBvZmZzZXQgPSAwLCBsaW1pdCA9IDQ4NykgPT5cclxuICAgIChcclxuICAgICAgICBhd2FpdCBTcGljZXRpZnkuR3JhcGhRTC5SZXF1ZXN0KFNwaWNldGlmeS5HcmFwaFFMLkRlZmluaXRpb25zLmdldEFsYnVtLCB7XHJcbiAgICAgICAgICAgIHVyaSxcclxuICAgICAgICAgICAgbG9jYWxlOiBTcGljZXRpZnkuTG9jYWxlLmdldExvY2FsZSgpLFxyXG4gICAgICAgICAgICBvZmZzZXQsXHJcbiAgICAgICAgICAgIGxpbWl0LFxyXG4gICAgICAgIH0pXHJcbiAgICApLmRhdGEuYWxidW1VbmlvbiBhcyBmZXRjaEdRTEFsYnVtUmVzXHJcblxyXG50eXBlIGZldGNoQXJ0aXN0R1FMUmVzID0gYW55XHJcbmV4cG9ydCBjb25zdCBmZXRjaEdRTEFydGlzdE92ZXJ2aWV3ID0gYXN5bmMgKHVyaTogU3BvdGlmeVVSSSkgPT5cclxuICAgIChcclxuICAgICAgICBhd2FpdCBTcGljZXRpZnkuR3JhcGhRTC5SZXF1ZXN0KFNwaWNldGlmeS5HcmFwaFFMLkRlZmluaXRpb25zLnF1ZXJ5QXJ0aXN0T3ZlcnZpZXcsIHtcclxuICAgICAgICAgICAgdXJpLFxyXG4gICAgICAgICAgICBsb2NhbGU6IFNwaWNldGlmeS5Mb2NhbGUuZ2V0TG9jYWxlKCksXHJcbiAgICAgICAgICAgIGluY2x1ZGVQcmVyZWxlYXNlOiB0cnVlLFxyXG4gICAgICAgIH0pXHJcbiAgICApLmRhdGEuYXJ0aXN0VW5pb24gYXMgZmV0Y2hBcnRpc3RHUUxSZXNcclxuXHJcbnR5cGUgZmV0Y2hHUUxBcnRpc3REaXNjb2dyYXBoeVJlcyA9IGFueVxyXG5leHBvcnQgY29uc3QgZmV0Y2hHUUxBcnRpc3REaXNjb2dyYXBoeSA9IGFzeW5jICh1cmk6IFNwb3RpZnlVUkksIG9mZnNldCA9IDAsIGxpbWl0ID0gMTE2KSA9PlxyXG4gICAgKFxyXG4gICAgICAgIGF3YWl0IFNwaWNldGlmeS5HcmFwaFFMLlJlcXVlc3QoU3BpY2V0aWZ5LkdyYXBoUUwuRGVmaW5pdGlvbnMucXVlcnlBcnRpc3REaXNjb2dyYXBoeUFsbCwge1xyXG4gICAgICAgICAgICB1cmksXHJcbiAgICAgICAgICAgIG9mZnNldCxcclxuICAgICAgICAgICAgbGltaXQsXHJcbiAgICAgICAgfSlcclxuICAgICkuZGF0YS5hcnRpc3RVbmlvbi5kaXNjb2dyYXBoeS5hbGwuaXRlbXMgYXMgZmV0Y2hHUUxBcnRpc3REaXNjb2dyYXBoeVJlc1xyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoR1FMQXJ0aXN0UmVsYXRlZCA9IGFzeW5jICh1cmk6IFNwb3RpZnlVUkkpID0+XHJcbiAgICAoXHJcbiAgICAgICAgYXdhaXQgU3BpY2V0aWZ5LkdyYXBoUUwuUmVxdWVzdChTcGljZXRpZnkuR3JhcGhRTC5EZWZpbml0aW9ucy5xdWVyeUFydGlzdFJlbGF0ZWQsIHtcclxuICAgICAgICAgICAgdXJpLFxyXG4gICAgICAgICAgICBsb2NhbGU6IFNwaWNldGlmeS5Mb2NhbGUuZ2V0TG9jYWxlKCksXHJcbiAgICAgICAgfSlcclxuICAgICkuZGF0YS5hcnRpc3RVbmlvbi5yZWxhdGVkQ29udGVudC5yZWxhdGVkQXJ0aXN0cy5pdGVtcyBhcyBmZXRjaEdRTEFydGlzdFJlbGF0ZWRSZXNcclxuXHJcbi8qICAgICAgICAgICAgICAgICAgICAgICAgICBTcG90aWZ5IFdlYiBBUEkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlV2ViUGxheWxpc3RUcmFja3MgPSBhc3luYyAocGxheWxpc3Q6IFNwb3RpZnlJRCwgdHJhY2tzOiBTcG90aWZ5VVJJW10pID0+XHJcbiAgICBTcGljZXRpZnkuQ29zbW9zQXN5bmMuZGVsKGBodHRwczovL2FwaS5zcG90aWZ5LmNvbS92MS9wbGF5bGlzdHMvJHtwbGF5bGlzdH0vdHJhY2tzYCwge1xyXG4gICAgICAgIHRyYWNrczogdHJhY2tzLm1hcCh1cmkgPT4gKHsgdXJpIH0pKSxcclxuICAgIH0pXHJcblxyXG5leHBvcnQgY29uc3QgZmV0Y2hXZWJBcnRpc3RzU3BvdCA9IGNodW5ja2lmeSg1MCkoXHJcbiAgICBhc3luYyAoaWRzOiBTcG90aWZ5SURbXSkgPT5cclxuICAgICAgICAoYXdhaXQgU3BpY2V0aWZ5LkNvc21vc0FzeW5jLmdldChgaHR0cHM6Ly9hcGkuc3BvdGlmeS5jb20vdjEvYXJ0aXN0cz9pZHM9JHtpZHMuam9pbihcIixcIil9YCkpXHJcbiAgICAgICAgICAgIC5hcnRpc3RzIGFzIFNwb3RBcGlBcnRpc3RbXSxcclxuKVxyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoV2ViUGxheWxpc3RzU3BvdCA9IGNodW5ja2lmeSgxKShcclxuICAgIC8vIEB0cy1pZ25vcmUgY2h1bmtpZnkgd2lsbCBuZXZlciBjYWxsIHdpdGggZW1wdHkgYXJyYXlcclxuICAgIGFzeW5jIChbaWRdOiBbU3BvdGlmeUlEXSkgPT4gW1xyXG4gICAgICAgIChhd2FpdCBTcGljZXRpZnkuQ29zbW9zQXN5bmMuZ2V0KGBodHRwczovL2FwaS5zcG90aWZ5LmNvbS92MS9wbGF5bGlzdHMvJHtpZH1gKSkgYXMgU3BvdEFwaVBsYXlsaXN0LFxyXG4gICAgXSxcclxuKVxyXG5leHBvcnQgY29uc3QgZmV0Y2hXZWJBbGJ1bXNTcG90ID0gY2h1bmNraWZ5KDUwKShcclxuICAgIGFzeW5jIChpZHM6IFNwb3RpZnlJRFtdKSA9PlxyXG4gICAgICAgIChhd2FpdCBTcGljZXRpZnkuQ29zbW9zQXN5bmMuZ2V0KGBodHRwczovL2FwaS5zcG90aWZ5LmNvbS92MS9hbGJ1bXM/aWRzPSR7aWRzLmpvaW4oXCIsXCIpfWApKVxyXG4gICAgICAgICAgICAuYWxidW1zIGFzIFNwb3RBcGlBbGJ1bVtdLFxyXG4pXHJcblxyXG5leHBvcnQgY29uc3QgZmV0Y2hXZWJUcmFja3NTcG90ID0gY2h1bmNraWZ5KDUwKShcclxuICAgIGFzeW5jIChpZHM6IFNwb3RpZnlJRFtdKSA9PlxyXG4gICAgICAgIChhd2FpdCBTcGljZXRpZnkuQ29zbW9zQXN5bmMuZ2V0KGBodHRwczovL2FwaS5zcG90aWZ5LmNvbS92MS90cmFja3M/aWRzPSR7aWRzLmpvaW4oXCIsXCIpfWApKVxyXG4gICAgICAgICAgICAudHJhY2tzIGFzIFNwb3RBcGlUcmFja1tdLFxyXG4pXHJcblxyXG5leHBvcnQgY29uc3Qgc2VhcmNoV2ViSXRlbVNwb3QgPSBhc3luYyAocTogc3RyaW5nLCB0eXBlOiBzdHJpbmdbXSkgPT5cclxuICAgIFNwaWNldGlmeS5Db3Ntb3NBc3luYy5nZXQoYGh0dHBzOi8vYXBpLnNwb3RpZnkuY29tL3YxL3NlYXJjaD9xPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHEpfSZ0eXBlPSR7dHlwZS5qb2luKFwiLFwiKX1gKVxyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoV2ViU291bmRPZlNwb3RpZnlQbGF5bGlzdCA9IGFzeW5jIChnZW5yZTogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zdCBuYW1lID0gYFRoZSBTb3VuZCBPZiAke2dlbnJlfWBcclxuICAgIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChgXiR7ZXNjYXBlUmVnZXgobmFtZSl9JGAsIFwiaVwiKVxyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgc2VhcmNoV2ViSXRlbVNwb3QobmFtZSwgW1wicGxheWxpc3RcIl0pXHJcbiAgICBjb25zdCBpdGVtID0gcmVzLnBsYXlsaXN0cy5pdGVtc1swXVxyXG4gICAgcmV0dXJuIGl0ZW0/Lm93bmVyLmlkID09PSBcInRoZXNvdW5kc29mc3BvdGlmeVwiICYmIHJlLnRlc3QoaXRlbS5uYW1lKSA/IGl0ZW0udXJpIDogbnVsbFxyXG59XHJcblxyXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgUGxhdGZvcm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoUGxhdExpa2VkVHJhY2tzID0gYXN5bmMgKCkgPT5cclxuICAgIChcclxuICAgICAgICBhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uTGlicmFyeUFQSS5nZXRUcmFja3Moe1xyXG4gICAgICAgICAgICBsaW1pdDogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsXHJcbiAgICAgICAgfSlcclxuICAgICkuaXRlbXMgYXMgZmV0Y2hQbGF0QXJ0aXN0TGlrZWRUcmFja3NSZXNcclxuZXhwb3J0IGNvbnN0IGZldGNoUGxhdEFydGlzdExpa2VkVHJhY2tzID0gYXN5bmMgKHVyaTogU3BvdGlmeVVSSSwgb2Zmc2V0ID0gMCwgbGltaXQgPSAxMDApID0+XHJcbiAgICAoYXdhaXQgU3BpY2V0aWZ5LlBsYXRmb3JtLkxpYnJhcnlBUEkuZ2V0VHJhY2tzKHsgdXJpLCBvZmZzZXQsIGxpbWl0IH0pKS5pdGVtcyBhcyBmZXRjaFBsYXRBcnRpc3RMaWtlZFRyYWNrc1Jlc1xyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoUGxhdFBsYXlsaXN0Q29udGVudHMgPSBhc3luYyAodXJpOiBTcG90aWZ5VVJJKSA9PlxyXG4gICAgKGF3YWl0IFNwaWNldGlmeS5QbGF0Zm9ybS5QbGF5bGlzdEFQSS5nZXRDb250ZW50cyh1cmkpKS5pdGVtcyBhcyBmZXRjaFdlYlBsYXlsaXN0UmVzXHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlUGxhdEZvbGRlciA9IGFzeW5jIChuYW1lOiBzdHJpbmcsIGxvY2F0aW9uOiBTcG90aWZ5TG9jT2JqID0ge30pID0+XHJcbiAgICBhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uUm9vdGxpc3RBUEkuY3JlYXRlRm9sZGVyKG5hbWUsIGxvY2F0aW9uKVxyXG5cclxuZXhwb3J0IGNvbnN0IGxpa2VQbGF0UGxheWxpc3QgPSBhc3luYyAodXJpOiBTcG90aWZ5VVJJKSA9PiBhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uUm9vdGxpc3RBUEkuYWRkKFt1cmldKVxyXG5cclxuLyogUmVwbGFjZWQgYnkgY3JlYXRlU1BQbGF5bGlzdEZyb21UcmFja3MgKi9cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVBsYXRQbGF5bGlzdCA9IGFzeW5jIChuYW1lOiBzdHJpbmcsIGxvY2F0aW9uOiBTcG90aWZ5TG9jT2JqID0ge30pID0+XHJcbiAgICBhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uUm9vdGxpc3RBUEkuY3JlYXRlUGxheWxpc3QobmFtZSwgbG9jYXRpb24pXHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlU1BQbGF5bGlzdEZyb21UcmFja3MgPSAobmFtZTogc3RyaW5nLCB0cmFja3M6IFNwb3RpZnlVUklbXSwgZm9sZGVyPzogU3BvdGlmeVVSSSkgPT5cclxuICAgIFNwaWNldGlmeS5Db3Ntb3NBc3luYy5wb3N0KFwic3A6Ly9jb3JlLXBsYXlsaXN0L3YxL3Jvb3RsaXN0P3Jlc3BvbnNlRm9ybWF0PXByb3RvYnVmSnNvblwiLCB7XHJcbiAgICAgICAgb3BlcmF0aW9uOiBcImNyZWF0ZVwiLFxyXG4gICAgICAgIC4uLihmb2xkZXIgPyB7IGFmdGVyOiBmb2xkZXIgfSA6IHt9KSxcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIHBsYXlsaXN0OiB0cnVlLFxyXG4gICAgICAgIHVyaXM6IHRyYWNrcyxcclxuICAgIH0pXHJcblxyXG5leHBvcnQgY29uc3Qgc2V0UGxhdFBsYXlsaXN0VmlzaWJpbGl0eSA9IGFzeW5jIChwbGF5bGlzdDogU3BvdGlmeVVSSSwgdmlzaWJsZUZvckFsbDogYm9vbGVhbikgPT5cclxuICAgIGF3YWl0IFNwaWNldGlmeS5QbGF0Zm9ybS5QbGF5bGlzdFBlcm1pc3Npb25zQVBJLnNldEJhc2VQZXJtaXNzaW9uKHBsYXlsaXN0LCB2aXNpYmxlRm9yQWxsID8gXCJWSUVXRVJcIiA6IFwiQkxPQ0tFRFwiKVxyXG5leHBvcnQgY29uc3Qgc2V0UGxhdFBsYXlsaXN0UHVibGlzaGVkID0gYXN5bmMgKHBsYXlsaXN0OiBTcG90aWZ5VVJJLCBwdWJsaXNoZWQ6IGJvb2xlYW4pID0+XHJcbiAgICBhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uUm9vdGxpc3RBUEkuc2V0UHVibGlzaGVkU3RhdGUocGxheWxpc3QsIHB1Ymxpc2hlZClcclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaFBsYXRGb2xkZXIgPSBhc3luYyAoZm9sZGVyPzogU3BvdGlmeVVSSSkgPT5cclxuICAgIChhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uUm9vdGxpc3RBUEkuZ2V0Q29udGVudHMoeyBmb2xkZXJVcmk6IGZvbGRlciB9KSkgYXMgZmV0Y2hQbGF0Rm9sZGVyUmVzXHJcbmV4cG9ydCBjb25zdCBmZXRjaFBsYXRSb290Rm9sZGVyID0gKCkgPT4gZmV0Y2hQbGF0Rm9sZGVyKHVuZGVmaW5lZClcclxuXHJcbmV4cG9ydCBjb25zdCBhZGRQbGF0UGxheWxpc3RUcmFja3MgPSBhc3luYyAocGxheWxpc3Q6IFNwb3RpZnlVUkksIHRyYWNrczogU3BvdGlmeVVSSVtdLCBsb2NhdGlvbjogU3BvdGlmeUxvY09iaiA9IHt9KSA9PlxyXG4gICAgYXdhaXQgU3BpY2V0aWZ5LlBsYXRmb3JtLlBsYXlsaXN0QVBJLmFkZChwbGF5bGlzdCwgdHJhY2tzLCBsb2NhdGlvbilcclxuXHJcbmV4cG9ydCBjb25zdCBtb3ZlUGxhdFBsYXlsaXN0VHJhY2tzID0gYXN5bmMgKFxyXG4gICAgcGxheWxpc3Q6IFNwb3RpZnlVUkksXHJcbiAgICB0cmFja3M6IEFycmF5PHsgdWlkOiBzdHJpbmcgfT4sXHJcbiAgICBsb2NhdGlvbjogU3BvdGlmeUxvY09iaiA9IHt9LFxyXG4pID0+IGF3YWl0IFNwaWNldGlmeS5QbGF0Zm9ybS5QbGF5bGlzdEFQSS5tb3ZlKHBsYXlsaXN0LCB0cmFja3MsIGxvY2F0aW9uKVxyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZVBsYXRQbGF5bGlzdFRyYWNrcyA9IGFzeW5jIChwbGF5bGlzdDogU3BvdGlmeVVSSSwgdHJhY2tzOiBBcnJheTx7IHVpZDogc3RyaW5nIH0+KSA9PlxyXG4gICAgU3BpY2V0aWZ5LlBsYXRmb3JtLlBsYXlsaXN0QVBJLnJlbW92ZShwbGF5bGlzdCwgdHJhY2tzKVxyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoUGxhdFBsYXlsaXN0RW5oYW5jZWRTb25nczMwMCA9IGFzeW5jICh1cmk6IFNwb3RpZnlVUkksIG9mZnNldCA9IDAsIGxpbWl0ID0gMzAwKSA9PlxyXG4gICAgKGF3YWl0IFNwaWNldGlmeS5QbGF0Zm9ybS5FbmhhbmNlQVBJLmdldFBhZ2UodXJpLCAvKiBpdGVyYXRpb24gKi8gMCwgLyogc2Vzc2lvbklkICovIDAsIG9mZnNldCwgbGltaXQpKS5lbmhhbmNlUGFnZVxyXG4gICAgICAgIC5wYWdlSXRlbXMgYXMgYW55W11cclxuZXhwb3J0IGNvbnN0IGZldGNoUGxhdFBsYXlsaXN0RW5oYW5jZWRTb25ncyA9IGFzeW5jICh1cmk6IFNwb3RpZnlVUkksIG9mZnNldCA9IDApOiBQcm9taXNlPGFueVtdPiA9PiB7XHJcbiAgICBjb25zdCBuZXh0UGFnZUl0ZW1zID0gYXdhaXQgZmV0Y2hQbGF0UGxheWxpc3RFbmhhbmNlZFNvbmdzMzAwKHVyaSwgb2Zmc2V0KVxyXG4gICAgaWYgKG5leHRQYWdlSXRlbXM/Lmxlbmd0aCA8IDMwMCkgcmV0dXJuIG5leHRQYWdlSXRlbXNcclxuICAgIGVsc2UgcmV0dXJuIG5leHRQYWdlSXRlbXMuY29uY2F0KGZldGNoUGxhdFBsYXlsaXN0RW5oYW5jZWRTb25ncyh1cmksIG9mZnNldCArIDMwMCkpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaExvY2FsVHJhY2tzID0gYXN5bmMgKCkgPT4gYXdhaXQgU3BpY2V0aWZ5LlBsYXRmb3JtLkxvY2FsRmlsZXNBUEkuZ2V0VHJhY2tzKClcclxuXHJcbi8qICAgICAgICAgICAgICAgICAgICAgICAgICBOb24gU3BvdGlmeSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXHJcblxyXG5leHBvcnQgY29uc3QgZmV0Y2hUcmFja0xGTUFQSSA9IGFzeW5jIChMRk1BcGlLZXk6IHN0cmluZywgYXJ0aXN0OiBzdHJpbmcsIHRyYWNrTmFtZTogc3RyaW5nLCBsYXN0Rm1Vc2VybmFtZSA9IFwiXCIpID0+IHtcclxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoXCJodHRwczovL3dzLmF1ZGlvc2Nyb2JibGVyLmNvbS8yLjAvXCIpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcIm1ldGhvZFwiLCBcInRyYWNrLmdldEluZm9cIilcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwiYXBpX2tleVwiLCBMRk1BcGlLZXkpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcImFydGlzdFwiLCBhcnRpc3QpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcInRyYWNrXCIsIHRyYWNrTmFtZSlcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwiZm9ybWF0XCIsIFwianNvblwiKVxyXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJ1c2VybmFtZVwiLCBsYXN0Rm1Vc2VybmFtZSlcclxuXHJcbiAgICByZXR1cm4gKGF3YWl0IGZldGNoKHVybCkudGhlbihyZXMgPT4gcmVzLmpzb24oKSkpIGFzIGZldGNoVHJhY2tMRk1BUElSZXNcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoVHJhY2tMRk1BUElNZW1vaXplZCA9IG1lbW9pemUyKGZldGNoVHJhY2tMRk1BUEkpXHJcblxyXG5leHBvcnQgY29uc3Qgc2VhcmNoWW91dHViZSA9IGFzeW5jIChZb3VUdWJlQXBpS2V5OiBzdHJpbmcsIHNlYXJjaFN0cmluZzogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20veW91dHViZS92My9zZWFyY2hcIilcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwicGFydFwiLCBcInNuaXBwZXRcIilcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwibWF4UmVzdWx0c1wiLCBcIjEwXCIpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcInFcIiwgc2VhcmNoU3RyaW5nKVxyXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJ0eXBlXCIsIFwidmlkZW9cIilcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwia2V5XCIsIFlvdVR1YmVBcGlLZXkpXHJcblxyXG4gICAgcmV0dXJuIChhd2FpdCBmZXRjaCh1cmwpLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpKSBhcyBhbnlbXVxyXG59XHJcblxyXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgVHlwZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBmZXRjaEdRTEFsYnVtUmVzIHtcclxuICAgIF9fdHlwZW5hbWU6IFwiYWxidW1cIlxyXG4gICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIGFydGlzdHM6IHtcclxuICAgICAgICB0b3RhbENvdW50OiBudW1iZXJcclxuICAgICAgICBpdGVtczogQXJyYXk8e1xyXG4gICAgICAgICAgICBpZDogc3RyaW5nXHJcbiAgICAgICAgICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgICAgICAgICBwcm9maWxlOiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBzdHJpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2aXN1YWxzOiB7XHJcbiAgICAgICAgICAgICAgICBhdmF0YXJJbWFnZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXM6IFNwb3RBcGlJbWFnZVtdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2hhcmluZ0luZm86IHtcclxuICAgICAgICAgICAgICAgIHNoYXJlVXJsOiBzdHJpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0+XHJcbiAgICB9XHJcbiAgICBjb3ZlckFydDoge1xyXG4gICAgICAgIGV4dHJhY3RlZENvbG9yczoge1xyXG4gICAgICAgICAgICBjb2xvclJhdzoge1xyXG4gICAgICAgICAgICAgICAgaGV4OiBzdHJpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb2xvckxpZ2h0OiB7XHJcbiAgICAgICAgICAgICAgICBoZXg6IHN0cmluZ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbG9yRGFyazoge1xyXG4gICAgICAgICAgICAgICAgaGV4OiBzdHJpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzb3VyY2VzOiBTcG90QXBpSW1hZ2VbXVxyXG4gICAgfVxyXG4gICAgZGlzY3M6IHtcclxuICAgICAgICB0b3RhbENvdW50OiBudW1iZXJcclxuICAgICAgICBpdGVtczogQXJyYXk8e1xyXG4gICAgICAgICAgICBudW1iZXI6IG51bWJlclxyXG4gICAgICAgICAgICB0cmFja3M6IHtcclxuICAgICAgICAgICAgICAgIHRvdGFsQ291bnQ6IG51bWJlclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfT5cclxuICAgIH1cclxuICAgIHJlbGVhc2VzOiB7XHJcbiAgICAgICAgdG90YWxDb3VudDogbnVtYmVyXHJcbiAgICAgICAgaXRlbXM6IEFycmF5PHtcclxuICAgICAgICAgICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICAgICAgICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgICAgIH0+XHJcbiAgICB9XHJcbiAgICB0eXBlOiBzdHJpbmdcclxuICAgIGRhdGU6IHtcclxuICAgICAgICBpc29TdHJpbmc6IHN0cmluZ1xyXG4gICAgICAgIHByZWNpc2lvbjogc3RyaW5nXHJcbiAgICB9XHJcbiAgICBwbGF5YWJpbGl0eToge1xyXG4gICAgICAgIHBsYXlhYmxlOiBib29sZWFuXHJcbiAgICAgICAgcmVhc29uOiBzdHJpbmdcclxuICAgIH1cclxuICAgIGxhYmVsOiBzdHJpbmdcclxuICAgIGNvcHlyaWdodDoge1xyXG4gICAgICAgIHRvdGFsQ291bnQ6IG51bWJlclxyXG4gICAgICAgIGl0ZW1zOiBBcnJheTx7XHJcbiAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gICAgICAgICAgICB0ZXh0OiBzdHJpbmdcclxuICAgICAgICB9PlxyXG4gICAgfVxyXG4gICAgY291cnRlc3lMaW5lOiBzdHJpbmdcclxuICAgIHNhdmVkOiBib29sZWFuXHJcbiAgICBzaGFyaW5nSW5mbzoge1xyXG4gICAgICAgIHNoYXJlVXJsOiBzdHJpbmdcclxuICAgICAgICBzaGFyZUlkOiBzdHJpbmdcclxuICAgIH1cclxuICAgIHRyYWNrczoge1xyXG4gICAgICAgIHRvdGFsQ291bnQ6IG51bWJlclxyXG4gICAgICAgIGl0ZW1zOiBBcnJheTx7XHJcbiAgICAgICAgICAgIHVpZDogc3RyaW5nXHJcbiAgICAgICAgICAgIHRyYWNrOiB7XHJcbiAgICAgICAgICAgICAgICBzYXZlZDogYm9vbGVhblxyXG4gICAgICAgICAgICAgICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgIHBsYXljb3VudDogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICBkaXNjTnVtYmVyOiBudW1iZXJcclxuICAgICAgICAgICAgICAgIHRyYWNrTnVtYmVyOiBudW1iZXJcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRSYXRpbmc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZWxpbmtpbmdJbmZvcm1hdGlvbjogYW55XHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsTWlsbGlzZWNvbmRzOiBudW1iZXJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHBsYXlhYmlsaXR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxheWFibGU6IGJvb2xlYW5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFydGlzdHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtczogQXJyYXk8e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmk6IFNwb3RpZnlVUklcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9PlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfT5cclxuICAgIH1cclxuICAgIG1vcmVBbGJ1bXNCeUFydGlzdDoge1xyXG4gICAgICAgIGl0ZW1zOiBBcnJheTx7XHJcbiAgICAgICAgICAgIGRpc2NvZ3JhcGh5OiB7XHJcbiAgICAgICAgICAgICAgICBwb3B1bGFyUmVsZWFzZXNBbGJ1bXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtczogQXJyYXk8e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVtYmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY292ZXJBcnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXM6IFNwb3RBcGlJbWFnZVtdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWFiaWxpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlhYmxlOiBib29sZWFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJpbmdJbmZvOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFyZUlkOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlVXJsOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICB9PlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfT5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgZmV0Y2hHUUxBcnRpc3RSZWxhdGVkUmVzID0gQXJyYXk8e1xyXG4gICAgaWQ6IHN0cmluZ1xyXG4gICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICBwcm9maWxlOiB7XHJcbiAgICAgICAgbmFtZTogc3RyaW5nXHJcbiAgICB9XHJcbiAgICB2aXN1YWxzOiB7XHJcbiAgICAgICAgYXZhdGFySW1hZ2U6IHtcclxuICAgICAgICAgICAgc291cmNlczogU3BvdEFwaUltYWdlW11cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0+XHJcblxyXG5leHBvcnQgdHlwZSBmZXRjaFBsYXRBcnRpc3RMaWtlZFRyYWNrc1JlcyA9IEFycmF5PHtcclxuICAgIHR5cGU6IHN0cmluZ1xyXG4gICAgdXJpOiBzdHJpbmdcclxuICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgZHVyYXRpb246IFNwb3RBcGlEdXJhdGlvblxyXG4gICAgYWxidW06IFNwb3RBcGlBbGJ1bU1pblxyXG4gICAgYXJ0aXN0czogU3BvdEFwaUFydGlzdE1pbltdXHJcbiAgICBkaXNjTnVtYmVyOiBudW1iZXJcclxuICAgIHRyYWNrTnVtYmVyOiBudW1iZXJcclxuICAgIGlzRXhwbGljaXQ6IGJvb2xlYW5cclxuICAgIGlzUGxheWFibGU6IGJvb2xlYW5cclxuICAgIGlzTG9jYWw6IGJvb2xlYW5cclxuICAgIGlzMTlQbHVzT25seTogYm9vbGVhblxyXG4gICAgYWRkZWRBdDogc3RyaW5nXHJcbn0+XHJcblxyXG5leHBvcnQgdHlwZSBmZXRjaFdlYlBsYXlsaXN0UmVzID0gQXJyYXk8e1xyXG4gICAgdWlkOiBzdHJpbmdcclxuICAgIHBsYXlJbmRleDogbnVsbFxyXG4gICAgYWRkZWRBdDogc3RyaW5nXHJcbiAgICBhZGRlZEJ5OiB7XHJcbiAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAgICAgICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICAgICAgdXNlcm5hbWU6IHN0cmluZ1xyXG4gICAgICAgIGRpc3BsYXlOYW1lOiBzdHJpbmdcclxuICAgICAgICBpbWFnZXM6IFNwb3RBcGlJbWFnZTJbXVxyXG4gICAgfVxyXG4gICAgZm9ybWF0TGlzdEF0dHJpYnV0ZXM6IHt9XHJcbiAgICB0eXBlOiBcInRyYWNrXCJcclxuICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgbmFtZTogc3RyaW5nXHJcbiAgICBhbGJ1bTogU3BvdEFwaUFsYnVtTWluXHJcbiAgICBhcnRpc3RzOiBTcG90QXBpQXJ0aXN0TWluW11cclxuICAgIGRpc2NOdW1iZXI6IG51bWJlclxyXG4gICAgdHJhY2tOdW1iZXI6IG51bWJlclxyXG4gICAgZHVyYXRpb246IFNwb3RBcGlEdXJhdGlvblxyXG4gICAgaXNFeHBsaWNpdDogYm9vbGVhblxyXG4gICAgaXNMb2NhbDogYm9vbGVhblxyXG4gICAgaXNQbGF5YWJsZTogYm9vbGVhblxyXG4gICAgaXMxOVBsdXNPbmx5OiBib29sZWFuXHJcbn0+XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIGZldGNoVHJhY2tMRk1BUElSZXMge1xyXG4gICAgdHJhY2s6IHtcclxuICAgICAgICBuYW1lOiBzdHJpbmdcclxuICAgICAgICBtYmlkOiBzdHJpbmdcclxuICAgICAgICB1cmw6IHN0cmluZ1xyXG4gICAgICAgIGR1cmF0aW9uOiBzdHJpbmdcclxuICAgICAgICBzdHJlYW1hYmxlOiB7XHJcbiAgICAgICAgICAgIFwiI3RleHRcIjogc3RyaW5nXHJcbiAgICAgICAgICAgIGZ1bGx0cmFjazogc3RyaW5nXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpc3RlbmVyczogc3RyaW5nXHJcbiAgICAgICAgcGxheWNvdW50OiBzdHJpbmdcclxuICAgICAgICBhcnRpc3Q6IHtcclxuICAgICAgICAgICAgbmFtZTogc3RyaW5nXHJcbiAgICAgICAgICAgIG1iaWQ6IHN0cmluZ1xyXG4gICAgICAgICAgICB1cmw6IHN0cmluZ1xyXG4gICAgICAgIH1cclxuICAgICAgICBhbGJ1bToge1xyXG4gICAgICAgICAgICBhcnRpc3Q6IHN0cmluZ1xyXG4gICAgICAgICAgICB0aXRsZTogc3RyaW5nXHJcbiAgICAgICAgICAgIG1iaWQ6IHN0cmluZ1xyXG4gICAgICAgICAgICB1cmw6IHN0cmluZ1xyXG4gICAgICAgICAgICBpbWFnZTogQXJyYXk8e1xyXG4gICAgICAgICAgICAgICAgXCIjdGV4dFwiOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgIHNpemU6IHN0cmluZ1xyXG4gICAgICAgICAgICB9PlxyXG4gICAgICAgICAgICBcIkBhdHRyXCI6IHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBzdHJpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB1c2VycGxheWNvdW50OiBzdHJpbmdcclxuICAgICAgICB1c2VybG92ZWQ6IHN0cmluZ1xyXG4gICAgICAgIHRvcHRhZ3M6IHtcclxuICAgICAgICAgICAgdGFnOiBBcnJheTx7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgIHVybDogc3RyaW5nXHJcbiAgICAgICAgICAgIH0+XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdpa2k6IHtcclxuICAgICAgICAgICAgcHVibGlzaGVkOiBzdHJpbmdcclxuICAgICAgICAgICAgc3VtbWFyeTogc3RyaW5nXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHN0cmluZ1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy9cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUFsYnVtTWluIHtcclxuICAgIHR5cGU6IFwiYWxidW1cIlxyXG4gICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIGFydGlzdDogU3BvdEFwaUFydGlzdE1pblxyXG4gICAgaW1hZ2VzOiBTcG90QXBpSW1hZ2UyW11cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTcG90QXBpSW1hZ2UyIHtcclxuICAgIHVybDogc3RyaW5nXHJcbiAgICBsYWJlbDogXCJzbWFsbFwiIHwgXCJzdGFuZGFyZFwiIHwgXCJsYXJnZVwiIHwgXCJ4bGFyZ2VcIlxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RBcGlUcmFjayB7XHJcbiAgICBhbGJ1bTogU3BvdEFwaUFsYnVtXHJcbiAgICBhcnRpc3RzOiBTcG90QXBpQXJ0aXN0W11cclxuICAgIGF2YWlsYWJsZV9tYXJrZXRzOiBzdHJpbmdbXVxyXG4gICAgZGlzY19udW1iZXI6IG51bWJlclxyXG4gICAgZHVyYXRpb25fbXM6IG51bWJlclxyXG4gICAgZXhwbGljaXQ6IGJvb2xlYW5cclxuICAgIGV4dGVybmFsX2lkczogU3BvdEFwaUVJRHNcclxuICAgIGV4dGVybmFsX3VybHM6IFNwb3RBcGlFVXJsc1xyXG4gICAgaHJlZjogc3RyaW5nXHJcbiAgICBpZDogc3RyaW5nXHJcbiAgICBpc19wbGF5YWJsZTogYm9vbGVhblxyXG4gICAgbGlua2VkX2Zyb206IHt9XHJcbiAgICByZXN0cmljdGlvbnM6IFNwb3RBcGlSZXN0cmljdGlvbnNcclxuICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgcG9wdWxhcml0eTogbnVtYmVyXHJcbiAgICBwcmV2aWV3X3VybDogc3RyaW5nXHJcbiAgICB0cmFja19udW1iZXI6IG51bWJlclxyXG4gICAgdHlwZTogc3RyaW5nXHJcbiAgICB1cmk6IFNwb3RpZnlVUklcclxuICAgIGlzX2xvY2FsOiBib29sZWFuXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUFydGlzdCB7XHJcbiAgICBleHRlcm5hbF91cmxzOiBTcG90QXBpRVVybHNcclxuICAgIGZvbGxvd2VyczogU3BvdEFwaUZvbGxvd2Vyc1xyXG4gICAgZ2VucmVzOiBzdHJpbmdbXVxyXG4gICAgaHJlZjogc3RyaW5nXHJcbiAgICBpZDogc3RyaW5nXHJcbiAgICBpbWFnZXM6IFNwb3RBcGlJbWFnZVtdXHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIHBvcHVsYXJpdHk6IG51bWJlclxyXG4gICAgdHlwZTogc3RyaW5nXHJcbiAgICB1cmk6IFNwb3RpZnlVUklcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTcG90QXBpQXJ0aXN0TWluIHtcclxuICAgIHR5cGU6IFwiYXJ0aXN0XCJcclxuICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgbmFtZTogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUFsYnVtIHtcclxuICAgIGFsYnVtX3R5cGU6IHN0cmluZ1xyXG4gICAgdG90YWxfdHJhY2tzOiBudW1iZXJcclxuICAgIGF2YWlsYWJsZV9tYXJrZXRzOiBzdHJpbmdbXVxyXG4gICAgZXh0ZXJuYWxfdXJsczogU3BvdEFwaUVVcmxzXHJcbiAgICBocmVmOiBzdHJpbmdcclxuICAgIGlkOiBzdHJpbmdcclxuICAgIGltYWdlczogU3BvdEFwaUltYWdlW11cclxuICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgcmVsZWFzZV9kYXRlOiBzdHJpbmdcclxuICAgIHJlbGVhc2VfZGF0ZV9wcmVjaXNpb246IHN0cmluZ1xyXG4gICAgcmVzdHJpY3Rpb25zOiBTcG90QXBpUmVzdHJpY3Rpb25zXHJcbiAgICB0eXBlOiBzdHJpbmdcclxuICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgY29weXJpZ2h0czogQXJyYXk8e1xyXG4gICAgICAgIHRleHQ6IHN0cmluZ1xyXG4gICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gICAgfT5cclxuICAgIGV4dGVybmFsX2lkczogU3BvdEFwaUVJRHNcclxuICAgIGdlbnJlczogc3RyaW5nW11cclxuICAgIGxhYmVsOiBzdHJpbmdcclxuICAgIHBvcHVsYXJpdHk6IG51bWJlclxyXG4gICAgYWxidW1fZ3JvdXA6IHN0cmluZ1xyXG4gICAgYXJ0aXN0czogQXJyYXk8e1xyXG4gICAgICAgIGV4dGVybmFsX3VybHM6IFNwb3RBcGlFVXJsc1xyXG4gICAgICAgIGhyZWY6IHN0cmluZ1xyXG4gICAgICAgIGlkOiBzdHJpbmdcclxuICAgICAgICBuYW1lOiBzdHJpbmdcclxuICAgICAgICB0eXBlOiBzdHJpbmdcclxuICAgICAgICB1cmk6IFNwb3RpZnlVUklcclxuICAgIH0+XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUVVcmxzIHtcclxuICAgIHNwb3RpZnk6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RBcGlFSURzIHtcclxuICAgIGlzcmM6IHN0cmluZ1xyXG4gICAgZWFuOiBzdHJpbmdcclxuICAgIHVwYzogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUltYWdlIHtcclxuICAgIHVybDogc3RyaW5nXHJcbiAgICB3aWR0aDogbnVtYmVyXHJcbiAgICBoZWlnaHQ6IG51bWJlclxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RBcGlSZXN0cmljdGlvbnMge1xyXG4gICAgcmVhc29uOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTcG90QXBpRm9sbG93ZXJzIHtcclxuICAgIGhyZWY6IHN0cmluZ1xyXG4gICAgdG90YWw6IG51bWJlclxyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUR1cmF0aW9uIHtcclxuICAgIG1pbGxpc2Vjb25kczogbnVtYmVyXHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBTcG90QXBpUGxheWxpc3Qge1xyXG4gICAgY29sbGFib3JhdGl2ZTogYm9vbGVhblxyXG4gICAgZGVzY3JpcHRpb246IHN0cmluZ1xyXG4gICAgZXh0ZXJuYWxfdXJsczogU3BvdEFwaUVVcmxzXHJcbiAgICBmb2xsb3dlcnM6IHtcclxuICAgICAgICBocmVmOiBzdHJpbmdcclxuICAgICAgICB0b3RhbDogbnVtYmVyXHJcbiAgICB9XHJcbiAgICBocmVmOiBzdHJpbmdcclxuICAgIGlkOiBTcG90aWZ5SURcclxuICAgIGltYWdlczogU3BvdEFwaUltYWdlW11cclxuICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgb3duZXI6IFNwb3RBcGlPd25lclxyXG4gICAgcHVibGljOiBib29sZWFuXHJcbiAgICBzbmFwc2hvdF9pZDogc3RyaW5nXHJcbiAgICB0cmFja3M6IHtcclxuICAgICAgICBocmVmOiBzdHJpbmdcclxuICAgICAgICBsaW1pdDogbnVtYmVyXHJcbiAgICAgICAgbmV4dDogc3RyaW5nXHJcbiAgICAgICAgb2Zmc2V0OiBudW1iZXJcclxuICAgICAgICBwcmV2aW91czogc3RyaW5nXHJcbiAgICAgICAgdG90YWw6IG51bWJlclxyXG4gICAgICAgIGl0ZW1zOiBBcnJheTx7XHJcbiAgICAgICAgICAgIGFkZGVkX2F0OiBzdHJpbmdcclxuICAgICAgICAgICAgYWRkZWRfYnk6IFNwb3RBcGlPd25lclxyXG4gICAgICAgICAgICBpc19sb2NhbDogYm9vbGVhblxyXG4gICAgICAgICAgICB0cmFjazogU3BvdEFwaVRyYWNrXHJcbiAgICAgICAgfT5cclxuICAgIH1cclxuICAgIHR5cGU6IHN0cmluZ1xyXG4gICAgdXJpOiBTcG90aWZ5VVJJXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaU93bmVyIHtcclxuICAgIGV4dGVybmFsX3VybHM6IFNwb3RBcGlFVXJsc1xyXG4gICAgZm9sbG93ZXJzPzoge1xyXG4gICAgICAgIGhyZWY6IHN0cmluZ1xyXG4gICAgICAgIHRvdGFsOiBudW1iZXJcclxuICAgIH1cclxuICAgIGhyZWY6IHN0cmluZ1xyXG4gICAgaWQ6IFNwb3RpZnlJRFxyXG4gICAgdHlwZTogc3RyaW5nXHJcbiAgICB1cmk6IFNwb3RpZnlVUklcclxuICAgIGRpc3BsYXlfbmFtZT86IHN0cmluZ1xyXG4gICAgbmFtZT86IHN0cmluZ1xyXG59XHJcblxyXG4vL1RPRE86IEJldHRlciBUUyBpbnRlcmZhY2UgZm9yIHJlY3Vyc2l2ZSBmZXRjaFBsYXRGb2xkZXJSZXNcclxuZXhwb3J0IGludGVyZmFjZSBmZXRjaFBsYXRGb2xkZXJSZXMge1xyXG4gICAgdHlwZTogXCJmb2xkZXJcIiB8IFwicGxhY2Vob2xkZXJcIiB8IFwicGxheWxpc3RcIlxyXG4gICAgYWRkZWRBdDogc3RyaW5nXHJcbiAgICBpdGVtcz86IEFycmF5PGZldGNoUGxhdEZvbGRlclJlcz5cclxuICAgIG5hbWU/OiBzdHJpbmdcclxuICAgIHVyaTogc3RyaW5nXHJcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZ1xyXG4gICAgaW1hZ2VzPzogU3BvdEFwaUltYWdlMltdXHJcbiAgICBtYWRlRm9yPzogbnVsbFxyXG4gICAgb3duZXI/OiB7XHJcbiAgICAgICAgdHlwZTogXCJ1c2VyXCJcclxuICAgICAgICB1cmk6IHN0cmluZ1xyXG4gICAgICAgIHVzZXJuYW1lOiBzdHJpbmdcclxuICAgICAgICBkaXNwbGF5TmFtZTogc3RyaW5nXHJcbiAgICAgICAgaW1hZ2VzOiBhbnlbXVxyXG4gICAgfVxyXG4gICAgdG90YWxMZW5ndGg/OiBudW1iZXJcclxuICAgIHVuZmlsdGVyZWRUb3RhbExlbmd0aD86IG51bWJlclxyXG4gICAgdG90YWxMaWtlcz86IG51bGxcclxuICAgIGR1cmF0aW9uPzogbnVsbFxyXG4gICAgaXNDb2xsYWJvcmF0aXZlPzogYm9vbGVhblxyXG4gICAgaXNMb2FkZWQ/OiBib29sZWFuXHJcbiAgICBpc093bmVkQnlTZWxmPzogYm9vbGVhblxyXG4gICAgaXNQdWJsaXNoZWQ/OiBib29sZWFuXHJcbiAgICBoYXNFcGlzb2Rlcz86IG51bGxcclxuICAgIGhhc1Nwb3RpZnlUcmFja3M/OiBudWxsXHJcbiAgICBoYXNTcG90aWZ5QXVkaW9ib29rcz86IG51bGxcclxuICAgIGNhbkFkZD86IGJvb2xlYW5cclxuICAgIGNhblJlbW92ZT86IGJvb2xlYW5cclxuICAgIGNhblBsYXk/OiBudWxsXHJcbiAgICBmb3JtYXRMaXN0RGF0YT86IHtcclxuICAgICAgICB0eXBlOiBzdHJpbmdcclxuICAgICAgICBhdHRyaWJ1dGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9XHJcbiAgICB9IHwgbnVsbFxyXG4gICAgY2FuUmVwb3J0QW5ub3RhdGlvbkFidXNlPzogYm9vbGVhblxyXG4gICAgaGFzRGF0ZUFkZGVkPzogYm9vbGVhblxyXG4gICAgcGVybWlzc2lvbnM/OiBudWxsXHJcbiAgICBjb2xsYWJvcmF0b3JzPzoge1xyXG4gICAgICAgIGNvdW50OiBudW1iZXJcclxuICAgICAgICBpdGVtczogYW55W11cclxuICAgIH1cclxuICAgIGlzTm90Rm91bmQ/OiBib29sZWFuXHJcbiAgICBpc0ZvcmJpZGRlbj86IGJvb2xlYW5cclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiQUFBQSxPQUFTLFdBQUFBLE1BQWUscUNBQ3hCLE9BQVMsVUFBQUMsTUFBYyxnQ0NEdkIsT0FDSSxTQUFTQyxFQUNULE1BQUFDLEVBQ0EsVUFBVUMsRUFDVixVQUFVQyxFQUVWLGFBQWFDLEVBQ2IsWUFBWUMsTUFDVCx1QkFDUCxPQUFTLFNBQUFDLEVBQU8sV0FBQUMsTUFBZSxvQ0E2Q3hCLElBQU1DLEVBQ0ZDLEdBQ1AsTUFBT0MsR0FDSEQsRUFBRSxNQUFNQyxDQUFFLEVBZVgsSUFBTUMsRUFDUkMsR0FDTUMsR0FDSEMsRUFBRSxLQUFLQyxFQUFHLFNBQVNILENBQUMsRUFBTUcsRUFBRyxJQUFJRixDQUFDLEVBQUdHLEdBQU0sUUFBUSxJQUFJQSxDQUFFLEVBQUdDLEVBQVFGLEVBQUcsT0FBTyxDQUFDLEVBZ0JoRixJQUFNRyxFQUFnQ0MsR0FDekNDLEVBQUUsS0FBS0QsRUFBSUMsRUFBRSxPQUFRQyxFQUFXQyxFQUFHLFVBQVUsS0FBSyxTQUFTLEVBQUVDLEVBQUksRUFBRSxDQUFD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IiwgInNnIiwgImYiLCAiZ3VhcmQiLCAibWVtb2l6ZSIsICJwTWNoYWluIiwgImYiLCAiZmEiLCAiY2h1bmNraWZ5IiwgIm4iLCAiZyIsICJmIiwgImFyIiwgInBzIiwgInBNY2hhaW4iLCAibWVtb2l6ZTIiLCAiZm4iLCAiZiIsICJtZW1vaXplIiwgImVxIiwgInN0ciIsICJhIiwgImYiLCAiU3BvdGlmeUxvYyIsICJ1cmkiLCAidWlkIiwgImZldGNoV2ViQXJ0aXN0c1Nwb3QiLCAiY2h1bmNraWZ5IiwgImlkcyIsICJmZXRjaFdlYlBsYXlsaXN0c1Nwb3QiLCAiaWQiLCAiZmV0Y2hXZWJBbGJ1bXNTcG90IiwgImZldGNoV2ViVHJhY2tzU3BvdCIsICJmZXRjaFBsYXRQbGF5bGlzdEVuaGFuY2VkU29uZ3MzMDAiLCAidXJpIiwgIm9mZnNldCIsICJsaW1pdCIsICJmZXRjaFBsYXRQbGF5bGlzdEVuaGFuY2VkU29uZ3MiLCAibmV4dFBhZ2VJdGVtcyIsICJmZXRjaFRyYWNrTEZNQVBJIiwgIkxGTUFwaUtleSIsICJhcnRpc3QiLCAidHJhY2tOYW1lIiwgImxhc3RGbVVzZXJuYW1lIiwgInVybCIsICJyZXMiLCAiZmV0Y2hUcmFja0xGTUFQSU1lbW9pemVkIiwgIm1lbW9pemUyIiwgIlVSSSIsICJxdWV1ZSIsICJwbGF5RW5oYW5jZWRTb25ncyIsICJ1cmkiLCAiZmV0Y2hQbGF0UGxheWxpc3RFbmhhbmNlZFNvbmdzIiwgInR1cGxlZCIsICJhbnlQYXNzIl0KfQo=
