{
  "version": 3,
  "sources": ["../../shared/util.ts", "../../shared/platformApi.ts", "../../extensions/play-enhanced-songs/app.ts"],
  "sourcesContent": ["export type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nconst { URI } = Spicetify\r\nconst { PlayerAPI } = Spicetify.Platform\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: () => ({ before: \"start\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: () => ({ after: \"end\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport class PermanentMutationObserver extends MutationObserver {\r\n    target: HTMLElement | null = null\r\n\r\n    constructor(\r\n        targetSelector: string,\r\n        callback: MutationCallback,\r\n        opts: MutationObserverInit = {\r\n            childList: true,\r\n            subtree: true,\r\n        },\r\n    ) {\r\n        super(callback)\r\n        new MutationObserver(() => {\r\n            const nextTarget = document.querySelector<HTMLElement>(targetSelector)\r\n            if (nextTarget && !nextTarget.isEqualNode(this.target)) {\r\n                this.target && this.disconnect()\r\n                this.target = nextTarget\r\n                this.observe(this.target, opts)\r\n            }\r\n        }).observe(document.body, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n    }\r\n}\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 5000,\r\n    location = document.body,\r\n    notEl?: E | null,\r\n) =>\r\n    new Promise((resolve: (value: E) => void, reject) => {\r\n        const onMutation = () => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el) {\r\n                if (notEl && el === notEl) {\r\n                } else {\r\n                    observer.disconnect()\r\n                    return resolve(el)\r\n                }\r\n            }\r\n        }\r\n\r\n        const observer = new MutationObserver(onMutation)\r\n        onMutation()\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout)\r\n            setTimeout(() => {\r\n                observer.disconnect()\r\n                console.debug(\"waitForElement: timed out waiting for\", selector)\r\n                reject()\r\n            }, timeout)\r\n    })\r\n\r\nexport const formatUri = (uri: string) => URI.fromString(uri).toURI()\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const mainElement = document.querySelector(\"main\")!\r\nexport const [REACT_FIBER, REACT_PROPS] = Object.keys(mainElement)\r\n\r\nexport const createQueueItem =\r\n    (queued: boolean) =>\r\n    ({ uri, uid = \"\" }: { uri: string; uid?: string }) => ({\r\n        contextTrack: {\r\n            uri,\r\n            uid,\r\n            metadata: {\r\n                is_queued: queued.toString(),\r\n            },\r\n        },\r\n        removed: [],\r\n        blocked: [],\r\n        provider: queued ? (\"queue\" as const) : (\"context\" as const),\r\n    })\r\n\r\nexport const setQueue = async (\r\n    nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>,\r\n    contextUri?: string,\r\n) => {\r\n    const { _queue, _client } = PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    const res = await _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    })\r\n\r\n    await PlayerAPI.skipToNext()\r\n\r\n    if (contextUri) {\r\n        await new Promise<void>(resolve => {\r\n            PlayerAPI.getEvents().addListener(\"queue_update\", () => resolve(), { once: true })\r\n        })\r\n        await setPlayingContext(contextUri)\r\n    }\r\n\r\n    return res\r\n}\r\n\r\nexport const setPlayingContext = (uri: string) => {\r\n    const { sessionId } = PlayerAPI._state\r\n    return PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri })\r\n}\r\n", "import { SpotifyLoc, SpotifyURI } from \"./util.ts\"\r\n\r\nconst { CosmosAsync } = Spicetify\r\nconst { LibraryAPI, PlaylistAPI, RootlistAPI, PlaylistPermissionsAPI, EnhanceAPI, LocalFilesAPI } = Spicetify.Platform\r\n\r\nexport const areTracksLiked = (uris: SpotifyURI[]) => LibraryAPI.contains(...uris)\r\n\r\nexport const setTracksLiked = (uris: SpotifyURI[], liked: boolean) => LibraryAPI[liked ? \"add\" : \"remove\"]({ uris })\r\n\r\nexport const toggleTracksLiked = async (uris: SpotifyURI[]) => {\r\n    const liked = await areTracksLiked(uris)\r\n\r\n    const urisByLiked = Object.groupBy(uris, (_, index) => (liked[index] ? \"liked\" : \"notLiked\"))\r\n\r\n    const ps = []\r\n    urisByLiked.liked?.length && ps.push(setTracksLiked(urisByLiked.liked, false))\r\n    urisByLiked.notLiked?.length && ps.push(setTracksLiked(urisByLiked.notLiked, true))\r\n\r\n    return Promise.all(ps)\r\n}\r\n\r\nexport const fetchLikedTracks = async () =>\r\n    (\r\n        await LibraryAPI.getTracks({\r\n            limit: Number.MAX_SAFE_INTEGER,\r\n        })\r\n    ).items\r\nexport const fetchArtistLikedTracks = async (uri: SpotifyURI, offset = 0, limit = 100) =>\r\n    (await LibraryAPI.getTracks({ uri, offset, limit })).items\r\n\r\nexport const fetchPlaylistContents = async (uri: SpotifyURI) => (await PlaylistAPI.getContents(uri)).items\r\n\r\nexport const createFolder = async (name: string, location: Spicetify.Platform.RootlistAPI.Location = {}) =>\r\n    await RootlistAPI.createFolder(name, location)\r\n\r\nexport const addPlaylist = async (playlist: SpotifyURI, folder?: SpotifyURI) =>\r\n    await RootlistAPI.add([playlist], folder ? SpotifyLoc.after.fromUri(folder) : {})\r\n\r\n/* Replaced by createPlaylistFromTracks */\r\nexport const createPlaylist = async (name: string, location: Spicetify.Platform.RootlistAPI.Location = {}) =>\r\n    await RootlistAPI.createPlaylist(name, location)\r\n\r\nexport const createPlaylistFromTracks = (name: string, tracks: SpotifyURI[], folder?: SpotifyURI) =>\r\n    CosmosAsync.post(\"sp://core-playlist/v1/rootlist?responseFormat=protobufJson\", {\r\n        operation: \"create\",\r\n        ...(folder ? { after: folder } : {}),\r\n        name,\r\n        playlist: true,\r\n        uris: tracks,\r\n    })\r\n\r\nexport const setPlaylistVisibility = async (playlist: SpotifyURI, visibleForAll: boolean) =>\r\n    await PlaylistPermissionsAPI.setBasePermission(playlist, visibleForAll ? \"VIEWER\" : \"BLOCKED\")\r\nexport const setPlaylistPublished = async (playlist: SpotifyURI, published: boolean) =>\r\n    await RootlistAPI.setPublishedState(playlist, published)\r\n\r\nexport const fetchFolder = async (folder?: SpotifyURI) => await RootlistAPI.getContents({ folderUri: folder })\r\nexport const fetchRootFolder = () => fetchFolder(undefined)\r\n\r\nexport const addPlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    tracks: SpotifyURI[],\r\n    location: Spicetify.Platform.RootlistAPI.Location = {},\r\n) => await PlaylistAPI.add(playlist, tracks, location)\r\n\r\nexport const movePlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    uids: string[],\r\n    location: Spicetify.Platform.RootlistAPI.Location = {},\r\n) =>\r\n    await PlaylistAPI.move(\r\n        playlist,\r\n        uids.map(uid => ({ uid })),\r\n        location,\r\n    )\r\n\r\nexport const removePlaylistTracks = (playlist: SpotifyURI, tracks: Array<{ uid: string }>) =>\r\n    PlaylistAPI.remove(playlist, tracks)\r\n\r\nexport const fetchPlaylistEnhancedSongs300 = async (uri: SpotifyURI, offset = 0, limit = 300) =>\r\n    (await EnhanceAPI.getPage(uri, /* iteration */ 0, /* sessionId */ 0, offset, limit)).enhancePage.pageItems\r\nexport const fetchPlaylistEnhancedSongs = async (\r\n    uri: SpotifyURI,\r\n    offset = 0,\r\n): Promise<Array<Spicetify.Platform.EnhanceAPI.EnhanceItem>> => {\r\n    const nextPageItems = await fetchPlaylistEnhancedSongs300(uri, offset)\r\n    if (nextPageItems?.length < 300) return nextPageItems\r\n    else return nextPageItems.concat(await fetchPlaylistEnhancedSongs(uri, offset + 300))\r\n}\r\n\r\nexport const fetchLocalTracks = async () => await LocalFilesAPI.getTracks()\r\n", "import { fetchPlaylistEnhancedSongs } from \"../../shared/platformApi.ts\"\r\nimport { SpotifyURI } from \"../../shared/util.ts\"\r\n\r\nconst { URI, ContextMenu } = Spicetify\r\nconst { PlayerAPI } = Spicetify.Platform\r\n\r\nconst playEnhancedSongs = async (uri: SpotifyURI) => {\r\n    const queue = await fetchPlaylistEnhancedSongs(uri)\r\n    PlayerAPI.clearQueue()\r\n    PlayerAPI.addToQueue(queue)\r\n}\r\n\r\n// Menu\r\n\r\nnew ContextMenu.Item(\r\n    \"Play enhanced songs\",\r\n    ([uri]) => playEnhancedSongs(uri),\r\n    ([uri]) => URI.isPlaylistV1OrV2(uri),\r\n    \"enhance\",\r\n).register()\r\n"],
  "mappings": ";AAGA,IAAM,EAAE,IAAI,IAAI;AAChB,IAAM,EAAE,UAAU,IAAI,UAAU;AA0FzB,IAAM,cAAc,SAAS,cAAc,MAAM;AACjD,IAAM,CAAC,aAAa,WAAW,IAAI,OAAO,KAAK,WAAW;;;AC7FjE,IAAM,EAAE,YAAY,IAAI;AACxB,IAAM,EAAE,YAAY,aAAa,aAAa,wBAAwB,YAAY,cAAc,IAAI,UAAU;AA4EvG,IAAM,gCAAgC,OAAO,KAAiB,SAAS,GAAG,QAAQ,SACpF,MAAM,WAAW;AAAA,EAAQ;AAAA;AAAA,EAAqB;AAAA;AAAA,EAAmB;AAAA,EAAG;AAAA,EAAQ;AAAK,GAAG,YAAY;AAC9F,IAAM,6BAA6B,OACtC,KACA,SAAS,MACmD;AAC5D,QAAM,gBAAgB,MAAM,8BAA8B,KAAK,MAAM;AACrE,MAAI,eAAe,SAAS;AAAK,WAAO;AAAA;AACnC,WAAO,cAAc,OAAO,MAAM,2BAA2B,KAAK,SAAS,GAAG,CAAC;AACxF;;;ACrFA,IAAM,EAAE,KAAAA,MAAK,YAAY,IAAI;AAC7B,IAAM,EAAE,WAAAC,WAAU,IAAI,UAAU;AAEhC,IAAM,oBAAoB,OAAO,QAAoB;AACjD,QAAM,QAAQ,MAAM,2BAA2B,GAAG;AAClD,EAAAA,WAAU,WAAW;AACrB,EAAAA,WAAU,WAAW,KAAK;AAC9B;AAIA,IAAI,YAAY;AAAA,EACZ;AAAA,EACA,CAAC,CAAC,GAAG,MAAM,kBAAkB,GAAG;AAAA,EAChC,CAAC,CAAC,GAAG,MAAMD,KAAI,iBAAiB,GAAG;AAAA,EACnC;AACJ,EAAE,SAAS;",
  "names": ["URI", "PlayerAPI"]
}
