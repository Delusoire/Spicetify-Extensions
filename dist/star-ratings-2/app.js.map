{
  "version": 3,
  "sources": ["../../extensions/star-ratings-2/app.ts", "../../shared/util.ts", "../../extensions/star-ratings-2/controls.tsx", "../../shared/api.ts", "../../shared/fp.ts", "../../shared/platformApi.ts", "../../extensions/star-ratings-2/dropdown.tsx", "../../shared/modules.ts", "../../extensions/star-ratings-2/ratings.ts", "../../extensions/star-ratings-2/settings.ts", "../../shared/settings.tsx", "../../extensions/star-ratings-2/util.ts"],
  "sourcesContent": ["import { anyPass } from \"https://esm.sh/fp-ts-std/Predicate\"\r\n\r\nimport { onHistoryChanged, onSongChanged } from \"../../shared/util.ts\"\r\n\r\nimport { updateCollectionControls, updateNowPlayingControls, updateTrackListControls } from \"./controls.tsx\"\r\nimport { loadRatings, tracksRatings } from \"./ratings.ts\"\r\nimport { CONFIG } from \"./settings.ts\"\r\n\r\nimport \"./assets/styles.scss\"\r\nconst { URI } = Spicetify\r\n\r\nloadRatings()\r\n\r\nonSongChanged(data => {\r\n    if (!data) return\r\n    const { uri } = data.item\r\n\r\n    if (Number(CONFIG.skipThreshold)) {\r\n        const currentTrackRating = tracksRatings[uri] ?? Number.MAX_SAFE_INTEGER\r\n        if (currentTrackRating <= Number(CONFIG.skipThreshold)) return void Spicetify.Player.next()\r\n    }\r\n\r\n    updateNowPlayingControls(uri)\r\n})\r\n\r\nlet mainElement: HTMLElement\r\nconst mainElementObserver = new MutationObserver(() => updateTrackListControls())\r\n\r\nnew MutationObserver(() => {\r\n    const nextMainElement = document.querySelector<HTMLElement>(\"main\")\r\n    if (nextMainElement && !nextMainElement.isEqualNode(mainElement)) {\r\n        if (mainElement) mainElementObserver.disconnect()\r\n        mainElement = nextMainElement\r\n        mainElementObserver.observe(mainElement, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n    }\r\n}).observe(document.body, {\r\n    childList: true,\r\n    subtree: true,\r\n})\r\n\r\nonHistoryChanged(anyPass([URI.isAlbum, URI.isArtist, URI.isPlaylistV1OrV2]), uri =>\r\n    updateCollectionControls(URI.fromString(uri)),\r\n)\r\n", "import { function as f } from \"https://esm.sh/fp-ts\"\r\n\r\nexport type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nconst {} = Spicetify\r\nconst { PlayerAPI, History } = Spicetify.Platform\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: f.constant({ before: \"start\" }),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: f.constant({ after: \"end\" }),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const escapeRegex = (str: string) => str.replace(/[.*+?^${}()|[\\]\\\\]/g, `\\\\$&`)\r\n\r\nexport const titleCase = (str: string) => str.replace(/\\b\\w/g, l => l.toUpperCase())\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 1000,\r\n    location = document.body,\r\n    notEl?: E | null,\r\n) =>\r\n    new Promise((resolve: (value: Element) => void, reject) => {\r\n        const onMutation = () => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el) {\r\n                if (notEl && el === notEl) {\r\n                } else {\r\n                    observer.disconnect()\r\n                    return resolve(el)\r\n                }\r\n            }\r\n        }\r\n\r\n        const observer = new MutationObserver(onMutation)\r\n        onMutation()\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout)\r\n            setTimeout(() => {\r\n                observer.disconnect()\r\n                reject()\r\n            }, timeout)\r\n    })\r\n\r\nexport const trapElement = <E extends Element>(\r\n    selector: string,\r\n    callback: (el: E | null, lastEl: E | null) => void,\r\n    location = document.body,\r\n) => {\r\n    let lastEl: E | null = null\r\n\r\n    const observer = new MutationObserver(() => {\r\n        const el = document.querySelector<E>(selector)\r\n        if (el !== lastEl) callback(el, lastEl)\r\n        lastEl = el\r\n    })\r\n\r\n    observer.observe(location, {\r\n        childList: true,\r\n        subtree: true,\r\n    })\r\n}\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const getReactProps = (element: Element) =>\r\n    element[Object.keys(element).find(k => k.startsWith(\"__reactProps$\")) as keyof typeof element] as any\r\n\r\nexport const createQueueItem = (queued: boolean) => (uri: SpotifyURI) => ({\r\n    contextTrack: {\r\n        uri,\r\n        uid: \"\",\r\n        metadata: {\r\n            is_queued: queued.toString(),\r\n        },\r\n    },\r\n    removed: [],\r\n    blocked: [],\r\n    provider: queued ? (\"queue\" as const) : (\"context\" as const),\r\n})\r\n\r\nexport const setQueue = async (nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>) => {\r\n    const { _queue, _client } = PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    return _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    }) as Promise<{ error: number; reasons: string }>\r\n}\r\n\r\nexport const setPlayingContext = (uri: SpotifyURI) => {\r\n    const { sessionId } = PlayerAPI._state\r\n    return PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri })\r\n}\r\n\r\nexport const onHistoryChanged = (\r\n    toMatchTo: string | RegExp | ((location: string) => boolean),\r\n    callback: (uri: SpotifyURI) => void,\r\n    dropDuplicates = true,\r\n) => {\r\n    const createMatchFn = (toMatchTo: string | RegExp | ((input: string) => boolean)) => {\r\n        switch (typeof toMatchTo) {\r\n            case \"string\":\r\n                return (input: string) => input?.startsWith(toMatchTo) ?? false\r\n\r\n            case \"function\":\r\n                return toMatchTo\r\n\r\n            default:\r\n                return (input: string) => toMatchTo.test(input)\r\n        }\r\n    }\r\n\r\n    let lastPathname = \"\"\r\n    const matchFn = createMatchFn(toMatchTo)\r\n\r\n    const historyChanged = ({ pathname }: any) => {\r\n        if (matchFn(pathname)) {\r\n            if (dropDuplicates && lastPathname === pathname) {\r\n            } else callback(Spicetify.URI.fromString(pathname).toString())\r\n        }\r\n        lastPathname = pathname\r\n    }\r\n\r\n    historyChanged(History.location ?? {})\r\n    return History.listen(historyChanged)\r\n}\r\n\r\nexport const onSongChanged = (callback: (state?: Spicetify.PlayerState) => void) => {\r\n    callback(Spicetify.Player.data)\r\n    Spicetify.Player.addEventListener(\"songchange\", event => callback(event!.data))\r\n}\r\n", "import { array as ar, function as f } from \"https://esm.sh/fp-ts\"\r\n\r\nimport { Instance, Props } from \"npm:tippy.js\"\r\n\r\nimport { fetchGQLAlbum } from \"../../shared/api.ts\"\r\nimport { fetchArtistLikedTracks, fetchPlaylistContents } from \"../../shared/platformApi.ts\"\r\nimport { SpotifyURI } from \"../../shared/util.ts\"\r\n\r\nimport { Dropdown } from \"./dropdown.tsx\"\r\nimport { tracksRatings } from \"./ratings.ts\"\r\nimport {\r\n    getCollectionPlaylistButton,\r\n    getNowPlayingBar,\r\n    getPlaylistButton,\r\n    getTrackListTrackUri,\r\n    getTrackListTracks,\r\n    getTrackLists,\r\n} from \"./util.ts\"\r\n\r\nconst { URI } = Spicetify\r\nconst { React, ReactDOM } = Spicetify\r\n\r\nconst UNSET_CSS = \"invalid\"\r\nconst colorByRating = [UNSET_CSS, \"#ED5564\", \"#FFCE54\", \"A0D568\", \"#4FC1E8\", \"#AC92EB\"]\r\n\r\nconst colorizePlaylistButton = (btn: HTMLButtonElement, rating: number) => {\r\n    if (btn.style.fill === colorByRating[rating]) return\r\n\r\n    // Do we need this anymore?\r\n    btn.style.opacity = rating > 0 ? \"1\" : UNSET_CSS\r\n    const svg = btn.querySelector<SVGElement>(\"svg\")!\r\n    svg.style.fill = colorByRating[rating]\r\n}\r\n\r\nlet lastNPTippyInstance: Instance<Props>\r\nconst wrapDropdownInsidePlaylistButton = (pb: HTMLButtonElement, uri: SpotifyURI, forced = false) => {\r\n    if (pb.hasAttribute(\"dropdown-enabled\")) {\r\n        if (!forced) return\r\n    } else pb.setAttribute(\"dropdown-enabled\", \"\")\r\n\r\n    const div = document.createElement(\"div\")\r\n\r\n    pb.appendChild(div)\r\n    ReactDOM.render(<Dropdown uri={uri} />, div)\r\n    const tippyInstance = Spicetify.Tippy(pb, {\r\n        content: div,\r\n        interactive: true,\r\n        animateFill: false,\r\n        //offset: [0, 7],\r\n        placement: \"left\",\r\n        animation: \"fade\",\r\n        //trigger: \"mouseenter focus\",\r\n        zIndex: 1e4,\r\n        delay: [200, 0],\r\n        render(instance: any) {\r\n            const popper = document.createElement(\"div\")\r\n            const box = document.createElement(\"div\")\r\n\r\n            popper.id = \"context-menu\"\r\n            popper.appendChild(box)\r\n\r\n            box.className = \"main-contextMenu-tippy\"\r\n            box.appendChild(instance.props.content)\r\n\r\n            return { popper, onUpdate: f.constVoid }\r\n        },\r\n        onShow(instance: any) {\r\n            instance.popper.firstChild.classList.add(\"main-contextMenu-tippyEnter\")\r\n\r\n            const children = (instance.reference.parentElement as HTMLDivElement).children\r\n            const element = children.item(children.length - 1) as HTMLButtonElement\r\n            element.style.marginRight = \"0px\"\r\n        },\r\n        onMount(instance: any) {\r\n            requestAnimationFrame(() => {\r\n                instance.popper.firstChild.classList.remove(\"main-contextMenu-tippyEnter\")\r\n                instance.popper.firstChild.classList.add(\"main-contextMenu-tippyEnterActive\")\r\n            })\r\n        },\r\n        onHide(instance: any) {\r\n            requestAnimationFrame(() => {\r\n                instance.popper.firstChild.classList.remove(\"main-contextMenu-tippyEnterActive\")\r\n\r\n                const children = (instance.reference.parentElement as HTMLDivElement).children\r\n                const element = children.item(children.length - 2) as HTMLButtonElement\r\n                element.style.marginRight = \"unset\"\r\n\r\n                instance.unmount()\r\n            })\r\n        },\r\n    })\r\n\r\n    if (forced) {\r\n        lastNPTippyInstance?.destroy()\r\n        lastNPTippyInstance = tippyInstance\r\n    }\r\n}\r\n\r\nexport const updateNowPlayingControls = (newTrack: SpotifyURI, updateDropdown = true) => {\r\n    const npb = getNowPlayingBar()\r\n    const pb = getPlaylistButton(npb)\r\n    colorizePlaylistButton(pb, tracksRatings[newTrack])\r\n    if (updateDropdown) wrapDropdownInsidePlaylistButton(pb, newTrack, true)\r\n}\r\n\r\nexport const updateTrackListControls = (updateDropdown = true) => {\r\n    const trackLists = getTrackLists()\r\n    f.pipe(\r\n        trackLists,\r\n        ar.map(trackList => {\r\n            const trackListTracks = getTrackListTracks(trackList)\r\n\r\n            trackListTracks.map(track => {\r\n                const uri = URI.fromString(getTrackListTrackUri(track)).toURI()\r\n\r\n                if (!URI.isTrack(uri!)) return\r\n\r\n                const r = tracksRatings[uri]\r\n                const pb = getPlaylistButton(track)\r\n\r\n                colorizePlaylistButton(pb, r)\r\n                if (updateDropdown) wrapDropdownInsidePlaylistButton(pb, uri)\r\n            })\r\n        }),\r\n    )\r\n}\r\n\r\nexport const updateCollectionControls = async (uri: Spicetify.URI) => {\r\n    let uris\r\n    if (URI.isAlbum(uri))\r\n        uris = f.pipe(\r\n            await fetchGQLAlbum(`${uri}`),\r\n            x => x.tracks.items,\r\n            ar.map(x => x.track.uri),\r\n        )\r\n    else if (URI.isArtist(uri))\r\n        uris = f.pipe(\r\n            await fetchArtistLikedTracks(`${uri}`),\r\n            ar.map(x => x.uri),\r\n        )\r\n    else if (URI.isPlaylistV1OrV2(uri))\r\n        uris = f.pipe(\r\n            await fetchPlaylistContents(`${uri}`),\r\n            ar.map(x => x.uri),\r\n        )\r\n    else throw \"me out the window\"\r\n\r\n    const ratings = uris.map(uri => tracksRatings[uri]).filter(Boolean)\r\n    const rating = Math.round(ratings.reduce((psum, r) => psum + r, 0) / ratings.length)\r\n\r\n    const pb = getCollectionPlaylistButton()\r\n    pb && colorizePlaylistButton(pb, rating)\r\n}\r\n", "import { AccessToken, SpotifyApi } from \"https://esm.sh/@fostertheweb/spotify-web-api-ts-sdk\"\r\nimport { toMemoized } from \"./fp.ts\"\r\nimport { SpotifyURI, escapeRegex } from \"./util.ts\"\r\n\r\nexport const spotifyApi = SpotifyApi.withAccessToken(\"client-id\", {} as AccessToken, {\r\n    // @ts-ignore\r\n    fetch(url, opts) {\r\n        const { method } = opts!\r\n        debugger\r\n        // @ts-ignore\r\n        return Spicetify.CosmosAsync.resolve(method, url)\r\n    },\r\n})\r\n\r\n/*                          GraphQL                                           */\r\n\r\nexport const fetchGQLAlbum = async (uri: SpotifyURI, offset = 0, limit = 487) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.getAlbum, {\r\n            uri,\r\n            locale: Spicetify.Locale.getLocale(),\r\n            offset,\r\n            limit,\r\n        })\r\n    ).data.albumUnion as fetchGQLAlbumRes\r\n\r\ntype Date = (\r\n    | {\r\n          year: number\r\n          month?: number\r\n          day?: number\r\n          hour?: number\r\n          mintue?: number\r\n          second?: number\r\n          precision: \"YEAR\"\r\n      }\r\n    | {\r\n          year: number\r\n          month: number\r\n          day?: number\r\n          hour?: number\r\n          mintue?: number\r\n          second?: number\r\n          precision: \"MONTH\"\r\n      }\r\n    | {\r\n          year: number\r\n          month: number\r\n          day: number\r\n          hour?: number\r\n          mintue?: number\r\n          second?: number\r\n          precision: \"DAY\"\r\n      }\r\n    | {\r\n          year: number\r\n          month: number\r\n          day: number\r\n          hour: number\r\n          mintue?: number\r\n          second?: number\r\n          precision: \"HOUR\"\r\n      }\r\n    | {\r\n          year: number\r\n          month: number\r\n          day: number\r\n          hour: number\r\n          mintue: number\r\n          second?: number\r\n          precision: \"MINUTE\"\r\n      }\r\n    | {\r\n          year: number\r\n          month: number\r\n          day: number\r\n          hour: number\r\n          mintue: number\r\n          second: number\r\n          precision: \"SECOND\"\r\n      }\r\n) & {\r\n    isoString: string\r\n}\r\n\r\ntype Playability = {\r\n    playable: boolean\r\n    reason: \"PLAYABLE\" | string\r\n}\r\n\r\ntype Item = {\r\n    id: string\r\n    uri: string\r\n    name: string\r\n    type: \"SINGLE\" | \"ALBUM\" | \"COMPILATION\" | string\r\n    copyright: {\r\n        items: Array<{\r\n            type: string\r\n            text: string\r\n        }>\r\n    }\r\n    date: Date\r\n    coverArt: {\r\n        sources: Array<Spicetify.Platform.ImageSized>\r\n    }\r\n    tracks: {\r\n        totalCount: number\r\n    }\r\n    label: string\r\n    playability: Playability\r\n    sharingInfo: {\r\n        shareId: string\r\n        shareUrl: string\r\n    }\r\n}\r\n\r\ntype ArtistUnion = {\r\n    __typename: \"Artist\"\r\n    id: string\r\n    uri: string\r\n    saved: boolean\r\n    stats: {\r\n        followers: number\r\n        monthlyListeners: number\r\n        worldRank: number\r\n        topCities: {\r\n            items: Array<{\r\n                numberOfListeners: number\r\n                city: string\r\n                country: string\r\n                region: string\r\n            }>\r\n        }\r\n    }\r\n    profile: {\r\n        name: string\r\n        verified: boolean\r\n        pinnedItem: {\r\n            comment: string\r\n            type: string\r\n            backgroundImage: {\r\n                sources: Array<{ url: string }>\r\n            }\r\n            itemV2: {}\r\n            item: {\r\n                uri: string\r\n                name: string\r\n                images: {\r\n                    items: Array<{\r\n                        sources: Array<{\r\n                            url: string\r\n                            width: null\r\n                            height: null\r\n                        }>\r\n                    }>\r\n                }\r\n            }\r\n        }\r\n        biography: {\r\n            type: string\r\n            text: string\r\n        }\r\n        externalLinks: {\r\n            items: Array<{\r\n                name: string\r\n                url: string\r\n            }>\r\n        }\r\n        playlistV2: {\r\n            totalCount: number\r\n            items: Array<{\r\n                data: {\r\n                    __typename: \"Playlist\"\r\n                    uri: string\r\n                    name: string\r\n                    description: string\r\n                    ownerV2: {\r\n                        data: {\r\n                            __typename: \"User\"\r\n                            name: string\r\n                        }\r\n                    }\r\n                    images: {\r\n                        items: Array<{\r\n                            sources: Array<Spicetify.Platform.ImageSized>\r\n                        }>\r\n                    }\r\n                }\r\n            }>\r\n        }\r\n    }\r\n    visuals: {\r\n        gallery: {\r\n            items: Array<{\r\n                sources: Array<Spicetify.Platform.ImageSized>\r\n            }>\r\n        }\r\n        avatarImage: {\r\n            sources: Array<Spicetify.Platform.ImageSized>\r\n            extractedColors: {\r\n                colorRaw: {\r\n                    hex: string\r\n                }\r\n            }\r\n        }\r\n        headerImage: {\r\n            sources: Array<Spicetify.Platform.ImageSized>\r\n            extractedColors: {\r\n                colorRaw: {\r\n                    hex: string\r\n                }\r\n            }\r\n        }\r\n    }\r\n    discography: {\r\n        latest: Item\r\n        popularReleasesAlbums: {\r\n            totalCount: number\r\n            items: Array<Item>\r\n        }\r\n        singles: {\r\n            totalCount: number\r\n            items: Array<{\r\n                releases: {\r\n                    items: Array<Item>\r\n                }\r\n            }>\r\n        }\r\n        albums: {\r\n            totalCount: number\r\n            items: Array<{\r\n                releases: {\r\n                    items: Array<Item>\r\n                }\r\n            }>\r\n        }\r\n        compilations: {\r\n            totalCount: number\r\n            items: Array<{\r\n                releases: {\r\n                    items: Array<Item>\r\n                }\r\n            }>\r\n        }\r\n        topTracks: {\r\n            items: Array<{\r\n                uid: string\r\n                track: {\r\n                    id: string\r\n                    uri: string\r\n                    name: string\r\n                    playcount: string\r\n                    discNumber: number\r\n                    duration: {\r\n                        totalMilliseconds: number\r\n                    }\r\n                    playability: Playability\r\n                    contentRating: {\r\n                        label: \"NONE\" | \"EXPLICIT\"\r\n                    }\r\n                    artists: {\r\n                        items: Array<{\r\n                            uri: string\r\n                            profile: {\r\n                                name: string\r\n                            }\r\n                        }>\r\n                    }\r\n                    albumOfTrack: {\r\n                        uri: string\r\n                        coverArt: {\r\n                            sources: Array<{ url: string }>\r\n                        }\r\n                    }\r\n                }\r\n            }>\r\n        }\r\n    }\r\n    preRelease: any | null\r\n    relatedContent: {\r\n        appearsOn: {\r\n            totalCount: number\r\n            items: any[]\r\n        }\r\n        featuringV2: {\r\n            totalCount: number\r\n            items: any[]\r\n        }\r\n        discoveredOnV2: {\r\n            totalCount: number\r\n            items: any[]\r\n        }\r\n        relatedArtists: {\r\n            totalCount: number\r\n            items: any[]\r\n        }\r\n    }\r\n    sharingInfo: {\r\n        shareUrl: string\r\n        shareId: string\r\n    }\r\n    goods: {\r\n        events: {\r\n            userLocation: {\r\n                name: string\r\n            }\r\n            concerts: {\r\n                totalCount: number\r\n                items: Array<{\r\n                    uri: string\r\n                    id: string\r\n                    title: string\r\n                    category: \"CONCERT\"\r\n                    festival: boolean\r\n                    nearUser: boolean\r\n                    venue: {\r\n                        name: string\r\n                        location: { name: string }\r\n                        coordinates: {\r\n                            latitude: number\r\n                            longitude: number\r\n                        }\r\n                    }\r\n                    partnerLinks: {\r\n                        items: Array<{\r\n                            partnerName: string\r\n                            url: string\r\n                        }>\r\n                    }\r\n                    date: Date\r\n                }>\r\n                pagingInfo: {\r\n                    limit: number\r\n                }\r\n            }\r\n        }\r\n        merch: {\r\n            items: Array<{\r\n                image: {\r\n                    sources: Array<{ url: string }>\r\n                }\r\n                name: string\r\n                description: string\r\n                price: string\r\n                uri: string\r\n                url: string\r\n            }>\r\n        }\r\n    }\r\n}\r\nexport const fetchGQLArtistOverview = async (uri: SpotifyURI) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistOverview, {\r\n            uri,\r\n            locale: Spicetify.Locale.getLocale(),\r\n            includePrerelease: true,\r\n        })\r\n    ).data.artistUnion as ArtistUnion\r\n\r\ntype fetchGQLArtistDiscographyRes = any\r\nexport const fetchGQLArtistDiscography = async (uri: SpotifyURI, offset = 0, limit = 116) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistDiscographyAll, {\r\n            uri,\r\n            offset,\r\n            limit,\r\n        })\r\n    ).data.artistUnion.discography.all.items as fetchGQLArtistDiscographyRes\r\n\r\nexport const fetchGQLArtistRelated = async (uri: SpotifyURI) =>\r\n    (\r\n        await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.queryArtistRelated, {\r\n            uri,\r\n            locale: Spicetify.Locale.getLocale(),\r\n        })\r\n    ).data.artistUnion.relatedContent.relatedArtists.items as fetchGQLArtistRelatedRes\r\n\r\n/*                          Spotify Web API                                   */\r\n\r\nexport const fetchWebSoundOfSpotifyPlaylist = async (genre: string) => {\r\n    const name = `The Sound Of ${genre}`\r\n    const re = new RegExp(`^${escapeRegex(name)}$`, \"i\")\r\n    const res = await spotifyApi.search(name, [\"playlist\"])\r\n    const item = res.playlists.items.find(item => item?.owner.id === \"thesoundsofspotify\" && re.test(item.name))\r\n    return item?.uri\r\n}\r\n\r\n/*                          Last FM                                       */\r\n\r\nexport interface fetchLastFMTrackResMinimal {\r\n    track: {\r\n        name: string\r\n        mbid: string\r\n        url: string\r\n        duration: string\r\n        listeners: string\r\n        playcount: string\r\n        artist: {\r\n            name: string\r\n            mbid: string\r\n            url: string\r\n        }\r\n        album: {\r\n            artist: string\r\n            title: string\r\n            mbid: string\r\n            url: string\r\n        }\r\n        userplaycount: string\r\n        userloved: string\r\n        toptags: {\r\n            tag: Array<{\r\n                name: string\r\n                url: string\r\n            }>\r\n        }\r\n        wiki: {\r\n            published: string\r\n            summary: string\r\n            content: string\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchLastFMTrack = async (LFMApiKey: string, artist: string, trackName: string, lastFmUsername = \"\") => {\r\n    const url = new URL(\"https://ws.audioscrobbler.com/2.0/\")\r\n    url.searchParams.append(\"method\", \"track.getInfo\")\r\n    url.searchParams.append(\"api_key\", LFMApiKey)\r\n    url.searchParams.append(\"artist\", artist)\r\n    url.searchParams.append(\"track\", trackName)\r\n    url.searchParams.append(\"format\", \"json\")\r\n    url.searchParams.append(\"username\", lastFmUsername)\r\n\r\n    return (await fetch(url).then(res => res.json())) as fetchLastFMTrackResMinimal\r\n}\r\n\r\nexport const fetchLastFMTrackMemo = toMemoized(fetchLastFMTrack)\r\n\r\n/*                          Youtube                                       */\r\n\r\nexport interface SearchYoutubeResMinimal {\r\n    items: Array<{\r\n        id: {\r\n            videoId: string\r\n        }\r\n        snippet: {\r\n            publishedAt: string\r\n            channelId: string\r\n            title: string\r\n            description: string\r\n            channelTitle: string\r\n            publishTime: string\r\n        }\r\n    }>\r\n}\r\n\r\nexport const searchYoutube = async (YouTubeApiKey: string, searchString: string) => {\r\n    const url = new URL(\"https://www.googleapis.com/youtube/v3/search\")\r\n    url.searchParams.append(\"part\", \"snippet\")\r\n    url.searchParams.append(\"maxResults\", \"10\")\r\n    url.searchParams.append(\"q\", searchString)\r\n    url.searchParams.append(\"type\", \"video\")\r\n    url.searchParams.append(\"key\", YouTubeApiKey)\r\n\r\n    return (await fetch(url).then(res => res.json())) as SearchYoutubeResMinimal\r\n}\r\n\r\n/*                          Types                                             */\r\n\r\nexport interface fetchGQLAlbumRes {\r\n    __typename: \"album\"\r\n    uri: SpotifyURI\r\n    name: string\r\n    artists: {\r\n        totalCount: number\r\n        items: Array<{\r\n            id: string\r\n            uri: SpotifyURI\r\n            profile: {\r\n                name: string\r\n            }\r\n            visuals: {\r\n                avatarImage: {\r\n                    sources: SpotApiImage[]\r\n                }\r\n            }\r\n            sharingInfo: {\r\n                shareUrl: string\r\n            }\r\n        }>\r\n    }\r\n    coverArt: {\r\n        extractedColors: {\r\n            colorRaw: {\r\n                hex: string\r\n            }\r\n            colorLight: {\r\n                hex: string\r\n            }\r\n            colorDark: {\r\n                hex: string\r\n            }\r\n        }\r\n        sources: SpotApiImage[]\r\n    }\r\n    discs: {\r\n        totalCount: number\r\n        items: Array<{\r\n            number: number\r\n            tracks: {\r\n                totalCount: number\r\n            }\r\n        }>\r\n    }\r\n    releases: {\r\n        totalCount: number\r\n        items: Array<{\r\n            uri: SpotifyURI\r\n            name: string\r\n        }>\r\n    }\r\n    type: string\r\n    date: {\r\n        isoString: string\r\n        precision: string\r\n    }\r\n    playability: {\r\n        playable: boolean\r\n        reason: string\r\n    }\r\n    label: string\r\n    copyright: {\r\n        totalCount: number\r\n        items: Array<{\r\n            type: string\r\n            text: string\r\n        }>\r\n    }\r\n    courtesyLine: string\r\n    saved: boolean\r\n    sharingInfo: {\r\n        shareUrl: string\r\n        shareId: string\r\n    }\r\n    tracks: {\r\n        totalCount: number\r\n        items: Array<{\r\n            uid: string\r\n            track: {\r\n                saved: boolean\r\n                uri: SpotifyURI\r\n                name: string\r\n                playcount: string\r\n                discNumber: number\r\n                trackNumber: number\r\n                contentRating: {\r\n                    label: string\r\n                }\r\n                relinkingInformation: any\r\n                duration: {\r\n                    totalMilliseconds: number\r\n                }\r\n                playability: {\r\n                    playable: boolean\r\n                }\r\n                artists: {\r\n                    items: Array<{\r\n                        uri: SpotifyURI\r\n                        profile: {\r\n                            name: string\r\n                        }\r\n                    }>\r\n                }\r\n            }\r\n        }>\r\n    }\r\n    moreAlbumsByArtist: {\r\n        items: Array<{\r\n            discography: {\r\n                popularReleasesAlbums: {\r\n                    items: Array<{\r\n                        id: string\r\n                        uri: SpotifyURI\r\n                        name: string\r\n                        date: {\r\n                            year: number\r\n                        }\r\n                        coverArt: {\r\n                            sources: SpotApiImage[]\r\n                        }\r\n                        playability: {\r\n                            playable: boolean\r\n                            reason: string\r\n                        }\r\n                        sharingInfo: {\r\n                            shareId: string\r\n                            shareUrl: string\r\n                        }\r\n                        type: string\r\n                    }>\r\n                }\r\n            }\r\n        }>\r\n    }\r\n}\r\n\r\nexport type fetchGQLArtistRelatedRes = Array<{\r\n    id: string\r\n    uri: SpotifyURI\r\n    profile: {\r\n        name: string\r\n    }\r\n    visuals: {\r\n        avatarImage: {\r\n            sources: SpotApiImage[]\r\n        }\r\n    }\r\n}>\r\n\r\nexport interface SpotApiImage {\r\n    url: string\r\n    width: number\r\n    height: number\r\n}\r\n", "import {\r\n    array as ar,\r\n    eq,\r\n    string as str,\r\n    record as rec,\r\n    refinement as ref,\r\n    semigroup as sg,\r\n    function as f,\r\n} from \"https://esm.sh/fp-ts\"\r\nimport { guard, memoize } from \"https://esm.sh/fp-ts-std/Function\"\r\n\r\ntype refineBranch<A, B extends A, R> = [ref.Refinement<A, B>, (x: B) => R]\r\nexport const guard2 = <A, A1 extends A, A2 extends A, R>(branches: [refineBranch<A, A1, R>, refineBranch<A, A2, R>]) =>\r\n    guard(branches as unknown as [refineBranch<A, A, R>, refineBranch<A, A, R>])\r\nexport const guard3 = <A, A1 extends A, A2 extends A, A3 extends A, R>(\r\n    branches: [refineBranch<A, A1, R>, refineBranch<A, A2, R>, refineBranch<A, A3, R>],\r\n) => guard(branches as unknown as [refineBranch<A, A, R>, refineBranch<A, A, R>, refineBranch<A, A, R>])\r\n\r\nexport const objConcat2 = <A1, A2>() => rec.getUnionSemigroup(sg.first<any>()).concat as (x: A1, y: A2) => A1 & A2\r\nexport const objConcat = <A>() => ar.reduce({} as A, objConcat2<A, A>())\r\n\r\ntype async = {\r\n    <A, B>(f: (a: A) => Promise<B>): (fa: Promise<A>) => Promise<B>\r\n    <A, B>(f: (a: A) => B): (fa: Promise<A>) => Promise<B>\r\n}\r\nexport const pMchain: async =\r\n    <A, R>(f: (a: A) => R) =>\r\n    async (fa: A) =>\r\n        f(await fa)\r\n\r\nexport const is =\r\n    <A>(c: keyof A) =>\r\n    <B extends A>(a: A[typeof c]) =>\r\n    (field: A): field is B =>\r\n        field[c] === a\r\n\r\nexport const tapAny =\r\n    <A>(f: (a: A) => void) =>\r\n    (fa: A) => {\r\n        f(fa)\r\n        return fa\r\n    }\r\n\r\nexport const chunckify =\r\n    (n: number) =>\r\n    <A, R>(g: (a: A[]) => Promise<R[]>) =>\r\n        f.flow(ar.chunksOf(n)<A>, ar.map(g), ps => Promise.all(ps), pMchain(ar.flatten))\r\n\r\ntype JSFunc = (...a: any) => any\r\nexport const withProgress =\r\n    <F extends (f: JSFunc) => (fa: any) => any>(map: F) =>\r\n    (f: Parameters<F>[0]) =>\r\n    (fa: Parameters<ReturnType<F>>[0]): ReturnType<ReturnType<F>> => {\r\n        let i = 0\r\n        let lastProgress = 0\r\n        return map(async (...a: Parameters<Parameters<F>[0]>) => {\r\n            // @ts-expect-error: Fuck me\r\n            const ret = await f(...a)\r\n            const progress = Math.round((i++ / Object.values(fa).length) * 100)\r\n            // // This is an older alternative, always updates 5 times a second\r\n            // Spicetify.Snackbar.enqueueSnackbar(`Loading: ${progress}%`, {\r\n            //     variant: \"default\",\r\n            //     autoHideDuration: 200,\r\n            //     transitionDuration: {\r\n            //         enter: 0,\r\n            //         exit: 0,\r\n            //     },\r\n            //     preventDuplicate: true,\r\n            //     key: \"sort-progress\",\r\n            // })\r\n            if (progress > lastProgress) {\r\n                Spicetify.Snackbar.updater.enqueueSetState(Spicetify.Snackbar, () => ({\r\n                    snacks: [],\r\n                    queue: [],\r\n                }))\r\n                Spicetify.Snackbar.enqueueSnackbar(`Loading: ${progress}%`, {\r\n                    variant: \"default\",\r\n                    autoHideDuration: 200,\r\n                    transitionDuration: {\r\n                        enter: 0,\r\n                        exit: 0,\r\n                    },\r\n                })\r\n            }\r\n            lastProgress = progress\r\n            return ret\r\n        })(fa)\r\n    }\r\n\r\nexport const toMemoized = <A extends any[], R>(fn: (...args: A) => R) =>\r\n    f.pipe(fn, f.tupled, memoize<A>(eq.contramap(JSON.stringify)(str.Eq)), f.untupled)\r\n", "import { SpotifyLoc, SpotifyURI } from \"./util.ts\"\r\n\r\nconst {} = Spicetify\r\nconst {} = Spicetify.Platform\r\n\r\nexport const isTrackLiked = (uris: SpotifyURI[]) => Spicetify.Platform.LibraryAPI.contains(...uris)\r\n\r\nexport const setTrackLiked = (uris: SpotifyURI[], liked: boolean) =>\r\n    Spicetify.Platform.LibraryAPI[liked ? \"add\" : \"remove\"]({ uris })\r\n\r\nexport const toggleTrackLiked = async (uris: SpotifyURI[]) => {\r\n    const liked = await isTrackLiked(uris)\r\n\r\n    const urisByLiked = Object.groupBy(uris, (_, index) => (liked[index] ? \"liked\" : \"notLiked\"))\r\n\r\n    const ps = []\r\n    urisByLiked.liked.length && ps.push(setTrackLiked(urisByLiked.liked, false))\r\n    urisByLiked.notLiked.length && ps.push(setTrackLiked(urisByLiked.notLiked, true))\r\n\r\n    return Promise.all(ps)\r\n}\r\n\r\nexport const fetchLikedTracks = async () =>\r\n    (\r\n        await Spicetify.Platform.LibraryAPI.getTracks({\r\n            limit: Number.MAX_SAFE_INTEGER,\r\n        })\r\n    ).items\r\nexport const fetchArtistLikedTracks = async (uri: SpotifyURI, offset = 0, limit = 100) =>\r\n    (await Spicetify.Platform.LibraryAPI.getTracks({ uri, offset, limit })).items\r\n\r\nexport const fetchPlaylistContents = async (uri: SpotifyURI) =>\r\n    (await Spicetify.Platform.PlaylistAPI.getContents(uri)).items\r\n\r\nexport const createFolder = async (name: string, location: Spicetify.Platform.RootlistAPI.Location = {}) =>\r\n    await Spicetify.Platform.RootlistAPI.createFolder(name, location)\r\n\r\nexport const addPlaylist = async (playlist: SpotifyURI, folder?: SpotifyURI) =>\r\n    await Spicetify.Platform.RootlistAPI.add([playlist], folder ? SpotifyLoc.after.fromUri(folder) : {})\r\n\r\n/* Replaced by createPlaylistFromTracks */\r\nexport const createPlaylist = async (name: string, location: Spicetify.Platform.RootlistAPI.Location = {}) =>\r\n    await Spicetify.Platform.RootlistAPI.createPlaylist(name, location)\r\n\r\nexport const createPlaylistFromTracks = (name: string, tracks: SpotifyURI[], folder?: SpotifyURI) =>\r\n    Spicetify.CosmosAsync.post(\"sp://core-playlist/v1/rootlist?responseFormat=protobufJson\", {\r\n        operation: \"create\",\r\n        ...(folder ? { after: folder } : {}),\r\n        name,\r\n        playlist: true,\r\n        uris: tracks,\r\n    })\r\n\r\nexport const setPlaylistVisibility = async (playlist: SpotifyURI, visibleForAll: boolean) =>\r\n    await Spicetify.Platform.PlaylistPermissionsAPI.setBasePermission(playlist, visibleForAll ? \"VIEWER\" : \"BLOCKED\")\r\nexport const setPlaylistPublished = async (playlist: SpotifyURI, published: boolean) =>\r\n    await Spicetify.Platform.RootlistAPI.setPublishedState(playlist, published)\r\n\r\nexport const fetchFolder = async (folder?: SpotifyURI) =>\r\n    await Spicetify.Platform.RootlistAPI.getContents({ folderUri: folder })\r\nexport const fetchRootFolder = () => fetchFolder(undefined)\r\n\r\nexport const addPlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    tracks: SpotifyURI[],\r\n    location: Spicetify.Platform.RootlistAPI.Location = {},\r\n) => await Spicetify.Platform.PlaylistAPI.add(playlist, tracks, location)\r\n\r\nexport const movePlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    tracks: Array<{ uid: string }>,\r\n    location: Spicetify.Platform.RootlistAPI.Location = {},\r\n) => await Spicetify.Platform.PlaylistAPI.move(playlist, tracks, location)\r\n\r\nexport const removePlaylistTracks = async (playlist: SpotifyURI, tracks: Array<{ uid: string }>) =>\r\n    Spicetify.Platform.PlaylistAPI.remove(playlist, tracks)\r\n\r\nexport const fetchPlaylistEnhancedSongs300 = async (uri: SpotifyURI, offset = 0, limit = 300) =>\r\n    (await Spicetify.Platform.EnhanceAPI.getPage(uri, /* iteration */ 0, /* sessionId */ 0, offset, limit)).enhancePage\r\n        .pageItems\r\nexport const fetchPlaylistEnhancedSongs = async (\r\n    uri: SpotifyURI,\r\n    offset = 0,\r\n): Promise<Array<Spicetify.Platform.EnhanceAPI.EnhanceItem>> => {\r\n    const nextPageItems = await fetchPlaylistEnhancedSongs300(uri, offset)\r\n    if (nextPageItems?.length < 300) return nextPageItems\r\n    else return nextPageItems.concat(await fetchPlaylistEnhancedSongs(uri, offset + 300))\r\n}\r\n\r\nexport const fetchLocalTracks = async () => await Spicetify.Platform.LocalFilesAPI.getTracks()\r\n", "import { range } from \"https://esm.sh/fp-ts/lib/ReadonlyNonEmptyArray\"\n\nimport { CheckedPlaylistButtonIcon, curationButtonClass } from \"../../shared/modules.ts\"\nimport { SpotifyURI } from \"../../shared/util.ts\"\n\nimport { toggleRating } from \"./ratings.ts\"\n\nconst { React } = Spicetify\n\nconst { ButtonTertiary } = Spicetify.ReactComponent\n\nconst RatingButton = ({ i, uri }: { i: number; uri: SpotifyURI }) => (\n    <ButtonTertiary\n        size=\"small\"\n        className={`${curationButtonClass} rating-${i}`}\n        aria-checked=\"true\"\n        aria-label=\"\"\n        condensed=\"true\"\n        iconOnly={CheckedPlaylistButtonIcon}\n        semanticColor=\"textBrightAccent\"\n        // ref=\n        onClick={() => toggleRating(uri, i)}\n    />\n)\n\nexport const Dropdown = ({ uri }: { uri: SpotifyURI }) => (\n    <div className=\"rating-dropdown\">\n        {range(1, 5).map(i => (\n            <RatingButton i={i} uri={uri} />\n        ))}\n    </div>\n)\n", "import { allPass } from \"https://esm.sh/fp-ts-std@0.18.0/Predicate\"\r\n\r\n// @ts-expect-error webpackChunkOpen is only defined in the browser\r\nconst require = webpackChunkopen.push([[Symbol(\"Dummy module to extract require method\")], {}, re => re])\r\nconst cache = Object.keys(require.m).map(id => require(id))\r\nexport const modules = cache\r\n    .filter((module): module is Object => typeof module === \"object\")\r\n    .flatMap(module => Object.values(module))\r\nexport const functionModules = modules.filter((module): module is Function => typeof module === \"function\")\r\n\r\n// const reactObjects = modules.filter(m => m?.$$typeof)\r\n\r\n// const reactForwardRefSymbol = Spicetify.React.forwardRef().$$typeof\r\n// const reactForwardRefs = reactObjects.filter(m => m.$$typeof === reactForwardRefSymbol)\r\n\r\n// const reactMemoSymbol = Spicetify.React.memo().$$typeof\r\n// const reactMemos = reactObjects.filter(m => m.$$typeof === reactMemoSymbol)\r\n\r\nconst findModuleByStrings = (modules: Array<any>, ...filters: Array<string | RegExp>) =>\r\n    modules.find(f =>\r\n        allPass(\r\n            filters.map(filter =>\r\n                typeof filter === \"string\" ? (s: string) => s.includes(filter) : (s: string) => filter.test(s),\r\n            ),\r\n        )(f.toString()),\r\n    ) as any\r\n\r\nexport const CheckedPlaylistButtonIcon = findModuleByStrings(\r\n    functionModules,\r\n    \"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z\",\r\n)\r\n\r\nexport const SettingSection = findModuleByStrings(\r\n    functionModules,\r\n    \"function m(e){return(0,d.jsx)(r.k,{children:(0,d.jsx)(u,{...e})})}\",\r\n)\r\nexport const SectionTitle = findModuleByStrings(functionModules, \"textToHighlight\", \"textBase\")\r\nexport const SettingColumn = findModuleByStrings(functionModules, \"setSectionFilterMatchQueryValue\", \"filterMatchQuery\")\r\nexport const SettingText = findModuleByStrings(functionModules, \"textSubdued\", \"viola\")\r\nexport const SettingToggle = findModuleByStrings(functionModules, \"condensed\", \"onSelected\")\r\n\r\nexport const curationButtonClass = modules.find(m => m?.curationButton)!.curationButton\r\n", "import { array as ar, function as f } from \"https://esm.sh/fp-ts\"\r\n\r\nimport { pMchain } from \"../../shared/fp.ts\"\r\nimport {\r\n    addPlaylistTracks,\r\n    createPlaylist,\r\n    fetchFolder,\r\n    fetchPlaylistContents,\r\n    removePlaylistTracks,\r\n    setPlaylistVisibility,\r\n    setTrackLiked,\r\n} from \"../../shared/platformApi.ts\"\r\nimport { SpotifyLoc, SpotifyURI } from \"../../shared/util.ts\"\r\n\r\nimport { updateCollectionControls, updateNowPlayingControls, updateTrackListControls } from \"./controls.tsx\"\r\nimport { CONFIG } from \"./settings.ts\"\r\nimport { getNowPlayingBar } from \"./util.ts\"\r\n\r\nexport const loadRatings = async () => {\r\n    const ratingsFolder = await fetchFolder(CONFIG.ratingsFolderUri)\r\n\r\n    playlistUris = f.pipe(\r\n        ratingsFolder!.items!,\r\n        ar.map(p => [p.uri, Number(p.name!)] as [SpotifyURI, number]),\r\n        ar.reduce([] as SpotifyURI[], (uris, [uri, rating]) => ((uris[rating] = uri), uris)),\r\n    )\r\n\r\n    // @ts-ignore\r\n    globalThis.tracksRatings = tracksRatings = await f.pipe(\r\n        playlistUris,\r\n        ar.map(fetchPlaylistContents),\r\n        ps => Promise.all(ps), // Promise.all flips empty to undefined\r\n        pMchain(ar.map(tracks => tracks ?? [])),\r\n        pMchain(ar.map(ar.map(t => t.uri))),\r\n        pMchain(ar.flatMap((trackUris, rating) => trackUris.map(trackUri => [trackUri, rating] as const))),\r\n        pMchain(\r\n            ar.reduce({} as Record<string, number>, (acc, [trackUri, rating]) =>\r\n                Object.assign(acc, {\r\n                    [trackUri]: Math.max(rating, acc[trackUri] ?? 0),\r\n                }),\r\n            ),\r\n        ),\r\n    )\r\n}\r\n\r\nexport const toggleRating = async (uri: SpotifyURI, rating: number) => {\r\n    const currentRating = tracksRatings[uri]\r\n\r\n    if (currentRating === rating) rating = 0\r\n\r\n    if (currentRating) {\r\n        f.pipe(\r\n            playlistUris.slice(0, currentRating + 1),\r\n            ar.filter(Boolean),\r\n            ar.map(playlistUri => Spicetify.URI.fromString(playlistUri).id!),\r\n            ar.map(playlistId => removePlaylistTracks(playlistId, [{ uri, uid: \"\" } as { uid: string }])),\r\n        )\r\n    }\r\n\r\n    tracksRatings[uri] = rating\r\n\r\n    if (rating > 0) {\r\n        let playlistUri = playlistUris[rating]\r\n\r\n        if (!playlistUri) {\r\n            playlistUri = await createPlaylist(rating.toFixed(0), SpotifyLoc.after.fromUri(CONFIG.ratingsFolderUri))\r\n            setPlaylistVisibility(playlistUri, false)\r\n            playlistUris[rating] = playlistUri\r\n        }\r\n\r\n        addPlaylistTracks(playlistUri, [uri])\r\n\r\n        if (rating >= Number(CONFIG.heartThreshold)) {\r\n            setTrackLiked([uri], true)\r\n        }\r\n    }\r\n\r\n    const npTrack = Spicetify.Player.data?.item.uri\r\n    if (npTrack === uri) {\r\n        updateNowPlayingControls(npTrack, false)\r\n\r\n        //TODO: clean this\r\n        {\r\n            const nowPlaylingControlsObserver = new MutationObserver(() => {\r\n                nowPlaylingControlsObserver.disconnect()\r\n                if (npTrack !== uri) return\r\n                updateNowPlayingControls(npTrack, false)\r\n            })\r\n            nowPlaylingControlsObserver.observe(getNowPlayingBar(), {\r\n                subtree: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    //TODO: Optimize this, find a way to directly target the pbs for that uri\r\n    updateTrackListControls()\r\n    const { pathname } = Spicetify.Platform.History.location\r\n    updateCollectionControls(Spicetify.URI.fromString(pathname))\r\n}\r\n\r\nexport let playlistUris: SpotifyURI[] = []\r\nexport let tracksRatings: Record<SpotifyURI, number> = {}\r\n", "import { task } from \"https://esm.sh/fp-ts\"\r\n\r\nimport { createFolder } from \"../../shared/platformApi.ts\"\r\nimport { SettingsSection } from \"../../shared/settings.tsx\"\r\nimport { SpotifyURI } from \"../../shared/util.ts\"\r\n\r\nimport { loadRatings } from \"./ratings.ts\"\r\n\r\nconst RATINGS_FOLDER_NAME = \"Ratings\"\r\n\r\nconst settings = new SettingsSection(\"Star Ratings 2\", \"star-ratings-2\")\r\n    .addInput({ id: \"heartThreshold\", desc: \"Threshold for liking trakcs\", inputType: \"number\" }, task.of(\"3\"))\r\n    .addInput({ id: \"skipThreshold\", desc: \"Threshold for skipping trakcs\", inputType: \"number\" }, task.of(\"1\"))\r\n    .addInput(\r\n        {\r\n            id: \"ratingsFolderUri\",\r\n            desc: \"Ratings folder uri\",\r\n            inputType: \"text\",\r\n            onChange: loadRatings,\r\n        },\r\n        async () => (await createFolder(RATINGS_FOLDER_NAME)).uri,\r\n    )\r\n\r\nsettings.pushSettings()\r\n\r\nexport const CONFIG = settings.toObject() as {\r\n    heartThreshold: string\r\n    skipThreshold: string\r\n    ratingsFolderUri: SpotifyURI\r\n}\r\n", "import { task } from \"https://esm.sh/fp-ts\"\r\nimport { guard3, is } from \"./fp.ts\"\r\nimport { sleep } from \"./util.ts\"\r\nimport { SettingSection, SettingColumn, SettingText, SettingToggle, SectionTitle } from \"./modules.ts\"\r\n\r\nconst { React, ReactDOM } = Spicetify\r\nconst { ButtonSecondary } = Spicetify.ReactComponent as any\r\n\r\ntype FieldToProps<A> = Omit<A, \"type\">\r\n\r\nexport const enum FieldType {\r\n    BUTTON = \"button\",\r\n    TOGGLE = \"toggle\",\r\n    INPUT = \"input\",\r\n    HIDDEN = \"hidden\",\r\n}\r\n\r\nexport interface BaseField {\r\n    id: string\r\n    type: FieldType\r\n    desc: string\r\n}\r\n\r\nexport type SettingsField = HiddenField | InputField | ButtonField | ToggleField\r\n\r\nexport interface ButtonField extends BaseField {\r\n    type: FieldType.BUTTON\r\n    text: string\r\n    onClick?: () => void\r\n}\r\nexport interface ToggleField extends BaseField {\r\n    type: FieldType.TOGGLE\r\n    onSelected?: (checked: boolean) => void\r\n}\r\n\r\nexport interface InputField extends BaseField {\r\n    type: FieldType.INPUT\r\n    inputType: string\r\n    onChange?: (value: string) => void\r\n}\r\n\r\nexport interface HiddenField extends BaseField {\r\n    type: FieldType.HIDDEN\r\n}\r\n\r\nexport class SettingsSection {\r\n    private stopHistoryListener: any\r\n\r\n    constructor(public name: string, public id: string, public sectionFields: { [key: string]: SettingsField } = {}) {}\r\n\r\n    pushSettings = () => {\r\n        if (this.stopHistoryListener) this.stopHistoryListener()\r\n\r\n        this.stopHistoryListener = Spicetify.Platform.History.listen(() => this.render())\r\n        this.render()\r\n    }\r\n\r\n    toObject = () =>\r\n        new Proxy(\r\n            {},\r\n            {\r\n                get: (target, prop) => SettingsSection.getFieldValue(this.getId(prop.toString())),\r\n            },\r\n        )\r\n\r\n    private render = async () => {\r\n        while (!document.getElementById(\"desktop.settings.selectLanguage\")) {\r\n            if (Spicetify.Platform.History.location.pathname !== \"/preferences\") return\r\n            await sleep(100)\r\n        }\r\n\r\n        const allSettingsContainer = document.querySelector(\".x-settings-container\")!\r\n\r\n        let pluginSettingsContainer = Array.from(allSettingsContainer.children).find(({ id }) => id === this.id)\r\n\r\n        if (!pluginSettingsContainer) {\r\n            pluginSettingsContainer = document.createElement(\"div\")\r\n            pluginSettingsContainer.id = this.id\r\n            pluginSettingsContainer.className = \"settingsContainer\"\r\n            allSettingsContainer.appendChild(pluginSettingsContainer)\r\n        }\r\n\r\n        ReactDOM.render(<this.SettingsSection />, pluginSettingsContainer)\r\n    }\r\n\r\n    addButton = (props: FieldToProps<ButtonField>) => {\r\n        this.addField(FieldType.BUTTON, props)\r\n        return this\r\n    }\r\n\r\n    addToggle = (props: FieldToProps<ToggleField>, defaultValue = task.of(false)) => {\r\n        this.addField(FieldType.TOGGLE, props, defaultValue)\r\n        return this\r\n    }\r\n\r\n    addInput = (props: FieldToProps<InputField>, defaultValue = task.of(\"\")) => {\r\n        this.addField(FieldType.INPUT, props, defaultValue)\r\n        return this\r\n    }\r\n\r\n    private addField(type: FieldType, opts: FieldToProps<SettingsField>, defaultValue?: any) {\r\n        if (defaultValue !== undefined) {\r\n            const settingId = this.getId(opts.id)\r\n            SettingsSection.setDefaultFieldValue(settingId, defaultValue)\r\n        }\r\n        const field = Object.assign({}, opts, { type }) as SettingsField\r\n        this.sectionFields[opts.id] = field\r\n    }\r\n\r\n    getId = (nameId: string) => [\"extensions\", this.id, nameId].join(\":\")\r\n\r\n    private useStateFor = <A,>(id: string) => {\r\n        const [value, setValueState] = React.useState(SettingsSection.getFieldValue<A>(id))\r\n\r\n        return [\r\n            value,\r\n            (newValue: A) => {\r\n                if (newValue !== undefined) {\r\n                    setValueState(newValue)\r\n                    SettingsSection.setFieldValue(id!, newValue)\r\n                }\r\n            },\r\n        ] as const\r\n    }\r\n\r\n    static getFieldValue = <R,>(id: string): R => JSON.parse(Spicetify.LocalStorage.get(id) ?? \"null\")\r\n\r\n    static setFieldValue = (id: string, newValue: any) => Spicetify.LocalStorage.set(id, JSON.stringify(newValue))\r\n\r\n    private static setDefaultFieldValue = async (id: string, defaultValue: task.Task<any>) => {\r\n        if (SettingsSection.getFieldValue(id) === null) SettingsSection.setFieldValue(id, await defaultValue())\r\n    }\r\n\r\n    private SettingsSection = () => (\r\n        <SettingSection filterMatchQuery={this.name}>\r\n            <SectionTitle>{this.name}</SectionTitle>\r\n            {Object.values(this.sectionFields).map(field => {\r\n                const isType = is<SettingsField>(\"type\")\r\n\r\n                return guard3([\r\n                    [isType<InputField>(FieldType.INPUT), this.InputField],\r\n                    [isType(FieldType.BUTTON), this.ButtonField],\r\n                    [isType(FieldType.TOGGLE), this.ToggleField],\r\n                ])(() => <></>)(field)\r\n            })}\r\n        </SettingSection>\r\n    )\r\n\r\n    SettingField = ({ field, children }: { field: SettingsField; children?: any }) => (\r\n        <SettingColumn filterMatchQuery={field.id}>\r\n            <div className=\"x-settings-firstColumn\">\r\n                <SettingText htmlFor={field.id}>{field.desc}</SettingText>\r\n            </div>\r\n            <div className=\"x-settings-secondColumn\">{children}</div>\r\n        </SettingColumn>\r\n    )\r\n\r\n    ButtonField = (field: ButtonField) => (\r\n        <this.SettingField field={field}>\r\n            <ButtonSecondary id={field.id} buttonSize=\"sm\" onClick={field.onClick} className=\"x-settings-button\">\r\n                {field.text}\r\n            </ButtonSecondary>\r\n        </this.SettingField>\r\n    )\r\n\r\n    ToggleField = (field: ToggleField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<boolean>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <SettingToggle\r\n                    id={field.id}\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    onSelected={(checked: boolean) => {\r\n                        setValue(checked)\r\n                        field.onSelected?.(checked)\r\n                    }}\r\n                    className=\"x-settings-button\"\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n\r\n    InputField = (field: InputField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<string>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <input\r\n                    className=\"x-settings-input\"\r\n                    id={field.id}\r\n                    dir=\"ltr\"\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    type={field.inputType}\r\n                    onChange={e => {\r\n                        const value = e.currentTarget.value\r\n                        setValue(value)\r\n                        field.onChange?.(value)\r\n                    }}\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n}\r\n", "export const RATINGS_FOLDER_NAME = \"Ratings\"\r\n\r\nexport const getTrackLists = () => Array.from(document.querySelectorAll<HTMLDivElement>(\".main-trackList-indexable\"))\r\nexport const getTrackListTracks = (trackList: HTMLDivElement) =>\r\n    Array.from(trackList.querySelectorAll<HTMLDivElement>(\"div.main-trackList-trackListRow\"))\r\n\r\nexport const getTrackListTrackUri = (track: HTMLDivElement) => (\r\n    (track = Object.values(track)[0].child.child.child.child),\r\n    (track as any).pendingProps.uri ?? (track as any).child.pendingProps.uri\r\n)\r\n\r\nexport const getNowPlayingBar = () => document.querySelector<HTMLDivElement>(\"div.main-nowPlayingBar-nowPlayingBar\")!\r\nexport const getCollectionActionBarRow = () => document.querySelector<HTMLDivElement>(`div.main-actionBar-ActionBarRow`)\r\n\r\nexport const playlistButtonSelector = `button[aria-label=\"Add to Liked Songs\"], button[aria-label=\"Add to playlist\"], button[aria-label=\"Remove recommendation\"]`\r\nexport const getPlaylistButton = (parent: HTMLElement) =>\r\n    parent.querySelector<HTMLButtonElement>(playlistButtonSelector)!\r\nexport const getCollectionPlaylistButton = () => {\r\n    const ab = getCollectionActionBarRow()\r\n    return ab?.querySelector<HTMLButtonElement>(\r\n        `button[aria-label=\"Remove from Your Library\"], button[aria-label=\"Save to Your Library\"]`,\r\n    )\r\n}\r\n"],
  "mappings": "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",
  "names": ["toMatchTo", "ar", "f", "f", "f", "f", "require", "modules", "f", "ar", "f", "task", "value", "task", "f", "ar", "React", "React", "ReactDOM", "f", "ar", "uri", "URI"]
}
