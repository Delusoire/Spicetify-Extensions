{
  "version": 3,
  "sources": ["../../shared/util.ts", "../../extensions/star-ratings-2/controls.tsx", "../../shared/api.ts", "../../shared/deps.ts", "../../shared/GraphQL/fetchAlbum.ts", "../../shared/GraphQL/fetchArtistDiscography.ts", "../../shared/GraphQL/fetchArtistOveriew.ts", "../../shared/fp.ts", "../../shared/parse.ts", "../../shared/platformApi.ts", "../../extensions/sort-plus/settings.ts", "../../shared/settings.tsx", "../../shared/modules.ts", "../../extensions/sort-plus/fetch.ts", "../../extensions/sort-plus/util.ts", "../../extensions/star-ratings-2/dropdown.tsx", "../../extensions/star-ratings-2/ratings.ts", "../../extensions/star-ratings-2/settings.ts", "../../extensions/star-ratings-2/util.ts", "../../shared/listeners.ts", "../../extensions/star-ratings-2/app.ts"],
  "sourcesContent": ["export type SpotifyID = string\r\nexport type SpotifyURI = string\r\n\r\nconst { URI } = Spicetify\r\nconst { PlayerAPI } = Spicetify.Platform\r\n\r\nexport const SpotifyLoc = {\r\n    before: {\r\n        start: () => ({ before: \"start\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ before: { uri } }),\r\n        fromUid: (uid: string) => ({ before: { uid } }),\r\n    },\r\n    after: {\r\n        end: () => ({ after: \"end\" as const }),\r\n        fromUri: (uri: SpotifyURI) => ({ after: { uri } }),\r\n        fromUid: (uid: string) => ({ after: { uid } }),\r\n    },\r\n}\r\n\r\nexport const normalizeStr = (str: string) =>\r\n    str\r\n        .normalize(\"NFKD\")\r\n        .replace(/\\(.*\\)/g, \"\")\r\n        .replace(/\\[.*\\]/g, \"\")\r\n        .replace(/-_,/g, \" \")\r\n        .replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n        .toLowerCase()\r\n        .trim()\r\n\r\nexport class PermanentMutationObserver extends MutationObserver {\r\n    target: HTMLElement | null = null\r\n\r\n    constructor(targetSelector: string, callback: MutationCallback) {\r\n        super(callback)\r\n        new MutationObserver(() => {\r\n            const nextTarget = document.querySelector<HTMLElement>(targetSelector)\r\n            if (nextTarget && !nextTarget.isEqualNode(this.target)) {\r\n                this.target && this.disconnect()\r\n                this.target = nextTarget\r\n                this.observe(this.target, {\r\n                    childList: true,\r\n                    subtree: true,\r\n                })\r\n            }\r\n        }).observe(document.body, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n    }\r\n}\r\n\r\nexport const waitForElement = <E extends Element>(\r\n    selector: string,\r\n    timeout = 1000,\r\n    location = document.body,\r\n    notEl?: E | null,\r\n) =>\r\n    new Promise((resolve: (value: Element) => void, reject) => {\r\n        const onMutation = () => {\r\n            const el = document.querySelector<E>(selector)\r\n            if (el) {\r\n                if (notEl && el === notEl) {\r\n                } else {\r\n                    observer.disconnect()\r\n                    return resolve(el)\r\n                }\r\n            }\r\n        }\r\n\r\n        const observer = new MutationObserver(onMutation)\r\n        onMutation()\r\n\r\n        observer.observe(location, {\r\n            childList: true,\r\n            subtree: true,\r\n        })\r\n\r\n        if (timeout)\r\n            setTimeout(() => {\r\n                observer.disconnect()\r\n                reject()\r\n            }, timeout)\r\n    })\r\n\r\nexport const formatUri = (uri: string) => URI.fromString(uri).toURI()\r\n\r\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const mainElement = document.querySelector(\"main\")!\r\nexport const [REACT_FIBER, REACT_PROPS] = Object.keys(mainElement)\r\n\r\nexport const createQueueItem =\r\n    (queued: boolean) =>\r\n    ({ uri, uid = \"\" }: { uri: string; uid?: string }) => ({\r\n        contextTrack: {\r\n            uri,\r\n            uid,\r\n            metadata: {\r\n                is_queued: queued.toString(),\r\n            },\r\n        },\r\n        removed: [],\r\n        blocked: [],\r\n        provider: queued ? (\"queue\" as const) : (\"context\" as const),\r\n    })\r\n\r\nexport const setQueue = async (\r\n    nextTracks: Array<ReturnType<ReturnType<typeof createQueueItem>>>,\r\n    contextUri?: string,\r\n) => {\r\n    const { _queue, _client } = PlayerAPI._queue\r\n    const { prevTracks, queueRevision } = _queue\r\n\r\n    const res = await _client.setQueue({\r\n        nextTracks,\r\n        prevTracks,\r\n        queueRevision,\r\n    })\r\n\r\n    await PlayerAPI.skipToNext()\r\n\r\n    if (contextUri) {\r\n        await new Promise<void>(resolve => {\r\n            PlayerAPI._events.addListener(\"queue_update\", () => resolve(), { once: true })\r\n        })\r\n        await setPlayingContext(contextUri)\r\n    }\r\n\r\n    return res\r\n}\r\n\r\nexport const setPlayingContext = (uri: string) => {\r\n    const { sessionId } = PlayerAPI._state\r\n    return PlayerAPI.updateContext(sessionId, { uri, url: \"context://\" + uri })\r\n}\r\n", "import { function as f } from \"https://esm.sh/fp-ts\"\r\n\r\nimport { Instance, Props } from \"npm:tippy.js\"\r\n\r\nimport { SpotifyURI } from \"../../shared/util.ts\"\r\n\r\nimport { getTracksFromUri } from \"../sort-plus/util.ts\"\r\nimport { Dropdown } from \"./dropdown.tsx\"\r\nimport { tracksRatings } from \"./ratings.ts\"\r\nimport {\r\n    getCollectionPlaylistButton,\r\n    getNowPlayingBar,\r\n    getPlaylistButton,\r\n    getTrackListTrackUri,\r\n    getTrackListTracks,\r\n    getTrackLists,\r\n} from \"./util.ts\"\r\n\r\nconst { URI, Tippy } = Spicetify\r\nconst { React, ReactDOM } = Spicetify\r\n\r\nconst UNSET_CSS = \"invalid\"\r\nconst colorByRating = [UNSET_CSS, \"#ED5564\", \"#FFCE54\", \"A0D568\", \"#4FC1E8\", \"#AC92EB\"]\r\n\r\nconst colorizePlaylistButton = (btn: HTMLButtonElement, rating: number) => {\r\n    if (btn.style.fill === colorByRating[rating]) return\r\n\r\n    // Do we need this anymore?\r\n    btn.style.opacity = rating > 0 ? \"1\" : UNSET_CSS\r\n    const svg = btn.querySelector<SVGElement>(\"svg\")!\r\n    svg.style.fill = colorByRating[rating]\r\n}\r\n\r\nlet lastNPTippyInstance: Instance<Props>\r\nconst wrapDropdownInsidePlaylistButton = (pb: HTMLButtonElement, uri: SpotifyURI, forced = false) => {\r\n    if (pb.hasAttribute(\"dropdown-enabled\")) {\r\n        if (!forced) return\r\n    } else pb.setAttribute(\"dropdown-enabled\", \"\")\r\n\r\n    const div = document.createElement(\"div\")\r\n\r\n    pb.appendChild(div)\r\n    ReactDOM.render(<Dropdown uri={uri} />, div)\r\n    const tippyInstance = Tippy(pb, {\r\n        content: div,\r\n        interactive: true,\r\n        animateFill: false,\r\n        //offset: [0, 7],\r\n        placement: \"left\",\r\n        animation: \"fade\",\r\n        //trigger: \"mouseenter focus\",\r\n        zIndex: 1e4,\r\n        delay: [200, 0],\r\n        render(instance: any) {\r\n            const popper = document.createElement(\"div\")\r\n            const box = document.createElement(\"div\")\r\n\r\n            popper.id = \"context-menu\"\r\n            popper.appendChild(box)\r\n\r\n            box.className = \"main-contextMenu-tippy\"\r\n            box.appendChild(instance.props.content)\r\n\r\n            return { popper, onUpdate: f.constVoid }\r\n        },\r\n        onShow(instance: any) {\r\n            instance.popper.firstChild.classList.add(\"main-contextMenu-tippyEnter\")\r\n\r\n            const children = (instance.reference.parentElement as HTMLDivElement).children\r\n            const element = children.item(children.length - 1) as HTMLButtonElement\r\n            element.style.marginRight = \"0px\"\r\n        },\r\n        onMount(instance: any) {\r\n            requestAnimationFrame(() => {\r\n                instance.popper.firstChild.classList.remove(\"main-contextMenu-tippyEnter\")\r\n                instance.popper.firstChild.classList.add(\"main-contextMenu-tippyEnterActive\")\r\n            })\r\n        },\r\n        onHide(instance: any) {\r\n            requestAnimationFrame(() => {\r\n                instance.popper.firstChild.classList.remove(\"main-contextMenu-tippyEnterActive\")\r\n\r\n                const children = (instance.reference.parentElement as HTMLDivElement).children\r\n                const element = children.item(children.length - 2) as HTMLButtonElement\r\n                element.style.marginRight = \"unset\"\r\n\r\n                instance.unmount()\r\n            })\r\n        },\r\n    })\r\n\r\n    if (forced) {\r\n        lastNPTippyInstance?.destroy()\r\n        lastNPTippyInstance = tippyInstance\r\n    }\r\n}\r\n\r\nexport const updateNowPlayingControls = (newTrack: SpotifyURI, updateDropdown = true) => {\r\n    const npb = getNowPlayingBar()\r\n    const pb = getPlaylistButton(npb)\r\n    colorizePlaylistButton(pb, tracksRatings[newTrack])\r\n    if (updateDropdown) wrapDropdownInsidePlaylistButton(pb, newTrack, true)\r\n}\r\n\r\nexport const updateTrackListControls = (updateDropdown = true) => {\r\n    const trackLists = getTrackLists()\r\n\r\n    trackLists.map(trackList => {\r\n        const trackListTracks = getTrackListTracks(trackList)\r\n\r\n        trackListTracks.map(track => {\r\n            const uri = getTrackListTrackUri(track)\r\n\r\n            if (!URI.isTrack(uri!)) return\r\n\r\n            const r = tracksRatings[uri]\r\n            const pb = getPlaylistButton(track)\r\n\r\n            colorizePlaylistButton(pb, r)\r\n            if (updateDropdown) wrapDropdownInsidePlaylistButton(pb, uri)\r\n        })\r\n    })\r\n}\r\n\r\nexport const updateCollectionControls = async (uri: string) => {\r\n    const tracks = await getTracksFromUri(uri)\r\n    const ratings = tracks.map(track => tracksRatings[track.uri]).filter(Boolean)\r\n    const rating = Math.round(ratings.reduce((psum, r) => psum + r, 0) / ratings.length)\r\n\r\n    const pb = getCollectionPlaylistButton()\r\n    pb && colorizePlaylistButton(pb, rating)\r\n}\r\n", "import { AccessToken, SpotifyApi } from \"https://esm.sh/@fostertheweb/spotify-web-api-ts-sdk\"\r\n\r\nimport { _ } from \"./deps.ts\"\r\n\r\nconst { CosmosAsync } = Spicetify\r\n\r\nexport const spotifyApi = SpotifyApi.withAccessToken(\"client-id\", {} as AccessToken, {\r\n    // @ts-ignore\r\n    fetch(url, opts) {\r\n        const { method } = opts!\r\n        // @ts-ignore\r\n        return CosmosAsync.resolve(method, url)\r\n    },\r\n    deserializer: {\r\n        deserialize(res) {\r\n            return (res as unknown as Spicetify.CosmosAsync.Response).body\r\n        },\r\n    },\r\n})\r\n\r\n/*                          Spotify Web API                                   */\r\n\r\nexport const fetchWebSoundOfSpotifyPlaylist = async (genre: string) => {\r\n    const name = `The Sound Of ${genre}`\r\n    const re = new RegExp(`^${_.escapeRegExp(name)}$`, \"i\")\r\n    const res = await spotifyApi.search(name, [\"playlist\"])\r\n    const item = res.playlists.items.find(item => item?.owner.id === \"thesoundsofspotify\" && re.test(item.name))\r\n    return item?.uri\r\n}\r\n\r\n/*                          Last FM                                       */\r\n\r\nexport interface fetchLastFMTrackResMinimal {\r\n    track: {\r\n        name: string\r\n        mbid: string\r\n        url: string\r\n        duration: string\r\n        listeners: string\r\n        playcount: string\r\n        artist: {\r\n            name: string\r\n            mbid: string\r\n            url: string\r\n        }\r\n        album: {\r\n            artist: string\r\n            title: string\r\n            mbid: string\r\n            url: string\r\n        }\r\n        userplaycount: string\r\n        userloved: string\r\n        toptags: {\r\n            tag: Array<{\r\n                name: string\r\n                url: string\r\n            }>\r\n        }\r\n        wiki: {\r\n            published: string\r\n            summary: string\r\n            content: string\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchLastFMTrack = async (LFMApiKey: string, artist: string, trackName: string, lastFmUsername = \"\") => {\r\n    const url = new URL(\"https://ws.audioscrobbler.com/2.0/\")\r\n    url.searchParams.append(\"method\", \"track.getInfo\")\r\n    url.searchParams.append(\"api_key\", LFMApiKey)\r\n    url.searchParams.append(\"artist\", artist)\r\n    url.searchParams.append(\"track\", trackName)\r\n    url.searchParams.append(\"format\", \"json\")\r\n    url.searchParams.append(\"username\", lastFmUsername)\r\n\r\n    const res = (await fetch(url).then(res => res.json())) as fetchLastFMTrackResMinimal\r\n\r\n    return res.track\r\n}\r\n\r\n/*                          Youtube                                       */\r\n\r\nexport interface SearchYoutubeResMinimal {\r\n    items: Array<{\r\n        id: {\r\n            videoId: string\r\n        }\r\n        snippet: {\r\n            publishedAt: string\r\n            channelId: string\r\n            title: string\r\n            description: string\r\n            channelTitle: string\r\n            publishTime: string\r\n        }\r\n    }>\r\n}\r\n\r\nexport const searchYoutube = async (YouTubeApiKey: string, searchString: string) => {\r\n    const url = new URL(\"https://www.googleapis.com/youtube/v3/search\")\r\n    url.searchParams.append(\"part\", \"snippet\")\r\n    url.searchParams.append(\"maxResults\", \"10\")\r\n    url.searchParams.append(\"q\", searchString)\r\n    url.searchParams.append(\"type\", \"video\")\r\n    url.searchParams.append(\"key\", YouTubeApiKey)\r\n\r\n    return (await fetch(url).then(res => res.json())) as SearchYoutubeResMinimal\r\n}\r\n", "// @deno-types=\"npm:@types/lodash\"\r\nimport { default as ld } from \"https://esm.sh/lodash\"\r\nexport const _ = ld\r\n\r\n// @deno-types=\"npm:@types/lodash/fp\"\r\nimport { default as ld_fp } from \"https://esm.sh/lodash/fp\"\r\nexport const fp = ld_fp\r\n", "import { _ } from \"../deps.ts\"\r\nimport { Items, ItemsWithCount } from \"./sharedTypes.ts\"\r\n\r\nconst { Locale, GraphQL } = Spicetify\r\n\r\nexport type fetchAlbumRes = {\r\n    __typename: \"album\"\r\n    uri: string\r\n    name: string\r\n    artists: {\r\n        totalCount: number\r\n        items: Array<{\r\n            id: string\r\n            uri: string\r\n            profile: {\r\n                name: string\r\n            }\r\n            visuals: {\r\n                avatarImage: {\r\n                    sources: Array<Spicetify.Platform.ImageSized>\r\n                }\r\n            }\r\n            sharingInfo: {\r\n                shareUrl: string\r\n            }\r\n        }>\r\n    }\r\n    coverArt: {\r\n        extractedColors: {\r\n            colorRaw: {\r\n                hex: string\r\n            }\r\n            colorLight: {\r\n                hex: string\r\n            }\r\n            colorDark: {\r\n                hex: string\r\n            }\r\n        }\r\n        sources: Array<Spicetify.Platform.ImageSized>\r\n    }\r\n    discs: {\r\n        totalCount: number\r\n        items: Array<{\r\n            number: number\r\n            tracks: {\r\n                totalCount: number\r\n            }\r\n        }>\r\n    }\r\n    releases: ItemsWithCount<{\r\n        uri: string\r\n        name: string\r\n    }>\r\n    type: string\r\n    date: {\r\n        isoString: string\r\n        precision: string\r\n    }\r\n    playability: {\r\n        playable: boolean\r\n        reason: string\r\n    }\r\n    label: string\r\n    copyright: {\r\n        totalCount: number\r\n        items: Array<{\r\n            type: string\r\n            text: string\r\n        }>\r\n    }\r\n    courtesyLine: string\r\n    saved: boolean\r\n    sharingInfo: {\r\n        shareUrl: string\r\n        shareId: string\r\n    }\r\n    tracks: ItemsWithCount<{\r\n        uid: string\r\n        track: {\r\n            saved: boolean\r\n            uri: string\r\n            name: string\r\n            playcount: string\r\n            discNumber: number\r\n            trackNumber: number\r\n            contentRating: {\r\n                label: string\r\n            }\r\n            relinkingInformation: any\r\n            duration: {\r\n                totalMilliseconds: number\r\n            }\r\n            playability: {\r\n                playable: boolean\r\n            }\r\n            artists: Items<{\r\n                uri: string\r\n                profile: {\r\n                    name: string\r\n                }\r\n            }>\r\n        }\r\n    }>\r\n    moreAlbumsByArtist: Items<{\r\n        discography: {\r\n            popularReleasesAlbums: Items<{\r\n                id: string\r\n                uri: string\r\n                name: string\r\n                date: {\r\n                    year: number\r\n                }\r\n                coverArt: {\r\n                    sources: Array<Spicetify.Platform.ImageSized>\r\n                }\r\n                playability: {\r\n                    playable: boolean\r\n                    reason: string\r\n                }\r\n                sharingInfo: {\r\n                    shareId: string\r\n                    shareUrl: string\r\n                }\r\n                type: string\r\n            }>\r\n        }\r\n    }>\r\n}\r\nconst queue = new Array<() => void>()\r\nexport const fetchAlbum = async (uri: string, offset = 0, limit = 450) => {\r\n    let resolveOwn: undefined | (() => void)\r\n    await new Promise<void>(resolve => {\r\n        queue.push((resolveOwn = resolve))\r\n        if (queue.length < 1000) {\r\n            resolve()\r\n        }\r\n    })\r\n\r\n    const res = await GraphQL.Request(GraphQL.Definitions.getAlbum, {\r\n        uri,\r\n        locale: Locale.getLocale(),\r\n        offset,\r\n        limit,\r\n    })\r\n\r\n    const index = queue.findIndex(r => r === resolveOwn)\r\n    if (index != -1) {\r\n        queue.splice(index, 1)\r\n    }\r\n    queue[0]?.()\r\n\r\n    return res.data.albumUnion as fetchAlbumRes\r\n}\r\n", "import { Item2, ItemsReleases } from \"./sharedTypes.ts\"\r\n\r\nconst { GraphQL } = Spicetify\r\n\r\nexport type fetchArtistDiscographyRes = {\r\n    __typename: \"artist\"\r\n    discography: {\r\n        all: ItemsReleases<Item2>\r\n    }\r\n}\r\nexport const fetchArtistDiscography = (uri: string, offset = 0, limit = 100) => {\r\n    const _fetchArtistDiscography = async (offset: number, limit: number) => {\r\n        const res = await GraphQL.Request(GraphQL.Definitions.queryArtistDiscographyAll, {\r\n            uri,\r\n            offset,\r\n            limit,\r\n        })\r\n        const { discography } = res.data.artistUnion as fetchArtistDiscographyRes\r\n        const { totalCount, items } = discography.all\r\n\r\n        if (offset + limit < totalCount) items.push(...(await _fetchArtistDiscography(offset + limit, limit)))\r\n\r\n        return items\r\n    }\r\n\r\n    return _fetchArtistDiscography(offset, limit)\r\n}\r\n", "import {\r\n    Item1,\r\n    ItemMin,\r\n    Items,\r\n    ItemsReleases,\r\n    ItemsReleasesWithCount,\r\n    ItemsWithCount,\r\n    TopTracksItem,\r\n} from \"./sharedTypes.ts\"\r\n\r\nconst { Locale, GraphQL } = Spicetify\r\n\r\nexport type fetchArtistOverviewRes = {\r\n    __typename: \"Artist\"\r\n    id: string\r\n    uri: string\r\n    saved: boolean\r\n    stats: {\r\n        followers: number\r\n        monthlyListeners: number\r\n        worldRank: number\r\n        topCities: {\r\n            items: Array<{\r\n                numberOfListeners: number\r\n                city: string\r\n                country: string\r\n                region: string\r\n            }>\r\n        }\r\n    }\r\n    profile: {\r\n        name: string\r\n        verified: boolean\r\n        pinnedItem: {\r\n            comment: string\r\n            type: string\r\n            backgroundImage: {\r\n                sources: Array<{ url: string }>\r\n            }\r\n            itemV2: {}\r\n            item: {\r\n                uri: string\r\n                name: string\r\n                images: {\r\n                    items: Array<{\r\n                        sources: Array<{\r\n                            url: string\r\n                            width: null\r\n                            height: null\r\n                        }>\r\n                    }>\r\n                }\r\n            }\r\n        }\r\n        biography: {\r\n            type: string\r\n            text: string\r\n        }\r\n        externalLinks: {\r\n            items: Array<{\r\n                name: string\r\n                url: string\r\n            }>\r\n        }\r\n        playlistV2: {\r\n            totalCount: number\r\n            items: Array<{\r\n                data: {\r\n                    __typename: \"Playlist\"\r\n                    uri: string\r\n                    name: string\r\n                    description: string\r\n                    ownerV2: {\r\n                        data: {\r\n                            __typename: \"User\"\r\n                            name: string\r\n                        }\r\n                    }\r\n                    images: {\r\n                        items: Array<{\r\n                            sources: Array<Spicetify.Platform.ImageSized>\r\n                        }>\r\n                    }\r\n                }\r\n            }>\r\n        }\r\n    }\r\n    visuals: {\r\n        gallery: {\r\n            items: Array<{\r\n                sources: Array<Spicetify.Platform.ImageSized>\r\n            }>\r\n        }\r\n        avatarImage: {\r\n            sources: Array<Spicetify.Platform.ImageSized>\r\n            extractedColors: {\r\n                colorRaw: {\r\n                    hex: string\r\n                }\r\n            }\r\n        }\r\n        headerImage: {\r\n            sources: Array<Spicetify.Platform.ImageSized>\r\n            extractedColors: {\r\n                colorRaw: {\r\n                    hex: string\r\n                }\r\n            }\r\n        }\r\n    }\r\n    discography: {\r\n        latest: Item1\r\n        popularReleasesAlbums: ItemsWithCount<Item1>\r\n        singles: ItemsReleases<Item1>\r\n        albums: ItemsReleases<Item1>\r\n        compilations: ItemsReleases<Item1>\r\n        topTracks: Items<TopTracksItem>\r\n    }\r\n    preRelease: any | null\r\n    relatedContent: {\r\n        appearsOn: ItemsReleasesWithCount<\r\n            ItemMin & {\r\n                artists: Items<{\r\n                    uri: string\r\n                    profile: {\r\n                        name: string\r\n                    }\r\n                }>\r\n                date: {\r\n                    year: number\r\n                }\r\n            }\r\n        >\r\n        featuringV2: {\r\n            totalCount: number\r\n            items: any[]\r\n        }\r\n        discoveredOnV2: {\r\n            totalCount: number\r\n            items: any[]\r\n        }\r\n        relatedArtists: {\r\n            totalCount: number\r\n            items: any[]\r\n        }\r\n    }\r\n    sharingInfo: {\r\n        shareUrl: string\r\n        shareId: string\r\n    }\r\n    goods: {\r\n        events: {\r\n            userLocation: {\r\n                name: string\r\n            }\r\n            concerts: ItemsWithCount<{\r\n                uri: string\r\n                id: string\r\n                title: string\r\n                category: \"CONCERT\"\r\n                festival: boolean\r\n                nearUser: boolean\r\n                venue: {\r\n                    name: string\r\n                    location: { name: string }\r\n                    coordinates: {\r\n                        latitude: number\r\n                        longitude: number\r\n                    }\r\n                }\r\n                partnerLinks: Items<{\r\n                    partnerName: string\r\n                    url: string\r\n                }>\r\n\r\n                date: Date\r\n            }> & {\r\n                pagingInfo: {\r\n                    limit: number\r\n                }\r\n            }\r\n        }\r\n        merch: Items<{\r\n            image: {\r\n                sources: Array<{ url: string }>\r\n            }\r\n            name: string\r\n            description: string\r\n            price: string\r\n            uri: string\r\n            url: string\r\n        }>\r\n    }\r\n}\r\nexport const fetchArtistOverview = async (uri: string) => {\r\n    const res = await GraphQL.Request(GraphQL.Definitions.queryArtistOverview, {\r\n        uri,\r\n        locale: Locale.getLocale(),\r\n        includePrerelease: true,\r\n    })\r\n\r\n    return res.data.artistUnion as fetchArtistOverviewRes\r\n}\r\n", "import { _ } from \"./deps.ts\"\r\n\r\nconst { Snackbar } = Spicetify\r\n\r\ntype async = {\r\n    <A, B>(f: (a: A) => Promise<B>): (fa: Promise<A>) => Promise<B>\r\n    <A, B>(f: (a: A) => B): (fa: Promise<A>) => Promise<B>\r\n}\r\nexport const pMchain: async =\r\n    <A, R>(f: (a: A) => R) =>\r\n    async (fa: A) =>\r\n        f(await fa)\r\n\r\nexport const chunkify50 =\r\n    <A, R>(fn: (a: Array<A>) => R) =>\r\n    async (args: Array<A>) => {\r\n        const a = await Promise.all(_.chunk(args, 50).map(fn))\r\n        return a.flat()\r\n    }\r\n\r\nexport const progressify = <F extends (...args: any) => any>(f: F, n: number) => {\r\n    let i = n,\r\n        lastProgress = 0\r\n    return async function (..._: Parameters<F>): Promise<Awaited<ReturnType<F>>> {\r\n        const res = (await f(...arguments)) as Awaited<ReturnType<F>>,\r\n            progress = Math.round((1 - --i / n) * 100)\r\n        if (progress > lastProgress) {\r\n            ;(Snackbar as any).updater.enqueueSetState(Snackbar, () => ({\r\n                snacks: [],\r\n                queue: [],\r\n            }))\r\n            Snackbar.enqueueSnackbar(`Loading: ${progress}%`, {\r\n                variant: \"default\",\r\n                autoHideDuration: 200,\r\n                transitionDuration: {\r\n                    enter: 0,\r\n                    exit: 0,\r\n                },\r\n            })\r\n        }\r\n        lastProgress = progress\r\n        return res\r\n    }\r\n}\r\n", "import { Track } from \"https://esm.sh/v135/@fostertheweb/spotify-web-api-ts-sdk/dist/mjs/types.js\"\r\nimport { fetchAlbumRes } from \"./GraphQL/fetchAlbum.ts\"\r\nimport { TopTracksItem } from \"./GraphQL/sharedTypes.ts\"\r\n\r\nexport type TrackData = {\r\n    uri: string\r\n    uid?: string\r\n    name: string\r\n    albumUri: string\r\n    albumName?: string\r\n    artistUris: string[]\r\n    artistName: string\r\n    durationMilis: number\r\n    playcount?: number\r\n    popularity?: number\r\n    releaseDate?: number\r\n    lastfmPlaycount?: number\r\n    scrobbles?: number\r\n    personalScrobbles?: number\r\n}\r\n\r\nexport const parseTopTrackFromArtist = ({ track }: TopTracksItem) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: track.albumOfTrack.uri,\r\n    albumName: undefined,\r\n    artistUris: track.artists.items.map(artist => artist.uri),\r\n    artistName: track.artists.items[0].profile.name,\r\n    durationMilis: track.duration.totalMilliseconds,\r\n    playcount: Number(track.playcount),\r\n    popularity: undefined,\r\n    releaseDate: undefined,\r\n})\r\n\r\nexport const parseArtistLikedTrack = (track: Spicetify.Platform.Track) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: track.album.uri,\r\n    albumName: track.album.name,\r\n    artistUris: track.artists.map(artist => artist.uri),\r\n    artistName: track.artists[0].name,\r\n    durationMilis: track.duration.milliseconds,\r\n    playcount: undefined,\r\n    popularity: undefined,\r\n    releaseDate: undefined,\r\n})\r\n\r\nexport const parseAlbumTrack = ({ track }: fetchAlbumRes[\"tracks\"][\"items\"][0]) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: \"\", // gets filled in later\r\n    albumName: \"\", // gets filled in later\r\n    artistUris: track.artists.items.map(artist => artist.uri),\r\n    artistName: track.artists.items[0].profile.name,\r\n    durationMilis: track.duration.totalMilliseconds,\r\n    playcount: Number(track.playcount),\r\n    popularity: undefined,\r\n    releaseDate: -1, // gets filled in later\r\n})\r\n\r\nexport const parsePlaylistAPITrack = (track: Spicetify.Platform.PlaylistAPI.Track) => ({\r\n    uri: track.uri,\r\n    uid: track.uid,\r\n    name: track.name,\r\n    albumUri: track.album.uri,\r\n    albumName: track.album.name,\r\n    artistUris: track.artists.map(artist => artist.uri),\r\n    artistName: track.artists[0].name,\r\n    durationMilis: track.duration.milliseconds,\r\n    playcount: undefined,\r\n    popularity: undefined,\r\n    releaseDate: undefined,\r\n})\r\n\r\nexport const parseWebAPITrack = (track: Track) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: track.album.uri,\r\n    albumName: track.album.name,\r\n    artistUris: track.artists.map(artist => artist.uri),\r\n    artistName: track.artists[0].name,\r\n    durationMilis: track.duration_ms,\r\n    playcount: undefined,\r\n    popularity: track.popularity,\r\n    releaseDate: new Date(track.album.release_date).getTime(),\r\n})\r\n\r\nexport const parseLibraryAPILikedTracks = (track: Spicetify.Platform.Track) => ({\r\n    uri: track.uri,\r\n    uid: undefined,\r\n    name: track.name,\r\n    albumUri: track.album.uri,\r\n    albumName: track.album.name,\r\n    artistUris: track.artists.map(artist => artist.uri),\r\n    artistName: track.artists[0].name,\r\n    durationMilis: track.duration.milliseconds,\r\n    playcount: undefined,\r\n    popularity: undefined,\r\n    releaseDate: undefined,\r\n})\r\n", "import { SpotifyLoc, SpotifyURI } from \"./util.ts\"\r\n\r\nconst { CosmosAsync } = Spicetify\r\nconst { LibraryAPI, PlaylistAPI, RootlistAPI, PlaylistPermissionsAPI, EnhanceAPI, LocalFilesAPI } = Spicetify.Platform\r\n\r\nexport const areTracksLiked = (uris: SpotifyURI[]) => LibraryAPI.contains(...uris)\r\n\r\nexport const setTracksLiked = (uris: SpotifyURI[], liked: boolean) => LibraryAPI[liked ? \"add\" : \"remove\"]({ uris })\r\n\r\nexport const toggleTracksLiked = async (uris: SpotifyURI[]) => {\r\n    const liked = await areTracksLiked(uris)\r\n\r\n    const urisByLiked = Object.groupBy(uris, (_, index) => (liked[index] ? \"liked\" : \"notLiked\"))\r\n\r\n    const ps = []\r\n    urisByLiked.liked?.length && ps.push(setTracksLiked(urisByLiked.liked, false))\r\n    urisByLiked.notLiked?.length && ps.push(setTracksLiked(urisByLiked.notLiked, true))\r\n\r\n    return Promise.all(ps)\r\n}\r\n\r\nexport const fetchLikedTracks = async () =>\r\n    (\r\n        await LibraryAPI.getTracks({\r\n            limit: Number.MAX_SAFE_INTEGER,\r\n        })\r\n    ).items\r\nexport const fetchArtistLikedTracks = async (uri: SpotifyURI, offset = 0, limit = 100) =>\r\n    (await LibraryAPI.getTracks({ uri, offset, limit })).items\r\n\r\nexport const fetchPlaylistContents = async (uri: SpotifyURI) => (await PlaylistAPI.getContents(uri)).items\r\n\r\nexport const createFolder = async (name: string, location: Spicetify.Platform.RootlistAPI.Location = {}) =>\r\n    await RootlistAPI.createFolder(name, location)\r\n\r\nexport const addPlaylist = async (playlist: SpotifyURI, folder?: SpotifyURI) =>\r\n    await RootlistAPI.add([playlist], folder ? SpotifyLoc.after.fromUri(folder) : {})\r\n\r\n/* Replaced by createPlaylistFromTracks */\r\nexport const createPlaylist = async (name: string, location: Spicetify.Platform.RootlistAPI.Location = {}) =>\r\n    await RootlistAPI.createPlaylist(name, location)\r\n\r\nexport const createPlaylistFromTracks = (name: string, tracks: SpotifyURI[], folder?: SpotifyURI) =>\r\n    CosmosAsync.post(\"sp://core-playlist/v1/rootlist?responseFormat=protobufJson\", {\r\n        operation: \"create\",\r\n        ...(folder ? { after: folder } : {}),\r\n        name,\r\n        playlist: true,\r\n        uris: tracks,\r\n    })\r\n\r\nexport const setPlaylistVisibility = async (playlist: SpotifyURI, visibleForAll: boolean) =>\r\n    await PlaylistPermissionsAPI.setBasePermission(playlist, visibleForAll ? \"VIEWER\" : \"BLOCKED\")\r\nexport const setPlaylistPublished = async (playlist: SpotifyURI, published: boolean) =>\r\n    await RootlistAPI.setPublishedState(playlist, published)\r\n\r\nexport const fetchFolder = async (folder?: SpotifyURI) => await RootlistAPI.getContents({ folderUri: folder })\r\nexport const fetchRootFolder = () => fetchFolder(undefined)\r\n\r\nexport const addPlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    tracks: SpotifyURI[],\r\n    location: Spicetify.Platform.RootlistAPI.Location = {},\r\n) => await PlaylistAPI.add(playlist, tracks, location)\r\n\r\nexport const movePlaylistTracks = async (\r\n    playlist: SpotifyURI,\r\n    uids: string[],\r\n    location: Spicetify.Platform.RootlistAPI.Location = {},\r\n) =>\r\n    await PlaylistAPI.move(\r\n        playlist,\r\n        uids.map(uid => ({ uid })),\r\n        location,\r\n    )\r\n\r\nexport const removePlaylistTracks = (playlist: SpotifyURI, tracks: Array<{ uid: string }>) =>\r\n    PlaylistAPI.remove(playlist, tracks)\r\n\r\nexport const fetchPlaylistEnhancedSongs300 = async (uri: SpotifyURI, offset = 0, limit = 300) =>\r\n    (await EnhanceAPI.getPage(uri, /* iteration */ 0, /* sessionId */ 0, offset, limit)).enhancePage.pageItems\r\nexport const fetchPlaylistEnhancedSongs = async (\r\n    uri: SpotifyURI,\r\n    offset = 0,\r\n): Promise<Array<Spicetify.Platform.EnhanceAPI.EnhanceItem>> => {\r\n    const nextPageItems = await fetchPlaylistEnhancedSongs300(uri, offset)\r\n    if (nextPageItems?.length < 300) return nextPageItems\r\n    else return nextPageItems.concat(await fetchPlaylistEnhancedSongs(uri, offset + 300))\r\n}\r\n\r\nexport const fetchLocalTracks = async () => await LocalFilesAPI.getTracks()\r\n", "import { task } from \"https://esm.sh/fp-ts\"\r\n\r\nimport { createFolder } from \"../../shared/platformApi.ts\"\r\nimport { SettingsSection } from \"../../shared/settings.tsx\"\r\nimport { SpotifyURI } from \"../../shared/util.ts\"\r\n\r\nconst SORTED_PLAYLISTS_FOLDER_NAME = \"Sorted Playlists\"\r\n\r\nconst settings = new SettingsSection(\"Sort Plus\")\r\n    .addToggle({ id: \"preventDuplicates\", desc: \"Prevent Duplicates\" }, task.of(true))\r\n    .addToggle({ id: \"descending\", desc: \"Descending\" }, task.of(true))\r\n    .addToggle({ id: \"artistAllDiscography\", desc: \"All of the artist's Discography\" })\r\n    .addToggle({ id: \"artistTopTracks\", desc: \"Top Tracks\" }, task.of(true))\r\n    .addToggle({ id: \"artistPopularReleases\", desc: \"Popular Releases\" }, task.of(true))\r\n    .addToggle({ id: \"artistSingles\", desc: \"Singles\" })\r\n    .addToggle({ id: \"artistAlbums\", desc: \"Albums\" })\r\n    .addToggle({ id: \"artistCompilations\", desc: \"Compilations\" })\r\n    .addToggle({ id: \"artistLikedTracks\", desc: \"Liked Tracks\" }, task.of(true))\r\n    .addToggle({ id: \"artistAppearsOn\", desc: \"Appears On\" }, task.of(false))\r\n    .addInput({ id: \"lastFmUsername\", desc: \"Last.fm Username\", inputType: \"text\" }, task.of(\"Username\"))\r\n    .addInput(\r\n        { id: \"LFMApiKey\", desc: \"Last.fm API Key\", inputType: \"text\" },\r\n        task.of(\"********************************\"),\r\n    )\r\n    .addInput(\r\n        {\r\n            id: \"sortedPlaylistsFolderUri\",\r\n            desc: \"Sorted Playlists folder uri\",\r\n            inputType: \"text\",\r\n        },\r\n        async () => (await createFolder(SORTED_PLAYLISTS_FOLDER_NAME)).uri,\r\n    )\r\n\r\nsettings.pushSettings()\r\n\r\nexport const CONFIG = settings.toObject() as {\r\n    preventDuplicates: boolean\r\n    artistAllDiscography: boolean\r\n    artistTopTracks: boolean\r\n    artistPopularReleases: boolean\r\n    artistSingles: boolean\r\n    artistAlbums: boolean\r\n    artistCompilations: boolean\r\n    artistLikedTracks: boolean\r\n    artistAppearsOn: boolean\r\n    descending: boolean\r\n    lastFmUsername: string\r\n    LFMApiKey: string\r\n    sortedPlaylistsFolderUri: SpotifyURI\r\n}\r\n", "import { task } from \"https://esm.sh/fp-ts\"\r\nimport { SectionTitle, SettingColumn, SettingSection, SettingText, SettingToggle } from \"./modules.ts\"\r\nimport { sleep } from \"./util.ts\"\r\nimport { _ } from \"./deps.ts\"\r\n\r\nconst { React, ReactDOM, LocalStorage } = Spicetify\r\nconst { ButtonSecondary } = Spicetify.ReactComponent\r\nconst { History } = Spicetify.Platform\r\n\r\ntype FieldToProps<A> = Omit<A, \"type\">\r\n\r\nexport const enum FieldType {\r\n    BUTTON = \"button\",\r\n    TOGGLE = \"toggle\",\r\n    INPUT = \"input\",\r\n    HIDDEN = \"hidden\",\r\n}\r\n\r\nexport interface BaseField {\r\n    id: string\r\n    type: FieldType\r\n    desc: string\r\n}\r\n\r\nexport type SettingsField = HiddenField | InputField | ButtonField | ToggleField\r\n\r\nexport interface ButtonField extends BaseField {\r\n    type: FieldType.BUTTON\r\n    text: string\r\n    onClick?: () => void\r\n}\r\nexport interface ToggleField extends BaseField {\r\n    type: FieldType.TOGGLE\r\n    onSelected?: (checked: boolean) => void\r\n}\r\n\r\nexport interface InputField extends BaseField {\r\n    type: FieldType.INPUT\r\n    inputType: string\r\n    onChange?: (value: string) => void\r\n}\r\n\r\nexport interface HiddenField extends BaseField {\r\n    type: FieldType.HIDDEN\r\n}\r\n\r\nexport class SettingsSection {\r\n    private stopHistoryListener: any\r\n    public id: string\r\n\r\n    constructor(public name: string, public sectionFields: { [key: string]: SettingsField } = {}) {\r\n        this.id = _.kebabCase(name)\r\n    }\r\n\r\n    pushSettings = () => {\r\n        if (this.stopHistoryListener) this.stopHistoryListener()\r\n\r\n        this.stopHistoryListener = History.listen(() => this.render())\r\n        this.render()\r\n    }\r\n\r\n    toObject = () =>\r\n        new Proxy(\r\n            {},\r\n            {\r\n                get: (target, prop) => SettingsSection.getFieldValue(this.getId(prop.toString())),\r\n            },\r\n        )\r\n\r\n    private render = async () => {\r\n        while (!document.getElementById(\"desktop.settings.selectLanguage\")) {\r\n            if (History.location.pathname !== \"/preferences\") return\r\n            await sleep(100)\r\n        }\r\n\r\n        const allSettingsContainer = document.querySelector(\".x-settings-container\")!\r\n\r\n        let pluginSettingsContainer = Array.from(allSettingsContainer.children).find(({ id }) => id === this.id)\r\n\r\n        if (!pluginSettingsContainer) {\r\n            pluginSettingsContainer = document.createElement(\"div\")\r\n            pluginSettingsContainer.id = this.id\r\n            pluginSettingsContainer.className = \"settingsContainer\"\r\n            allSettingsContainer.appendChild(pluginSettingsContainer)\r\n        }\r\n\r\n        ReactDOM.render(<this.SettingsSection />, pluginSettingsContainer)\r\n    }\r\n\r\n    addButton = (props: FieldToProps<ButtonField>) => {\r\n        this.addField(FieldType.BUTTON, props)\r\n        return this\r\n    }\r\n\r\n    addToggle = (props: FieldToProps<ToggleField>, defaultValue = task.of(false)) => {\r\n        this.addField(FieldType.TOGGLE, props, defaultValue)\r\n        return this\r\n    }\r\n\r\n    addInput = (props: FieldToProps<InputField>, defaultValue = task.of(\"\")) => {\r\n        this.addField(FieldType.INPUT, props, defaultValue)\r\n        return this\r\n    }\r\n\r\n    private addField(type: FieldType, opts: FieldToProps<SettingsField>, defaultValue?: any) {\r\n        if (defaultValue !== undefined) {\r\n            const settingId = this.getId(opts.id)\r\n            SettingsSection.setDefaultFieldValue(settingId, defaultValue)\r\n        }\r\n        const field = Object.assign({}, opts, { type }) as SettingsField\r\n        this.sectionFields[opts.id] = field\r\n    }\r\n\r\n    getId = (nameId: string) => [\"extensions\", this.id, nameId].join(\":\")\r\n\r\n    private useStateFor = <A,>(id: string) => {\r\n        const [value, setValueState] = React.useState(SettingsSection.getFieldValue<A>(id))\r\n\r\n        return [\r\n            value,\r\n            (newValue: A) => {\r\n                if (newValue !== undefined) {\r\n                    setValueState(newValue)\r\n                    SettingsSection.setFieldValue(id!, newValue)\r\n                }\r\n            },\r\n        ] as const\r\n    }\r\n\r\n    static getFieldValue = <R,>(id: string): R => JSON.parse(LocalStorage.get(id) ?? \"null\")\r\n\r\n    static setFieldValue = (id: string, newValue: any) => LocalStorage.set(id, JSON.stringify(newValue))\r\n\r\n    private static setDefaultFieldValue = async (id: string, defaultValue: task.Task<any>) => {\r\n        if (SettingsSection.getFieldValue(id) === null) SettingsSection.setFieldValue(id, await defaultValue())\r\n    }\r\n\r\n    private toReactComponent = (field: SettingsField) => {\r\n        switch (field.type) {\r\n            case FieldType.BUTTON:\r\n                return this.ButtonField(field)\r\n            case FieldType.TOGGLE:\r\n                return this.ToggleField(field)\r\n            case FieldType.INPUT:\r\n                return this.InputField(field)\r\n            default:\r\n                return <></>\r\n        }\r\n    }\r\n\r\n    private SettingsSection = () => (\r\n        <SettingSection filterMatchQuery={this.name}>\r\n            <SectionTitle>{this.name}</SectionTitle>\r\n            {Object.values(this.sectionFields).map(this.toReactComponent)}\r\n        </SettingSection>\r\n    )\r\n\r\n    SettingField = ({ field, children }: { field: SettingsField; children?: any }) => (\r\n        <SettingColumn filterMatchQuery={field.id}>\r\n            <div className=\"x-settings-firstColumn\">\r\n                <SettingText htmlFor={field.id}>{field.desc}</SettingText>\r\n            </div>\r\n            <div className=\"x-settings-secondColumn\">{children}</div>\r\n        </SettingColumn>\r\n    )\r\n\r\n    ButtonField = (field: ButtonField) => (\r\n        <this.SettingField field={field}>\r\n            <ButtonSecondary id={field.id} buttonSize=\"sm\" onClick={field.onClick} className=\"x-settings-button\">\r\n                {field.text}\r\n            </ButtonSecondary>\r\n        </this.SettingField>\r\n    )\r\n\r\n    ToggleField = (field: ToggleField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<boolean>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <SettingToggle\r\n                    id={field.id}\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    onSelected={(checked: boolean) => {\r\n                        setValue(checked)\r\n                        field.onSelected?.(checked)\r\n                    }}\r\n                    className=\"x-settings-button\"\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n\r\n    InputField = (field: InputField) => {\r\n        const id = this.getId(field.id)\r\n        const [value, setValue] = this.useStateFor<string>(id)\r\n        return (\r\n            <this.SettingField field={field}>\r\n                <input\r\n                    className=\"x-settings-input\"\r\n                    id={field.id}\r\n                    dir=\"ltr\"\r\n                    value={SettingsSection.getFieldValue(id)}\r\n                    type={field.inputType}\r\n                    onChange={e => {\r\n                        const value = e.currentTarget.value\r\n                        setValue(value)\r\n                        field.onChange?.(value)\r\n                    }}\r\n                />\r\n            </this.SettingField>\r\n        )\r\n    }\r\n}\r\n", "import { _ } from \"./deps.ts\"\r\n\r\n// @ts-expect-error webpackChunkOpen is only defined in the browser\r\nconst require = webpackChunkopen.push([[Symbol(\"Dummy module to extract require method\")], {}, re => re])\r\nconst cache = Object.keys(require.m).map(id => require(id))\r\nexport const modules = cache\r\n    .filter((module): module is Object => typeof module === \"object\")\r\n    .flatMap(module => Object.values(module))\r\nexport const functionModules = modules.filter((module): module is Function => typeof module === \"function\")\r\n\r\n// const reactObjects = modules.filter(m => m?.$$typeof)\r\n\r\n// const reactForwardRefSymbol = Spicetify.React.forwardRef().$$typeof\r\n// const reactForwardRefs = reactObjects.filter(m => m.$$typeof === reactForwardRefSymbol)\r\n\r\n// const reactMemoSymbol = Spicetify.React.memo().$$typeof\r\n// const reactMemos = reactObjects.filter(m => m.$$typeof === reactMemoSymbol)\r\n\r\nconst findModuleByStrings = (modules: Array<any>, ...filters: Array<string | RegExp>) =>\r\n    modules.find(f =>\r\n        _.overEvery(\r\n            filters.map(filter =>\r\n                typeof filter === \"string\" ? (s: string) => s.includes(filter) : (s: string) => filter.test(s),\r\n            ),\r\n        )(f.toString()),\r\n    )\r\n\r\nexport const CheckedPlaylistButtonIcon = findModuleByStrings(\r\n    functionModules,\r\n    \"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z\",\r\n)\r\n\r\nexport const SettingSection = findModuleByStrings(\r\n    functionModules,\r\n    \"function m(e){return(0,d.jsx)(r.k,{children:(0,d.jsx)(u,{...e})})}\",\r\n)\r\nexport const SectionTitle = findModuleByStrings(functionModules, \"textToHighlight\", \"textBase\")\r\nexport const SettingColumn = findModuleByStrings(functionModules, \"setSectionFilterMatchQueryValue\", \"filterMatchQuery\")\r\nexport const SettingText = findModuleByStrings(functionModules, \"textSubdued\", \"viola\")\r\nexport const SettingToggle = findModuleByStrings(functionModules, \"condensed\", \"onSelected\")\r\n\r\nexport const curationButtonClass = modules.find(m => m?.curationButton)!.curationButton\r\n", "import { fetchAlbum } from \"../../shared/GraphQL/fetchAlbum.ts\"\r\nimport { fetchArtistDiscography } from \"../../shared/GraphQL/fetchArtistDiscography.ts\"\r\nimport { fetchArtistOverview } from \"../../shared/GraphQL/fetchArtistOveriew.ts\"\r\nimport { ItemMin, ItemsReleases, ItemsReleasesWithCount, ItemsWithCount } from \"../../shared/GraphQL/sharedTypes.ts\"\r\nimport { _, fp } from \"../../shared/deps.ts\"\r\nimport { pMchain } from \"../../shared/fp.ts\"\r\nimport {\r\n    TrackData,\r\n    parseAlbumTrack,\r\n    parseArtistLikedTrack,\r\n    parseLibraryAPILikedTracks,\r\n    parsePlaylistAPITrack,\r\n    parseTopTrackFromArtist,\r\n} from \"../../shared/parse.ts\"\r\nimport { fetchArtistLikedTracks, fetchLikedTracks, fetchPlaylistContents } from \"../../shared/platformApi.ts\"\r\nimport { SpotifyURI } from \"../../shared/util.ts\"\r\n\r\nimport { CONFIG } from \"./settings.ts\"\r\n\r\nconst { URI } = Spicetify\r\n\r\nexport const getTracksFromAlbum = async (uri: string) => {\r\n    const albumRes = await fetchAlbum(uri)\r\n    const releaseDate = new Date(albumRes.date.isoString).getTime()\r\n\r\n    const filler = {\r\n        albumUri: albumRes.uri,\r\n        albumName: albumRes.name,\r\n        releaseDate,\r\n    }\r\n\r\n    return Promise.all(\r\n        albumRes.tracks.items.map(async track => {\r\n            const parsedTrack = await parseAlbumTrack(track)\r\n            return Object.assign(parsedTrack, filler) as TrackData\r\n        }),\r\n    )\r\n}\r\n\r\nexport const getLikedTracks = _.flow(fetchLikedTracks, pMchain(fp.map(parseLibraryAPILikedTracks)))\r\n\r\nexport const getTracksFromPlaylist = _.flow(\r\n    fetchPlaylistContents,\r\n    pMchain(fp.map(parsePlaylistAPITrack)),\r\n    pMchain(fp.filter(track => !URI.isLocalTrack(track.uri))),\r\n)\r\n\r\nexport const getTracksFromArtist = async (uri: SpotifyURI) => {\r\n    const allTracks = new Array<TrackData>()\r\n\r\n    const itemsWithCountAr = new Array<ItemsWithCount<ItemMin>>()\r\n    const itemsReleasesAr = new Array<ItemsReleases<ItemMin>>()\r\n    const appearsOnAr = new Array<ItemsReleasesWithCount<ItemMin>>()\r\n\r\n    if (CONFIG.artistAllDiscography) {\r\n        const items = await fetchArtistDiscography(uri)\r\n        itemsReleasesAr.push({ items, totalCount: Infinity })\r\n    } else {\r\n        const { discography, relatedContent } = await fetchArtistOverview(uri)\r\n\r\n        CONFIG.artistLikedTracks && allTracks.push(...(await fetchArtistLikedTracks(uri)).map(parseArtistLikedTrack))\r\n        CONFIG.artistTopTracks && allTracks.push(...discography.topTracks.items.map(parseTopTrackFromArtist))\r\n        CONFIG.artistPopularReleases && itemsWithCountAr.push(discography.popularReleasesAlbums)\r\n        CONFIG.artistSingles && itemsReleasesAr.push(discography.singles)\r\n        CONFIG.artistAlbums && itemsReleasesAr.push(discography.albums)\r\n        CONFIG.artistCompilations && itemsReleasesAr.push(discography.compilations)\r\n        CONFIG.artistAppearsOn && appearsOnAr.push(relatedContent.appearsOn)\r\n    }\r\n\r\n    const items1 = itemsWithCountAr.flatMap(iwc => iwc.items)\r\n    const items2 = itemsReleasesAr.flatMap(ir => ir.items.flatMap(i => i.releases.items))\r\n    const albumLikeUris = items1.concat(items2).map(item => item.uri)\r\n    const albumsTracks = await Promise.all(albumLikeUris.map(getTracksFromAlbum))\r\n\r\n    const appearsOnUris = appearsOnAr.flatMap(ir => ir.items.flatMap(i => i.releases.items)).map(item => item.uri)\r\n    const appearsOnTracks = await Promise.all(appearsOnUris.map(getTracksFromAlbum))\r\n\r\n    allTracks.push(...albumsTracks.flat(), ...appearsOnTracks.flat().filter(track => track.artistUris.includes(uri)))\r\n    return await Promise.all(allTracks)\r\n}\r\n", "import { spotifyApi } from \"../../shared/api.ts\"\r\nimport { _ } from \"../../shared/deps.ts\"\r\nimport { TrackData } from \"../../shared/parse.ts\"\r\n\r\nimport { getLikedTracks, getTracksFromAlbum, getTracksFromArtist, getTracksFromPlaylist } from \"./fetch.ts\"\r\n\r\nconst { URI } = Spicetify\r\n\r\nexport const SEPARATOR_URI = \"spotify:separator\"\r\n\r\nexport enum ERROR {\r\n    LAST_SORTED_QUEUE_EMPTY = \"Must sort to queue beforehand\",\r\n    LAST_SORTED_QUEUE_NOT_A_PLAYLIST = \"Last sorted queue must be a playlist\",\r\n}\r\n\r\nexport type AsyncTracksOperation = (tracks: TrackData[]) => Promise<TrackData[]> | TrackData[]\r\n\r\nexport enum SortAction {\r\n    SPOTIFY_PLAYCOUNT = \"Spotify - Play Count\",\r\n    SPOTIFY_POPULARITY = \"Spotify - Popularity\",\r\n    SPOTIFY_RELEASEDATE = \"Spotify - Release Date\",\r\n    LASTFM_SCROBBLES = \"LastFM - Scrobbles\",\r\n    LASTFM_PERSONALSCROBBLES = \"LastFM - My Scrobbles\",\r\n    LASTFM_PLAYCOUNT = \"LastFM - Play Count\",\r\n}\r\n\r\nexport enum SortActionIcon {\r\n    \"Spotify - Play Count\" = \"play\",\r\n    \"Spotify - Popularity\" = \"heart\",\r\n    \"Spotify - Release Date\" = \"list-view\",\r\n    \"LastFM - Scrobbles\" = \"volume\",\r\n    \"LastFM - My Scrobbles\" = \"artist\",\r\n    \"LastFM - Play Count\" = \"subtitles\",\r\n}\r\n\r\nexport enum SortActionProp {\r\n    \"Spotify - Play Count\" = \"playcount\",\r\n    \"Spotify - Popularity\" = \"popularity\",\r\n    \"Spotify - Release Date\" = \"releaseDate\",\r\n    \"LastFM - Scrobbles\" = \"scrobbles\",\r\n    \"LastFM - My Scrobbles\" = \"personalScrobbles\",\r\n    \"LastFM - Play Count\" = \"lastfmPlaycount\",\r\n}\r\n\r\nexport const joinByUri = (...trackss: TrackData[][]) => {\r\n    const tracks = [...trackss].flat()\r\n    const uriTrackPairs = tracks.map(track => [track.uri, track] as const)\r\n    return Array.from(new Map(uriTrackPairs).values())\r\n}\r\n\r\nexport const URI_isLikedTracks = (uri: string) => {\r\n    const uriObj = URI.fromString(uri)\r\n    return uriObj.type === URI.Type.COLLECTION && uriObj.category === \"tracks\"\r\n}\r\n\r\nexport const getNameFromUri = async (uri: Spicetify.URI) => {\r\n    switch (uri.type) {\r\n        case URI.Type.ALBUM: {\r\n            const album = await spotifyApi.albums.get(uri.id!)\r\n            return album.name\r\n        }\r\n\r\n        case URI.Type.ARTIST: {\r\n            const artist = await spotifyApi.artists.get(uri.id!)\r\n            return artist.name\r\n        }\r\n\r\n        case URI.Type.COLLECTION:\r\n            if (uri.category === \"tracks\") return \"Liked Tracks\"\r\n            else break\r\n\r\n        case URI.Type.PLAYLIST:\r\n        case URI.Type.PLAYLIST_V2: {\r\n            const playlist = await spotifyApi.playlists.getPlaylist(uri.id!)\r\n            return playlist.name\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTracksFromUri = _.cond([\r\n    [URI.isAlbum, getTracksFromAlbum],\r\n    [URI.isArtist, getTracksFromArtist],\r\n    [URI_isLikedTracks, getLikedTracks],\r\n    [URI.isPlaylistV1OrV2, getTracksFromPlaylist],\r\n])\r\n", "import { range } from \"https://esm.sh/fp-ts/lib/ReadonlyNonEmptyArray\"\n\nimport { CheckedPlaylistButtonIcon, curationButtonClass } from \"../../shared/modules.ts\"\nimport { SpotifyURI } from \"../../shared/util.ts\"\n\nimport { toggleRating } from \"./ratings.ts\"\n\nconst { React } = Spicetify\n\nconst { ButtonTertiary } = Spicetify.ReactComponent\n\nconst RatingButton = ({ i, uri }: { i: number; uri: SpotifyURI }) => (\n    <ButtonTertiary\n        size=\"small\"\n        className={`${curationButtonClass} rating-${i}`}\n        aria-checked=\"true\"\n        aria-label=\"\"\n        condensed=\"true\"\n        iconOnly={CheckedPlaylistButtonIcon}\n        semanticColor=\"textBrightAccent\"\n        // ref=\n        onClick={() => toggleRating(uri, i)}\n    />\n)\n\nexport const Dropdown = ({ uri }: { uri: SpotifyURI }) => (\n    <div className=\"rating-dropdown\">\n        {range(1, 5).map(i => (\n            <RatingButton i={i} uri={uri} />\n        ))}\n    </div>\n)\n", "import { array as ar, function as f } from \"https://esm.sh/fp-ts\"\r\n\r\nimport { pMchain } from \"../../shared/fp.ts\"\r\nimport {\r\n    addPlaylistTracks,\r\n    createPlaylist,\r\n    fetchFolder,\r\n    fetchPlaylistContents,\r\n    removePlaylistTracks,\r\n    setPlaylistVisibility,\r\n    setTracksLiked,\r\n} from \"../../shared/platformApi.ts\"\r\nimport { SpotifyLoc, SpotifyURI } from \"../../shared/util.ts\"\r\n\r\nimport { updateCollectionControls, updateNowPlayingControls, updateTrackListControls } from \"./controls.tsx\"\r\nimport { CONFIG } from \"./settings.ts\"\r\nimport { getNowPlayingBar } from \"./util.ts\"\r\n\r\nconst { URI } = Spicetify\r\nconst { History, PlayerAPI } = Spicetify.Platform\r\n\r\nexport const loadRatings = async () => {\r\n    const ratingsFolder = await fetchFolder(CONFIG.ratingsFolderUri)\r\n\r\n    playlistUris = f.pipe(\r\n        ratingsFolder!.items!,\r\n        ar.map(p => [p.uri, Number(p.name!)] as [SpotifyURI, number]),\r\n        ar.reduce([] as SpotifyURI[], (uris, [uri, rating]) => ((uris[rating] = uri), uris)),\r\n    )\r\n\r\n    global.tracksRatings = tracksRatings = await f.pipe(\r\n        playlistUris,\r\n        ar.map(fetchPlaylistContents),\r\n        ps => Promise.all(ps), // Promise.all flips empty to undefined\r\n        pMchain(ar.map(tracks => tracks ?? [])),\r\n        pMchain(ar.map(ar.map(t => t.uri))),\r\n        pMchain(ar.flatMap((trackUris, rating) => trackUris.map(trackUri => [trackUri, rating] as const))),\r\n        pMchain(\r\n            ar.reduce({} as Record<string, number>, (acc, [trackUri, rating]) =>\r\n                Object.assign(acc, {\r\n                    [trackUri]: Math.max(rating, acc[trackUri] ?? 0),\r\n                }),\r\n            ),\r\n        ),\r\n    )\r\n}\r\n\r\nexport const toggleRating = async (uri: SpotifyURI, rating: number) => {\r\n    const currentRating = tracksRatings[uri]\r\n\r\n    if (currentRating === rating) rating = 0\r\n\r\n    if (currentRating) {\r\n        f.pipe(\r\n            playlistUris.slice(0, currentRating + 1),\r\n            ar.filter(Boolean),\r\n            ar.map(playlistUri => URI.fromString(playlistUri).id!),\r\n            ar.map(playlistId => removePlaylistTracks(playlistId, [{ uri, uid: \"\" } as { uid: string }])),\r\n        )\r\n    }\r\n\r\n    tracksRatings[uri] = rating\r\n\r\n    if (rating > 0) {\r\n        let playlistUri = playlistUris[rating] as string | undefined | null\r\n\r\n        if (!playlistUri) {\r\n            playlistUri = (await createPlaylist(\r\n                rating.toFixed(0),\r\n                SpotifyLoc.after.fromUri(CONFIG.ratingsFolderUri),\r\n            )) as string\r\n            setPlaylistVisibility(playlistUri, false)\r\n            playlistUris[rating] = playlistUri\r\n        }\r\n\r\n        addPlaylistTracks(playlistUri, [uri])\r\n\r\n        if (rating >= Number(CONFIG.heartThreshold)) {\r\n            setTracksLiked([uri], true)\r\n        }\r\n    }\r\n\r\n    const npTrack = PlayerAPI._state.item?.uri\r\n    if (npTrack === uri) {\r\n        updateNowPlayingControls(npTrack, false)\r\n\r\n        //TODO: clean this\r\n        {\r\n            new MutationObserver((_, observer) => {\r\n                observer.disconnect()\r\n                if (npTrack !== uri) return\r\n                updateNowPlayingControls(npTrack, false)\r\n            }).observe(getNowPlayingBar(), {\r\n                subtree: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    //TODO: Optimize this, find a way to directly target the pbs for that uri\r\n    updateTrackListControls()\r\n    const { pathname } = History.location\r\n    updateCollectionControls(URI.fromString(pathname).toString())\r\n}\r\n\r\nexport let playlistUris: SpotifyURI[] = []\r\nexport let tracksRatings: Record<SpotifyURI, number> = {}\r\n", "import { task } from \"https://esm.sh/fp-ts\"\r\n\r\nimport { createFolder } from \"../../shared/platformApi.ts\"\r\nimport { SettingsSection } from \"../../shared/settings.tsx\"\r\nimport { SpotifyURI } from \"../../shared/util.ts\"\r\n\r\nimport { loadRatings } from \"./ratings.ts\"\r\n\r\nconst RATINGS_FOLDER_NAME = \"Ratings\"\r\n\r\nconst settings = new SettingsSection(\"Star Ratings 2\")\r\n    .addInput({ id: \"heartThreshold\", desc: \"Threshold for liking trakcs\", inputType: \"number\" }, task.of(\"3\"))\r\n    .addInput({ id: \"skipThreshold\", desc: \"Threshold for skipping trakcs\", inputType: \"number\" }, task.of(\"1\"))\r\n    .addInput(\r\n        {\r\n            id: \"ratingsFolderUri\",\r\n            desc: \"Ratings folder uri\",\r\n            inputType: \"text\",\r\n            onChange: loadRatings,\r\n        },\r\n        async () => (await createFolder(RATINGS_FOLDER_NAME)).uri,\r\n    )\r\n\r\nsettings.pushSettings()\r\n\r\nexport const CONFIG = settings.toObject() as {\r\n    heartThreshold: string\r\n    skipThreshold: string\r\n    ratingsFolderUri: SpotifyURI\r\n}\r\n", "import { REACT_PROPS } from \"../../shared/util.ts\"\r\n\r\nexport const RATINGS_FOLDER_NAME = \"Ratings\"\r\n\r\nexport const getTrackLists = () =>\r\n    Array.from(document.querySelectorAll<HTMLDivElement>(\".main-trackList-trackList.main-trackList-indexable\"))\r\nexport const getTrackListTracks = (trackList: HTMLDivElement) =>\r\n    Array.from(trackList.querySelectorAll<HTMLDivElement>(\".main-trackList-trackListRow\"))\r\n\r\nexport const getTrackListTrackUri = (track: HTMLDivElement) => {\r\n    const rowSectionEnd = track.querySelector<HTMLDivElement>(\".main-trackList-rowSectionEnd\")!\r\n    const reactProps = rowSectionEnd[REACT_PROPS]\r\n    const { props } =\r\n        // artist & local tracks & albums\r\n        reactProps.children.at?.(-1).props.menu ??\r\n        // playlists\r\n        reactProps.children.props.children.at(-1).props.menu\r\n\r\n    return props.uri\r\n}\r\n\r\nexport const getNowPlayingBar = () => document.querySelector<HTMLDivElement>(\"div.main-nowPlayingBar-nowPlayingBar\")!\r\nexport const getCollectionActionBarRow = () => document.querySelector<HTMLDivElement>(`div.main-actionBar-ActionBarRow`)\r\n\r\nexport const playlistButtonSelector = `button[aria-label=\"Add to Liked Songs\"], button[aria-label=\"Add to playlist\"], button[aria-label=\"Remove recommendation\"]`\r\nexport const getPlaylistButton = (parent: HTMLElement) =>\r\n    parent.querySelector<HTMLButtonElement>(playlistButtonSelector)!\r\nexport const getCollectionPlaylistButton = () => {\r\n    const ab = getCollectionActionBarRow()\r\n    return ab?.querySelector<HTMLButtonElement>(\r\n        `button[aria-label=\"Remove from Your Library\"], button[aria-label=\"Save to Your Library\"]`,\r\n    )\r\n}\r\n", "import { getTrackListTracks, getTrackLists } from \"../extensions/star-ratings-2/util.ts\"\r\n\r\nimport { PermanentMutationObserver, REACT_FIBER } from \"./util.ts\"\r\n\r\nconst { Player, URI } = Spicetify\r\nconst { PlayerAPI, History } = Spicetify.Platform\r\n\r\nexport const onHistoryChanged = (\r\n    toMatchTo: string | RegExp | ((location: string) => boolean),\r\n    callback: (uri: string) => void,\r\n    dropDuplicates = true,\r\n) => {\r\n    const createMatchFn = (toMatchTo: string | RegExp | ((input: string) => boolean)) => {\r\n        switch (typeof toMatchTo) {\r\n            case \"string\":\r\n                return (input: string) => input?.startsWith(toMatchTo) ?? false\r\n\r\n            case \"function\":\r\n                return toMatchTo\r\n\r\n            default:\r\n                return (input: string) => toMatchTo.test(input)\r\n        }\r\n    }\r\n\r\n    let lastPathname = \"\"\r\n    const matchFn = createMatchFn(toMatchTo)\r\n\r\n    const historyChanged = ({ pathname }: any) => {\r\n        if (matchFn(pathname)) {\r\n            if (dropDuplicates && lastPathname === pathname) {\r\n            } else callback(URI.fromString(pathname).toURI())\r\n        }\r\n        lastPathname = pathname\r\n    }\r\n\r\n    historyChanged(History.location ?? {})\r\n    return History.listen(historyChanged)\r\n}\r\n\r\nexport const onSongChanged = (callback: (state: Spicetify.Platform.PlayerAPI.PlayerState) => void) => {\r\n    callback(PlayerAPI._state)\r\n    Player.addEventListener(\"songchange\", event => callback(event!.data))\r\n}\r\n\r\ntype TrackListElement = HTMLDivElement & { presentation?: HTMLDivElement }\r\ntype TrackElement = HTMLDivElement & { props?: Record<string, any> }\r\n\r\ntype TrackListMutationListener = (trackList: Required<TrackListElement>, tracks: Array<Required<TrackElement>>) => void\r\nexport const onTrackListMutationListeners = new Array<TrackListMutationListener>()\r\n\r\nconst _onTrackListMutation = (\r\n    trackList: Required<TrackListElement>,\r\n    record: MutationRecord[],\r\n    observer: MutationObserver,\r\n) => {\r\n    const tracks = getTrackListTracks(trackList.presentation) as Array<Required<TrackElement>>\r\n\r\n    const reactFiber = trackList.presentation[REACT_FIBER].alternate\r\n    const reactTracks = reactFiber.pendingProps.children as any[]\r\n    const tracksProps = reactTracks.map((child: any) => child.props as Record<string, any>)\r\n\r\n    tracks.forEach((track, i) => (track.props = tracksProps[i]))\r\n\r\n    onTrackListMutationListeners.map(listener => listener(trackList, tracks))\r\n}\r\n\r\nnew PermanentMutationObserver(\"main\", () => {\r\n    const trackLists = getTrackLists() as Array<TrackListElement>\r\n    trackLists\r\n        .filter(trackList => !trackList.presentation)\r\n        .forEach(trackList => {\r\n            trackList.presentation = trackList.lastElementChild!.firstElementChild!\r\n                .nextElementSibling! as HTMLDivElement\r\n\r\n            new MutationObserver((record, observer) =>\r\n                _onTrackListMutation(trackList as Required<TrackListElement>, record, observer),\r\n            ).observe(trackList.presentation, { childList: true })\r\n        })\r\n})\r\n", "import { PermanentMutationObserver } from \"../../shared/util.ts\"\r\n\r\nimport { updateCollectionControls, updateNowPlayingControls, updateTrackListControls } from \"./controls.tsx\"\r\nimport { loadRatings, tracksRatings } from \"./ratings.ts\"\r\nimport { CONFIG } from \"./settings.ts\"\r\n\r\nimport \"./assets/styles.scss\"\r\nimport { _ } from \"../../shared/deps.ts\"\r\nimport { onHistoryChanged, onSongChanged } from \"../../shared/listeners.ts\"\r\nconst { URI, Player } = Spicetify\r\n\r\nloadRatings()\r\n\r\nonSongChanged(state => {\r\n    if (!state) return\r\n    const { uri } = state.item ?? {}\r\n    if (!uri) return\r\n\r\n    if (Number(CONFIG.skipThreshold)) {\r\n        const currentTrackRating = tracksRatings[uri] ?? Number.MAX_SAFE_INTEGER\r\n        if (currentTrackRating <= Number(CONFIG.skipThreshold)) return void Player.next()\r\n    }\r\n\r\n    updateNowPlayingControls(uri)\r\n})\r\n\r\nnew PermanentMutationObserver(\"main\", () => updateTrackListControls())\r\n\r\nonHistoryChanged(_.overSome([URI.isAlbum, URI.isArtist, URI.isPlaylistV1OrV2]), uri => updateCollectionControls(uri))\r\n"],
  "mappings": "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",
  "names": ["f", "GraphQL", "offset", "limit", "Locale", "GraphQL", "f", "CosmosAsync", "task", "require", "modules", "f", "value", "task", "URI", "URI", "URI", "URI", "task", "settings", "task", "CONFIG", "URI", "History", "PlayerAPI", "CONFIG", "_", "React", "URI", "React", "ReactDOM", "f", "URI", "PlayerAPI", "History", "toMatchTo", "URI", "Player", "CONFIG"]
}
