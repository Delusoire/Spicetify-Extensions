import{anyPass as bt}from"https://esm.sh/fp-ts-std/Predicate";import{array as L,function as A}from"https://esm.sh/fp-ts";import{array as w,eq as ot,string as lt,record as Rt,semigroup as It,function as S}from"https://esm.sh/fp-ts";import{guard as pt,memoize as ct}from"https://esm.sh/fp-ts-std/Function";var C=e=>pt(e);var u=e=>async t=>e(await t),D=e=>t=>i=>i[e]===t;var m=e=>t=>S.flow(w.chunksOf(e),w.map(t),i=>Promise.all(i),u(w.flatten));var M=e=>S.pipe(e,S.tupled,ct(ot.contramap(JSON.stringify)(lt.Eq)),S.untupled);import{array as kt,function as N}from"https://esm.sh/fp-ts";var O={before:{start:N.constant({before:"start"}),fromUri:e=>({before:{uri:e}}),fromUid:e=>({before:{uid:e}})},after:{end:N.constant({after:"end"}),fromUri:e=>({after:{uri:e}}),fromUid:e=>({after:{uid:e}})}};var b=e=>new Promise(t=>setTimeout(t,e));var H=async(e,t=0,i=487)=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.getAlbum,{uri:e,locale:Spicetify.Locale.getLocale(),offset:t,limit:i})).data.albumUnion;var _=async(e,t)=>Spicetify.CosmosAsync.del(`https://api.spotify.com/v1/playlists/${e}/tracks`,{tracks:t.map(i=>({uri:i}))}),Mt=m(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${e.join(",")}`)).artists),Nt=m(1)(async([e])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${e}`)]),Ot=m(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${e.join(",")}`)).albums),Ht=m(50)(async e=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${e.join(",")}`)).tracks);var G=async(e,t=0,i=100)=>(await Spicetify.Platform.LibraryAPI.getTracks({uri:e,offset:t,limit:i})).items,x=async e=>(await Spicetify.Platform.PlaylistAPI.getContents(e)).items,q=async(e,t={})=>await Spicetify.Platform.RootlistAPI.createFolder(e,t);var V=async(e,t={})=>await Spicetify.Platform.RootlistAPI.createPlaylist(e,t);var j=async(e,t)=>await Spicetify.Platform.PlaylistPermissionsAPI.setBasePermission(e,t?"VIEWER":"BLOCKED");var Q=async e=>await Spicetify.Platform.RootlistAPI.getContents({folderUri:e});var $=async(e,t,i={})=>await Spicetify.Platform.PlaylistAPI.add(e,t,i);var ut=async(e,t,i,s="")=>{let r=new URL("https://ws.audioscrobbler.com/2.0/");return r.searchParams.append("method","track.getInfo"),r.searchParams.append("api_key",e),r.searchParams.append("artist",t),r.searchParams.append("track",i),r.searchParams.append("format","json"),r.searchParams.append("username",s),await fetch(r).then(n=>n.json())},_t=M(ut);import{range as yt}from"https://esm.sh/fp-ts/lib/ReadonlyNonEmptyArray";import{array as l,function as U}from"https://esm.sh/fp-ts";import{task as z}from"https://esm.sh/fp-ts";import{task as W}from"https://esm.sh/fp-ts";import{constVoid as R}from"https://esm.sh/fp-ts/function";var{React:o,ReactDOM:dt}=Spicetify,P=class e{constructor(t,i,s={}){this.name=t;this.sectionId=i;this.sectionFields=s}stopHistoryListener;setRerender=null;static waitForReact=async()=>{for(;!(Spicetify.React&&Spicetify.ReactDOM);)b(100);return this};pushSettings=async()=>{for(;!Spicetify?.Platform?.History?.listen;)await b(100);this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(({pathname:t=""})=>{t==="/preferences"&&this.render()}),Spicetify.Platform.History.location.pathname==="/preferences"&&await this.render()};toObject=()=>new Proxy({},{get:(t,i)=>e.getFieldValue(this.getId(i.toString()))});rerender=()=>{this.setRerender&&this.setRerender(Math.random())};render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await b(100)}let t=document.querySelector(".x-settings-container"),i=Array.from(t.children).find(({id:s})=>s===this.sectionId);i||(i=document.createElement("div"),i.id=this.sectionId,i.className="settingsContainer",t.appendChild(i)),dt.render(o.createElement(this.FieldsContainer,null),i)};addButton=(t,i,s,r=R,n={})=>{let a=this.getId(t);return n.onClick=r,this.sectionFields[t]={id:a,type:"button",description:i,text:s,events:n},this};addToggle=(t,i,s=W.of(!0),r=R,n={})=>{let a=this.getId(t);return e.setDefaultFieldValue(a,s),n.onChange=r,this.sectionFields[t]={id:a,type:"toggle",description:i,events:n},this};addInput=(t,i,s,r=R,n="text",a={})=>{let c=this.getId(t);return e.setDefaultFieldValue(c,s),a.onChange=r,this.sectionFields[t]={id:c,type:"input",description:i,inputType:n,events:a},this};addDropDown=(t,i,s,r=W.of(0),n=R,a={})=>{let c=this.getId(t);return e.setDefaultFieldValue(c,r),a.onChange=n,this.sectionFields[t]={id:c,type:"dropdown",description:i,options:s,events:a},this};addHidden=(t,i)=>{let s=this.getId(t);return e.setDefaultFieldValue(s,i),this.sectionFields[t]={id:s,type:"hidden",description:""},this};getId=t=>`extensions:${this.sectionId}:${t}`;useStateFor=t=>{let[i,s]=o.useState(e.getFieldValue(t));return[i,r=>{r!==void 0&&(s(r),e.setFieldValue(t,r))}]};static getFieldValue=t=>JSON.parse(Spicetify.LocalStorage.get(t)??"null");static setFieldValue=(t,i)=>{Spicetify.LocalStorage.set(t,JSON.stringify(i))};static setDefaultFieldValue=async(t,i)=>{e.getFieldValue(t)===null&&e.setFieldValue(t,await i())};FieldsContainer=()=>{let[t,i]=o.useState(0);return this.setRerender=i,o.createElement("div",{className:"x-settings-section",key:t},o.createElement("h2",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-cello-textBase-type"},this.name),Object.entries(this.sectionFields).map(([s,r])=>o.createElement(this.Field,{field:r})))};Field=({field:t})=>{let i=D("type");return o.createElement("div",{className:"x-settings-row"},o.createElement(this.SettingDescription,{id:t.id,description:t.description}),o.createElement("div",{className:"x-settings-secondColumn"},C([[i("input"),this.SettingInputField],[i("button"),this.SettingButtonField],[i("toggle"),this.SettingToggleField],[i("dropdown"),this.SettingDropdownField]])(this.SettingHidden)(t)))};SettingDescription=({id:t,description:i})=>o.createElement("div",{className:"x-settings-firstColumn"},o.createElement("label",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-viola-textSubdued-type",htmlFor:t},i));SettingButtonField=t=>o.createElement("span",{className:""},o.createElement("button",{id:t.id,className:"Button-sc-y0gtbx-0 Button-sm-buttonSecondary-useBrowserDefaultFocusStyle x-settings-button",...t.events,type:t.type},t.text));SettingToggleField=t=>{let[i,s]=this.useStateFor(t.id);return o.createElement("label",{className:"x-settings-secondColumn x-toggle-wrapper"},o.createElement("input",{id:t.id,className:"x-toggle-input",type:"checkbox",checked:e.getFieldValue(t.id),...t.events,onChange:r=>{s(r.currentTarget.checked),t.events.onChange?.(r)}}),o.createElement("span",{className:"x-toggle-indicatorWrapper"},o.createElement("span",{className:"x-toggle-indicator"})))};SettingInputField=t=>{let[i,s]=this.useStateFor(t.id);return o.createElement("input",{className:"x-settings-input",id:t.id,dir:"ltr",value:e.getFieldValue(t.id),type:t.inputType,...t.events,onChange:r=>{s(r.currentTarget.value),t.events.onChange?.(r)}})};SettingDropdownField=t=>{let[i,s]=this.useStateFor(t.id);return o.createElement("select",{className:"main-dropDown-dropDown",id:t.id,...t.events,onChange:r=>{s(r.currentTarget.selectedIndex),t.events.onChange?.(r)}},t.options.map((r,n)=>o.createElement("option",{selected:n===e.getFieldValue(t.id),value:n+1},r)))};SettingHidden=()=>o.createElement(o.Fragment,null)};var mt="Ratings",J=new P("Star Ratings 2","star-ratings-2").addInput("heartThreshold","Threshold for liking trakcs",z.of("3")).addInput("skipThreshold","Threshold for skipping trakcs",z.of("1")).addInput("ratingsFolderUri","Ratings folder uri",async()=>(await q(mt)).uri,I);J.pushSettings();var d=J.toObject();var I=async()=>{let e=await Q(d.ratingsFolderUri);y=U.pipe(e.items,l.map(t=>[t.uri,Number(t.name)]),l.reduce([],(t,[i,s])=>(t[s]=i,t))),globalThis.tracksRatings=p=await U.pipe(y,l.map(x),t=>Promise.all(t),u(l.map(t=>t??[])),u(l.map(l.map(t=>t.uri))),u(l.flatMap((t,i)=>t.map(s=>[s,i]))),u(l.reduce({},(t,[i,s])=>Object.assign(t,{[i]:Math.max(s,t[i]??0)}))))},K=async(e,t)=>{let i=p[e];if(i===t&&(t=0),i&&U.pipe(y.slice(0,i+1),l.filter(Boolean),l.map(n=>Spicetify.URI.fromString(n).id),l.map(n=>_(n,[e]))),p[e]=t,t>0){let n=y[t];n||(n=await V(t.toFixed(0),O.after.fromUri(d.ratingsFolderUri)),j(n,!1),y[t]=n),$(n,[e])}let s=Spicetify.Player.data.track?.uri;s===e&&g(s,!1),v();let{pathname:r}=Spicetify.Platform.History.location;T(Spicetify.URI.fromString(r))},y=[],p={};var{React:f}=Spicetify,gt=({i:e,uri:t})=>f.createElement("button",{className:"Button-sc-1dqy6lx-0 Button-textBrightAccent-sm-16-buttonTertiary-iconOnly-condensed-isUsingKeyboard-useBrowserDefaultFocusStyle rating-button",onClick:()=>K(t,e)},f.createElement("svg",{role:"img",height:16,width:16,viewBox:"0 0 16 16",className:`Svg-sc-ytk21e-0 Svg-img-icon rating-${e}`},f.createElement("path",{d:"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z"}))),Y=({uri:e})=>f.createElement("div",{className:"rating-dropdown"},yt(1,5).map(t=>f.createElement(gt,{i:t,uri:e})));var X=()=>Array.from(document.querySelectorAll(".main-trackList-indexable")),Z=e=>Array.from(e.querySelectorAll("div.main-trackList-trackListRow")),tt=e=>(e=Object.values(e)[0].child.child.child.child,e.pendingProps.uri??e.child.pendingProps.uri),et=()=>document.querySelector("div.main-nowPlayingBar-nowPlayingBar"),ft=()=>document.querySelector("div.main-actionBar-ActionBarRow"),At='button[aria-label="Add to Liked Songs"], button[aria-label="Add to playlist"]',E=e=>e.querySelector(At),it=()=>ft().querySelector('button[aria-label="Remove from Your Library"], button[aria-label="Save to Your Library"]');var{URI:h}=Spicetify,{React:ht,ReactDOM:St}=Spicetify,rt=["unset","#ED5564","#FFCE54","A0D568","#4FC1E8","#AC92EB"],B=(e,t)=>{if(e.style.fill===rt[t])return;e.style.opacity=t>0?"1":"unset";let i=e.querySelector("svg");i.style.fill=rt[t]},nt,st=(e,t,i=!1)=>{if(e.hasAttribute("dropdown-enabled")){if(!i)return}else e.setAttribute("dropdown-enabled","");let s=document.createElement("div");i&&(nt.outerHTML="",nt=s),e.appendChild(s),St.render(ht.createElement(Y,{uri:t}),s),Spicetify.Tippy(e,{content:s,interactive:!0,animateFill:!1,placement:"left",animation:"fade",zIndex:1e4,delay:[200,0],render(r){let n=document.createElement("div"),a=document.createElement("div");return n.id="context-menu",n.appendChild(a),a.className="main-contextMenu-tippy",a.appendChild(r.props.content),{popper:n,onUpdate:A.constVoid}},onShow(r){r.popper.firstChild.classList.add("main-contextMenu-tippyEnter");let n=r.reference.parentElement.children,a=n.item(n.length-1);a.style.marginRight="0px"},onMount(r){requestAnimationFrame(()=>{r.popper.firstChild.classList.remove("main-contextMenu-tippyEnter"),r.popper.firstChild.classList.add("main-contextMenu-tippyEnterActive")})},onHide(r){requestAnimationFrame(()=>{r.popper.firstChild.classList.remove("main-contextMenu-tippyEnterActive");let n=r.reference.parentElement.children,a=n.item(n.length-2);a.style.marginRight="unset",r.unmount()})}})},g=(e,t=!0)=>{let i=et(),s=E(i);B(s,p[e]),t&&st(s,e,!0)},v=(e=!0)=>{let t=X();A.pipe(t,L.map(i=>{Z(i).map(r=>{let n=h.fromString(tt(r)).toURI();if(!h.isTrack(n))return;let a=p[n],c=E(r);B(c,a),e&&st(c,n)})}))},T=async e=>{let t;if(h.isAlbum(e))t=A.pipe(await H(`${e}`),n=>n.tracks.items,L.map(n=>n.track.uri));else if(h.isArtist(e))t=A.pipe(await G(`${e}`),L.map(n=>n.uri));else if(h.isPlaylistV1OrV2(e))t=A.pipe(await x(`${e}`),L.map(n=>n.uri));else throw"me out the window";let i=t.map(n=>p[n]).filter(Boolean),s=Math.round(i.reduce((n,a)=>n+a)/i.length),r=it();B(r,s)};debugger;var{URI:k}=Spicetify;I();Spicetify.Player.addEventListener("songchange",()=>{let e=Spicetify.Player.data.track?.uri;if(Number(d.skipThreshold)&&(p[e]||Number.MAX_SAFE_INTEGER)<=Number(d.skipThreshold))return void Spicetify.Player.next();g(e)});g(Spicetify.Player.data.track?.uri);var F,at=new MutationObserver(()=>v());new MutationObserver(()=>{let e=document.querySelector("main");e&&!e.isEqualNode(F)&&(F&&at.disconnect(),F=e,at.observe(F,{childList:!0,subtree:!0}))}).observe(document.body,{childList:!0,subtree:!0});Spicetify.Platform.History.listen(async({pathname:e})=>{bt([k.isAlbum,k.isArtist,k.isPlaylistV1OrV2])(e)&&T(k.fromString(e))});
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,
(async () => {
    if (!document.getElementById("star-ratings-2-css")) {
        const el = document.createElement("style")
        el.id = "star-ratings-2-css"
        
        el.textContent = "svg.rating-1{fill:#ed5564!important}svg.rating-2{fill:#ffce54!important}svg.rating-3{fill:#a0d568!important}svg.rating-4{fill:#4fc1e8!important}svg.rating-5{fill:#ac92eb!important}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vZXh0ZW5zaW9ucy9zdGFyLXJhdGluZ3MtMi9hc3NldHMvc3R5bGVzLmNzcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsic3ZnLnJhdGluZy0xe2ZpbGw6I2VkNTU2NCAhaW1wb3J0YW50fXN2Zy5yYXRpbmctMntmaWxsOiNmZmNlNTQgIWltcG9ydGFudH1zdmcucmF0aW5nLTN7ZmlsbDojYTBkNTY4ICFpbXBvcnRhbnR9c3ZnLnJhdGluZy00e2ZpbGw6IzRmYzFlOCAhaW1wb3J0YW50fXN2Zy5yYXRpbmctNXtmaWxsOiNhYzkyZWIgIWltcG9ydGFudH0iXSwKICAibWFwcGluZ3MiOiAiQUFBQSxHQUFHLENBQUMsU0FBUyxLQUFLLGlCQUFrQixDQUFDLEdBQUcsQ0FBQyxTQUFTLEtBQUssaUJBQWtCLENBQUMsR0FBRyxDQUFDLFNBQVMsS0FBSyxpQkFBa0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxLQUFLLGlCQUFrQixDQUFDLEdBQUcsQ0FBQyxTQUFTLEtBQUssaUJBQWtCIiwKICAibmFtZXMiOiBbXQp9Cg== */\n"
        document.head.appendChild(el)
    }
})()