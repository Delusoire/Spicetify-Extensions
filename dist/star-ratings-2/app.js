import{anyPass as Ot}from"https://esm.sh/fp-ts-std/Predicate";import{array as L,function as S}from"https://esm.sh/fp-ts";import{array as U,eq as At,string as St,record as Dt,semigroup as Gt,function as b}from"https://esm.sh/fp-ts";import{guard as ht,memoize as bt}from"https://esm.sh/fp-ts-std/Function";var O=t=>ht(t);var u=t=>async e=>t(await e),N=t=>e=>i=>i[t]===e;var g=t=>e=>b.flow(U.chunksOf(t),U.map(e),i=>Promise.all(i),u(U.flatten));var D=t=>b.pipe(t,b.tupled,bt(At.contramap(JSON.stringify)(St.Eq)),b.untupled);import{array as Qt,function as _}from"https://esm.sh/fp-ts";var G={before:{start:_.constant({before:"start"}),fromUri:t=>({before:{uri:t}}),fromUid:t=>({before:{uid:t}})},after:{end:_.constant({after:"end"}),fromUri:t=>({after:{uri:t}}),fromUid:t=>({after:{uid:t}})}};var H=t=>new Promise(e=>setTimeout(e,t));var j=async(t,e=0,i=487)=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.getAlbum,{uri:t,locale:Spicetify.Locale.getLocale(),offset:e,limit:i})).data.albumUnion;var Xt=g(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${t.join(",")}`)).artists),Zt=g(1)(async([t])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${t}`)]),te=g(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${t.join(",")}`)).albums),ee=g(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${t.join(",")}`)).tracks);var q=async(t,e=0,i=100)=>(await Spicetify.Platform.LibraryAPI.getTracks({uri:t,offset:e,limit:i})).items,x=async t=>(await Spicetify.Platform.PlaylistAPI.getContents(t)).items,Q=async(t,e={})=>await Spicetify.Platform.RootlistAPI.createFolder(t,e);var $=async(t,e={})=>await Spicetify.Platform.RootlistAPI.createPlaylist(t,e);var V=async(t,e)=>await Spicetify.Platform.PlaylistPermissionsAPI.setBasePermission(t,e?"VIEWER":"BLOCKED");var W=async t=>await Spicetify.Platform.RootlistAPI.getContents({folderUri:t});var z=async(t,e,i={})=>await Spicetify.Platform.PlaylistAPI.add(t,e,i);var J=async(t,e)=>Spicetify.Platform.PlaylistAPI.remove(t,e);var xt=async(t,e,i,n="")=>{let s=new URL("https://ws.audioscrobbler.com/2.0/");return s.searchParams.append("method","track.getInfo"),s.searchParams.append("api_key",t),s.searchParams.append("artist",e),s.searchParams.append("track",i),s.searchParams.append("format","json"),s.searchParams.append("username",n),await fetch(s).then(r=>r.json())},ie=D(xt);import{range as wt}from"https://esm.sh/fp-ts/lib/ReadonlyNonEmptyArray";import{array as l,function as E}from"https://esm.sh/fp-ts";import{task as st}from"https://esm.sh/fp-ts";import{task as nt}from"https://esm.sh/fp-ts";import{allPass as Pt}from"https://esm.sh/fp-ts-std@0.18.0/Predicate";var Y=webpackChunkopen.push([[Symbol("Dummy module to extract require method")],{},t=>t]),Rt=Object.keys(Y.m).map(t=>Y(t)),w=Rt.filter(t=>typeof t=="object").flatMap(t=>Object.values(t)),d=w.filter(t=>typeof t=="function"),It=w.filter(t=>t?.$$typeof),Tt=Spicetify.React.memo().$$typeof,se=It.filter(t=>t.$$typeof===Tt),m=(t,...e)=>t.find(i=>Pt(e.map(n=>typeof n=="string"?s=>s.includes(n):s=>n.test(s)))(i.toString())),K=m(d,"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z"),X=m(d,/^function .\(.\)\{return\(0,.\.jsx\)\(/),Z=m(d,"textToHighlight"),tt=m(d,"setSectionFilterMatchQueryValue","filterMatchQuery"),et=m(d,"textSubdued","viola"),it=m(d,"condensed","onSelected"),rt=w.find(t=>t?.curationButton).curationButton;var{React:a,ReactDOM:kt}=Spicetify,{ButtonSecondary:Lt}=Spicetify.ReactComponent;var P=class t{constructor(e,i,n={}){this.name=e;this.id=i;this.sectionFields=n;this.pushSettings=()=>{this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(()=>this.render()),this.render()};this.toObject=()=>new Proxy({},{get:(e,i)=>t.getFieldValue(this.getId(i.toString()))});this.render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await H(100)}let e=document.querySelector(".x-settings-container"),i=Array.from(e.children).find(({id:n})=>n===this.id);i||(i=document.createElement("div"),i.id=this.id,i.className="settingsContainer",e.appendChild(i)),kt.render(a.createElement(this.FieldsContainer,null),i)};this.addButton=e=>(this.addField("button",e),this);this.addToggle=(e,i=nt.of(!1))=>(this.addField("toggle",e,i),this);this.addInput=(e,i=nt.of(""))=>(this.addField("input",e,i),this);this.getId=e=>["extensions",this.id,e].join(":");this.useStateFor=e=>{let[i,n]=a.useState(t.getFieldValue(e));return[i,s=>{s!==void 0&&(n(s),t.setFieldValue(e,s))}]};this.FieldsContainer=()=>a.createElement(X,{filterMatchQuery:this.name},a.createElement(Z,null,this.name),Object.values(this.sectionFields).map(e=>{let i=N("type");return O([[i("input"),this.InputField],[i("button"),this.ButtonField],[i("toggle"),this.ToggleField]])(()=>a.createElement(a.Fragment,null))(e)}));this.SettingField=({field:e,children:i})=>a.createElement(tt,{filterMatchQuery:e.id},a.createElement("div",{className:"x-settings-firstColumn"},a.createElement(et,{htmlFor:e.id},e.desc)),a.createElement("div",{className:"x-settings-secondColumn"},i));this.ButtonField=e=>a.createElement(this.SettingField,{field:e},a.createElement(Lt,{id:e.id,buttonSize:"sm",onClick:e.onClick,className:"x-settings-button"},e.text));this.ToggleField=e=>{let i=this.getId(e.id),[n,s]=this.useStateFor(i);return a.createElement(this.SettingField,{field:e},a.createElement(it,{id:e.id,value:t.getFieldValue(i),onSelected:r=>{s(r),e.onSelected?.(r)},className:"x-settings-button"}))};this.InputField=e=>{let i=this.getId(e.id),[n,s]=this.useStateFor(i);return a.createElement(this.SettingField,{field:e},a.createElement("input",{className:"x-settings-input",id:e.id,dir:"ltr",value:t.getFieldValue(i),type:e.inputType,onChange:r=>{let o=r.currentTarget.value;s(o),e.onChange?.(o)}}))}}addField(e,i,n){if(n!==void 0){let r=this.getId(i.id);t.setDefaultFieldValue(r,n)}let s=Object.assign({},i,{type:e});this.sectionFields[i.id]=s}static{this.getFieldValue=e=>JSON.parse(Spicetify.LocalStorage.get(e)??"null")}static{this.setFieldValue=(e,i)=>Spicetify.LocalStorage.set(e,JSON.stringify(i))}static{this.setDefaultFieldValue=async(e,i)=>{t.getFieldValue(e)===null&&t.setFieldValue(e,await i())}}};var Ft="Ratings",ot=new P("Star Ratings 2","star-ratings-2").addInput({id:"heartThreshold",desc:"Threshold for liking trakcs",inputType:"number"},st.of("3")).addInput({id:"skipThreshold",desc:"Threshold for skipping trakcs",inputType:"number"},st.of("1")).addInput({id:"ratingsFolderUri",desc:"Ratings folder uri",inputType:"text",onChange:R},async()=>(await Q(Ft)).uri);ot.pushSettings();var y=ot.toObject();var at=()=>Array.from(document.querySelectorAll(".main-trackList-indexable")),lt=t=>Array.from(t.querySelectorAll("div.main-trackList-trackListRow")),pt=t=>(t=Object.values(t)[0].child.child.child.child,t.pendingProps.uri??t.child.pendingProps.uri),I=()=>document.querySelector("div.main-nowPlayingBar-nowPlayingBar"),vt=()=>document.querySelector("div.main-actionBar-ActionBarRow"),Ut='button[aria-label="Add to Liked Songs"], button[aria-label="Add to playlist"], button[aria-label="Remove recommendation"]',B=t=>t.querySelector(Ut),ct=()=>vt().querySelector('button[aria-label="Remove from Your Library"], button[aria-label="Save to Your Library"]');var R=async()=>{let t=await W(y.ratingsFolderUri);A=E.pipe(t.items,l.map(e=>[e.uri,Number(e.name)]),l.reduce([],(e,[i,n])=>(e[n]=i,e))),globalThis.tracksRatings=c=await E.pipe(A,l.map(x),e=>Promise.all(e),u(l.map(e=>e??[])),u(l.map(l.map(e=>e.uri))),u(l.flatMap((e,i)=>e.map(n=>[n,i]))),u(l.reduce({},(e,[i,n])=>Object.assign(e,{[i]:Math.max(n,e[i]??0)}))))},ut=async(t,e)=>{let i=c[t];if(i===e&&(e=0),i&&E.pipe(A.slice(0,i+1),l.filter(Boolean),l.map(r=>Spicetify.URI.fromString(r).id),l.map(r=>J(r,[{uri:t,uid:""}]))),c[t]=e,e>0){let r=A[e];r||(r=await $(e.toFixed(0),G.after.fromUri(y.ratingsFolderUri)),V(r,!1),A[e]=r),z(r,[t])}let n=Spicetify.Player.data.track?.uri;if(n===t){f(n,!1);{let r=Spicetify.Player.data.track?.uri,o=new MutationObserver(()=>{r===t&&o.disconnect(),f(r,!1)});o.observe(I(),{subtree:!0})}}T();let{pathname:s}=Spicetify.Platform.History.location;k(Spicetify.URI.fromString(s))},A=[],c={};var{React:C}=Spicetify,{ButtonTertiary:Bt}=Spicetify.ReactComponent,Et=({i:t,uri:e})=>C.createElement(Bt,{size:"small",className:`${rt} rating-${t}`,"aria-checked":"true","aria-label":"",condensed:"true",iconOnly:K,semanticColor:"textBrightAccent",onClick:i=>ut(e,t)}),dt=({uri:t})=>C.createElement("div",{className:"rating-dropdown"},wt(1,5).map(e=>C.createElement(Et,{i:e,uri:t})));var{URI:h}=Spicetify,{React:Ct,ReactDOM:Mt}=Spicetify,mt=["unset","#ED5564","#FFCE54","A0D568","#4FC1E8","#AC92EB"],M=(t,e)=>{if(t.style.fill===mt[e])return;t.style.opacity=e>0?"1":"unset";let i=t.querySelector("svg");i.style.fill=mt[e]},yt,ft=(t,e,i=!1)=>{if(t.hasAttribute("dropdown-enabled")){if(!i)return}else t.setAttribute("dropdown-enabled","");let n=document.createElement("div");t.appendChild(n),Mt.render(Ct.createElement(dt,{uri:e}),n);let s=Spicetify.Tippy(t,{content:n,interactive:!0,animateFill:!1,placement:"left",animation:"fade",zIndex:1e4,delay:[200,0],render(r){let o=document.createElement("div"),p=document.createElement("div");return o.id="context-menu",o.appendChild(p),p.className="main-contextMenu-tippy",p.appendChild(r.props.content),{popper:o,onUpdate:S.constVoid}},onShow(r){r.popper.firstChild.classList.add("main-contextMenu-tippyEnter");let o=r.reference.parentElement.children,p=o.item(o.length-1);p.style.marginRight="0px"},onMount(r){requestAnimationFrame(()=>{r.popper.firstChild.classList.remove("main-contextMenu-tippyEnter"),r.popper.firstChild.classList.add("main-contextMenu-tippyEnterActive")})},onHide(r){requestAnimationFrame(()=>{r.popper.firstChild.classList.remove("main-contextMenu-tippyEnterActive");let o=r.reference.parentElement.children,p=o.item(o.length-2);p.style.marginRight="unset",r.unmount()})}});i&&(yt?.destroy(),yt=s)},f=(t,e=!0)=>{let i=I(),n=B(i);M(n,c[t]),e&&ft(n,t,!0)},T=(t=!0)=>{let e=at();S.pipe(e,L.map(i=>{lt(i).map(s=>{let r=h.fromString(pt(s)).toURI();if(!h.isTrack(r))return;let o=c[r],p=B(s);M(p,o),t&&ft(p,r)})}))},k=async t=>{let e;if(h.isAlbum(t))e=S.pipe(await j(`${t}`),r=>r.tracks.items,L.map(r=>r.track.uri));else if(h.isArtist(t))e=S.pipe(await q(`${t}`),L.map(r=>r.uri));else if(h.isPlaylistV1OrV2(t))e=S.pipe(await x(`${t}`),L.map(r=>r.uri));else throw"me out the window";let i=e.map(r=>c[r]).filter(Boolean),n=Math.round(i.reduce((r,o)=>r+o,0)/i.length),s=ct();M(s,n)};var{URI:F}=Spicetify;R();Spicetify.Player.addEventListener("songchange",()=>{let t=Spicetify.Player.data.track?.uri;if(Number(y.skipThreshold)&&(c[t]||Number.MAX_SAFE_INTEGER)<=Number(y.skipThreshold))return void Spicetify.Player.next();f(t)});f(Spicetify.Player.data.track?.uri);var v,gt=new MutationObserver(()=>T());new MutationObserver(()=>{let t=document.querySelector("main");t&&!t.isEqualNode(v)&&(v&&gt.disconnect(),v=t,gt.observe(v,{childList:!0,subtree:!0}))}).observe(document.body,{childList:!0,subtree:!0});Spicetify.Platform.History.listen(({pathname:t})=>{Ot([F.isAlbum,F.isArtist,F.isPlaylistV1OrV2])(t)&&k(F.fromString(t))});
//# sourceMappingURL=data:application/json;base64,
(async () => {
    if (!document.getElementById("star-ratings-2-css")) {
        const el = document.createElement("style")
        el.id = "star-ratings-2-css"
        
        el.textContent = "button.rating-1 svg{fill:#ed5564!important}button.rating-2 svg{fill:#ffce54!important}button.rating-3 svg{fill:#a0d568!important}button.rating-4 svg{fill:#4fc1e8!important}button.rating-5 svg{fill:#ac92eb!important}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vZXh0ZW5zaW9ucy9zdGFyLXJhdGluZ3MtMi9hc3NldHMvc3R5bGVzLmNzcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiYnV0dG9uLnJhdGluZy0xIHN2Z3tmaWxsOiNlZDU1NjQgIWltcG9ydGFudH1idXR0b24ucmF0aW5nLTIgc3Zne2ZpbGw6I2ZmY2U1NCAhaW1wb3J0YW50fWJ1dHRvbi5yYXRpbmctMyBzdmd7ZmlsbDojYTBkNTY4ICFpbXBvcnRhbnR9YnV0dG9uLnJhdGluZy00IHN2Z3tmaWxsOiM0ZmMxZTggIWltcG9ydGFudH1idXR0b24ucmF0aW5nLTUgc3Zne2ZpbGw6I2FjOTJlYiAhaW1wb3J0YW50fSJdLAogICJtYXBwaW5ncyI6ICJBQUFBLE1BQU0sQ0FBQyxTQUFTLElBQUksS0FBSyxpQkFBa0IsQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLEtBQUssaUJBQWtCLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxLQUFLLGlCQUFrQixDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksS0FBSyxpQkFBa0IsQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLEtBQUssaUJBQWtCIiwKICAibmFtZXMiOiBbXQp9Cg== */\n"
        document.head.appendChild(el)
    }
})()