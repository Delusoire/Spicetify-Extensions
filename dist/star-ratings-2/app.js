import{anyPass as Ot}from"https://esm.sh/fp-ts-std/Predicate";import{array as k,function as S}from"https://esm.sh/fp-ts";import{array as v,eq as At,string as St,record as Dt,semigroup as Gt,function as b}from"https://esm.sh/fp-ts";import{guard as ht,memoize as bt}from"https://esm.sh/fp-ts-std/Function";var M=t=>ht(t);var u=t=>async e=>t(await e),O=t=>e=>i=>i[t]===e;var f=t=>e=>b.flow(v.chunksOf(t),v.map(e),i=>Promise.all(i),u(v.flatten));var N=t=>b.pipe(t,b.tupled,bt(At.contramap(JSON.stringify)(St.Eq)),b.untupled);import{array as Qt,function as D}from"https://esm.sh/fp-ts";var _={before:{start:D.constant({before:"start"}),fromUri:t=>({before:{uri:t}}),fromUid:t=>({before:{uid:t}})},after:{end:D.constant({after:"end"}),fromUri:t=>({after:{uri:t}}),fromUid:t=>({after:{uid:t}})}};var G=t=>new Promise(e=>setTimeout(e,t));var H=async(t,e=0,i=487)=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.getAlbum,{uri:t,locale:Spicetify.Locale.getLocale(),offset:e,limit:i})).data.albumUnion;var Xt=f(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${t.join(",")}`)).artists),Zt=f(1)(async([t])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${t}`)]),te=f(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${t.join(",")}`)).albums),ee=f(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${t.join(",")}`)).tracks);var j=async(t,e=0,i=100)=>(await Spicetify.Platform.LibraryAPI.getTracks({uri:t,offset:e,limit:i})).items,x=async t=>(await Spicetify.Platform.PlaylistAPI.getContents(t)).items,q=async(t,e={})=>await Spicetify.Platform.RootlistAPI.createFolder(t,e);var Q=async(t,e={})=>await Spicetify.Platform.RootlistAPI.createPlaylist(t,e);var $=async(t,e)=>await Spicetify.Platform.PlaylistPermissionsAPI.setBasePermission(t,e?"VIEWER":"BLOCKED");var V=async t=>await Spicetify.Platform.RootlistAPI.getContents({folderUri:t});var W=async(t,e,i={})=>await Spicetify.Platform.PlaylistAPI.add(t,e,i);var z=async(t,e)=>Spicetify.Platform.PlaylistAPI.remove(t,e);var xt=async(t,e,i,n="")=>{let s=new URL("https://ws.audioscrobbler.com/2.0/");return s.searchParams.append("method","track.getInfo"),s.searchParams.append("api_key",t),s.searchParams.append("artist",e),s.searchParams.append("track",i),s.searchParams.append("format","json"),s.searchParams.append("username",n),await fetch(s).then(r=>r.json())},ie=N(xt);import{range as vt}from"https://esm.sh/fp-ts/lib/ReadonlyNonEmptyArray";import{array as l,function as w}from"https://esm.sh/fp-ts";import{task as nt}from"https://esm.sh/fp-ts";import{task as rt}from"https://esm.sh/fp-ts";import{allPass as Pt}from"https://esm.sh/fp-ts-std@0.18.0/Predicate";var J=webpackChunkopen.push([[Symbol("Dummy module to extract require method")],{},t=>t]),Rt=Object.keys(J.m).map(t=>J(t)),U=Rt.filter(t=>typeof t=="object").flatMap(t=>Object.values(t)),d=U.filter(t=>typeof t=="function"),It=U.filter(t=>t?.$$typeof),Tt=Spicetify.React.memo().$$typeof,se=It.filter(t=>t.$$typeof===Tt),m=(t,...e)=>t.find(i=>Pt(e.map(n=>typeof n=="string"?s=>s.includes(n):s=>n.test(s)))(i.toString())),Y=m(d,"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z"),K=m(d,/^function .\(.\)\{return\(0,.\.jsx\)\(/),X=m(d,"textToHighlight"),Z=m(d,"setSectionFilterMatchQueryValue","filterMatchQuery"),tt=m(d,"textSubdued","viola"),et=m(d,"condensed","onSelected"),it=U.find(t=>t?.curationButton).curationButton;var{React:a,ReactDOM:kt}=Spicetify,{ButtonSecondary:Lt}=Spicetify.ReactComponent;var P=class t{constructor(e,i,n={}){this.name=e;this.id=i;this.sectionFields=n;this.pushSettings=()=>{this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(()=>this.render()),this.render()};this.toObject=()=>new Proxy({},{get:(e,i)=>t.getFieldValue(this.getId(i.toString()))});this.render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await G(100)}let e=document.querySelector(".x-settings-container"),i=Array.from(e.children).find(({id:n})=>n===this.id);i||(i=document.createElement("div"),i.id=this.id,i.className="settingsContainer",e.appendChild(i)),kt.render(a.createElement(this.FieldsContainer,null),i)};this.addButton=e=>(this.addField("button",e),this);this.addToggle=(e,i=rt.of(!1))=>(this.addField("toggle",e,i),this);this.addInput=(e,i=rt.of(""))=>(this.addField("input",e,i),this);this.getId=e=>["extensions",this.id,e].join(":");this.useStateFor=e=>{let[i,n]=a.useState(t.getFieldValue(e));return[i,s=>{s!==void 0&&(n(s),t.setFieldValue(e,s))}]};this.FieldsContainer=()=>a.createElement(K,{filterMatchQuery:this.name},a.createElement(X,null,this.name),Object.values(this.sectionFields).map(e=>{let i=O("type");return M([[i("input"),this.InputField],[i("button"),this.ButtonField],[i("toggle"),this.ToggleField]])(()=>a.createElement(a.Fragment,null))(e)}));this.SettingField=({field:e,children:i})=>a.createElement(Z,{filterMatchQuery:e.id},a.createElement("div",{className:"x-settings-firstColumn"},a.createElement(tt,{htmlFor:e.id},e.desc)),a.createElement("div",{className:"x-settings-secondColumn"},i));this.ButtonField=e=>a.createElement(this.SettingField,{field:e},a.createElement(Lt,{id:e.id,buttonSize:"sm",onClick:e.onClick,className:"x-settings-button"},e.text));this.ToggleField=e=>{let i=this.getId(e.id),[n,s]=this.useStateFor(i);return a.createElement(this.SettingField,{field:e},a.createElement(et,{id:e.id,value:t.getFieldValue(i),onSelected:r=>{s(r),e.onSelected?.(r)},className:"x-settings-button"}))};this.InputField=e=>{let i=this.getId(e.id),[n,s]=this.useStateFor(i);return a.createElement(this.SettingField,{field:e},a.createElement("input",{className:"x-settings-input",id:e.id,dir:"ltr",value:t.getFieldValue(i),type:e.inputType,onChange:r=>{let o=r.currentTarget.value;s(o),e.onChange?.(o)}}))}}addField(e,i,n){if(n!==void 0){let r=this.getId(i.id);t.setDefaultFieldValue(r,n)}let s=Object.assign({},i,{type:e});this.sectionFields[i.id]=s}static{this.getFieldValue=e=>JSON.parse(Spicetify.LocalStorage.get(e)??"null")}static{this.setFieldValue=(e,i)=>Spicetify.LocalStorage.set(e,JSON.stringify(i))}static{this.setDefaultFieldValue=async(e,i)=>{t.getFieldValue(e)===null&&t.setFieldValue(e,await i())}}};var Ft="Ratings",st=new P("Star Ratings 2","star-ratings-2").addInput({id:"heartThreshold",desc:"Threshold for liking trakcs",inputType:"number"},nt.of("3")).addInput({id:"skipThreshold",desc:"Threshold for skipping trakcs",inputType:"number"},nt.of("1")).addInput({id:"ratingsFolderUri",desc:"Ratings folder uri",inputType:"text",onChange:R},async()=>(await q(Ft)).uri);st.pushSettings();var y=st.toObject();var R=async()=>{let t=await V(y.ratingsFolderUri);g=w.pipe(t.items,l.map(e=>[e.uri,Number(e.name)]),l.reduce([],(e,[i,n])=>(e[n]=i,e))),globalThis.tracksRatings=c=await w.pipe(g,l.map(x),e=>Promise.all(e),u(l.map(e=>e??[])),u(l.map(l.map(e=>e.uri))),u(l.flatMap((e,i)=>e.map(n=>[n,i]))),u(l.reduce({},(e,[i,n])=>Object.assign(e,{[i]:Math.max(n,e[i]??0)}))))},ot=async(t,e)=>{let i=c[t];if(i===e&&(e=0),i&&w.pipe(g.slice(0,i+1),l.filter(Boolean),l.map(r=>Spicetify.URI.fromString(r).id),l.map(r=>z(r,[{uri:t,uid:""}]))),c[t]=e,e>0){let r=g[e];r||(r=await Q(e.toFixed(0),_.after.fromUri(y.ratingsFolderUri)),$(r,!1),g[e]=r),W(r,[t])}let n=Spicetify.Player.data.track?.uri;n===t&&A(n,!1),I();let{pathname:s}=Spicetify.Platform.History.location;T(Spicetify.URI.fromString(s))},g=[],c={};var{React:B}=Spicetify,{ButtonTertiary:Ut}=Spicetify.ReactComponent,wt=({i:t,uri:e})=>B.createElement(Ut,{size:"small",className:`${it} rating-${t}`,"aria-checked":"true","aria-label":"",condensed:"true",iconOnly:Y,semanticColor:"textBrightAccent",onClick:i=>ot(e,t)}),at=({uri:t})=>B.createElement("div",{className:"rating-dropdown"},vt(1,5).map(e=>B.createElement(wt,{i:e,uri:t})));var lt=()=>Array.from(document.querySelectorAll(".main-trackList-indexable")),pt=t=>Array.from(t.querySelectorAll("div.main-trackList-trackListRow")),ct=t=>(t=Object.values(t)[0].child.child.child.child,t.pendingProps.uri??t.child.pendingProps.uri),ut=()=>document.querySelector("div.main-nowPlayingBar-nowPlayingBar"),Bt=()=>document.querySelector("div.main-actionBar-ActionBarRow"),Et='button[aria-label="Add to Liked Songs"], button[aria-label="Add to playlist"], button[aria-label="Remove recommendation"]',E=t=>t.querySelector(Et),dt=()=>Bt().querySelector('button[aria-label="Remove from Your Library"], button[aria-label="Save to Your Library"]');var{URI:h}=Spicetify,{React:Ct,ReactDOM:Mt}=Spicetify,mt=["unset","#ED5564","#FFCE54","A0D568","#4FC1E8","#AC92EB"],C=(t,e)=>{if(t.style.fill===mt[e])return;t.style.opacity=e>0?"1":"unset";let i=t.querySelector("svg");i.style.fill=mt[e]},yt,ft=(t,e,i=!1)=>{if(t.hasAttribute("dropdown-enabled")){if(!i)return}else t.setAttribute("dropdown-enabled","");let n=document.createElement("div");t.appendChild(n),Mt.render(Ct.createElement(at,{uri:e}),n);let s=Spicetify.Tippy(t,{content:n,interactive:!0,animateFill:!1,placement:"left",animation:"fade",zIndex:1e4,delay:[200,0],render(r){let o=document.createElement("div"),p=document.createElement("div");return o.id="context-menu",o.appendChild(p),p.className="main-contextMenu-tippy",p.appendChild(r.props.content),{popper:o,onUpdate:S.constVoid}},onShow(r){r.popper.firstChild.classList.add("main-contextMenu-tippyEnter");let o=r.reference.parentElement.children,p=o.item(o.length-1);p.style.marginRight="0px"},onMount(r){requestAnimationFrame(()=>{r.popper.firstChild.classList.remove("main-contextMenu-tippyEnter"),r.popper.firstChild.classList.add("main-contextMenu-tippyEnterActive")})},onHide(r){requestAnimationFrame(()=>{r.popper.firstChild.classList.remove("main-contextMenu-tippyEnterActive");let o=r.reference.parentElement.children,p=o.item(o.length-2);p.style.marginRight="unset",r.unmount()})}});i&&(yt?.destroy(),yt=s)},A=(t,e=!0)=>{let i=ut(),n=E(i);C(n,c[t]),e&&ft(n,t,!0)},I=(t=!0)=>{let e=lt();S.pipe(e,k.map(i=>{pt(i).map(s=>{let r=h.fromString(ct(s)).toURI();if(!h.isTrack(r))return;let o=c[r],p=E(s);C(p,o),t&&ft(p,r)})}))},T=async t=>{let e;if(h.isAlbum(t))e=S.pipe(await H(`${t}`),r=>r.tracks.items,k.map(r=>r.track.uri));else if(h.isArtist(t))e=S.pipe(await j(`${t}`),k.map(r=>r.uri));else if(h.isPlaylistV1OrV2(t))e=S.pipe(await x(`${t}`),k.map(r=>r.uri));else throw"me out the window";let i=e.map(r=>c[r]).filter(Boolean),n=Math.round(i.reduce((r,o)=>r+o,0)/i.length),s=dt();C(s,n)};var{URI:L}=Spicetify;R();Spicetify.Player.addEventListener("songchange",()=>{let t=Spicetify.Player.data.track?.uri;if(Number(y.skipThreshold)&&(c[t]||Number.MAX_SAFE_INTEGER)<=Number(y.skipThreshold))return void Spicetify.Player.next();A(t)});A(Spicetify.Player.data.track?.uri);var F,gt=new MutationObserver(()=>I());new MutationObserver(()=>{let t=document.querySelector("main");t&&!t.isEqualNode(F)&&(F&&gt.disconnect(),F=t,gt.observe(F,{childList:!0,subtree:!0}))}).observe(document.body,{childList:!0,subtree:!0});Spicetify.Platform.History.listen(async({pathname:t})=>{Ot([L.isAlbum,L.isArtist,L.isPlaylistV1OrV2])(t)&&T(L.fromString(t))});
//# sourceMappingURL=data:application/json;base64,
(async () => {
    if (!document.getElementById("star-ratings-2-css")) {
        const el = document.createElement("style")
        el.id = "star-ratings-2-css"
        
        el.textContent = "button.rating-1 svg{fill:#ed5564!important}button.rating-2 svg{fill:#ffce54!important}button.rating-3 svg{fill:#a0d568!important}button.rating-4 svg{fill:#4fc1e8!important}button.rating-5 svg{fill:#ac92eb!important}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vZXh0ZW5zaW9ucy9zdGFyLXJhdGluZ3MtMi9hc3NldHMvc3R5bGVzLmNzcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiYnV0dG9uLnJhdGluZy0xIHN2Z3tmaWxsOiNlZDU1NjQgIWltcG9ydGFudH1idXR0b24ucmF0aW5nLTIgc3Zne2ZpbGw6I2ZmY2U1NCAhaW1wb3J0YW50fWJ1dHRvbi5yYXRpbmctMyBzdmd7ZmlsbDojYTBkNTY4ICFpbXBvcnRhbnR9YnV0dG9uLnJhdGluZy00IHN2Z3tmaWxsOiM0ZmMxZTggIWltcG9ydGFudH1idXR0b24ucmF0aW5nLTUgc3Zne2ZpbGw6I2FjOTJlYiAhaW1wb3J0YW50fSJdLAogICJtYXBwaW5ncyI6ICJBQUFBLE1BQU0sQ0FBQyxTQUFTLElBQUksS0FBSyxpQkFBa0IsQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLEtBQUssaUJBQWtCLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxLQUFLLGlCQUFrQixDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksS0FBSyxpQkFBa0IsQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLEtBQUssaUJBQWtCIiwKICAibmFtZXMiOiBbXQp9Cg== */\n"
        document.head.appendChild(el)
    }
})()