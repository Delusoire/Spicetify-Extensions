import{anyPass as kt}from"https://esm.sh/fp-ts-std/Predicate";import{array as I,function as g}from"https://esm.sh/fp-ts";import{array as k,eq as lt,string as pt,record as vt,semigroup as wt,function as h}from"https://esm.sh/fp-ts";import{guard as ct,memoize as dt}from"https://esm.sh/fp-ts-std/Function";var C=t=>ct(t);var c=t=>async e=>t(await e),M=t=>e=>i=>i[t]===e;var u=t=>e=>h.flow(k.chunksOf(t),k.map(e),i=>Promise.all(i),c(k.flatten));var N=t=>h.pipe(t,h.tupled,dt(lt.contramap(JSON.stringify)(pt.Eq)),h.untupled);import{array as Mt,function as O}from"https://esm.sh/fp-ts";var D={before:{start:O.constant({before:"start"}),fromUri:t=>({before:{uri:t}}),fromUid:t=>({before:{uid:t}})},after:{end:O.constant({after:"end"}),fromUri:t=>({after:{uri:t}}),fromUid:t=>({after:{uid:t}})}};var _=t=>new Promise(e=>setTimeout(e,t));var G=async(t,e=0,i=487)=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.getAlbum,{uri:t,locale:Spicetify.Locale.getLocale(),offset:e,limit:i})).data.albumUnion;var H=async(t,e)=>Spicetify.CosmosAsync.del(`https://api.spotify.com/v1/playlists/${t}/tracks`,{tracks:e.map(i=>({uri:i}))}),jt=u(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${t.join(",")}`)).artists),Qt=u(1)(async([t])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${t}`)]),Vt=u(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${t.join(",")}`)).albums),$t=u(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${t.join(",")}`)).tracks);var q=async(t,e=0,i=100)=>(await Spicetify.Platform.LibraryAPI.getTracks({uri:t,offset:e,limit:i})).items,S=async t=>(await Spicetify.Platform.PlaylistAPI.getContents(t)).items,j=async(t,e={})=>await Spicetify.Platform.RootlistAPI.createFolder(t,e);var Q=async(t,e={})=>await Spicetify.Platform.RootlistAPI.createPlaylist(t,e);var V=async(t,e)=>await Spicetify.Platform.PlaylistPermissionsAPI.setBasePermission(t,e?"VIEWER":"BLOCKED");var $=async t=>await Spicetify.Platform.RootlistAPI.getContents({folderUri:t});var z=async(t,e,i={})=>await Spicetify.Platform.PlaylistAPI.add(t,e,i);var ut=async(t,e,i,s="")=>{let n=new URL("https://ws.audioscrobbler.com/2.0/");return n.searchParams.append("method","track.getInfo"),n.searchParams.append("api_key",t),n.searchParams.append("artist",e),n.searchParams.append("track",i),n.searchParams.append("format","json"),n.searchParams.append("username",s),await fetch(n).then(r=>r.json())},zt=N(ut);import{range as xt}from"https://esm.sh/fp-ts/lib/ReadonlyNonEmptyArray";import{array as l,function as v}from"https://esm.sh/fp-ts";import{task as K}from"https://esm.sh/fp-ts";import{task as W}from"https://esm.sh/fp-ts";var{React:o,ReactDOM:mt}=Spicetify,{ButtonSecondary:yt}=Spicetify.ReactComponent,J=webpackChunkopen.push([[Symbol()],{},t=>t]),ft=Object.keys(J.m).map(t=>J(t)),gt=ft.filter(t=>typeof t=="object").map(t=>{try{return Object.values(t)}catch{}}).flat(),F=gt.filter(t=>typeof t=="function"),At=F.find(t=>t.toString().includes("setSectionFilterMatchQueryValue")),ht=F.find(t=>t.toString().includes("textSubdued")&&t.toString().includes("viola")),St=F.find(t=>t.toString().includes("condensed")&&t.toString().includes("onSelected"));var b=class t{constructor(e,i,s={}){this.name=e;this.sectionId=i;this.sectionFields=s;this.pushSettings=()=>{this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(()=>this.render()),this.render()};this.toObject=()=>new Proxy({},{get:(e,i)=>t.getFieldValue(this.getId(i.toString()))});this.render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await _(100)}let e=document.querySelector(".x-settings-container"),i=Array.from(e.children).find(({id:s})=>s===this.sectionId);i||(i=document.createElement("div"),i.id=this.sectionId,i.className="settingsContainer",e.appendChild(i)),mt.render(o.createElement(this.FieldsContainer,null),i)};this.addButton=e=>(this.addField("button",e),this);this.addToggle=(e,i=W.of(!1))=>(this.addField("toggle",e,i),this);this.addInput=(e,i=W.of(""))=>(this.addField("input",e,i),this);this.getId=e=>`extensions:${this.sectionId}:${e}`;this.useStateFor=e=>{let[i,s]=o.useState(t.getFieldValue(e));return[i,n=>{n!==void 0&&(s(n),t.setFieldValue(e,n))}]};this.FieldsContainer=()=>o.createElement("div",{className:"x-settings-section"},o.createElement("h2",{className:"Type__TypeElement-sc-goli3j-0 TypeElement-cello-textBase-type"},this.name),Object.entries(this.sectionFields).map(([e,i])=>o.createElement(this.Field,{field:i})));this.Field=({field:e})=>{let i=M("type");return C([[i("input"),this.InputField],[i("button"),this.ButtonField],[i("toggle"),this.ToggleField]])(()=>o.createElement(o.Fragment,null))(e)};this.SettingField=({field:e,children:i})=>o.createElement(At,{filterMatchQuery:e.id},o.createElement("div",{className:"x-settings-firstColumn"},o.createElement(ht,{htmlFor:e.id},e.desc)),o.createElement("div",{className:"x-settings-secondColumn"},i));this.ButtonField=e=>o.createElement(this.SettingField,{field:e},o.createElement(yt,{id:e.id,buttonSize:"sm",onClick:e.onClick,className:"x-settings-button"},e.text));this.ToggleField=e=>{let[i,s]=this.useStateFor(e.id);return o.createElement(this.SettingField,{field:e},o.createElement(St,{id:e.id,checked:t.getFieldValue(this.getId(e.id)),onSelected:n=>{s(n),e.onSelected?.(n)},className:"x-settings-button"}))};this.InputField=e=>{let[i,s]=this.useStateFor(e.id);return o.createElement(this.SettingField,{field:e},o.createElement("input",{className:"x-settings-input",id:e.id,dir:"ltr",value:t.getFieldValue(this.getId(e.id)),type:e.inputType,onChange:n=>{let r=n.currentTarget.value;s(r),e.onChange?.(r)}}))}}addField(e,i,s){if(s!==void 0){let r=this.getId(i.id);t.setDefaultFieldValue(r,s)}let n=Object.assign({},i,{type:e});this.sectionFields[i.id]=n}static{this.getFieldValue=e=>JSON.parse(Spicetify.LocalStorage.get(e)??"null")}static{this.setFieldValue=(e,i)=>Spicetify.LocalStorage.set(e,JSON.stringify(i))}static{this.setDefaultFieldValue=async(e,i)=>{t.getFieldValue(e)===null&&t.setFieldValue(e,await i())}}};var bt="Ratings",Y=new b("Star Ratings 2","star-ratings-2").addInput({id:"heartThreshold",desc:"Threshold for liking trakcs",inputType:"number"},K.of("3")).addInput({id:"skipThreshold",desc:"Threshold for skipping trakcs",inputType:"number"},K.of("1")).addInput({id:"ratingsFolderUri",desc:"Ratings folder uri",inputType:"text",onChange:x},async()=>(await j(bt)).uri);Y.pushSettings();var d=Y.toObject();var x=async()=>{let t=await $(d.ratingsFolderUri);m=v.pipe(t.items,l.map(e=>[e.uri,Number(e.name)]),l.reduce([],(e,[i,s])=>(e[s]=i,e))),globalThis.tracksRatings=p=await v.pipe(m,l.map(S),e=>Promise.all(e),c(l.map(e=>e??[])),c(l.map(l.map(e=>e.uri))),c(l.flatMap((e,i)=>e.map(s=>[s,i]))),c(l.reduce({},(e,[i,s])=>Object.assign(e,{[i]:Math.max(s,e[i]??0)}))))},X=async(t,e)=>{let i=p[t];if(i===e&&(e=0),i&&v.pipe(m.slice(0,i+1),l.filter(Boolean),l.map(r=>Spicetify.URI.fromString(r).id),l.map(r=>H(r,[t]))),p[t]=e,e>0){let r=m[e];r||(r=await Q(e.toFixed(0),D.after.fromUri(d.ratingsFolderUri)),V(r,!1),m[e]=r),z(r,[t])}let s=Spicetify.Player.data.track?.uri;s===t&&y(s,!1),P();let{pathname:n}=Spicetify.Platform.History.location;R(Spicetify.URI.fromString(n))},m=[],p={};var{React:f}=Spicetify,Pt=({i:t,uri:e})=>f.createElement("button",{className:"Button-sc-1dqy6lx-0 Button-textBrightAccent-sm-16-buttonTertiary-iconOnly-condensed-isUsingKeyboard-useBrowserDefaultFocusStyle rating-button",onClick:()=>X(e,t)},f.createElement("svg",{role:"img",height:16,width:16,viewBox:"0 0 16 16",className:`Svg-sc-ytk21e-0 Svg-img-icon rating-${t}`},f.createElement("path",{d:"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z"}))),Z=({uri:t})=>f.createElement("div",{className:"rating-dropdown"},xt(1,5).map(e=>f.createElement(Pt,{i:e,uri:t})));var tt=()=>Array.from(document.querySelectorAll(".main-trackList-indexable")),et=t=>Array.from(t.querySelectorAll("div.main-trackList-trackListRow")),it=t=>(t=Object.values(t)[0].child.child.child.child,t.pendingProps.uri??t.child.pendingProps.uri),rt=()=>document.querySelector("div.main-nowPlayingBar-nowPlayingBar"),Rt=()=>document.querySelector("div.main-actionBar-ActionBarRow"),It='button[aria-label="Add to Liked Songs"], button[aria-label="Add to playlist"]',U=t=>t.querySelector(It),nt=()=>Rt().querySelector('button[aria-label="Remove from Your Library"], button[aria-label="Save to Your Library"]');var{URI:A}=Spicetify,{React:Tt,ReactDOM:Lt}=Spicetify,st=["unset","#ED5564","#FFCE54","A0D568","#4FC1E8","#AC92EB"],B=(t,e)=>{if(t.style.fill===st[e])return;t.style.opacity=e>0?"1":"unset";let i=t.querySelector("svg");i.style.fill=st[e]},w,ot=(t,e,i=!1)=>{if(t.hasAttribute("dropdown-enabled")){if(!i)return}else t.setAttribute("dropdown-enabled","");let s=document.createElement("div");i&&(w?.outerHTML&&(w.outerHTML=""),w=s),t.appendChild(s),Lt.render(Tt.createElement(Z,{uri:e}),s),Spicetify.Tippy(t,{content:s,interactive:!0,animateFill:!1,placement:"left",animation:"fade",zIndex:1e4,delay:[200,0],render(n){let r=document.createElement("div"),a=document.createElement("div");return r.id="context-menu",r.appendChild(a),a.className="main-contextMenu-tippy",a.appendChild(n.props.content),{popper:r,onUpdate:g.constVoid}},onShow(n){n.popper.firstChild.classList.add("main-contextMenu-tippyEnter");let r=n.reference.parentElement.children,a=r.item(r.length-1);a.style.marginRight="0px"},onMount(n){requestAnimationFrame(()=>{n.popper.firstChild.classList.remove("main-contextMenu-tippyEnter"),n.popper.firstChild.classList.add("main-contextMenu-tippyEnterActive")})},onHide(n){requestAnimationFrame(()=>{n.popper.firstChild.classList.remove("main-contextMenu-tippyEnterActive");let r=n.reference.parentElement.children,a=r.item(r.length-2);a.style.marginRight="unset",n.unmount()})}})},y=(t,e=!0)=>{let i=rt(),s=U(i);B(s,p[t]),e&&ot(s,t,!0)},P=(t=!0)=>{let e=tt();g.pipe(e,I.map(i=>{et(i).map(n=>{let r=A.fromString(it(n)).toURI();if(!A.isTrack(r))return;let a=p[r],E=U(n);B(E,a),t&&ot(E,r)})}))},R=async t=>{let e;if(A.isAlbum(t))e=g.pipe(await G(`${t}`),r=>r.tracks.items,I.map(r=>r.track.uri));else if(A.isArtist(t))e=g.pipe(await q(`${t}`),I.map(r=>r.uri));else if(A.isPlaylistV1OrV2(t))e=g.pipe(await S(`${t}`),I.map(r=>r.uri));else throw"me out the window";let i=e.map(r=>p[r]).filter(Boolean),s=Math.round(i.reduce((r,a)=>r+a)/i.length),n=nt();B(n,s)};var{URI:T}=Spicetify;x();Spicetify.Player.addEventListener("songchange",()=>{let t=Spicetify.Player.data.track?.uri;if(Number(d.skipThreshold)&&(p[t]||Number.MAX_SAFE_INTEGER)<=Number(d.skipThreshold))return void Spicetify.Player.next();y(t)});y(Spicetify.Player.data.track?.uri);var L,at=new MutationObserver(()=>P());new MutationObserver(()=>{let t=document.querySelector("main");t&&!t.isEqualNode(L)&&(L&&at.disconnect(),L=t,at.observe(L,{childList:!0,subtree:!0}))}).observe(document.body,{childList:!0,subtree:!0});Spicetify.Platform.History.listen(async({pathname:t})=>{kt([T.isAlbum,T.isArtist,T.isPlaylistV1OrV2])(t)&&R(T.fromString(t))});
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vZXh0ZW5zaW9ucy9zdGFyLXJhdGluZ3MtMi9hcHAudHMiLCAiLi4vLi4vZXh0ZW5zaW9ucy9zdGFyLXJhdGluZ3MtMi9jb250cm9scy50c3giLCAiLi4vLi4vc2hhcmVkL2ZwLnRzIiwgIi4uLy4uL3NoYXJlZC91dGlsLnRzIiwgIi4uLy4uL3NoYXJlZC9hcGkudHMiLCAiLi4vLi4vZXh0ZW5zaW9ucy9zdGFyLXJhdGluZ3MtMi9kcm9wZG93bi50c3giLCAiLi4vLi4vZXh0ZW5zaW9ucy9zdGFyLXJhdGluZ3MtMi9yYXRpbmdzLnRzIiwgIi4uLy4uL2V4dGVuc2lvbnMvc3Rhci1yYXRpbmdzLTIvc2V0dGluZ3MudHMiLCAiLi4vLi4vc2hhcmVkL3NldHRpbmdzLnRzeCIsICIuLi8uLi9leHRlbnNpb25zL3N0YXItcmF0aW5ncy0yL3V0aWwudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IGFueVBhc3MgfSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvZnAtdHMtc3RkL1ByZWRpY2F0ZVwiXHJcbmltcG9ydCB7IHVwZGF0ZUNvbGxlY3Rpb25Db250cm9scywgdXBkYXRlTm93UGxheWluZ0NvbnRyb2xzLCB1cGRhdGVUcmFja0xpc3RDb250cm9scyB9IGZyb20gXCIuL2NvbnRyb2xzLnRzeFwiXHJcbmltcG9ydCB7IGxvYWRSYXRpbmdzLCB0cmFja3NSYXRpbmdzIH0gZnJvbSBcIi4vcmF0aW5ncy50c1wiXHJcbmltcG9ydCB7IENPTkZJRyB9IGZyb20gXCIuL3NldHRpbmdzLnRzXCJcclxuXHJcbmltcG9ydCBcIi4vYXNzZXRzL3N0eWxlcy5zY3NzXCJcclxuXHJcbmNvbnN0IHsgVVJJIH0gPSBTcGljZXRpZnlcclxuXHJcbmxvYWRSYXRpbmdzKClcclxuXHJcblNwaWNldGlmeS5QbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcihcInNvbmdjaGFuZ2VcIiwgKCkgPT4ge1xyXG4gICAgY29uc3QgbnBUcmFjayA9IFNwaWNldGlmeS5QbGF5ZXIuZGF0YS50cmFjaz8udXJpIVxyXG4gICAgaWYgKFxyXG4gICAgICAgIE51bWJlcihDT05GSUcuc2tpcFRocmVzaG9sZCkgJiZcclxuICAgICAgICAodHJhY2tzUmF0aW5nc1tucFRyYWNrXSB8fCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikgPD0gTnVtYmVyKENPTkZJRy5za2lwVGhyZXNob2xkKVxyXG4gICAgKVxyXG4gICAgICAgIHJldHVybiB2b2lkIFNwaWNldGlmeS5QbGF5ZXIubmV4dCgpXHJcblxyXG4gICAgdXBkYXRlTm93UGxheWluZ0NvbnRyb2xzKG5wVHJhY2spXHJcbn0pXHJcbnVwZGF0ZU5vd1BsYXlpbmdDb250cm9scyhTcGljZXRpZnkuUGxheWVyLmRhdGEudHJhY2s/LnVyaSEpXHJcblxyXG5sZXQgbWFpbkVsZW1lbnQ6IEhUTUxFbGVtZW50XHJcbmNvbnN0IG1haW5FbGVtZW50T2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB1cGRhdGVUcmFja0xpc3RDb250cm9scygpKVxyXG5cclxubmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xyXG4gICAgY29uc3QgbmV4dE1haW5FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oXCJtYWluXCIpXHJcbiAgICBpZiAobmV4dE1haW5FbGVtZW50ICYmICFuZXh0TWFpbkVsZW1lbnQuaXNFcXVhbE5vZGUobWFpbkVsZW1lbnQpKSB7XHJcbiAgICAgICAgaWYgKG1haW5FbGVtZW50KSBtYWluRWxlbWVudE9ic2VydmVyLmRpc2Nvbm5lY3QoKVxyXG4gICAgICAgIG1haW5FbGVtZW50ID0gbmV4dE1haW5FbGVtZW50XHJcbiAgICAgICAgbWFpbkVsZW1lbnRPYnNlcnZlci5vYnNlcnZlKG1haW5FbGVtZW50LCB7XHJcbiAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcclxuICAgICAgICAgICAgc3VidHJlZTogdHJ1ZSxcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59KS5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHtcclxuICAgIGNoaWxkTGlzdDogdHJ1ZSxcclxuICAgIHN1YnRyZWU6IHRydWUsXHJcbn0pXHJcblxyXG5TcGljZXRpZnkuUGxhdGZvcm0uSGlzdG9yeS5saXN0ZW4oYXN5bmMgKHsgcGF0aG5hbWUgfTogeyBwYXRobmFtZTogc3RyaW5nIH0pID0+IHtcclxuICAgIGNvbnN0IHBhZ2VIYXNIZWFydCA9IGFueVBhc3MoW1VSSS5pc0FsYnVtLCBVUkkuaXNBcnRpc3QsIFVSSS5pc1BsYXlsaXN0VjFPclYyXSlcclxuICAgIGlmICghcGFnZUhhc0hlYXJ0KHBhdGhuYW1lKSkgcmV0dXJuXHJcblxyXG4gICAgdXBkYXRlQ29sbGVjdGlvbkNvbnRyb2xzKFVSSS5mcm9tU3RyaW5nKHBhdGhuYW1lKSlcclxufSlcclxuIiwgImltcG9ydCB7IGFycmF5IGFzIGFyLCBmdW5jdGlvbiBhcyBmIH0gZnJvbSBcImh0dHBzOi8vZXNtLnNoL2ZwLXRzXCJcclxuXHJcbmltcG9ydCB7IGZldGNoR1FMQWxidW0sIGZldGNoUGxhdEFydGlzdExpa2VkVHJhY2tzLCBmZXRjaFBsYXRQbGF5bGlzdENvbnRlbnRzIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9hcGkudHNcIlxyXG5pbXBvcnQgeyBTcG90aWZ5VVJJIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC91dGlsLnRzXCJcclxuaW1wb3J0IHsgRHJvcGRvd24gfSBmcm9tIFwiLi9kcm9wZG93bi50c3hcIlxyXG5pbXBvcnQgeyB0cmFja3NSYXRpbmdzIH0gZnJvbSBcIi4vcmF0aW5ncy50c1wiXHJcbmltcG9ydCB7XHJcbiAgICBnZXRDb2xsZWN0aW9uUGxheWxpc3RCdXR0b24sXHJcbiAgICBnZXROb3dQbGF5aW5nQmFyLFxyXG4gICAgZ2V0UGxheWxpc3RCdXR0b24sXHJcbiAgICBnZXRUcmFja0xpc3RUcmFja1VyaSxcclxuICAgIGdldFRyYWNrTGlzdFRyYWNrcyxcclxuICAgIGdldFRyYWNrTGlzdHMsXHJcbn0gZnJvbSBcIi4vdXRpbC50c1wiXHJcblxyXG5jb25zdCB7IFVSSSB9ID0gU3BpY2V0aWZ5XHJcbmNvbnN0IHsgUmVhY3QsIFJlYWN0RE9NIH0gPSBTcGljZXRpZnlcclxuXHJcbmNvbnN0IGNvbG9yQnlSYXRpbmcgPSBbXCJ1bnNldFwiLCBcIiNFRDU1NjRcIiwgXCIjRkZDRTU0XCIsIFwiQTBENTY4XCIsIFwiIzRGQzFFOFwiLCBcIiNBQzkyRUJcIl1cclxuXHJcbmNvbnN0IGNvbG9yaXplUGxheWxpc3RCdXR0b24gPSAoYnRuOiBIVE1MQnV0dG9uRWxlbWVudCwgcmF0aW5nOiBudW1iZXIpID0+IHtcclxuICAgIGlmIChidG4uc3R5bGUuZmlsbCA9PT0gY29sb3JCeVJhdGluZ1tyYXRpbmddKSByZXR1cm5cclxuXHJcbiAgICBidG4uc3R5bGUub3BhY2l0eSA9IHJhdGluZyA+IDAgPyBcIjFcIiA6IFwidW5zZXRcIlxyXG4gICAgY29uc3Qgc3ZnID0gYnRuLnF1ZXJ5U2VsZWN0b3I8U1ZHRWxlbWVudD4oXCJzdmdcIikhXHJcbiAgICBzdmcuc3R5bGUuZmlsbCA9IGNvbG9yQnlSYXRpbmdbcmF0aW5nXVxyXG59XHJcblxyXG5sZXQgbGFzdERpdjogSFRNTERpdkVsZW1lbnRcclxuY29uc3Qgd3JhcERyb3Bkb3duSW5zaWRlUGxheWxpc3RCdXR0b24gPSAocGI6IEhUTUxCdXR0b25FbGVtZW50LCB1cmk6IFNwb3RpZnlVUkksIGZvcmNlZCA9IGZhbHNlKSA9PiB7XHJcbiAgICBpZiAocGIuaGFzQXR0cmlidXRlKFwiZHJvcGRvd24tZW5hYmxlZFwiKSkge1xyXG4gICAgICAgIGlmICghZm9yY2VkKSByZXR1cm5cclxuICAgIH0gZWxzZSBwYi5zZXRBdHRyaWJ1dGUoXCJkcm9wZG93bi1lbmFibGVkXCIsIFwiXCIpXHJcblxyXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG4gICAgaWYgKGZvcmNlZCkge1xyXG4gICAgICAgIGlmIChsYXN0RGl2Py5vdXRlckhUTUwpIGxhc3REaXYub3V0ZXJIVE1MID0gXCJcIlxyXG4gICAgICAgIGxhc3REaXYgPSBkaXZcclxuICAgIH1cclxuICAgIHBiLmFwcGVuZENoaWxkKGRpdilcclxuICAgIFJlYWN0RE9NLnJlbmRlcig8RHJvcGRvd24gdXJpPXt1cml9IC8+LCBkaXYpXHJcbiAgICBTcGljZXRpZnkuVGlwcHkocGIsIHtcclxuICAgICAgICBjb250ZW50OiBkaXYsXHJcbiAgICAgICAgaW50ZXJhY3RpdmU6IHRydWUsXHJcbiAgICAgICAgYW5pbWF0ZUZpbGw6IGZhbHNlLFxyXG4gICAgICAgIC8vb2Zmc2V0OiBbMCwgN10sXHJcbiAgICAgICAgcGxhY2VtZW50OiBcImxlZnRcIixcclxuICAgICAgICBhbmltYXRpb246IFwiZmFkZVwiLFxyXG4gICAgICAgIC8vdHJpZ2dlcjogXCJtb3VzZWVudGVyIGZvY3VzXCIsXHJcbiAgICAgICAgekluZGV4OiAxMDAwMCxcclxuICAgICAgICBkZWxheTogWzIwMCwgMF0sXHJcbiAgICAgICAgcmVuZGVyKGluc3RhbmNlOiBhbnkpIHtcclxuICAgICAgICAgICAgY29uc3QgcG9wcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG4gICAgICAgICAgICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXHJcblxyXG4gICAgICAgICAgICBwb3BwZXIuaWQgPSBcImNvbnRleHQtbWVudVwiXHJcbiAgICAgICAgICAgIHBvcHBlci5hcHBlbmRDaGlsZChib3gpXHJcblxyXG4gICAgICAgICAgICBib3guY2xhc3NOYW1lID0gXCJtYWluLWNvbnRleHRNZW51LXRpcHB5XCJcclxuICAgICAgICAgICAgYm94LmFwcGVuZENoaWxkKGluc3RhbmNlLnByb3BzLmNvbnRlbnQpXHJcblxyXG4gICAgICAgICAgICByZXR1cm4geyBwb3BwZXIsIG9uVXBkYXRlOiBmLmNvbnN0Vm9pZCB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvblNob3coaW5zdGFuY2U6IGFueSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5wb3BwZXIuZmlyc3RDaGlsZC5jbGFzc0xpc3QuYWRkKFwibWFpbi1jb250ZXh0TWVudS10aXBweUVudGVyXCIpXHJcblxyXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IChpbnN0YW5jZS5yZWZlcmVuY2UucGFyZW50RWxlbWVudCBhcyBIVE1MRGl2RWxlbWVudCkuY2hpbGRyZW5cclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGNoaWxkcmVuLml0ZW0oY2hpbGRyZW4ubGVuZ3RoIC0gMSkgYXMgSFRNTEJ1dHRvbkVsZW1lbnRcclxuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5tYXJnaW5SaWdodCA9IFwiMHB4XCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uTW91bnQoaW5zdGFuY2U6IGFueSkge1xyXG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UucG9wcGVyLmZpcnN0Q2hpbGQuY2xhc3NMaXN0LnJlbW92ZShcIm1haW4tY29udGV4dE1lbnUtdGlwcHlFbnRlclwiKVxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UucG9wcGVyLmZpcnN0Q2hpbGQuY2xhc3NMaXN0LmFkZChcIm1haW4tY29udGV4dE1lbnUtdGlwcHlFbnRlckFjdGl2ZVwiKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25IaWRlKGluc3RhbmNlOiBhbnkpIHtcclxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnBvcHBlci5maXJzdENoaWxkLmNsYXNzTGlzdC5yZW1vdmUoXCJtYWluLWNvbnRleHRNZW51LXRpcHB5RW50ZXJBY3RpdmVcIilcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IChpbnN0YW5jZS5yZWZlcmVuY2UucGFyZW50RWxlbWVudCBhcyBIVE1MRGl2RWxlbWVudCkuY2hpbGRyZW5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBjaGlsZHJlbi5pdGVtKGNoaWxkcmVuLmxlbmd0aCAtIDIpIGFzIEhUTUxCdXR0b25FbGVtZW50XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCJ1bnNldFwiXHJcblxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UudW5tb3VudCgpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuICAgIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB1cGRhdGVOb3dQbGF5aW5nQ29udHJvbHMgPSAobmV3VHJhY2s6IFNwb3RpZnlVUkksIHVwZGF0ZURyb3Bkb3duID0gdHJ1ZSkgPT4ge1xyXG4gICAgY29uc3QgbnBiID0gZ2V0Tm93UGxheWluZ0JhcigpXHJcbiAgICBjb25zdCBwYiA9IGdldFBsYXlsaXN0QnV0dG9uKG5wYilcclxuICAgIGNvbG9yaXplUGxheWxpc3RCdXR0b24ocGIsIHRyYWNrc1JhdGluZ3NbbmV3VHJhY2tdKVxyXG4gICAgaWYgKHVwZGF0ZURyb3Bkb3duKSB3cmFwRHJvcGRvd25JbnNpZGVQbGF5bGlzdEJ1dHRvbihwYiwgbmV3VHJhY2ssIHRydWUpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB1cGRhdGVUcmFja0xpc3RDb250cm9scyA9ICh1cGRhdGVEcm9wZG93biA9IHRydWUpID0+IHtcclxuICAgIGNvbnN0IHRyYWNrTGlzdHMgPSBnZXRUcmFja0xpc3RzKClcclxuICAgIGYucGlwZShcclxuICAgICAgICB0cmFja0xpc3RzLFxyXG4gICAgICAgIGFyLm1hcCh0cmFja0xpc3QgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0cmFja0xpc3RUcmFja3MgPSBnZXRUcmFja0xpc3RUcmFja3ModHJhY2tMaXN0KVxyXG5cclxuICAgICAgICAgICAgdHJhY2tMaXN0VHJhY2tzLm1hcCh0cmFjayA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1cmkgPSBVUkkuZnJvbVN0cmluZyhnZXRUcmFja0xpc3RUcmFja1VyaSh0cmFjaykpLnRvVVJJKClcclxuXHJcbiAgICAgICAgICAgICAgICAvL1RPRE86IExvY2FsIFRyYWNrcyBzdXBwb3J0XHJcbiAgICAgICAgICAgICAgICBpZiAoIVVSSS5pc1RyYWNrKHVyaSEpKSByZXR1cm5cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gdHJhY2tzUmF0aW5nc1t1cmldXHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYiA9IGdldFBsYXlsaXN0QnV0dG9uKHRyYWNrKVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbG9yaXplUGxheWxpc3RCdXR0b24ocGIsIHIpXHJcbiAgICAgICAgICAgICAgICBpZiAodXBkYXRlRHJvcGRvd24pIHdyYXBEcm9wZG93bkluc2lkZVBsYXlsaXN0QnV0dG9uKHBiLCB1cmkpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSksXHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB1cGRhdGVDb2xsZWN0aW9uQ29udHJvbHMgPSBhc3luYyAodXJpOiBTcGljZXRpZnkuVVJJKSA9PiB7XHJcbiAgICBsZXQgdXJpc1xyXG4gICAgaWYgKFVSSS5pc0FsYnVtKHVyaSkpXHJcbiAgICAgICAgdXJpcyA9IGYucGlwZShcclxuICAgICAgICAgICAgYXdhaXQgZmV0Y2hHUUxBbGJ1bShgJHt1cml9YCksXHJcbiAgICAgICAgICAgIHggPT4geC50cmFja3MuaXRlbXMsXHJcbiAgICAgICAgICAgIGFyLm1hcCh4ID0+IHgudHJhY2sudXJpKSxcclxuICAgICAgICApXHJcbiAgICBlbHNlIGlmIChVUkkuaXNBcnRpc3QodXJpKSlcclxuICAgICAgICB1cmlzID0gZi5waXBlKFxyXG4gICAgICAgICAgICBhd2FpdCBmZXRjaFBsYXRBcnRpc3RMaWtlZFRyYWNrcyhgJHt1cml9YCksXHJcbiAgICAgICAgICAgIGFyLm1hcCh4ID0+IHgudXJpKSxcclxuICAgICAgICApXHJcbiAgICBlbHNlIGlmIChVUkkuaXNQbGF5bGlzdFYxT3JWMih1cmkpKVxyXG4gICAgICAgIHVyaXMgPSBmLnBpcGUoXHJcbiAgICAgICAgICAgIGF3YWl0IGZldGNoUGxhdFBsYXlsaXN0Q29udGVudHMoYCR7dXJpfWApLFxyXG4gICAgICAgICAgICBhci5tYXAoeCA9PiB4LnVyaSksXHJcbiAgICAgICAgKVxyXG4gICAgZWxzZSB0aHJvdyBcIm1lIG91dCB0aGUgd2luZG93XCJcclxuXHJcbiAgICBjb25zdCByYXRpbmdzID0gdXJpcy5tYXAodXJpID0+IHRyYWNrc1JhdGluZ3NbdXJpXSkuZmlsdGVyKEJvb2xlYW4pXHJcbiAgICBjb25zdCByYXRpbmcgPSBNYXRoLnJvdW5kKHJhdGluZ3MucmVkdWNlKChhY2MsIHIpID0+IGFjYyArIHIpIC8gcmF0aW5ncy5sZW5ndGgpXHJcblxyXG4gICAgY29uc3QgcGIgPSBnZXRDb2xsZWN0aW9uUGxheWxpc3RCdXR0b24oKVxyXG4gICAgY29sb3JpemVQbGF5bGlzdEJ1dHRvbihwYiwgcmF0aW5nKVxyXG59XHJcbiIsICJpbXBvcnQge1xyXG4gICAgYXJyYXkgYXMgYXIsXHJcbiAgICBlcSxcclxuICAgIHN0cmluZyBhcyBzdHIsXHJcbiAgICByZWNvcmQgYXMgcmVjLFxyXG4gICAgcmVmaW5lbWVudCBhcyByZWYsXHJcbiAgICBzZW1pZ3JvdXAgYXMgc2csXHJcbiAgICBmdW5jdGlvbiBhcyBmLFxyXG59IGZyb20gXCJodHRwczovL2VzbS5zaC9mcC10c1wiXHJcbmltcG9ydCB7IGd1YXJkLCBtZW1vaXplIH0gZnJvbSBcImh0dHBzOi8vZXNtLnNoL2ZwLXRzLXN0ZC9GdW5jdGlvblwiXHJcblxyXG50eXBlIHJlZmluZUJyYW5jaDxBLCBCIGV4dGVuZHMgQSwgUj4gPSBbcmVmLlJlZmluZW1lbnQ8QSwgQj4sICh4OiBCKSA9PiBSXVxyXG5leHBvcnQgY29uc3QgZ3VhcmQyID0gPEEsIEExIGV4dGVuZHMgQSwgQTIgZXh0ZW5kcyBBLCBSPihicmFuY2hlczogW3JlZmluZUJyYW5jaDxBLCBBMSwgUj4sIHJlZmluZUJyYW5jaDxBLCBBMiwgUj5dKSA9PlxyXG4gICAgZ3VhcmQoYnJhbmNoZXMgYXMgdW5rbm93biBhcyBbcmVmaW5lQnJhbmNoPEEsIEEsIFI+LCByZWZpbmVCcmFuY2g8QSwgQSwgUj5dKVxyXG5leHBvcnQgY29uc3QgZ3VhcmQzID0gPEEsIEExIGV4dGVuZHMgQSwgQTIgZXh0ZW5kcyBBLCBBMyBleHRlbmRzIEEsIFI+KFxyXG4gICAgYnJhbmNoZXM6IFtyZWZpbmVCcmFuY2g8QSwgQTEsIFI+LCByZWZpbmVCcmFuY2g8QSwgQTIsIFI+LCByZWZpbmVCcmFuY2g8QSwgQTMsIFI+XSxcclxuKSA9PiBndWFyZChicmFuY2hlcyBhcyB1bmtub3duIGFzIFtyZWZpbmVCcmFuY2g8QSwgQSwgUj4sIHJlZmluZUJyYW5jaDxBLCBBLCBSPiwgcmVmaW5lQnJhbmNoPEEsIEEsIFI+XSlcclxuZXhwb3J0IGNvbnN0IGd1YXJkNCA9IDxBLCBBMSBleHRlbmRzIEEsIEEyIGV4dGVuZHMgQSwgQTMgZXh0ZW5kcyBBLCBBNCBleHRlbmRzIEEsIFI+KFxyXG4gICAgYnJhbmNoZXM6IFtyZWZpbmVCcmFuY2g8QSwgQTEsIFI+LCByZWZpbmVCcmFuY2g8QSwgQTIsIFI+LCByZWZpbmVCcmFuY2g8QSwgQTMsIFI+LCByZWZpbmVCcmFuY2g8QSwgQTQsIFI+XSxcclxuKSA9PlxyXG4gICAgZ3VhcmQoXHJcbiAgICAgICAgYnJhbmNoZXMgYXMgdW5rbm93biBhcyBbXHJcbiAgICAgICAgICAgIHJlZmluZUJyYW5jaDxBLCBBLCBSPixcclxuICAgICAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEEsIFI+LFxyXG4gICAgICAgICAgICByZWZpbmVCcmFuY2g8QSwgQSwgUj4sXHJcbiAgICAgICAgICAgIHJlZmluZUJyYW5jaDxBLCBBLCBSPixcclxuICAgICAgICBdLFxyXG4gICAgKVxyXG5leHBvcnQgY29uc3QgZ3VhcmQ1ID0gPEEsIEExIGV4dGVuZHMgQSwgQTIgZXh0ZW5kcyBBLCBBMyBleHRlbmRzIEEsIEE0IGV4dGVuZHMgQSwgQTUgZXh0ZW5kcyBBLCBSPihcclxuICAgIGJyYW5jaGVzOiBbXHJcbiAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEExLCBSPixcclxuICAgICAgICByZWZpbmVCcmFuY2g8QSwgQTIsIFI+LFxyXG4gICAgICAgIHJlZmluZUJyYW5jaDxBLCBBMywgUj4sXHJcbiAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEE0LCBSPixcclxuICAgICAgICByZWZpbmVCcmFuY2g8QSwgQTUsIFI+LFxyXG4gICAgXSxcclxuKSA9PlxyXG4gICAgZ3VhcmQoXHJcbiAgICAgICAgYnJhbmNoZXMgYXMgdW5rbm93biBhcyBbXHJcbiAgICAgICAgICAgIHJlZmluZUJyYW5jaDxBLCBBLCBSPixcclxuICAgICAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEEsIFI+LFxyXG4gICAgICAgICAgICByZWZpbmVCcmFuY2g8QSwgQSwgUj4sXHJcbiAgICAgICAgICAgIHJlZmluZUJyYW5jaDxBLCBBLCBSPixcclxuICAgICAgICAgICAgcmVmaW5lQnJhbmNoPEEsIEEsIFI+LFxyXG4gICAgICAgIF0sXHJcbiAgICApXHJcblxyXG5leHBvcnQgY29uc3Qgb2JqQ29uY2F0MiA9IDxBMSwgQTI+KCkgPT4gcmVjLmdldFVuaW9uU2VtaWdyb3VwKHNnLmZpcnN0PGFueT4oKSkuY29uY2F0IGFzICh4OiBBMSwgeTogQTIpID0+IEExICYgQTJcclxuZXhwb3J0IGNvbnN0IG9iakNvbmNhdCA9IDxBPigpID0+IGFyLnJlZHVjZSh7fSBhcyBBLCBvYmpDb25jYXQyPEEsIEE+KCkpXHJcblxyXG50eXBlIGFzeW5jID0ge1xyXG4gICAgPEEsIEI+KGY6IChhOiBBKSA9PiBQcm9taXNlPEI+KTogKGZhOiBQcm9taXNlPEE+KSA9PiBQcm9taXNlPEI+XHJcbiAgICA8QSwgQj4oZjogKGE6IEEpID0+IEIpOiAoZmE6IFByb21pc2U8QT4pID0+IFByb21pc2U8Qj5cclxufVxyXG5leHBvcnQgY29uc3QgcE1jaGFpbjogYXN5bmMgPVxyXG4gICAgPEEsIFI+KGY6IChhOiBBKSA9PiBSKSA9PlxyXG4gICAgYXN5bmMgKGZhOiBBKSA9PlxyXG4gICAgICAgIGYoYXdhaXQgZmEpXHJcblxyXG5leHBvcnQgY29uc3QgaXMgPVxyXG4gICAgPEE+KGM6IGtleW9mIEEpID0+XHJcbiAgICA8QiBleHRlbmRzIEE+KGE6IEFbdHlwZW9mIGNdKSA9PlxyXG4gICAgKGZpZWxkOiBBKTogZmllbGQgaXMgQiA9PlxyXG4gICAgICAgIGZpZWxkW2NdID09PSBhXHJcblxyXG5leHBvcnQgY29uc3QgdGFwQW55ID1cclxuICAgIDxBPihmOiAoYTogQSkgPT4gdm9pZCkgPT5cclxuICAgIChmYTogQSkgPT4ge1xyXG4gICAgICAgIGYoZmEpXHJcbiAgICAgICAgcmV0dXJuIGZhXHJcbiAgICB9XHJcblxyXG5leHBvcnQgY29uc3QgY2h1bmNraWZ5ID1cclxuICAgIChuOiBudW1iZXIpID0+XHJcbiAgICA8QSwgUj4oZzogKGE6IEFbXSkgPT4gUHJvbWlzZTxSW10+KSA9PlxyXG4gICAgICAgIGYuZmxvdyhhci5jaHVua3NPZihuKTxBPiwgYXIubWFwKGcpLCBwcyA9PiBQcm9taXNlLmFsbChwcyksIHBNY2hhaW4oYXIuZmxhdHRlbikpXHJcblxyXG5leHBvcnQgY29uc3Qgd2l0aFByb2dyZXNzID1cclxuICAgIDxGIGV4dGVuZHMgKGY6ICguLi5hOiBhbnkpID0+IGFueSkgPT4gKGZhOiBhbnkpID0+IGFueT4obWFwOiBGKSA9PlxyXG4gICAgKGY6IFBhcmFtZXRlcnM8Rj5bMF0pID0+XHJcbiAgICAoZmE6IFBhcmFtZXRlcnM8UmV0dXJuVHlwZTxGPj5bMF0pOiBSZXR1cm5UeXBlPFJldHVyblR5cGU8Rj4+ID0+IHtcclxuICAgICAgICBsZXQgaSA9IDBcclxuICAgICAgICByZXR1cm4gbWFwKGFzeW5jICguLi5hOiBQYXJhbWV0ZXJzPFBhcmFtZXRlcnM8Rj5bMF0+KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IEZ1Y2sgbWVcclxuICAgICAgICAgICAgY29uc3QgcmV0ID0gYXdhaXQgZiguLi5hKVxyXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgucm91bmQoKGkrKyAvIE9iamVjdC52YWx1ZXMoZmEpLmxlbmd0aCkgKiAxMDApXHJcbiAgICAgICAgICAgIFNwaWNldGlmeS5zaG93Tm90aWZpY2F0aW9uKGBMb2FkaW5nOiAke3Byb2dyZXNzfSVgLCBmYWxzZSwgMjAwKVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0XHJcbiAgICAgICAgfSkoZmEpXHJcbiAgICB9XHJcblxyXG5leHBvcnQgY29uc3QgbWVtb2l6ZTIgPSA8QSBleHRlbmRzIGFueVtdLCBSPihmbjogKC4uLmFyZ3M6IEEpID0+IFIpID0+XHJcbiAgICBmLnBpcGUoZm4sIGYudHVwbGVkLCBtZW1vaXplPEE+KGVxLmNvbnRyYW1hcChKU09OLnN0cmluZ2lmeSkoc3RyLkVxKSksIGYudW50dXBsZWQpXHJcbiIsICIvLyBleHBvcnQgaW50ZXJmYWNlIFNwb3RpZnlJRFxyXG4vLyAgICAgZXh0ZW5kcyBOZXd0eXBlPHsgcmVhZG9ubHkgU3BvdGlmeUlEOiB1bmlxdWUgc3ltYm9sIH0sIHN0cmluZz4ge31cclxuLy8gZXhwb3J0IGludGVyZmFjZSBTcG90aWZ5VVJJXHJcbi8vICAgICBleHRlbmRzIE5ld3R5cGU8eyByZWFkb25seSBTcG90aWZ5VVJJOiB1bmlxdWUgc3ltYm9sIH0sIHN0cmluZz4ge31cclxuXHJcbmltcG9ydCB7IGFycmF5IGFzIGEsIGZ1bmN0aW9uIGFzIGYgfSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvZnAtdHNcIlxyXG5cclxuZXhwb3J0IHR5cGUgU3BvdGlmeUlEID0gc3RyaW5nXHJcbmV4cG9ydCB0eXBlIFNwb3RpZnlVUkkgPSBzdHJpbmdcclxuXHJcbmV4cG9ydCB0eXBlIFNwb3RpZnlMb2NPYmogPSB7XHJcbiAgICBiZWZvcmU/OiBcInN0YXJ0XCIgfCB7IHVyaTogU3BvdGlmeVVSSSB9IHwgeyB1aWQ6IHN0cmluZyB9XHJcbiAgICBhZnRlcj86IFwiZW5kXCIgfCB7IHVyaTogU3BvdGlmeVVSSSB9IHwgeyB1aWQ6IHN0cmluZyB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTcG90aWZ5TG9jID0ge1xyXG4gICAgYmVmb3JlOiB7XHJcbiAgICAgICAgc3RhcnQ6IGYuY29uc3RhbnQoeyBiZWZvcmU6IFwic3RhcnRcIiB9IGFzIFNwb3RpZnlMb2NPYmopLFxyXG4gICAgICAgIGZyb21Vcmk6ICh1cmk6IFNwb3RpZnlVUkkpID0+ICh7IGJlZm9yZTogeyB1cmkgfSB9KSxcclxuICAgICAgICBmcm9tVWlkOiAodWlkOiBzdHJpbmcpID0+ICh7IGJlZm9yZTogeyB1aWQgfSB9KSxcclxuICAgIH0sXHJcbiAgICBhZnRlcjoge1xyXG4gICAgICAgIGVuZDogZi5jb25zdGFudCh7IGFmdGVyOiBcImVuZFwiIH0gYXMgU3BvdGlmeUxvY09iaiksXHJcbiAgICAgICAgZnJvbVVyaTogKHVyaTogU3BvdGlmeVVSSSkgPT4gKHsgYWZ0ZXI6IHsgdXJpIH0gfSksXHJcbiAgICAgICAgZnJvbVVpZDogKHVpZDogc3RyaW5nKSA9PiAoeyBhZnRlcjogeyB1aWQgfSB9KSxcclxuICAgIH0sXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBlc2NhcGVSZWdleCA9IChzdHI6IHN0cmluZykgPT4gc3RyLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCBgXFxcXCQmYClcclxuXHJcbmV4cG9ydCBjb25zdCB0aXRsZUNhc2UgPSAoc3RyOiBzdHJpbmcpID0+IHN0ci5yZXBsYWNlKC9cXGJcXHcvZywgbCA9PiBsLnRvVXBwZXJDYXNlKCkpXHJcblxyXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplU3RyID0gKHN0cjogc3RyaW5nKSA9PlxyXG4gICAgc3RyXHJcbiAgICAgICAgLm5vcm1hbGl6ZShcIk5GS0RcIilcclxuICAgICAgICAucmVwbGFjZSgvXFwoLipcXCkvZywgXCJcIilcclxuICAgICAgICAucmVwbGFjZSgvXFxbLipcXF0vZywgXCJcIilcclxuICAgICAgICAucmVwbGFjZSgvLV8sL2csIFwiIFwiKVxyXG4gICAgICAgIC5yZXBsYWNlKC9bXmEtekEtWjAtOSBdL2csIFwiXCIpXHJcbiAgICAgICAgLnJlcGxhY2UoL1xccysvZywgXCIgXCIpXHJcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAudHJpbSgpXHJcblxyXG4vLyEgRG9lcyBsb2NhdGlvbiBhY3R1YWxseSBwb2ludCB0byBkb2N1bWVudC5ib2R5P1xyXG5leHBvcnQgY29uc3Qgd2FpdEZvckVsZW1lbnQgPSA8RSBleHRlbmRzIEVsZW1lbnQ+KFxyXG4gICAgc2VsZWN0b3I6IHN0cmluZyxcclxuICAgIHRpbWVvdXQgPSAxMDAwLFxyXG4gICAgbG9jYXRpb24gPSBkb2N1bWVudC5ib2R5LFxyXG4gICAgbm90RWw/OiBFLFxyXG4pID0+XHJcbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZTogKHZhbHVlOiBFbGVtZW50IHwgbnVsbCkgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9ICh2OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpXHJcbiAgICAgICAgICAgIHJlc29sdmUodilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8RT4oc2VsZWN0b3IpXHJcbiAgICAgICAgICAgIGlmIChlbCAmJiAoIW5vdEVsIHx8IGVsICE9PSBub3RFbCkpIHJldHVybiByZXMoZWwpXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShsb2NhdGlvbiwge1xyXG4gICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgICAgICAgIHN1YnRyZWU6IHRydWUsXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgaWYgKHRpbWVvdXQpIHNldFRpbWVvdXQoKCkgPT4gcmVzKG51bGwpLCB0aW1lb3V0KVxyXG4gICAgfSlcclxuXHJcbmV4cG9ydCBjb25zdCB0cmFwRWxlbWVudCA9IDxFIGV4dGVuZHMgRWxlbWVudD4oXHJcbiAgICBzZWxlY3Rvcjogc3RyaW5nLFxyXG4gICAgY2FsbGJhY2s6IChlbDogRSB8IG51bGwsIGxhc3RFbDogRSB8IG51bGwpID0+IHZvaWQsXHJcbiAgICBsb2NhdGlvbiA9IGRvY3VtZW50LmJvZHksXHJcbikgPT4ge1xyXG4gICAgbGV0IGxhc3RFbDogRSB8IG51bGwgPSBudWxsXHJcblxyXG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEU+KHNlbGVjdG9yKVxyXG4gICAgICAgIGlmIChlbCAhPT0gbGFzdEVsKSBjYWxsYmFjayhlbCwgbGFzdEVsKVxyXG4gICAgICAgIGxhc3RFbCA9IGVsXHJcbiAgICB9KVxyXG5cclxuICAgIG9ic2VydmVyLm9ic2VydmUobG9jYXRpb24sIHtcclxuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgICAgc3VidHJlZTogdHJ1ZSxcclxuICAgIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzbGVlcCA9IChtczogbnVtYmVyKSA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldFJlYWN0UHJvcHMgPSAoZWxlbWVudDogRWxlbWVudCkgPT5cclxuICAgIGVsZW1lbnRbT2JqZWN0LmtleXMoZWxlbWVudCkuZmluZChrID0+IGsuc3RhcnRzV2l0aChcIl9fcmVhY3RQcm9wcyRcIikpIGFzIGtleW9mIHR5cGVvZiBlbGVtZW50XVxyXG5cclxuZXhwb3J0IGNvbnN0IGlzTGlrZWQgPSAodXJpczogU3BvdGlmeVVSSVtdKSA9PiBTcGljZXRpZnkuUGxhdGZvcm0uTGlicmFyeUFQSS5jb250YWlucyguLi51cmlzKSBhcyBQcm9taXNlPGJvb2xlYW5bXT5cclxuXHJcbmV4cG9ydCBjb25zdCBzZXRMaWtlZCA9ICh1cmlzOiBTcG90aWZ5VVJJW10sIGxpa2VkOiBib29sZWFuKSA9PlxyXG4gICAgU3BpY2V0aWZ5LlBsYXRmb3JtLkxpYnJhcnlBUElbbGlrZWQgPyBcImFkZFwiIDogXCJyZW1vdmVcIl0oLi4udXJpcylcclxuXHJcbmV4cG9ydCBjb25zdCB0b2dnbGVMaWtlZCA9IGFzeW5jICh1cmlzOiBTcG90aWZ5VVJJW10pID0+IHtcclxuICAgIGNvbnN0IGxpa2VkID0gYXdhaXQgaXNMaWtlZCh1cmlzKVxyXG5cclxuICAgIHJldHVybiBhd2FpdCBmLnBpcGUoXHJcbiAgICAgICAgdXJpcyxcclxuICAgICAgICBhLnJlZHVjZVdpdGhJbmRleChcclxuICAgICAgICAgICAgW1tdIGFzIFNwb3RpZnlVUklbXSwgW10gYXMgU3BvdGlmeVVSSVtdXSBhcyBjb25zdCxcclxuICAgICAgICAgICAgKGksIGFjYywgdXJpKSA9PiAoYWNjW051bWJlcihsaWtlZFtpXSldLnB1c2godXJpKSwgYWNjKSxcclxuICAgICAgICApLFxyXG4gICAgICAgIChbdG9BZGQsIHRvUmVtXSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwcyA9IFtdXHJcbiAgICAgICAgICAgIGlmICh0b0FkZC5sZW5ndGgpIHBzLnB1c2goc2V0TGlrZWQodG9BZGQsIHRydWUpKVxyXG4gICAgICAgICAgICBpZiAodG9SZW0ubGVuZ3RoKSBwcy5wdXNoKHNldExpa2VkKHRvUmVtLCBmYWxzZSkpXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcylcclxuICAgICAgICB9LFxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlUXVldWVJdGVtID0gKHF1ZXVlZDogYm9vbGVhbikgPT4gKHVyaTogU3BvdGlmeVVSSSkgPT4gKHtcclxuICAgIGNvbnRleHRUcmFjazoge1xyXG4gICAgICAgIHVyaSxcclxuICAgICAgICB1aWQ6IFwiXCIsXHJcbiAgICAgICAgbWV0YWRhdGE6IHtcclxuICAgICAgICAgICAgaXNfcXVldWVkOiBxdWV1ZWQudG9TdHJpbmcoKSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIHJlbW92ZWQ6IFtdLFxyXG4gICAgYmxvY2tlZDogW10sXHJcbiAgICBwcm92aWRlcjogcXVldWVkID8gXCJxdWV1ZVwiIDogXCJjb250ZXh0XCIsXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3Qgc2V0UXVldWUgPSBhc3luYyAobmV4dFRyYWNrczogQXJyYXk8UmV0dXJuVHlwZTxSZXR1cm5UeXBlPHR5cGVvZiBjcmVhdGVRdWV1ZUl0ZW0+Pj4pID0+IHtcclxuICAgIGNvbnN0IHsgX3F1ZXVlLCBfY2xpZW50IH0gPSBTcGljZXRpZnkuUGxhdGZvcm0uUGxheWVyQVBJLl9xdWV1ZVxyXG4gICAgY29uc3QgeyBwcmV2VHJhY2tzLCBxdWV1ZVJldmlzaW9uIH0gPSBfcXVldWVcclxuXHJcbiAgICByZXR1cm4gX2NsaWVudC5zZXRRdWV1ZSh7XHJcbiAgICAgICAgbmV4dFRyYWNrcyxcclxuICAgICAgICBwcmV2VHJhY2tzLFxyXG4gICAgICAgIHF1ZXVlUmV2aXNpb24sXHJcbiAgICB9KSBhcyBQcm9taXNlPHsgZXJyb3I6IG51bWJlcjsgcmVhc29uczogc3RyaW5nIH0+XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzZXRQbGF5aW5nQ29udGV4dCA9ICh1cmk6IFNwb3RpZnlVUkkpID0+IHtcclxuICAgIGNvbnN0IHsgc2Vzc2lvbklkIH0gPSBTcGljZXRpZnkuUGxhdGZvcm0uUGxheWVyQVBJLmdldFN0YXRlKClcclxuICAgIHJldHVybiBTcGljZXRpZnkuUGxhdGZvcm0uUGxheWVyQVBJLnVwZGF0ZUNvbnRleHQoc2Vzc2lvbklkLCB7IHVyaSwgdXJsOiBcImNvbnRleHQ6Ly9cIiArIHVyaSB9KSBhcyBQcm9taXNlPHVuZGVmaW5lZD5cclxufVxyXG4iLCAiaW1wb3J0IHsgY2h1bmNraWZ5LCBtZW1vaXplMiB9IGZyb20gXCIuL2ZwLnRzXCJcclxuaW1wb3J0IHsgU3BvdGlmeUlELCBTcG90aWZ5TG9jT2JqLCBTcG90aWZ5VVJJLCBlc2NhcGVSZWdleCB9IGZyb20gXCIuL3V0aWwudHNcIlxyXG5cclxuLyogICAgICAgICAgICAgICAgICAgICAgICAgIEdyYXBoUUwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaEdRTEFsYnVtID0gYXN5bmMgKHVyaTogU3BvdGlmeVVSSSwgb2Zmc2V0ID0gMCwgbGltaXQgPSA0ODcpID0+XHJcbiAgICAoXHJcbiAgICAgICAgYXdhaXQgU3BpY2V0aWZ5LkdyYXBoUUwuUmVxdWVzdChTcGljZXRpZnkuR3JhcGhRTC5EZWZpbml0aW9ucy5nZXRBbGJ1bSwge1xyXG4gICAgICAgICAgICB1cmksXHJcbiAgICAgICAgICAgIGxvY2FsZTogU3BpY2V0aWZ5LkxvY2FsZS5nZXRMb2NhbGUoKSxcclxuICAgICAgICAgICAgb2Zmc2V0LFxyXG4gICAgICAgICAgICBsaW1pdCxcclxuICAgICAgICB9KVxyXG4gICAgKS5kYXRhLmFsYnVtVW5pb24gYXMgZmV0Y2hHUUxBbGJ1bVJlc1xyXG5cclxudHlwZSBmZXRjaEFydGlzdEdRTFJlcyA9IGFueVxyXG5leHBvcnQgY29uc3QgZmV0Y2hHUUxBcnRpc3RPdmVydmlldyA9IGFzeW5jICh1cmk6IFNwb3RpZnlVUkkpID0+XHJcbiAgICAoXHJcbiAgICAgICAgYXdhaXQgU3BpY2V0aWZ5LkdyYXBoUUwuUmVxdWVzdChTcGljZXRpZnkuR3JhcGhRTC5EZWZpbml0aW9ucy5xdWVyeUFydGlzdE92ZXJ2aWV3LCB7XHJcbiAgICAgICAgICAgIHVyaSxcclxuICAgICAgICAgICAgbG9jYWxlOiBTcGljZXRpZnkuTG9jYWxlLmdldExvY2FsZSgpLFxyXG4gICAgICAgICAgICBpbmNsdWRlUHJlcmVsZWFzZTogdHJ1ZSxcclxuICAgICAgICB9KVxyXG4gICAgKS5kYXRhLmFydGlzdFVuaW9uIGFzIGZldGNoQXJ0aXN0R1FMUmVzXHJcblxyXG50eXBlIGZldGNoR1FMQXJ0aXN0RGlzY29ncmFwaHlSZXMgPSBhbnlcclxuZXhwb3J0IGNvbnN0IGZldGNoR1FMQXJ0aXN0RGlzY29ncmFwaHkgPSBhc3luYyAodXJpOiBTcG90aWZ5VVJJLCBvZmZzZXQgPSAwLCBsaW1pdCA9IDExNikgPT5cclxuICAgIChcclxuICAgICAgICBhd2FpdCBTcGljZXRpZnkuR3JhcGhRTC5SZXF1ZXN0KFNwaWNldGlmeS5HcmFwaFFMLkRlZmluaXRpb25zLnF1ZXJ5QXJ0aXN0RGlzY29ncmFwaHlBbGwsIHtcclxuICAgICAgICAgICAgdXJpLFxyXG4gICAgICAgICAgICBvZmZzZXQsXHJcbiAgICAgICAgICAgIGxpbWl0LFxyXG4gICAgICAgIH0pXHJcbiAgICApLmRhdGEuYXJ0aXN0VW5pb24uZGlzY29ncmFwaHkuYWxsLml0ZW1zIGFzIGZldGNoR1FMQXJ0aXN0RGlzY29ncmFwaHlSZXNcclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaEdRTEFydGlzdFJlbGF0ZWQgPSBhc3luYyAodXJpOiBTcG90aWZ5VVJJKSA9PlxyXG4gICAgKFxyXG4gICAgICAgIGF3YWl0IFNwaWNldGlmeS5HcmFwaFFMLlJlcXVlc3QoU3BpY2V0aWZ5LkdyYXBoUUwuRGVmaW5pdGlvbnMucXVlcnlBcnRpc3RSZWxhdGVkLCB7XHJcbiAgICAgICAgICAgIHVyaSxcclxuICAgICAgICAgICAgbG9jYWxlOiBTcGljZXRpZnkuTG9jYWxlLmdldExvY2FsZSgpLFxyXG4gICAgICAgIH0pXHJcbiAgICApLmRhdGEuYXJ0aXN0VW5pb24ucmVsYXRlZENvbnRlbnQucmVsYXRlZEFydGlzdHMuaXRlbXMgYXMgZmV0Y2hHUUxBcnRpc3RSZWxhdGVkUmVzXHJcblxyXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgU3BvdGlmeSBXZWIgQVBJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZVdlYlBsYXlsaXN0VHJhY2tzID0gYXN5bmMgKHBsYXlsaXN0OiBTcG90aWZ5SUQsIHRyYWNrczogU3BvdGlmeVVSSVtdKSA9PlxyXG4gICAgU3BpY2V0aWZ5LkNvc21vc0FzeW5jLmRlbChgaHR0cHM6Ly9hcGkuc3BvdGlmeS5jb20vdjEvcGxheWxpc3RzLyR7cGxheWxpc3R9L3RyYWNrc2AsIHtcclxuICAgICAgICB0cmFja3M6IHRyYWNrcy5tYXAodXJpID0+ICh7IHVyaSB9KSksXHJcbiAgICB9KVxyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoV2ViQXJ0aXN0c1Nwb3QgPSBjaHVuY2tpZnkoNTApKFxyXG4gICAgYXN5bmMgKGlkczogU3BvdGlmeUlEW10pID0+XHJcbiAgICAgICAgKGF3YWl0IFNwaWNldGlmeS5Db3Ntb3NBc3luYy5nZXQoYGh0dHBzOi8vYXBpLnNwb3RpZnkuY29tL3YxL2FydGlzdHM/aWRzPSR7aWRzLmpvaW4oXCIsXCIpfWApKVxyXG4gICAgICAgICAgICAuYXJ0aXN0cyBhcyBTcG90QXBpQXJ0aXN0W10sXHJcbilcclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaFdlYlBsYXlsaXN0c1Nwb3QgPSBjaHVuY2tpZnkoMSkoXHJcbiAgICAvLyBAdHMtaWdub3JlIGNodW5raWZ5IHdpbGwgbmV2ZXIgY2FsbCB3aXRoIGVtcHR5IGFycmF5XHJcbiAgICBhc3luYyAoW2lkXTogW1Nwb3RpZnlJRF0pID0+IFtcclxuICAgICAgICAoYXdhaXQgU3BpY2V0aWZ5LkNvc21vc0FzeW5jLmdldChgaHR0cHM6Ly9hcGkuc3BvdGlmeS5jb20vdjEvcGxheWxpc3RzLyR7aWR9YCkpIGFzIFNwb3RBcGlQbGF5bGlzdCxcclxuICAgIF0sXHJcbilcclxuZXhwb3J0IGNvbnN0IGZldGNoV2ViQWxidW1zU3BvdCA9IGNodW5ja2lmeSg1MCkoXHJcbiAgICBhc3luYyAoaWRzOiBTcG90aWZ5SURbXSkgPT5cclxuICAgICAgICAoYXdhaXQgU3BpY2V0aWZ5LkNvc21vc0FzeW5jLmdldChgaHR0cHM6Ly9hcGkuc3BvdGlmeS5jb20vdjEvYWxidW1zP2lkcz0ke2lkcy5qb2luKFwiLFwiKX1gKSlcclxuICAgICAgICAgICAgLmFsYnVtcyBhcyBTcG90QXBpQWxidW1bXSxcclxuKVxyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoV2ViVHJhY2tzU3BvdCA9IGNodW5ja2lmeSg1MCkoXHJcbiAgICBhc3luYyAoaWRzOiBTcG90aWZ5SURbXSkgPT5cclxuICAgICAgICAoYXdhaXQgU3BpY2V0aWZ5LkNvc21vc0FzeW5jLmdldChgaHR0cHM6Ly9hcGkuc3BvdGlmeS5jb20vdjEvdHJhY2tzP2lkcz0ke2lkcy5qb2luKFwiLFwiKX1gKSlcclxuICAgICAgICAgICAgLnRyYWNrcyBhcyBTcG90QXBpVHJhY2tbXSxcclxuKVxyXG5cclxuZXhwb3J0IGNvbnN0IHNlYXJjaFdlYkl0ZW1TcG90ID0gYXN5bmMgKHE6IHN0cmluZywgdHlwZTogc3RyaW5nW10pID0+XHJcbiAgICBTcGljZXRpZnkuQ29zbW9zQXN5bmMuZ2V0KGBodHRwczovL2FwaS5zcG90aWZ5LmNvbS92MS9zZWFyY2g/cT0ke2VuY29kZVVSSUNvbXBvbmVudChxKX0mdHlwZT0ke3R5cGUuam9pbihcIixcIil9YClcclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaFdlYlNvdW5kT2ZTcG90aWZ5UGxheWxpc3QgPSBhc3luYyAoZ2VucmU6IHN0cmluZykgPT4ge1xyXG4gICAgY29uc3QgbmFtZSA9IGBUaGUgU291bmQgT2YgJHtnZW5yZX1gXHJcbiAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoYF4ke2VzY2FwZVJlZ2V4KG5hbWUpfSRgLCBcImlcIilcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHNlYXJjaFdlYkl0ZW1TcG90KG5hbWUsIFtcInBsYXlsaXN0XCJdKVxyXG4gICAgY29uc3QgaXRlbSA9IHJlcy5wbGF5bGlzdHMuaXRlbXNbMF1cclxuICAgIHJldHVybiBpdGVtPy5vd25lci5pZCA9PT0gXCJ0aGVzb3VuZHNvZnNwb3RpZnlcIiAmJiByZS50ZXN0KGl0ZW0ubmFtZSkgPyBpdGVtLnVyaSA6IG51bGxcclxufVxyXG5cclxuLyogICAgICAgICAgICAgICAgICAgICAgICAgIFBsYXRmb3JtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaFBsYXRMaWtlZFRyYWNrcyA9IGFzeW5jICgpID0+XHJcbiAgICAoXHJcbiAgICAgICAgYXdhaXQgU3BpY2V0aWZ5LlBsYXRmb3JtLkxpYnJhcnlBUEkuZ2V0VHJhY2tzKHtcclxuICAgICAgICAgICAgbGltaXQ6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLFxyXG4gICAgICAgIH0pXHJcbiAgICApLml0ZW1zIGFzIGZldGNoUGxhdEFydGlzdExpa2VkVHJhY2tzUmVzXHJcbmV4cG9ydCBjb25zdCBmZXRjaFBsYXRBcnRpc3RMaWtlZFRyYWNrcyA9IGFzeW5jICh1cmk6IFNwb3RpZnlVUkksIG9mZnNldCA9IDAsIGxpbWl0ID0gMTAwKSA9PlxyXG4gICAgKGF3YWl0IFNwaWNldGlmeS5QbGF0Zm9ybS5MaWJyYXJ5QVBJLmdldFRyYWNrcyh7IHVyaSwgb2Zmc2V0LCBsaW1pdCB9KSkuaXRlbXMgYXMgZmV0Y2hQbGF0QXJ0aXN0TGlrZWRUcmFja3NSZXNcclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaFBsYXRQbGF5bGlzdENvbnRlbnRzID0gYXN5bmMgKHVyaTogU3BvdGlmeVVSSSkgPT5cclxuICAgIChhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uUGxheWxpc3RBUEkuZ2V0Q29udGVudHModXJpKSkuaXRlbXMgYXMgZmV0Y2hXZWJQbGF5bGlzdFJlc1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVBsYXRGb2xkZXIgPSBhc3luYyAobmFtZTogc3RyaW5nLCBsb2NhdGlvbjogU3BvdGlmeUxvY09iaiA9IHt9KSA9PlxyXG4gICAgYXdhaXQgU3BpY2V0aWZ5LlBsYXRmb3JtLlJvb3RsaXN0QVBJLmNyZWF0ZUZvbGRlcihuYW1lLCBsb2NhdGlvbilcclxuXHJcbmV4cG9ydCBjb25zdCBsaWtlUGxhdFBsYXlsaXN0ID0gYXN5bmMgKHVyaTogU3BvdGlmeVVSSSkgPT4gYXdhaXQgU3BpY2V0aWZ5LlBsYXRmb3JtLlJvb3RsaXN0QVBJLmFkZChbdXJpXSlcclxuXHJcbi8qIFJlcGxhY2VkIGJ5IGNyZWF0ZVNQUGxheWxpc3RGcm9tVHJhY2tzICovXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVQbGF0UGxheWxpc3QgPSBhc3luYyAobmFtZTogc3RyaW5nLCBsb2NhdGlvbjogU3BvdGlmeUxvY09iaiA9IHt9KSA9PlxyXG4gICAgYXdhaXQgU3BpY2V0aWZ5LlBsYXRmb3JtLlJvb3RsaXN0QVBJLmNyZWF0ZVBsYXlsaXN0KG5hbWUsIGxvY2F0aW9uKVxyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNQUGxheWxpc3RGcm9tVHJhY2tzID0gKG5hbWU6IHN0cmluZywgdHJhY2tzOiBTcG90aWZ5VVJJW10sIGZvbGRlcj86IFNwb3RpZnlVUkkpID0+XHJcbiAgICBTcGljZXRpZnkuQ29zbW9zQXN5bmMucG9zdChcInNwOi8vY29yZS1wbGF5bGlzdC92MS9yb290bGlzdD9yZXNwb25zZUZvcm1hdD1wcm90b2J1Zkpzb25cIiwge1xyXG4gICAgICAgIG9wZXJhdGlvbjogXCJjcmVhdGVcIixcclxuICAgICAgICAuLi4oZm9sZGVyID8geyBhZnRlcjogZm9sZGVyIH0gOiB7fSksXHJcbiAgICAgICAgbmFtZSxcclxuICAgICAgICBwbGF5bGlzdDogdHJ1ZSxcclxuICAgICAgICB1cmlzOiB0cmFja3MsXHJcbiAgICB9KVxyXG5cclxuZXhwb3J0IGNvbnN0IHNldFBsYXRQbGF5bGlzdFZpc2liaWxpdHkgPSBhc3luYyAocGxheWxpc3Q6IFNwb3RpZnlVUkksIHZpc2libGVGb3JBbGw6IGJvb2xlYW4pID0+XHJcbiAgICBhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uUGxheWxpc3RQZXJtaXNzaW9uc0FQSS5zZXRCYXNlUGVybWlzc2lvbihwbGF5bGlzdCwgdmlzaWJsZUZvckFsbCA/IFwiVklFV0VSXCIgOiBcIkJMT0NLRURcIilcclxuZXhwb3J0IGNvbnN0IHNldFBsYXRQbGF5bGlzdFB1Ymxpc2hlZCA9IGFzeW5jIChwbGF5bGlzdDogU3BvdGlmeVVSSSwgcHVibGlzaGVkOiBib29sZWFuKSA9PlxyXG4gICAgYXdhaXQgU3BpY2V0aWZ5LlBsYXRmb3JtLlJvb3RsaXN0QVBJLnNldFB1Ymxpc2hlZFN0YXRlKHBsYXlsaXN0LCBwdWJsaXNoZWQpXHJcblxyXG5leHBvcnQgY29uc3QgZmV0Y2hQbGF0Rm9sZGVyID0gYXN5bmMgKGZvbGRlcj86IFNwb3RpZnlVUkkpID0+XHJcbiAgICAoYXdhaXQgU3BpY2V0aWZ5LlBsYXRmb3JtLlJvb3RsaXN0QVBJLmdldENvbnRlbnRzKHsgZm9sZGVyVXJpOiBmb2xkZXIgfSkpIGFzIGZldGNoUGxhdEZvbGRlclJlc1xyXG5leHBvcnQgY29uc3QgZmV0Y2hQbGF0Um9vdEZvbGRlciA9ICgpID0+IGZldGNoUGxhdEZvbGRlcih1bmRlZmluZWQpXHJcblxyXG5leHBvcnQgY29uc3QgYWRkUGxhdFBsYXlsaXN0VHJhY2tzID0gYXN5bmMgKHBsYXlsaXN0OiBTcG90aWZ5VVJJLCB0cmFja3M6IFNwb3RpZnlVUklbXSwgbG9jYXRpb246IFNwb3RpZnlMb2NPYmogPSB7fSkgPT5cclxuICAgIGF3YWl0IFNwaWNldGlmeS5QbGF0Zm9ybS5QbGF5bGlzdEFQSS5hZGQocGxheWxpc3QsIHRyYWNrcywgbG9jYXRpb24pXHJcblxyXG5leHBvcnQgY29uc3QgbW92ZVBsYXRQbGF5bGlzdFRyYWNrcyA9IGFzeW5jIChcclxuICAgIHBsYXlsaXN0OiBTcG90aWZ5VVJJLFxyXG4gICAgdHJhY2tzOiBBcnJheTx7IHVpZDogc3RyaW5nIH0+LFxyXG4gICAgbG9jYXRpb246IFNwb3RpZnlMb2NPYmogPSB7fSxcclxuKSA9PiBhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uUGxheWxpc3RBUEkubW92ZShwbGF5bGlzdCwgdHJhY2tzLCBsb2NhdGlvbilcclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaFBsYXRQbGF5bGlzdEVuaGFuY2VkU29uZ3MzMDAgPSBhc3luYyAodXJpOiBTcG90aWZ5VVJJLCBvZmZzZXQgPSAwLCBsaW1pdCA9IDMwMCkgPT5cclxuICAgIChhd2FpdCBTcGljZXRpZnkuUGxhdGZvcm0uRW5oYW5jZUFQSS5nZXRQYWdlKHVyaSwgLyogaXRlcmF0aW9uICovIDAsIC8qIHNlc3Npb25JZCAqLyAwLCBvZmZzZXQsIGxpbWl0KSkuZW5oYW5jZVBhZ2VcclxuICAgICAgICAucGFnZUl0ZW1zIGFzIGFueVtdXHJcbmV4cG9ydCBjb25zdCBmZXRjaFBsYXRQbGF5bGlzdEVuaGFuY2VkU29uZ3MgPSBhc3luYyAodXJpOiBTcG90aWZ5VVJJLCBvZmZzZXQgPSAwKTogUHJvbWlzZTxhbnlbXT4gPT4ge1xyXG4gICAgY29uc3QgbmV4dFBhZ2VJdGVtcyA9IGF3YWl0IGZldGNoUGxhdFBsYXlsaXN0RW5oYW5jZWRTb25nczMwMCh1cmksIG9mZnNldClcclxuICAgIGlmIChuZXh0UGFnZUl0ZW1zPy5sZW5ndGggPCAzMDApIHJldHVybiBuZXh0UGFnZUl0ZW1zXHJcbiAgICBlbHNlIHJldHVybiBuZXh0UGFnZUl0ZW1zLmNvbmNhdChmZXRjaFBsYXRQbGF5bGlzdEVuaGFuY2VkU29uZ3ModXJpLCBvZmZzZXQgKyAzMDApKVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZmV0Y2hMb2NhbFRyYWNrcyA9IGFzeW5jICgpID0+IGF3YWl0IFNwaWNldGlmeS5QbGF0Zm9ybS5Mb2NhbEZpbGVzQVBJLmdldFRyYWNrcygpXHJcblxyXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgTm9uIFNwb3RpZnkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoVHJhY2tMRk1BUEkgPSBhc3luYyAoTEZNQXBpS2V5OiBzdHJpbmcsIGFydGlzdDogc3RyaW5nLCB0cmFja05hbWU6IHN0cmluZywgbGFzdEZtVXNlcm5hbWUgPSBcIlwiKSA9PiB7XHJcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKFwiaHR0cHM6Ly93cy5hdWRpb3Njcm9iYmxlci5jb20vMi4wL1wiKVxyXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJtZXRob2RcIiwgXCJ0cmFjay5nZXRJbmZvXCIpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcImFwaV9rZXlcIiwgTEZNQXBpS2V5KVxyXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJhcnRpc3RcIiwgYXJ0aXN0KVxyXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJ0cmFja1wiLCB0cmFja05hbWUpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcImZvcm1hdFwiLCBcImpzb25cIilcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwidXNlcm5hbWVcIiwgbGFzdEZtVXNlcm5hbWUpXHJcblxyXG4gICAgcmV0dXJuIChhd2FpdCBmZXRjaCh1cmwpLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpKSBhcyBmZXRjaFRyYWNrTEZNQVBJUmVzXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaFRyYWNrTEZNQVBJTWVtb2l6ZWQgPSBtZW1vaXplMihmZXRjaFRyYWNrTEZNQVBJKVxyXG5cclxuZXhwb3J0IGNvbnN0IHNlYXJjaFlvdXR1YmUgPSBhc3luYyAoWW91VHViZUFwaUtleTogc3RyaW5nLCBzZWFyY2hTdHJpbmc6IHN0cmluZykgPT4ge1xyXG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3lvdXR1YmUvdjMvc2VhcmNoXCIpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcInBhcnRcIiwgXCJzbmlwcGV0XCIpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcIm1heFJlc3VsdHNcIiwgXCIxMFwiKVxyXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJxXCIsIHNlYXJjaFN0cmluZylcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwidHlwZVwiLCBcInZpZGVvXCIpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcImtleVwiLCBZb3VUdWJlQXBpS2V5KVxyXG5cclxuICAgIHJldHVybiAoYXdhaXQgZmV0Y2godXJsKS50aGVuKHJlcyA9PiByZXMuanNvbigpKSkgYXMgYW55W11cclxufVxyXG5cclxuLyogICAgICAgICAgICAgICAgICAgICAgICAgIFR5cGVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgZmV0Y2hHUUxBbGJ1bVJlcyB7XHJcbiAgICBfX3R5cGVuYW1lOiBcImFsYnVtXCJcclxuICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgbmFtZTogc3RyaW5nXHJcbiAgICBhcnRpc3RzOiB7XHJcbiAgICAgICAgdG90YWxDb3VudDogbnVtYmVyXHJcbiAgICAgICAgaXRlbXM6IEFycmF5PHtcclxuICAgICAgICAgICAgaWQ6IHN0cmluZ1xyXG4gICAgICAgICAgICB1cmk6IFNwb3RpZnlVUklcclxuICAgICAgICAgICAgcHJvZmlsZToge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogc3RyaW5nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmlzdWFsczoge1xyXG4gICAgICAgICAgICAgICAgYXZhdGFySW1hZ2U6IHtcclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBTcG90QXBpSW1hZ2VbXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNoYXJpbmdJbmZvOiB7XHJcbiAgICAgICAgICAgICAgICBzaGFyZVVybDogc3RyaW5nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9PlxyXG4gICAgfVxyXG4gICAgY292ZXJBcnQ6IHtcclxuICAgICAgICBleHRyYWN0ZWRDb2xvcnM6IHtcclxuICAgICAgICAgICAgY29sb3JSYXc6IHtcclxuICAgICAgICAgICAgICAgIGhleDogc3RyaW5nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29sb3JMaWdodDoge1xyXG4gICAgICAgICAgICAgICAgaGV4OiBzdHJpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb2xvckRhcms6IHtcclxuICAgICAgICAgICAgICAgIGhleDogc3RyaW5nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgc291cmNlczogU3BvdEFwaUltYWdlW11cclxuICAgIH1cclxuICAgIGRpc2NzOiB7XHJcbiAgICAgICAgdG90YWxDb3VudDogbnVtYmVyXHJcbiAgICAgICAgaXRlbXM6IEFycmF5PHtcclxuICAgICAgICAgICAgbnVtYmVyOiBudW1iZXJcclxuICAgICAgICAgICAgdHJhY2tzOiB7XHJcbiAgICAgICAgICAgICAgICB0b3RhbENvdW50OiBudW1iZXJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0+XHJcbiAgICB9XHJcbiAgICByZWxlYXNlczoge1xyXG4gICAgICAgIHRvdGFsQ291bnQ6IG51bWJlclxyXG4gICAgICAgIGl0ZW1zOiBBcnJheTx7XHJcbiAgICAgICAgICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgICAgICAgICBuYW1lOiBzdHJpbmdcclxuICAgICAgICB9PlxyXG4gICAgfVxyXG4gICAgdHlwZTogc3RyaW5nXHJcbiAgICBkYXRlOiB7XHJcbiAgICAgICAgaXNvU3RyaW5nOiBzdHJpbmdcclxuICAgICAgICBwcmVjaXNpb246IHN0cmluZ1xyXG4gICAgfVxyXG4gICAgcGxheWFiaWxpdHk6IHtcclxuICAgICAgICBwbGF5YWJsZTogYm9vbGVhblxyXG4gICAgICAgIHJlYXNvbjogc3RyaW5nXHJcbiAgICB9XHJcbiAgICBsYWJlbDogc3RyaW5nXHJcbiAgICBjb3B5cmlnaHQ6IHtcclxuICAgICAgICB0b3RhbENvdW50OiBudW1iZXJcclxuICAgICAgICBpdGVtczogQXJyYXk8e1xyXG4gICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICAgICAgICAgICAgdGV4dDogc3RyaW5nXHJcbiAgICAgICAgfT5cclxuICAgIH1cclxuICAgIGNvdXJ0ZXN5TGluZTogc3RyaW5nXHJcbiAgICBzYXZlZDogYm9vbGVhblxyXG4gICAgc2hhcmluZ0luZm86IHtcclxuICAgICAgICBzaGFyZVVybDogc3RyaW5nXHJcbiAgICAgICAgc2hhcmVJZDogc3RyaW5nXHJcbiAgICB9XHJcbiAgICB0cmFja3M6IHtcclxuICAgICAgICB0b3RhbENvdW50OiBudW1iZXJcclxuICAgICAgICBpdGVtczogQXJyYXk8e1xyXG4gICAgICAgICAgICB1aWQ6IHN0cmluZ1xyXG4gICAgICAgICAgICB0cmFjazoge1xyXG4gICAgICAgICAgICAgICAgc2F2ZWQ6IGJvb2xlYW5cclxuICAgICAgICAgICAgICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgICAgICAgICAgICAgbmFtZTogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICBwbGF5Y291bnQ6IHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgZGlzY051bWJlcjogbnVtYmVyXHJcbiAgICAgICAgICAgICAgICB0cmFja051bWJlcjogbnVtYmVyXHJcbiAgICAgICAgICAgICAgICBjb250ZW50UmF0aW5nOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVsaW5raW5nSW5mb3JtYXRpb246IGFueVxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbE1pbGxpc2Vjb25kczogbnVtYmVyXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwbGF5YWJpbGl0eToge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYXlhYmxlOiBib29sZWFuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhcnRpc3RzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IEFycmF5PHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2ZpbGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfT5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0+XHJcbiAgICB9XHJcbiAgICBtb3JlQWxidW1zQnlBcnRpc3Q6IHtcclxuICAgICAgICBpdGVtczogQXJyYXk8e1xyXG4gICAgICAgICAgICBkaXNjb2dyYXBoeToge1xyXG4gICAgICAgICAgICAgICAgcG9wdWxhclJlbGVhc2VzQWxidW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IEFycmF5PHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmk6IFNwb3RpZnlVUklcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHllYXI6IG51bWJlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdmVyQXJ0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBTcG90QXBpSW1hZ2VbXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlhYmlsaXR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5YWJsZTogYm9vbGVhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFyaW5nSW5mbzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVJZDogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFyZVVybDogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgfT5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0+XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIGZldGNoR1FMQXJ0aXN0UmVsYXRlZFJlcyA9IEFycmF5PHtcclxuICAgIGlkOiBzdHJpbmdcclxuICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgcHJvZmlsZToge1xyXG4gICAgICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgfVxyXG4gICAgdmlzdWFsczoge1xyXG4gICAgICAgIGF2YXRhckltYWdlOiB7XHJcbiAgICAgICAgICAgIHNvdXJjZXM6IFNwb3RBcGlJbWFnZVtdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59PlxyXG5cclxuZXhwb3J0IHR5cGUgZmV0Y2hQbGF0QXJ0aXN0TGlrZWRUcmFja3NSZXMgPSBBcnJheTx7XHJcbiAgICB0eXBlOiBzdHJpbmdcclxuICAgIHVyaTogc3RyaW5nXHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIGR1cmF0aW9uOiBTcG90QXBpRHVyYXRpb25cclxuICAgIGFsYnVtOiBTcG90QXBpQWxidW1NaW5cclxuICAgIGFydGlzdHM6IFNwb3RBcGlBcnRpc3RNaW5bXVxyXG4gICAgZGlzY051bWJlcjogbnVtYmVyXHJcbiAgICB0cmFja051bWJlcjogbnVtYmVyXHJcbiAgICBpc0V4cGxpY2l0OiBib29sZWFuXHJcbiAgICBpc1BsYXlhYmxlOiBib29sZWFuXHJcbiAgICBpc0xvY2FsOiBib29sZWFuXHJcbiAgICBpczE5UGx1c09ubHk6IGJvb2xlYW5cclxuICAgIGFkZGVkQXQ6IHN0cmluZ1xyXG59PlxyXG5cclxuZXhwb3J0IHR5cGUgZmV0Y2hXZWJQbGF5bGlzdFJlcyA9IEFycmF5PHtcclxuICAgIHVpZDogc3RyaW5nXHJcbiAgICBwbGF5SW5kZXg6IG51bGxcclxuICAgIGFkZGVkQXQ6IHN0cmluZ1xyXG4gICAgYWRkZWRCeToge1xyXG4gICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gICAgICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgICAgIHVzZXJuYW1lOiBzdHJpbmdcclxuICAgICAgICBkaXNwbGF5TmFtZTogc3RyaW5nXHJcbiAgICAgICAgaW1hZ2VzOiBTcG90QXBpSW1hZ2UyW11cclxuICAgIH1cclxuICAgIGZvcm1hdExpc3RBdHRyaWJ1dGVzOiB7fVxyXG4gICAgdHlwZTogXCJ0cmFja1wiXHJcbiAgICB1cmk6IFNwb3RpZnlVUklcclxuICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgYWxidW06IFNwb3RBcGlBbGJ1bU1pblxyXG4gICAgYXJ0aXN0czogU3BvdEFwaUFydGlzdE1pbltdXHJcbiAgICBkaXNjTnVtYmVyOiBudW1iZXJcclxuICAgIHRyYWNrTnVtYmVyOiBudW1iZXJcclxuICAgIGR1cmF0aW9uOiBTcG90QXBpRHVyYXRpb25cclxuICAgIGlzRXhwbGljaXQ6IGJvb2xlYW5cclxuICAgIGlzTG9jYWw6IGJvb2xlYW5cclxuICAgIGlzUGxheWFibGU6IGJvb2xlYW5cclxuICAgIGlzMTlQbHVzT25seTogYm9vbGVhblxyXG59PlxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBmZXRjaFRyYWNrTEZNQVBJUmVzIHtcclxuICAgIHRyYWNrOiB7XHJcbiAgICAgICAgbmFtZTogc3RyaW5nXHJcbiAgICAgICAgbWJpZDogc3RyaW5nXHJcbiAgICAgICAgdXJsOiBzdHJpbmdcclxuICAgICAgICBkdXJhdGlvbjogc3RyaW5nXHJcbiAgICAgICAgc3RyZWFtYWJsZToge1xyXG4gICAgICAgICAgICBcIiN0ZXh0XCI6IHN0cmluZ1xyXG4gICAgICAgICAgICBmdWxsdHJhY2s6IHN0cmluZ1xyXG4gICAgICAgIH1cclxuICAgICAgICBsaXN0ZW5lcnM6IHN0cmluZ1xyXG4gICAgICAgIHBsYXljb3VudDogc3RyaW5nXHJcbiAgICAgICAgYXJ0aXN0OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgICAgICAgICBtYmlkOiBzdHJpbmdcclxuICAgICAgICAgICAgdXJsOiBzdHJpbmdcclxuICAgICAgICB9XHJcbiAgICAgICAgYWxidW06IHtcclxuICAgICAgICAgICAgYXJ0aXN0OiBzdHJpbmdcclxuICAgICAgICAgICAgdGl0bGU6IHN0cmluZ1xyXG4gICAgICAgICAgICBtYmlkOiBzdHJpbmdcclxuICAgICAgICAgICAgdXJsOiBzdHJpbmdcclxuICAgICAgICAgICAgaW1hZ2U6IEFycmF5PHtcclxuICAgICAgICAgICAgICAgIFwiI3RleHRcIjogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICBzaXplOiBzdHJpbmdcclxuICAgICAgICAgICAgfT5cclxuICAgICAgICAgICAgXCJAYXR0clwiOiB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogc3RyaW5nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdXNlcnBsYXljb3VudDogc3RyaW5nXHJcbiAgICAgICAgdXNlcmxvdmVkOiBzdHJpbmdcclxuICAgICAgICB0b3B0YWdzOiB7XHJcbiAgICAgICAgICAgIHRhZzogQXJyYXk8e1xyXG4gICAgICAgICAgICAgICAgbmFtZTogc3RyaW5nXHJcbiAgICAgICAgICAgICAgICB1cmw6IHN0cmluZ1xyXG4gICAgICAgICAgICB9PlxyXG4gICAgICAgIH1cclxuICAgICAgICB3aWtpOiB7XHJcbiAgICAgICAgICAgIHB1Ymxpc2hlZDogc3RyaW5nXHJcbiAgICAgICAgICAgIHN1bW1hcnk6IHN0cmluZ1xyXG4gICAgICAgICAgICBjb250ZW50OiBzdHJpbmdcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RBcGlBbGJ1bU1pbiB7XHJcbiAgICB0eXBlOiBcImFsYnVtXCJcclxuICAgIHVyaTogU3BvdGlmeVVSSVxyXG4gICAgbmFtZTogc3RyaW5nXHJcbiAgICBhcnRpc3Q6IFNwb3RBcGlBcnRpc3RNaW5cclxuICAgIGltYWdlczogU3BvdEFwaUltYWdlMltdXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUltYWdlMiB7XHJcbiAgICB1cmw6IHN0cmluZ1xyXG4gICAgbGFiZWw6IFwic21hbGxcIiB8IFwic3RhbmRhcmRcIiB8IFwibGFyZ2VcIiB8IFwieGxhcmdlXCJcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTcG90QXBpVHJhY2sge1xyXG4gICAgYWxidW06IFNwb3RBcGlBbGJ1bVxyXG4gICAgYXJ0aXN0czogU3BvdEFwaUFydGlzdFtdXHJcbiAgICBhdmFpbGFibGVfbWFya2V0czogc3RyaW5nW11cclxuICAgIGRpc2NfbnVtYmVyOiBudW1iZXJcclxuICAgIGR1cmF0aW9uX21zOiBudW1iZXJcclxuICAgIGV4cGxpY2l0OiBib29sZWFuXHJcbiAgICBleHRlcm5hbF9pZHM6IFNwb3RBcGlFSURzXHJcbiAgICBleHRlcm5hbF91cmxzOiBTcG90QXBpRVVybHNcclxuICAgIGhyZWY6IHN0cmluZ1xyXG4gICAgaWQ6IHN0cmluZ1xyXG4gICAgaXNfcGxheWFibGU6IGJvb2xlYW5cclxuICAgIGxpbmtlZF9mcm9tOiB7fVxyXG4gICAgcmVzdHJpY3Rpb25zOiBTcG90QXBpUmVzdHJpY3Rpb25zXHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIHBvcHVsYXJpdHk6IG51bWJlclxyXG4gICAgcHJldmlld191cmw6IHN0cmluZ1xyXG4gICAgdHJhY2tfbnVtYmVyOiBudW1iZXJcclxuICAgIHR5cGU6IHN0cmluZ1xyXG4gICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICBpc19sb2NhbDogYm9vbGVhblxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RBcGlBcnRpc3Qge1xyXG4gICAgZXh0ZXJuYWxfdXJsczogU3BvdEFwaUVVcmxzXHJcbiAgICBmb2xsb3dlcnM6IFNwb3RBcGlGb2xsb3dlcnNcclxuICAgIGdlbnJlczogc3RyaW5nW11cclxuICAgIGhyZWY6IHN0cmluZ1xyXG4gICAgaWQ6IHN0cmluZ1xyXG4gICAgaW1hZ2VzOiBTcG90QXBpSW1hZ2VbXVxyXG4gICAgbmFtZTogc3RyaW5nXHJcbiAgICBwb3B1bGFyaXR5OiBudW1iZXJcclxuICAgIHR5cGU6IHN0cmluZ1xyXG4gICAgdXJpOiBTcG90aWZ5VVJJXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUFydGlzdE1pbiB7XHJcbiAgICB0eXBlOiBcImFydGlzdFwiXHJcbiAgICB1cmk6IFNwb3RpZnlVUklcclxuICAgIG5hbWU6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RBcGlBbGJ1bSB7XHJcbiAgICBhbGJ1bV90eXBlOiBzdHJpbmdcclxuICAgIHRvdGFsX3RyYWNrczogbnVtYmVyXHJcbiAgICBhdmFpbGFibGVfbWFya2V0czogc3RyaW5nW11cclxuICAgIGV4dGVybmFsX3VybHM6IFNwb3RBcGlFVXJsc1xyXG4gICAgaHJlZjogc3RyaW5nXHJcbiAgICBpZDogc3RyaW5nXHJcbiAgICBpbWFnZXM6IFNwb3RBcGlJbWFnZVtdXHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIHJlbGVhc2VfZGF0ZTogc3RyaW5nXHJcbiAgICByZWxlYXNlX2RhdGVfcHJlY2lzaW9uOiBzdHJpbmdcclxuICAgIHJlc3RyaWN0aW9uczogU3BvdEFwaVJlc3RyaWN0aW9uc1xyXG4gICAgdHlwZTogc3RyaW5nXHJcbiAgICB1cmk6IFNwb3RpZnlVUklcclxuICAgIGNvcHlyaWdodHM6IEFycmF5PHtcclxuICAgICAgICB0ZXh0OiBzdHJpbmdcclxuICAgICAgICB0eXBlOiBzdHJpbmdcclxuICAgIH0+XHJcbiAgICBleHRlcm5hbF9pZHM6IFNwb3RBcGlFSURzXHJcbiAgICBnZW5yZXM6IHN0cmluZ1tdXHJcbiAgICBsYWJlbDogc3RyaW5nXHJcbiAgICBwb3B1bGFyaXR5OiBudW1iZXJcclxuICAgIGFsYnVtX2dyb3VwOiBzdHJpbmdcclxuICAgIGFydGlzdHM6IEFycmF5PHtcclxuICAgICAgICBleHRlcm5hbF91cmxzOiBTcG90QXBpRVVybHNcclxuICAgICAgICBocmVmOiBzdHJpbmdcclxuICAgICAgICBpZDogc3RyaW5nXHJcbiAgICAgICAgbmFtZTogc3RyaW5nXHJcbiAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAgICAgICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICB9PlxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RBcGlFVXJscyB7XHJcbiAgICBzcG90aWZ5OiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTcG90QXBpRUlEcyB7XHJcbiAgICBpc3JjOiBzdHJpbmdcclxuICAgIGVhbjogc3RyaW5nXHJcbiAgICB1cGM6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RBcGlJbWFnZSB7XHJcbiAgICB1cmw6IHN0cmluZ1xyXG4gICAgd2lkdGg6IG51bWJlclxyXG4gICAgaGVpZ2h0OiBudW1iZXJcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTcG90QXBpUmVzdHJpY3Rpb25zIHtcclxuICAgIHJlYXNvbjogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaUZvbGxvd2VycyB7XHJcbiAgICBocmVmOiBzdHJpbmdcclxuICAgIHRvdGFsOiBudW1iZXJcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RBcGlEdXJhdGlvbiB7XHJcbiAgICBtaWxsaXNlY29uZHM6IG51bWJlclxyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BvdEFwaVBsYXlsaXN0IHtcclxuICAgIGNvbGxhYm9yYXRpdmU6IGJvb2xlYW5cclxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmdcclxuICAgIGV4dGVybmFsX3VybHM6IFNwb3RBcGlFVXJsc1xyXG4gICAgZm9sbG93ZXJzOiB7XHJcbiAgICAgICAgaHJlZjogc3RyaW5nXHJcbiAgICAgICAgdG90YWw6IG51bWJlclxyXG4gICAgfVxyXG4gICAgaHJlZjogc3RyaW5nXHJcbiAgICBpZDogU3BvdGlmeUlEXHJcbiAgICBpbWFnZXM6IFNwb3RBcGlJbWFnZVtdXHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIG93bmVyOiBTcG90QXBpT3duZXJcclxuICAgIHB1YmxpYzogYm9vbGVhblxyXG4gICAgc25hcHNob3RfaWQ6IHN0cmluZ1xyXG4gICAgdHJhY2tzOiB7XHJcbiAgICAgICAgaHJlZjogc3RyaW5nXHJcbiAgICAgICAgbGltaXQ6IG51bWJlclxyXG4gICAgICAgIG5leHQ6IHN0cmluZ1xyXG4gICAgICAgIG9mZnNldDogbnVtYmVyXHJcbiAgICAgICAgcHJldmlvdXM6IHN0cmluZ1xyXG4gICAgICAgIHRvdGFsOiBudW1iZXJcclxuICAgICAgICBpdGVtczogQXJyYXk8e1xyXG4gICAgICAgICAgICBhZGRlZF9hdDogc3RyaW5nXHJcbiAgICAgICAgICAgIGFkZGVkX2J5OiBTcG90QXBpT3duZXJcclxuICAgICAgICAgICAgaXNfbG9jYWw6IGJvb2xlYW5cclxuICAgICAgICAgICAgdHJhY2s6IFNwb3RBcGlUcmFja1xyXG4gICAgICAgIH0+XHJcbiAgICB9XHJcbiAgICB0eXBlOiBzdHJpbmdcclxuICAgIHVyaTogU3BvdGlmeVVSSVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RBcGlPd25lciB7XHJcbiAgICBleHRlcm5hbF91cmxzOiBTcG90QXBpRVVybHNcclxuICAgIGZvbGxvd2Vycz86IHtcclxuICAgICAgICBocmVmOiBzdHJpbmdcclxuICAgICAgICB0b3RhbDogbnVtYmVyXHJcbiAgICB9XHJcbiAgICBocmVmOiBzdHJpbmdcclxuICAgIGlkOiBTcG90aWZ5SURcclxuICAgIHR5cGU6IHN0cmluZ1xyXG4gICAgdXJpOiBTcG90aWZ5VVJJXHJcbiAgICBkaXNwbGF5X25hbWU/OiBzdHJpbmdcclxuICAgIG5hbWU/OiBzdHJpbmdcclxufVxyXG5cclxuLy9UT0RPOiBCZXR0ZXIgVFMgaW50ZXJmYWNlIGZvciByZWN1cnNpdmUgZmV0Y2hQbGF0Rm9sZGVyUmVzXHJcbmV4cG9ydCBpbnRlcmZhY2UgZmV0Y2hQbGF0Rm9sZGVyUmVzIHtcclxuICAgIHR5cGU6IFwiZm9sZGVyXCIgfCBcInBsYWNlaG9sZGVyXCIgfCBcInBsYXlsaXN0XCJcclxuICAgIGFkZGVkQXQ6IHN0cmluZ1xyXG4gICAgaXRlbXM/OiBBcnJheTxmZXRjaFBsYXRGb2xkZXJSZXM+XHJcbiAgICBuYW1lPzogc3RyaW5nXHJcbiAgICB1cmk6IHN0cmluZ1xyXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmdcclxuICAgIGltYWdlcz86IFNwb3RBcGlJbWFnZTJbXVxyXG4gICAgbWFkZUZvcj86IG51bGxcclxuICAgIG93bmVyPzoge1xyXG4gICAgICAgIHR5cGU6IFwidXNlclwiXHJcbiAgICAgICAgdXJpOiBzdHJpbmdcclxuICAgICAgICB1c2VybmFtZTogc3RyaW5nXHJcbiAgICAgICAgZGlzcGxheU5hbWU6IHN0cmluZ1xyXG4gICAgICAgIGltYWdlczogYW55W11cclxuICAgIH1cclxuICAgIHRvdGFsTGVuZ3RoPzogbnVtYmVyXHJcbiAgICB1bmZpbHRlcmVkVG90YWxMZW5ndGg/OiBudW1iZXJcclxuICAgIHRvdGFsTGlrZXM/OiBudWxsXHJcbiAgICBkdXJhdGlvbj86IG51bGxcclxuICAgIGlzQ29sbGFib3JhdGl2ZT86IGJvb2xlYW5cclxuICAgIGlzTG9hZGVkPzogYm9vbGVhblxyXG4gICAgaXNPd25lZEJ5U2VsZj86IGJvb2xlYW5cclxuICAgIGlzUHVibGlzaGVkPzogYm9vbGVhblxyXG4gICAgaGFzRXBpc29kZXM/OiBudWxsXHJcbiAgICBoYXNTcG90aWZ5VHJhY2tzPzogbnVsbFxyXG4gICAgaGFzU3BvdGlmeUF1ZGlvYm9va3M/OiBudWxsXHJcbiAgICBjYW5BZGQ/OiBib29sZWFuXHJcbiAgICBjYW5SZW1vdmU/OiBib29sZWFuXHJcbiAgICBjYW5QbGF5PzogbnVsbFxyXG4gICAgZm9ybWF0TGlzdERhdGE/OiB7XHJcbiAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAgICAgICAgYXR0cmlidXRlczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfVxyXG4gICAgfSB8IG51bGxcclxuICAgIGNhblJlcG9ydEFubm90YXRpb25BYnVzZT86IGJvb2xlYW5cclxuICAgIGhhc0RhdGVBZGRlZD86IGJvb2xlYW5cclxuICAgIHBlcm1pc3Npb25zPzogbnVsbFxyXG4gICAgY29sbGFib3JhdG9ycz86IHtcclxuICAgICAgICBjb3VudDogbnVtYmVyXHJcbiAgICAgICAgaXRlbXM6IGFueVtdXHJcbiAgICB9XHJcbiAgICBpc05vdEZvdW5kPzogYm9vbGVhblxyXG4gICAgaXNGb3JiaWRkZW4/OiBib29sZWFuXHJcbn1cclxuIiwgImltcG9ydCB7IHJhbmdlIH0gZnJvbSBcImh0dHBzOi8vZXNtLnNoL2ZwLXRzL2xpYi9SZWFkb25seU5vbkVtcHR5QXJyYXlcIlxuaW1wb3J0IHsgU3BvdGlmeVVSSSB9IGZyb20gXCIuLi8uLi9zaGFyZWQvdXRpbC50c1wiXG5pbXBvcnQgeyB0b2dnbGVSYXRpbmcgfSBmcm9tIFwiLi9yYXRpbmdzLnRzXCJcblxuY29uc3QgeyBSZWFjdCB9ID0gU3BpY2V0aWZ5XG5cbmNvbnN0IFJhdGluZ0J1dHRvbiA9ICh7IGksIHVyaSB9OiB7IGk6IG51bWJlcjsgdXJpOiBTcG90aWZ5VVJJIH0pID0+IChcbiAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT1cIkJ1dHRvbi1zYy0xZHF5Nmx4LTAgQnV0dG9uLXRleHRCcmlnaHRBY2NlbnQtc20tMTYtYnV0dG9uVGVydGlhcnktaWNvbk9ubHktY29uZGVuc2VkLWlzVXNpbmdLZXlib2FyZC11c2VCcm93c2VyRGVmYXVsdEZvY3VzU3R5bGUgcmF0aW5nLWJ1dHRvblwiXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHRvZ2dsZVJhdGluZyh1cmksIGkpfVxuICAgID5cbiAgICAgICAgPHN2Z1xuICAgICAgICAgICAgcm9sZT1cImltZ1wiXG4gICAgICAgICAgICBoZWlnaHQ9ezE2fVxuICAgICAgICAgICAgd2lkdGg9ezE2fVxuICAgICAgICAgICAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4gICAgICAgICAgICBjbGFzc05hbWU9e2BTdmctc2MteXRrMjFlLTAgU3ZnLWltZy1pY29uIHJhdGluZy0ke2l9YH1cbiAgICAgICAgPlxuICAgICAgICAgICAgPHBhdGggZD1cIk0wIDhhOCA4IDAgMSAxIDE2IDBBOCA4IDAgMCAxIDAgOHptMTEuNzQ4LTEuOTdhLjc1Ljc1IDAgMCAwLTEuMDYtMS4wNmwtNC40NyA0LjQ3LTEuNDA1LTEuNDA2YS43NS43NSAwIDEgMC0xLjA2MSAxLjA2bDIuNDY2IDIuNDY3IDUuNTMtNS41M3pcIiAvPlxuICAgICAgICA8L3N2Zz5cbiAgICA8L2J1dHRvbj5cbilcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duID0gKHsgdXJpIH06IHsgdXJpOiBTcG90aWZ5VVJJIH0pID0+IChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInJhdGluZy1kcm9wZG93blwiPlxuICAgICAgICB7cmFuZ2UoMSwgNSkubWFwKGkgPT4gKFxuICAgICAgICAgICAgPFJhdGluZ0J1dHRvbiBpPXtpfSB1cmk9e3VyaX0gLz5cbiAgICAgICAgKSl9XG4gICAgPC9kaXY+XG4pXG4iLCAiaW1wb3J0IHsgYXJyYXkgYXMgYXIsIGZ1bmN0aW9uIGFzIGYgfSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvZnAtdHNcIlxyXG5pbXBvcnQge1xyXG4gICAgYWRkUGxhdFBsYXlsaXN0VHJhY2tzLFxyXG4gICAgY3JlYXRlUGxhdFBsYXlsaXN0LFxyXG4gICAgZmV0Y2hQbGF0Rm9sZGVyLFxyXG4gICAgZmV0Y2hQbGF0UGxheWxpc3RDb250ZW50cyxcclxuICAgIHJlbW92ZVdlYlBsYXlsaXN0VHJhY2tzLFxyXG4gICAgc2V0UGxhdFBsYXlsaXN0VmlzaWJpbGl0eSxcclxufSBmcm9tIFwiLi4vLi4vc2hhcmVkL2FwaS50c1wiXHJcbmltcG9ydCB7IHBNY2hhaW4gfSBmcm9tIFwiLi4vLi4vc2hhcmVkL2ZwLnRzXCJcclxuaW1wb3J0IHsgU3BvdGlmeUxvYywgU3BvdGlmeVVSSSB9IGZyb20gXCIuLi8uLi9zaGFyZWQvdXRpbC50c1wiXHJcbmltcG9ydCB7IHVwZGF0ZUNvbGxlY3Rpb25Db250cm9scywgdXBkYXRlTm93UGxheWluZ0NvbnRyb2xzLCB1cGRhdGVUcmFja0xpc3RDb250cm9scyB9IGZyb20gXCIuL2NvbnRyb2xzLnRzeFwiXHJcbmltcG9ydCB7IENPTkZJRyB9IGZyb20gXCIuL3NldHRpbmdzLnRzXCJcclxuXHJcbmV4cG9ydCBjb25zdCBsb2FkUmF0aW5ncyA9IGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHJhdGluZ3NGb2xkZXIgPSBhd2FpdCBmZXRjaFBsYXRGb2xkZXIoQ09ORklHLnJhdGluZ3NGb2xkZXJVcmkpXHJcblxyXG4gICAgcGxheWxpc3RVcmlzID0gZi5waXBlKFxyXG4gICAgICAgIHJhdGluZ3NGb2xkZXIhLml0ZW1zISxcclxuICAgICAgICBhci5tYXAocCA9PiBbcC51cmksIE51bWJlcihwLm5hbWUhKV0gYXMgW1Nwb3RpZnlVUkksIG51bWJlcl0pLFxyXG4gICAgICAgIGFyLnJlZHVjZShbXSBhcyBTcG90aWZ5VVJJW10sICh1cmlzLCBbdXJpLCByYXRpbmddKSA9PiAoKHVyaXNbcmF0aW5nXSA9IHVyaSksIHVyaXMpKSxcclxuICAgIClcclxuXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBnbG9iYWxUaGlzLnRyYWNrc1JhdGluZ3MgPSB0cmFja3NSYXRpbmdzID0gYXdhaXQgZi5waXBlKFxyXG4gICAgICAgIHBsYXlsaXN0VXJpcyxcclxuICAgICAgICBhci5tYXAoZmV0Y2hQbGF0UGxheWxpc3RDb250ZW50cyksXHJcbiAgICAgICAgcHMgPT4gUHJvbWlzZS5hbGwocHMpLCAvLyBQcm9taXNlLmFsbCBmbGlwcyBlbXB0eSB0byB1bmRlZmluZWRcclxuICAgICAgICBwTWNoYWluKGFyLm1hcCh0cmFja3MgPT4gdHJhY2tzID8/IFtdKSksXHJcbiAgICAgICAgcE1jaGFpbihhci5tYXAoYXIubWFwKHQgPT4gdC51cmkpKSksXHJcbiAgICAgICAgcE1jaGFpbihhci5mbGF0TWFwKCh0cmFja1VyaXMsIHJhdGluZykgPT4gdHJhY2tVcmlzLm1hcCh0cmFja1VyaSA9PiBbdHJhY2tVcmksIHJhdGluZ10gYXMgY29uc3QpKSksXHJcbiAgICAgICAgcE1jaGFpbihcclxuICAgICAgICAgICAgYXIucmVkdWNlKHt9IGFzIFJlY29yZDxzdHJpbmcsIG51bWJlcj4sIChhY2MsIFt0cmFja1VyaSwgcmF0aW5nXSkgPT5cclxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYWNjLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgW3RyYWNrVXJpXTogTWF0aC5tYXgocmF0aW5nLCBhY2NbdHJhY2tVcmldID8/IDApLFxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgKSxcclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHRvZ2dsZVJhdGluZyA9IGFzeW5jICh1cmk6IFNwb3RpZnlVUkksIHJhdGluZzogbnVtYmVyKSA9PiB7XHJcbiAgICBjb25zdCBjdXJyZW50UmF0aW5nID0gdHJhY2tzUmF0aW5nc1t1cmldXHJcblxyXG4gICAgaWYgKGN1cnJlbnRSYXRpbmcgPT09IHJhdGluZykgcmF0aW5nID0gMFxyXG5cclxuICAgIGlmIChjdXJyZW50UmF0aW5nKSB7XHJcbiAgICAgICAgZi5waXBlKFxyXG4gICAgICAgICAgICBwbGF5bGlzdFVyaXMuc2xpY2UoMCwgY3VycmVudFJhdGluZyArIDEpLFxyXG4gICAgICAgICAgICBhci5maWx0ZXIoQm9vbGVhbiksXHJcbiAgICAgICAgICAgIGFyLm1hcChwbGF5bGlzdFVyaSA9PiBTcGljZXRpZnkuVVJJLmZyb21TdHJpbmcocGxheWxpc3RVcmkpLmlkISksXHJcbiAgICAgICAgICAgIGFyLm1hcChwbGF5bGlzdElkID0+IHJlbW92ZVdlYlBsYXlsaXN0VHJhY2tzKHBsYXlsaXN0SWQsIFt1cmldKSksXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIHRyYWNrc1JhdGluZ3NbdXJpXSA9IHJhdGluZ1xyXG5cclxuICAgIGlmIChyYXRpbmcgPiAwKSB7XHJcbiAgICAgICAgbGV0IHBsYXlsaXN0VXJpID0gcGxheWxpc3RVcmlzW3JhdGluZ11cclxuXHJcbiAgICAgICAgaWYgKCFwbGF5bGlzdFVyaSkge1xyXG4gICAgICAgICAgICBwbGF5bGlzdFVyaSA9IGF3YWl0IGNyZWF0ZVBsYXRQbGF5bGlzdChyYXRpbmcudG9GaXhlZCgwKSwgU3BvdGlmeUxvYy5hZnRlci5mcm9tVXJpKENPTkZJRy5yYXRpbmdzRm9sZGVyVXJpKSlcclxuICAgICAgICAgICAgc2V0UGxhdFBsYXlsaXN0VmlzaWJpbGl0eShwbGF5bGlzdFVyaSwgZmFsc2UpXHJcbiAgICAgICAgICAgIHBsYXlsaXN0VXJpc1tyYXRpbmddID0gcGxheWxpc3RVcmlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZFBsYXRQbGF5bGlzdFRyYWNrcyhwbGF5bGlzdFVyaSwgW3VyaV0pXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbnBUcmFjayA9IFNwaWNldGlmeS5QbGF5ZXIuZGF0YS50cmFjaz8udXJpXHJcbiAgICBpZiAobnBUcmFjayA9PT0gdXJpKSB1cGRhdGVOb3dQbGF5aW5nQ29udHJvbHMobnBUcmFjaywgZmFsc2UpXHJcblxyXG4gICAgLy8gVE9ETzogT3B0aW1pemUgdGhpcywgZmluZCBhIHdheSB0byBkaXJlY3RseSB0YXJnZXQgdGhlIHBicyBmb3IgdGhhdCB1cmlcclxuICAgIHVwZGF0ZVRyYWNrTGlzdENvbnRyb2xzKClcclxuICAgIGNvbnN0IHsgcGF0aG5hbWUgfSA9IFNwaWNldGlmeS5QbGF0Zm9ybS5IaXN0b3J5LmxvY2F0aW9uXHJcbiAgICB1cGRhdGVDb2xsZWN0aW9uQ29udHJvbHMoU3BpY2V0aWZ5LlVSSS5mcm9tU3RyaW5nKHBhdGhuYW1lKSlcclxufVxyXG5cclxuZXhwb3J0IGxldCBwbGF5bGlzdFVyaXM6IFNwb3RpZnlVUklbXSA9IFtdXHJcbmV4cG9ydCBsZXQgdHJhY2tzUmF0aW5nczogUmVjb3JkPFNwb3RpZnlVUkksIG51bWJlcj4gPSB7fVxyXG4iLCAiaW1wb3J0IHsgdGFzayB9IGZyb20gXCJodHRwczovL2VzbS5zaC9mcC10c1wiXHJcbmltcG9ydCB7IGNyZWF0ZVBsYXRGb2xkZXIgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL2FwaS50c1wiXHJcbmltcG9ydCB7IFNldHRpbmdzU2VjdGlvbiB9IGZyb20gXCIuLi8uLi9zaGFyZWQvc2V0dGluZ3MudHN4XCJcclxuaW1wb3J0IHsgU3BvdGlmeVVSSSB9IGZyb20gXCIuLi8uLi9zaGFyZWQvdXRpbC50c1wiXHJcbmltcG9ydCB7IGxvYWRSYXRpbmdzIH0gZnJvbSBcIi4vcmF0aW5ncy50c1wiXHJcblxyXG5jb25zdCBSQVRJTkdTX0ZPTERFUl9OQU1FID0gXCJSYXRpbmdzXCJcclxuXHJcbmNvbnN0IHNldHRpbmdzID0gbmV3IFNldHRpbmdzU2VjdGlvbihcIlN0YXIgUmF0aW5ncyAyXCIsIFwic3Rhci1yYXRpbmdzLTJcIilcclxuICAgIC5hZGRJbnB1dCh7IGlkOiBcImhlYXJ0VGhyZXNob2xkXCIsIGRlc2M6IFwiVGhyZXNob2xkIGZvciBsaWtpbmcgdHJha2NzXCIsIGlucHV0VHlwZTogXCJudW1iZXJcIiB9LCB0YXNrLm9mKFwiM1wiKSlcclxuICAgIC5hZGRJbnB1dCh7IGlkOiBcInNraXBUaHJlc2hvbGRcIiwgZGVzYzogXCJUaHJlc2hvbGQgZm9yIHNraXBwaW5nIHRyYWtjc1wiLCBpbnB1dFR5cGU6IFwibnVtYmVyXCIgfSwgdGFzay5vZihcIjFcIikpXHJcbiAgICAuYWRkSW5wdXQoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogXCJyYXRpbmdzRm9sZGVyVXJpXCIsXHJcbiAgICAgICAgICAgIGRlc2M6IFwiUmF0aW5ncyBmb2xkZXIgdXJpXCIsXHJcbiAgICAgICAgICAgIGlucHV0VHlwZTogXCJ0ZXh0XCIsXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBsb2FkUmF0aW5ncyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFzeW5jICgpID0+IChhd2FpdCBjcmVhdGVQbGF0Rm9sZGVyKFJBVElOR1NfRk9MREVSX05BTUUpKS51cmksXHJcbiAgICApXHJcblxyXG5zZXR0aW5ncy5wdXNoU2V0dGluZ3MoKVxyXG5cclxuZXhwb3J0IGNvbnN0IENPTkZJRyA9IHNldHRpbmdzLnRvT2JqZWN0KCkgYXMge1xyXG4gICAgaGVhcnRUaHJlc2hvbGQ6IHN0cmluZ1xyXG4gICAgc2tpcFRocmVzaG9sZDogc3RyaW5nXHJcbiAgICByYXRpbmdzRm9sZGVyVXJpOiBTcG90aWZ5VVJJXHJcbn1cclxuIiwgImltcG9ydCB7IHRhc2sgfSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvZnAtdHNcIlxyXG5pbXBvcnQgeyBndWFyZDMsIGlzIH0gZnJvbSBcIi4vZnAudHNcIlxyXG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gXCIuL3V0aWwudHNcIlxyXG5cclxuY29uc3QgeyBSZWFjdCwgUmVhY3RET00gfSA9IFNwaWNldGlmeVxyXG4vLyBAdHMtaWdub3JlXHJcbmNvbnN0IHsgQnV0dG9uU2Vjb25kYXJ5IH0gPSBTcGljZXRpZnkuUmVhY3RDb21wb25lbnRcclxuXHJcbnR5cGUgRmllbGRUb1Byb3BzPEE+ID0gT21pdDxBLCBcInR5cGVcIj5cclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuY29uc3QgcmVxdWlyZSA9IHdlYnBhY2tDaHVua29wZW4ucHVzaChbW1N5bWJvbCgpXSwge30sIHJlID0+IHJlXSlcclxuY29uc3QgY2FjaGUgPSBPYmplY3Qua2V5cyhyZXF1aXJlLm0pLm1hcChpZCA9PiByZXF1aXJlKGlkKSlcclxuY29uc3QgbW9kdWxlcyA9IGNhY2hlXHJcbiAgICAuZmlsdGVyKG1vZHVsZSA9PiB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiKVxyXG4gICAgLm1hcChtb2R1bGUgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKG1vZHVsZSlcclxuICAgICAgICB9IGNhdGNoIHt9XHJcbiAgICB9KVxyXG4gICAgLmZsYXQoKVxyXG5jb25zdCBmdW5jdGlvbk1vZHVsZXMgPSBtb2R1bGVzLmZpbHRlcihtb2R1bGUgPT4gdHlwZW9mIG1vZHVsZSA9PT0gXCJmdW5jdGlvblwiKSBhcyBhbnlbXVxyXG5cclxuY29uc3QgU2V0dGluZ0NvbHVtbiA9IGZ1bmN0aW9uTW9kdWxlcy5maW5kKG0gPT4gbS50b1N0cmluZygpLmluY2x1ZGVzKFwic2V0U2VjdGlvbkZpbHRlck1hdGNoUXVlcnlWYWx1ZVwiKSlcclxuY29uc3QgU2V0dGluZ1RleHQgPSBmdW5jdGlvbk1vZHVsZXMuZmluZChtID0+IG0udG9TdHJpbmcoKS5pbmNsdWRlcyhcInRleHRTdWJkdWVkXCIpICYmIG0udG9TdHJpbmcoKS5pbmNsdWRlcyhcInZpb2xhXCIpKVxyXG5cclxuY29uc3QgU2V0dGluZ1RvZ2dsZSA9IGZ1bmN0aW9uTW9kdWxlcy5maW5kKFxyXG4gICAgbSA9PiBtLnRvU3RyaW5nKCkuaW5jbHVkZXMoXCJjb25kZW5zZWRcIikgJiYgbS50b1N0cmluZygpLmluY2x1ZGVzKFwib25TZWxlY3RlZFwiKSxcclxuKVxyXG5cclxuZXhwb3J0IGNvbnN0IGVudW0gRmllbGRUeXBlIHtcclxuICAgIEJVVFRPTiA9IFwiYnV0dG9uXCIsXHJcbiAgICBUT0dHTEUgPSBcInRvZ2dsZVwiLFxyXG4gICAgSU5QVVQgPSBcImlucHV0XCIsXHJcbiAgICBISURERU4gPSBcImhpZGRlblwiLFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VGaWVsZCB7XHJcbiAgICBpZDogc3RyaW5nXHJcbiAgICB0eXBlOiBGaWVsZFR5cGVcclxuICAgIGRlc2M6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBTZXR0aW5nc0ZpZWxkID0gSGlkZGVuRmllbGQgfCBJbnB1dEZpZWxkIHwgQnV0dG9uRmllbGQgfCBUb2dnbGVGaWVsZFxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCdXR0b25GaWVsZCBleHRlbmRzIEJhc2VGaWVsZCB7XHJcbiAgICB0eXBlOiBGaWVsZFR5cGUuQlVUVE9OXHJcbiAgICB0ZXh0OiBzdHJpbmdcclxuICAgIG9uQ2xpY2s/OiAoKSA9PiB2b2lkXHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBUb2dnbGVGaWVsZCBleHRlbmRzIEJhc2VGaWVsZCB7XHJcbiAgICB0eXBlOiBGaWVsZFR5cGUuVE9HR0xFXHJcbiAgICBvblNlbGVjdGVkPzogKGNoZWNrZWQ6IGJvb2xlYW4pID0+IHZvaWRcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJbnB1dEZpZWxkIGV4dGVuZHMgQmFzZUZpZWxkIHtcclxuICAgIHR5cGU6IEZpZWxkVHlwZS5JTlBVVFxyXG4gICAgaW5wdXRUeXBlOiBzdHJpbmdcclxuICAgIG9uQ2hhbmdlPzogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWRcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIaWRkZW5GaWVsZCBleHRlbmRzIEJhc2VGaWVsZCB7XHJcbiAgICB0eXBlOiBGaWVsZFR5cGUuSElEREVOXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1NlY3Rpb24ge1xyXG4gICAgcHJpdmF0ZSBzdG9wSGlzdG9yeUxpc3RlbmVyOiBhbnlcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgbmFtZTogc3RyaW5nLFxyXG4gICAgICAgIHB1YmxpYyBzZWN0aW9uSWQ6IHN0cmluZyxcclxuICAgICAgICBwdWJsaWMgc2VjdGlvbkZpZWxkczogeyBba2V5OiBzdHJpbmddOiBTZXR0aW5nc0ZpZWxkIH0gPSB7fSxcclxuICAgICkge31cclxuXHJcbiAgICBwdXNoU2V0dGluZ3MgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RvcEhpc3RvcnlMaXN0ZW5lcikgdGhpcy5zdG9wSGlzdG9yeUxpc3RlbmVyKClcclxuXHJcbiAgICAgICAgdGhpcy5zdG9wSGlzdG9yeUxpc3RlbmVyID0gU3BpY2V0aWZ5LlBsYXRmb3JtLkhpc3RvcnkubGlzdGVuKCgpID0+IHRoaXMucmVuZGVyKCkpXHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKVxyXG4gICAgfVxyXG5cclxuICAgIHRvT2JqZWN0ID0gKCkgPT5cclxuICAgICAgICBuZXcgUHJveHkoXHJcbiAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6ICh0YXJnZXQsIHByb3ApID0+IFNldHRpbmdzU2VjdGlvbi5nZXRGaWVsZFZhbHVlKHRoaXMuZ2V0SWQocHJvcC50b1N0cmluZygpKSksXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgKVxyXG5cclxuICAgIHByaXZhdGUgcmVuZGVyID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIHdoaWxlICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXNrdG9wLnNldHRpbmdzLnNlbGVjdExhbmd1YWdlXCIpKSB7XHJcbiAgICAgICAgICAgIGlmIChTcGljZXRpZnkuUGxhdGZvcm0uSGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSAhPT0gXCIvcHJlZmVyZW5jZXNcIikgcmV0dXJuXHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwKDEwMClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGFsbFNldHRpbmdzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi54LXNldHRpbmdzLWNvbnRhaW5lclwiKSFcclxuXHJcbiAgICAgICAgbGV0IHBsdWdpblNldHRpbmdzQ29udGFpbmVyID0gQXJyYXkuZnJvbShhbGxTZXR0aW5nc0NvbnRhaW5lci5jaGlsZHJlbikuZmluZCgoeyBpZCB9KSA9PiBpZCA9PT0gdGhpcy5zZWN0aW9uSWQpXHJcblxyXG4gICAgICAgIGlmICghcGx1Z2luU2V0dGluZ3NDb250YWluZXIpIHtcclxuICAgICAgICAgICAgcGx1Z2luU2V0dGluZ3NDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXHJcbiAgICAgICAgICAgIHBsdWdpblNldHRpbmdzQ29udGFpbmVyLmlkID0gdGhpcy5zZWN0aW9uSWRcclxuICAgICAgICAgICAgcGx1Z2luU2V0dGluZ3NDb250YWluZXIuY2xhc3NOYW1lID0gXCJzZXR0aW5nc0NvbnRhaW5lclwiXHJcbiAgICAgICAgICAgIGFsbFNldHRpbmdzQ29udGFpbmVyLmFwcGVuZENoaWxkKHBsdWdpblNldHRpbmdzQ29udGFpbmVyKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgUmVhY3RET00ucmVuZGVyKDx0aGlzLkZpZWxkc0NvbnRhaW5lciAvPiwgcGx1Z2luU2V0dGluZ3NDb250YWluZXIpXHJcbiAgICB9XHJcblxyXG4gICAgYWRkQnV0dG9uID0gKHByb3BzOiBGaWVsZFRvUHJvcHM8QnV0dG9uRmllbGQ+KSA9PiB7XHJcbiAgICAgICAgdGhpcy5hZGRGaWVsZChGaWVsZFR5cGUuQlVUVE9OLCBwcm9wcylcclxuICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFRvZ2dsZSA9IChwcm9wczogRmllbGRUb1Byb3BzPFRvZ2dsZUZpZWxkPiwgZGVmYXVsdFZhbHVlID0gdGFzay5vZihmYWxzZSkpID0+IHtcclxuICAgICAgICB0aGlzLmFkZEZpZWxkKEZpZWxkVHlwZS5UT0dHTEUsIHByb3BzLCBkZWZhdWx0VmFsdWUpXHJcbiAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuXHJcbiAgICBhZGRJbnB1dCA9IChwcm9wczogRmllbGRUb1Byb3BzPElucHV0RmllbGQ+LCBkZWZhdWx0VmFsdWUgPSB0YXNrLm9mKFwiXCIpKSA9PiB7XHJcbiAgICAgICAgdGhpcy5hZGRGaWVsZChGaWVsZFR5cGUuSU5QVVQsIHByb3BzLCBkZWZhdWx0VmFsdWUpXHJcbiAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFkZEZpZWxkKHR5cGU6IEZpZWxkVHlwZSwgb3B0czogRmllbGRUb1Byb3BzPFNldHRpbmdzRmllbGQ+LCBkZWZhdWx0VmFsdWU/OiBhbnkpIHtcclxuICAgICAgICBpZiAoZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2V0dGluZ0lkID0gdGhpcy5nZXRJZChvcHRzLmlkKVxyXG4gICAgICAgICAgICBTZXR0aW5nc1NlY3Rpb24uc2V0RGVmYXVsdEZpZWxkVmFsdWUoc2V0dGluZ0lkLCBkZWZhdWx0VmFsdWUpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZpZWxkID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cywgeyB0eXBlIH0pIGFzIFNldHRpbmdzRmllbGRcclxuICAgICAgICB0aGlzLnNlY3Rpb25GaWVsZHNbb3B0cy5pZF0gPSBmaWVsZFxyXG4gICAgfVxyXG5cclxuICAgIGdldElkID0gKG5hbWVJZDogc3RyaW5nKSA9PiBgZXh0ZW5zaW9uczoke3RoaXMuc2VjdGlvbklkfToke25hbWVJZH1gXHJcblxyXG4gICAgcHJpdmF0ZSB1c2VTdGF0ZUZvciA9IDxBLD4oaWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZShTZXR0aW5nc1NlY3Rpb24uZ2V0RmllbGRWYWx1ZTxBPihpZCkpXHJcblxyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICAobmV3VmFsdWU6IEEpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWVTdGF0ZShuZXdWYWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICBTZXR0aW5nc1NlY3Rpb24uc2V0RmllbGRWYWx1ZShpZCEsIG5ld1ZhbHVlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF0gYXMgY29uc3RcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0RmllbGRWYWx1ZSA9IDxSLD4oaWQ6IHN0cmluZyk6IFIgPT4gSlNPTi5wYXJzZShTcGljZXRpZnkuTG9jYWxTdG9yYWdlLmdldChpZCkgPz8gXCJudWxsXCIpXHJcblxyXG4gICAgc3RhdGljIHNldEZpZWxkVmFsdWUgPSAoaWQ6IHN0cmluZywgbmV3VmFsdWU6IGFueSkgPT4gU3BpY2V0aWZ5LkxvY2FsU3RvcmFnZS5zZXQoaWQsIEpTT04uc3RyaW5naWZ5KG5ld1ZhbHVlKSlcclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBzZXREZWZhdWx0RmllbGRWYWx1ZSA9IGFzeW5jIChpZDogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IHRhc2suVGFzazxhbnk+KSA9PiB7XHJcbiAgICAgICAgaWYgKFNldHRpbmdzU2VjdGlvbi5nZXRGaWVsZFZhbHVlKGlkKSA9PT0gbnVsbCkgU2V0dGluZ3NTZWN0aW9uLnNldEZpZWxkVmFsdWUoaWQsIGF3YWl0IGRlZmF1bHRWYWx1ZSgpKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgRmllbGRzQ29udGFpbmVyID0gKCkgPT4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwieC1zZXR0aW5ncy1zZWN0aW9uXCI+XHJcbiAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJUeXBlX19UeXBlRWxlbWVudC1zYy1nb2xpM2otMCBUeXBlRWxlbWVudC1jZWxsby10ZXh0QmFzZS10eXBlXCI+e3RoaXMubmFtZX08L2gyPlxyXG4gICAgICAgICAgICB7T2JqZWN0LmVudHJpZXModGhpcy5zZWN0aW9uRmllbGRzKS5tYXAoKFtuYW1lSWQsIGZpZWxkXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDx0aGlzLkZpZWxkIGZpZWxkPXtmaWVsZH0gLz5cclxuICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcblxyXG4gICAgcHJpdmF0ZSBGaWVsZCA9ICh7IGZpZWxkIH06IHsgZmllbGQ6IFNldHRpbmdzRmllbGQgfSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlzVHlwZSA9IGlzPFNldHRpbmdzRmllbGQ+KFwidHlwZVwiKVxyXG5cclxuICAgICAgICByZXR1cm4gZ3VhcmQzKFtcclxuICAgICAgICAgICAgW2lzVHlwZTxJbnB1dEZpZWxkPihGaWVsZFR5cGUuSU5QVVQpLCB0aGlzLklucHV0RmllbGRdLFxyXG4gICAgICAgICAgICBbaXNUeXBlKEZpZWxkVHlwZS5CVVRUT04pLCB0aGlzLkJ1dHRvbkZpZWxkXSxcclxuICAgICAgICAgICAgW2lzVHlwZShGaWVsZFR5cGUuVE9HR0xFKSwgdGhpcy5Ub2dnbGVGaWVsZF0sXHJcbiAgICAgICAgXSkoKCkgPT4gPD48Lz4pKGZpZWxkKVxyXG4gICAgfVxyXG5cclxuICAgIFNldHRpbmdGaWVsZCA9ICh7IGZpZWxkLCBjaGlsZHJlbiB9OiB7IGZpZWxkOiBTZXR0aW5nc0ZpZWxkOyBjaGlsZHJlbjogYW55IH0pID0+IChcclxuICAgICAgICA8U2V0dGluZ0NvbHVtbiBmaWx0ZXJNYXRjaFF1ZXJ5PXtmaWVsZC5pZH0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwieC1zZXR0aW5ncy1maXJzdENvbHVtblwiPlxyXG4gICAgICAgICAgICAgICAgPFNldHRpbmdUZXh0IGh0bWxGb3I9e2ZpZWxkLmlkfT57ZmllbGQuZGVzY308L1NldHRpbmdUZXh0PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ4LXNldHRpbmdzLXNlY29uZENvbHVtblwiPntjaGlsZHJlbn08L2Rpdj5cclxuICAgICAgICA8L1NldHRpbmdDb2x1bW4+XHJcbiAgICApXHJcblxyXG4gICAgQnV0dG9uRmllbGQgPSAoZmllbGQ6IEJ1dHRvbkZpZWxkKSA9PiAoXHJcbiAgICAgICAgPHRoaXMuU2V0dGluZ0ZpZWxkIGZpZWxkPXtmaWVsZH0+XHJcbiAgICAgICAgICAgIDxCdXR0b25TZWNvbmRhcnkgaWQ9e2ZpZWxkLmlkfSBidXR0b25TaXplPVwic21cIiBvbkNsaWNrPXtmaWVsZC5vbkNsaWNrfSBjbGFzc05hbWU9XCJ4LXNldHRpbmdzLWJ1dHRvblwiPlxyXG4gICAgICAgICAgICAgICAge2ZpZWxkLnRleHR9XHJcbiAgICAgICAgICAgIDwvQnV0dG9uU2Vjb25kYXJ5PlxyXG4gICAgICAgIDwvdGhpcy5TZXR0aW5nRmllbGQ+XHJcbiAgICApXHJcblxyXG4gICAgVG9nZ2xlRmllbGQgPSAoZmllbGQ6IFRvZ2dsZUZpZWxkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB0aGlzLnVzZVN0YXRlRm9yPGJvb2xlYW4+KGZpZWxkLmlkKVxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDx0aGlzLlNldHRpbmdGaWVsZCBmaWVsZD17ZmllbGR9PlxyXG4gICAgICAgICAgICAgICAgPFNldHRpbmdUb2dnbGVcclxuICAgICAgICAgICAgICAgICAgICBpZD17ZmllbGQuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17U2V0dGluZ3NTZWN0aW9uLmdldEZpZWxkVmFsdWUodGhpcy5nZXRJZChmaWVsZC5pZCkpfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0ZWQ9eyhjaGVja2VkOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKGNoZWNrZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLm9uU2VsZWN0ZWQ/LihjaGVja2VkKVxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwieC1zZXR0aW5ncy1idXR0b25cIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC90aGlzLlNldHRpbmdGaWVsZD5cclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgSW5wdXRGaWVsZCA9IChmaWVsZDogSW5wdXRGaWVsZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdGhpcy51c2VTdGF0ZUZvcjxzdHJpbmc+KGZpZWxkLmlkKVxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDx0aGlzLlNldHRpbmdGaWVsZCBmaWVsZD17ZmllbGR9PlxyXG4gICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwieC1zZXR0aW5ncy1pbnB1dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9e2ZpZWxkLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgIGRpcj1cImx0clwiXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e1NldHRpbmdzU2VjdGlvbi5nZXRGaWVsZFZhbHVlKHRoaXMuZ2V0SWQoZmllbGQuaWQpKX1cclxuICAgICAgICAgICAgICAgICAgICB0eXBlPXtmaWVsZC5pbnB1dFR5cGV9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGUuY3VycmVudFRhcmdldC52YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZSh2YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQub25DaGFuZ2U/Lih2YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC90aGlzLlNldHRpbmdGaWVsZD5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuIiwgImV4cG9ydCBjb25zdCBSQVRJTkdTX0ZPTERFUl9OQU1FID0gXCJSYXRpbmdzXCJcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRUcmFja0xpc3RzID0gKCkgPT4gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxEaXZFbGVtZW50PihcIi5tYWluLXRyYWNrTGlzdC1pbmRleGFibGVcIikpXHJcbmV4cG9ydCBjb25zdCBnZXRUcmFja0xpc3RUcmFja3MgPSAodHJhY2tMaXN0OiBIVE1MRGl2RWxlbWVudCkgPT5cclxuICAgIEFycmF5LmZyb20odHJhY2tMaXN0LnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTERpdkVsZW1lbnQ+KFwiZGl2Lm1haW4tdHJhY2tMaXN0LXRyYWNrTGlzdFJvd1wiKSlcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRUcmFja0xpc3RUcmFja1VyaSA9ICh0cmFjazogSFRNTERpdkVsZW1lbnQpID0+IChcclxuICAgICh0cmFjayA9IE9iamVjdC52YWx1ZXModHJhY2spWzBdLmNoaWxkLmNoaWxkLmNoaWxkLmNoaWxkKSxcclxuICAgICh0cmFjayBhcyBhbnkpLnBlbmRpbmdQcm9wcy51cmkgPz8gKHRyYWNrIGFzIGFueSkuY2hpbGQucGVuZGluZ1Byb3BzLnVyaVxyXG4pXHJcblxyXG5leHBvcnQgY29uc3QgZ2V0Tm93UGxheWluZ0JhciA9ICgpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTERpdkVsZW1lbnQ+KFwiZGl2Lm1haW4tbm93UGxheWluZ0Jhci1ub3dQbGF5aW5nQmFyXCIpIVxyXG5leHBvcnQgY29uc3QgZ2V0Q29sbGVjdGlvbkFjdGlvbkJhclJvdyA9ICgpID0+XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxEaXZFbGVtZW50PihgZGl2Lm1haW4tYWN0aW9uQmFyLUFjdGlvbkJhclJvd2ApIVxyXG5cclxuZXhwb3J0IGNvbnN0IHBsYXlsaXN0QnV0dG9uU2VsZWN0b3IgPSBgYnV0dG9uW2FyaWEtbGFiZWw9XCJBZGQgdG8gTGlrZWQgU29uZ3NcIl0sIGJ1dHRvblthcmlhLWxhYmVsPVwiQWRkIHRvIHBsYXlsaXN0XCJdYFxyXG5leHBvcnQgY29uc3QgZ2V0UGxheWxpc3RCdXR0b24gPSAocGFyZW50OiBIVE1MRWxlbWVudCkgPT5cclxuICAgIHBhcmVudC5xdWVyeVNlbGVjdG9yPEhUTUxCdXR0b25FbGVtZW50PihwbGF5bGlzdEJ1dHRvblNlbGVjdG9yKSFcclxuZXhwb3J0IGNvbnN0IGdldENvbGxlY3Rpb25QbGF5bGlzdEJ1dHRvbiA9ICgpID0+IHtcclxuICAgIGNvbnN0IGFiID0gZ2V0Q29sbGVjdGlvbkFjdGlvbkJhclJvdygpXHJcbiAgICByZXR1cm4gYWIucXVlcnlTZWxlY3RvcjxIVE1MQnV0dG9uRWxlbWVudD4oXHJcbiAgICAgICAgYGJ1dHRvblthcmlhLWxhYmVsPVwiUmVtb3ZlIGZyb20gWW91ciBMaWJyYXJ5XCJdLCBidXR0b25bYXJpYS1sYWJlbD1cIlNhdmUgdG8gWW91ciBMaWJyYXJ5XCJdYCxcclxuICAgICkhXHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIkFBQUEsT0FBUyxXQUFBQSxPQUFlLHFDQ0F4QixPQUFTLFNBQVNDLEVBQUksWUFBWUMsTUFBUyx1QkNBM0MsT0FDSSxTQUFTQyxFQUNULE1BQUFDLEdBQ0EsVUFBVUMsR0FDVixVQUFVQyxHQUVWLGFBQWFDLEdBQ2IsWUFBWUMsTUFDVCx1QkFDUCxPQUFTLFNBQUFDLEdBQU8sV0FBQUMsT0FBZSxvQ0FLeEIsSUFBTUMsRUFDVEMsR0FDQ0MsR0FBTUQsQ0FBNEYsRUFzQ2hHLElBQU1FLEVBQ0ZDLEdBQ1AsTUFBT0MsR0FDSEQsRUFBRSxNQUFNQyxDQUFFLEVBRUxDLEVBQ0xDLEdBQ1VDLEdBQ2JDLEdBQ0dBLEVBQU1GLENBQUMsSUFBTUMsRUFTZCxJQUFNRSxFQUNSQyxHQUNNQyxHQUNIQyxFQUFFLEtBQUtDLEVBQUcsU0FBU0gsQ0FBQyxFQUFNRyxFQUFHLElBQUlGLENBQUMsRUFBR0csR0FBTSxRQUFRLElBQUlBLENBQUUsRUFBR0MsRUFBUUYsRUFBRyxPQUFPLENBQUMsRUFnQmhGLElBQU1HLEVBQWdDQyxHQUN6Q0MsRUFBRSxLQUFLRCxFQUFJQyxFQUFFLE9BQVFDLEdBQVdDLEdBQUcsVUFBVSxLQUFLLFNBQVMsRUFBRUMsR0FBSSxFQUFFLENBQUMsRUFBR0gsRUFBRSxRQUFRLEVDdkZyRixPQUFTLFNBQVNJLEdBQUcsWUFBWUMsTUFBUyx1QkFVbkMsSUFBTUMsRUFBYSxDQUN0QixPQUFRLENBQ0osTUFBT0QsRUFBRSxTQUFTLENBQUUsT0FBUSxPQUFRLENBQWtCLEVBQ3RELFFBQVVFLElBQXFCLENBQUUsT0FBUSxDQUFFLElBQUFBLENBQUksQ0FBRSxHQUNqRCxRQUFVQyxJQUFpQixDQUFFLE9BQVEsQ0FBRSxJQUFBQSxDQUFJLENBQUUsRUFDakQsRUFDQSxNQUFPLENBQ0gsSUFBS0gsRUFBRSxTQUFTLENBQUUsTUFBTyxLQUFNLENBQWtCLEVBQ2pELFFBQVVFLElBQXFCLENBQUUsTUFBTyxDQUFFLElBQUFBLENBQUksQ0FBRSxHQUNoRCxRQUFVQyxJQUFpQixDQUFFLE1BQU8sQ0FBRSxJQUFBQSxDQUFJLENBQUUsRUFDaEQsQ0FDSixFQThETyxJQUFNQyxFQUFTQyxHQUFlLElBQUksUUFBUUMsR0FBVyxXQUFXQSxFQUFTRCxDQUFFLENBQUMsRUNuRjVFLElBQU1FLEVBQWdCLE1BQU9DLEVBQWlCQyxFQUFTLEVBQUdDLEVBQVEsT0FFakUsTUFBTSxVQUFVLFFBQVEsUUFBUSxVQUFVLFFBQVEsWUFBWSxTQUFVLENBQ3BFLElBQUFGLEVBQ0EsT0FBUSxVQUFVLE9BQU8sVUFBVSxFQUNuQyxPQUFBQyxFQUNBLE1BQUFDLENBQ0osQ0FBQyxHQUNILEtBQUssV0FnQ0osSUFBTUMsRUFBMEIsTUFBT0MsRUFBcUJDLElBQy9ELFVBQVUsWUFBWSxJQUFJLHdDQUF3Q0QsQ0FBUSxVQUFXLENBQ2pGLE9BQVFDLEVBQU8sSUFBSUMsSUFBUSxDQUFFLElBQUFBLENBQUksRUFBRSxDQUN2QyxDQUFDLEVBRVFDLEdBQXNCQyxFQUFVLEVBQUUsRUFDM0MsTUFBT0MsSUFDRixNQUFNLFVBQVUsWUFBWSxJQUFJLDBDQUEwQ0EsRUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEdBQ3JGLE9BQ2IsRUFFYUMsR0FBd0JGLEVBQVUsQ0FBQyxFQUU1QyxNQUFPLENBQUNHLENBQUUsSUFBbUIsQ0FDeEIsTUFBTSxVQUFVLFlBQVksSUFBSSx3Q0FBd0NBLENBQUUsRUFBRSxDQUNqRixDQUNKLEVBQ2FDLEdBQXFCSixFQUFVLEVBQUUsRUFDMUMsTUFBT0MsSUFDRixNQUFNLFVBQVUsWUFBWSxJQUFJLHlDQUF5Q0EsRUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEdBQ3BGLE1BQ2IsRUFFYUksR0FBcUJMLEVBQVUsRUFBRSxFQUMxQyxNQUFPQyxJQUNGLE1BQU0sVUFBVSxZQUFZLElBQUkseUNBQXlDQSxFQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsR0FDcEYsTUFDYixFQXFCTyxJQUFNSyxFQUE2QixNQUFPQyxFQUFpQkMsRUFBUyxFQUFHQyxFQUFRLE9BQ2pGLE1BQU0sVUFBVSxTQUFTLFdBQVcsVUFBVSxDQUFFLElBQUFGLEVBQUssT0FBQUMsRUFBUSxNQUFBQyxDQUFNLENBQUMsR0FBRyxNQUUvREMsRUFBNEIsTUFBT0gsSUFDM0MsTUFBTSxVQUFVLFNBQVMsWUFBWSxZQUFZQSxDQUFHLEdBQUcsTUFFL0NJLEVBQW1CLE1BQU9DLEVBQWNDLEVBQTBCLENBQUMsSUFDNUUsTUFBTSxVQUFVLFNBQVMsWUFBWSxhQUFhRCxFQUFNQyxDQUFRLEVBSzdELElBQU1DLEVBQXFCLE1BQU9DLEVBQWNDLEVBQTBCLENBQUMsSUFDOUUsTUFBTSxVQUFVLFNBQVMsWUFBWSxlQUFlRCxFQUFNQyxDQUFRLEVBVy9ELElBQU1DLEVBQTRCLE1BQU9DLEVBQXNCQyxJQUNsRSxNQUFNLFVBQVUsU0FBUyx1QkFBdUIsa0JBQWtCRCxFQUFVQyxFQUFnQixTQUFXLFNBQVMsRUFJN0csSUFBTUMsRUFBa0IsTUFBT0MsR0FDakMsTUFBTSxVQUFVLFNBQVMsWUFBWSxZQUFZLENBQUUsVUFBV0EsQ0FBTyxDQUFDLEVBR3BFLElBQU1DLEVBQXdCLE1BQU9DLEVBQXNCQyxFQUFzQkMsRUFBMEIsQ0FBQyxJQUMvRyxNQUFNLFVBQVUsU0FBUyxZQUFZLElBQUlGLEVBQVVDLEVBQVFDLENBQVEsRUFxQmhFLElBQU1DLEdBQW1CLE1BQU9DLEVBQW1CQyxFQUFnQkMsRUFBbUJDLEVBQWlCLEtBQU8sQ0FDakgsSUFBTUMsRUFBTSxJQUFJLElBQUksb0NBQW9DLEVBQ3hELE9BQUFBLEVBQUksYUFBYSxPQUFPLFNBQVUsZUFBZSxFQUNqREEsRUFBSSxhQUFhLE9BQU8sVUFBV0osQ0FBUyxFQUM1Q0ksRUFBSSxhQUFhLE9BQU8sU0FBVUgsQ0FBTSxFQUN4Q0csRUFBSSxhQUFhLE9BQU8sUUFBU0YsQ0FBUyxFQUMxQ0UsRUFBSSxhQUFhLE9BQU8sU0FBVSxNQUFNLEVBQ3hDQSxFQUFJLGFBQWEsT0FBTyxXQUFZRCxDQUFjLEVBRTFDLE1BQU0sTUFBTUMsQ0FBRyxFQUFFLEtBQUtDLEdBQU9BLEVBQUksS0FBSyxDQUFDLENBQ25ELEVBRWFDLEdBQTJCQyxFQUFTUixFQUFnQixFQ2hLakUsT0FBUyxTQUFBUyxPQUFhLGlEQ0F0QixPQUFTLFNBQVNDLEVBQUksWUFBWUMsTUFBUyx1QkNBM0MsT0FBUyxRQUFBQyxNQUFZLHVCQ0FyQixPQUFTLFFBQUFDLE1BQVksdUJBSXJCLEdBQU0sQ0FBRSxNQUFBQyxFQUFPLFNBQUFDLEVBQVMsRUFBSSxVQUV0QixDQUFFLGdCQUFBQyxFQUFnQixFQUFJLFVBQVUsZUFLaENDLEVBQVUsaUJBQWlCLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFHLENBQUMsRUFBR0MsR0FBTUEsQ0FBRSxDQUFDLEVBQzFEQyxHQUFRLE9BQU8sS0FBS0YsRUFBUSxDQUFDLEVBQUUsSUFBSUcsR0FBTUgsRUFBUUcsQ0FBRSxDQUFDLEVBQ3BEQyxHQUFVRixHQUNYLE9BQU9HLEdBQVUsT0FBT0EsR0FBVyxRQUFRLEVBQzNDLElBQUlBLEdBQVUsQ0FDWCxHQUFJLENBQ0EsT0FBTyxPQUFPLE9BQU9BLENBQU0sQ0FDL0IsTUFBUSxDQUFDLENBQ2IsQ0FBQyxFQUNBLEtBQUssRUFDSkMsRUFBa0JGLEdBQVEsT0FBT0MsR0FBVSxPQUFPQSxHQUFXLFVBQVUsRUFFdkVFLEdBQWdCRCxFQUFnQixLQUFLRSxHQUFLQSxFQUFFLFNBQVMsRUFBRSxTQUFTLGlDQUFpQyxDQUFDLEVBQ2xHQyxHQUFjSCxFQUFnQixLQUFLRSxHQUFLQSxFQUFFLFNBQVMsRUFBRSxTQUFTLGFBQWEsR0FBS0EsRUFBRSxTQUFTLEVBQUUsU0FBUyxPQUFPLENBQUMsRUFFOUdFLEdBQWdCSixFQUFnQixLQUNsQ0UsR0FBS0EsRUFBRSxTQUFTLEVBQUUsU0FBUyxXQUFXLEdBQUtBLEVBQUUsU0FBUyxFQUFFLFNBQVMsWUFBWSxDQUNqRixFQXFDTyxJQUFNRyxFQUFOLE1BQU1DLENBQWdCLENBR3pCLFlBQ1dDLEVBQ0FDLEVBQ0FDLEVBQWtELENBQUMsRUFDNUQsQ0FIUyxVQUFBRixFQUNBLGVBQUFDLEVBQ0EsbUJBQUFDLEVBR1gsa0JBQWUsSUFBTSxDQUNiLEtBQUsscUJBQXFCLEtBQUssb0JBQW9CLEVBRXZELEtBQUssb0JBQXNCLFVBQVUsU0FBUyxRQUFRLE9BQU8sSUFBTSxLQUFLLE9BQU8sQ0FBQyxFQUNoRixLQUFLLE9BQU8sQ0FDaEIsRUFFQSxjQUFXLElBQ1AsSUFBSSxNQUNBLENBQUMsRUFDRCxDQUNJLElBQUssQ0FBQ0MsRUFBUUMsSUFBU0wsRUFBZ0IsY0FBYyxLQUFLLE1BQU1LLEVBQUssU0FBUyxDQUFDLENBQUMsQ0FDcEYsQ0FDSixFQUVKLEtBQVEsT0FBUyxTQUFZLENBQ3pCLEtBQU8sQ0FBQyxTQUFTLGVBQWUsaUNBQWlDLEdBQUcsQ0FDaEUsR0FBSSxVQUFVLFNBQVMsUUFBUSxTQUFTLFdBQWEsZUFBZ0IsT0FDckUsTUFBTUMsRUFBTSxHQUFHLENBQ25CLENBRUEsSUFBTUMsRUFBdUIsU0FBUyxjQUFjLHVCQUF1QixFQUV2RUMsRUFBMEIsTUFBTSxLQUFLRCxFQUFxQixRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUUsR0FBQUUsQ0FBRyxJQUFNQSxJQUFPLEtBQUssU0FBUyxFQUV6R0QsSUFDREEsRUFBMEIsU0FBUyxjQUFjLEtBQUssRUFDdERBLEVBQXdCLEdBQUssS0FBSyxVQUNsQ0EsRUFBd0IsVUFBWSxvQkFDcENELEVBQXFCLFlBQVlDLENBQXVCLEdBRzVERSxHQUFTLE9BQU9DLEVBQUEsY0FBQyxLQUFLLGdCQUFMLElBQXFCLEVBQUlILENBQXVCLENBQ3JFLEVBRUEsZUFBYUksSUFDVCxLQUFLLFNBQVMsU0FBa0JBLENBQUssRUFDOUIsTUFHWCxlQUFZLENBQUNBLEVBQWtDQyxFQUFlQyxFQUFLLEdBQUcsRUFBSyxLQUN2RSxLQUFLLFNBQVMsU0FBa0JGLEVBQU9DLENBQVksRUFDNUMsTUFHWCxjQUFXLENBQUNELEVBQWlDQyxFQUFlQyxFQUFLLEdBQUcsRUFBRSxLQUNsRSxLQUFLLFNBQVMsUUFBaUJGLEVBQU9DLENBQVksRUFDM0MsTUFZWCxXQUFTRSxHQUFtQixjQUFjLEtBQUssU0FBUyxJQUFJQSxDQUFNLEdBRWxFLEtBQVEsWUFBbUJOLEdBQWUsQ0FDdEMsR0FBTSxDQUFDTyxFQUFPQyxDQUFhLEVBQUlOLEVBQU0sU0FBU1gsRUFBZ0IsY0FBaUJTLENBQUUsQ0FBQyxFQUVsRixNQUFPLENBQ0hPLEVBQ0NFLEdBQWdCLENBQ1RBLElBQWEsU0FDYkQsRUFBY0MsQ0FBUSxFQUN0QmxCLEVBQWdCLGNBQWNTLEVBQUtTLENBQVEsRUFFbkQsQ0FDSixDQUNKLEVBVUEsS0FBUSxnQkFBa0IsSUFDdEJQLEVBQUEsY0FBQyxPQUFJLFVBQVUsc0JBQ1hBLEVBQUEsY0FBQyxNQUFHLFVBQVUsaUVBQWlFLEtBQUssSUFBSyxFQUN4RixPQUFPLFFBQVEsS0FBSyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUNJLEVBQVFJLENBQUssSUFDNUNSLEVBQUEsY0FBQyxLQUFLLE1BQUwsQ0FBVyxNQUFPUSxFQUFPLENBQ3BDLENBQ0wsRUFHSixLQUFRLE1BQVEsQ0FBQyxDQUFFLE1BQUFBLENBQU0sSUFBZ0MsQ0FDckQsSUFBTUMsRUFBU0MsRUFBa0IsTUFBTSxFQUV2QyxPQUFPQyxFQUFPLENBQ1YsQ0FBQ0YsRUFBbUIsT0FBZSxFQUFHLEtBQUssVUFBVSxFQUNyRCxDQUFDQSxFQUFPLFFBQWdCLEVBQUcsS0FBSyxXQUFXLEVBQzNDLENBQUNBLEVBQU8sUUFBZ0IsRUFBRyxLQUFLLFdBQVcsQ0FDL0MsQ0FBQyxFQUFFLElBQU1ULEVBQUEsY0FBQUEsRUFBQSxhQUFFLENBQUcsRUFBRVEsQ0FBSyxDQUN6QixFQUVBLGtCQUFlLENBQUMsQ0FBRSxNQUFBQSxFQUFPLFNBQUFJLENBQVMsSUFDOUJaLEVBQUEsY0FBQ2EsR0FBQSxDQUFjLGlCQUFrQkwsRUFBTSxJQUNuQ1IsRUFBQSxjQUFDLE9BQUksVUFBVSwwQkFDWEEsRUFBQSxjQUFDYyxHQUFBLENBQVksUUFBU04sRUFBTSxJQUFLQSxFQUFNLElBQUssQ0FDaEQsRUFDQVIsRUFBQSxjQUFDLE9BQUksVUFBVSwyQkFBMkJZLENBQVMsQ0FDdkQsRUFHSixpQkFBZUosR0FDWFIsRUFBQSxjQUFDLEtBQUssYUFBTCxDQUFrQixNQUFPUSxHQUN0QlIsRUFBQSxjQUFDZSxHQUFBLENBQWdCLEdBQUlQLEVBQU0sR0FBSSxXQUFXLEtBQUssUUFBU0EsRUFBTSxRQUFTLFVBQVUscUJBQzVFQSxFQUFNLElBQ1gsQ0FDSixFQUdKLGlCQUFlQSxHQUF1QixDQUNsQyxHQUFNLENBQUNILEVBQU9XLENBQVEsRUFBSSxLQUFLLFlBQXFCUixFQUFNLEVBQUUsRUFDNUQsT0FDSVIsRUFBQSxjQUFDLEtBQUssYUFBTCxDQUFrQixNQUFPUSxHQUN0QlIsRUFBQSxjQUFDaUIsR0FBQSxDQUNHLEdBQUlULEVBQU0sR0FDVixRQUFTbkIsRUFBZ0IsY0FBYyxLQUFLLE1BQU1tQixFQUFNLEVBQUUsQ0FBQyxFQUMzRCxXQUFhVSxHQUFxQixDQUM5QkYsRUFBU0UsQ0FBTyxFQUNoQlYsRUFBTSxhQUFhVSxDQUFPLENBQzlCLEVBQ0EsVUFBVSxvQkFDZCxDQUNKLENBRVIsRUFFQSxnQkFBY1YsR0FBc0IsQ0FDaEMsR0FBTSxDQUFDSCxFQUFPVyxDQUFRLEVBQUksS0FBSyxZQUFvQlIsRUFBTSxFQUFFLEVBQzNELE9BQ0lSLEVBQUEsY0FBQyxLQUFLLGFBQUwsQ0FBa0IsTUFBT1EsR0FDdEJSLEVBQUEsY0FBQyxTQUNHLFVBQVUsbUJBQ1YsR0FBSVEsRUFBTSxHQUNWLElBQUksTUFDSixNQUFPbkIsRUFBZ0IsY0FBYyxLQUFLLE1BQU1tQixFQUFNLEVBQUUsQ0FBQyxFQUN6RCxLQUFNQSxFQUFNLFVBQ1osU0FBVVcsR0FBSyxDQUNYLElBQU1kLEVBQVFjLEVBQUUsY0FBYyxNQUM5QkgsRUFBU1gsQ0FBSyxFQUNkRyxFQUFNLFdBQVdILENBQUssQ0FDMUIsRUFDSixDQUNKLENBRVIsQ0E1SkcsQ0FvREssU0FBU2UsRUFBaUJDLEVBQW1DbkIsRUFBb0IsQ0FDckYsR0FBSUEsSUFBaUIsT0FBVyxDQUM1QixJQUFNb0IsRUFBWSxLQUFLLE1BQU1ELEVBQUssRUFBRSxFQUNwQ2hDLEVBQWdCLHFCQUFxQmlDLEVBQVdwQixDQUFZLENBQ2hFLENBQ0EsSUFBTU0sRUFBUSxPQUFPLE9BQU8sQ0FBQyxFQUFHYSxFQUFNLENBQUUsS0FBQUQsQ0FBSyxDQUFDLEVBQzlDLEtBQUssY0FBY0MsRUFBSyxFQUFFLEVBQUliLENBQ2xDLENBa0JBLFlBQU8sY0FBcUJWLEdBQWtCLEtBQUssTUFBTSxVQUFVLGFBQWEsSUFBSUEsQ0FBRSxHQUFLLE1BQU0sRUFFakcsWUFBTyxjQUFnQixDQUFDQSxFQUFZUyxJQUFrQixVQUFVLGFBQWEsSUFBSVQsRUFBSSxLQUFLLFVBQVVTLENBQVEsQ0FBQyxFQUU3RyxZQUFlLHFCQUF1QixNQUFPVCxFQUFZSSxJQUFpQyxDQUNsRmIsRUFBZ0IsY0FBY1MsQ0FBRSxJQUFNLE1BQU1ULEVBQWdCLGNBQWNTLEVBQUksTUFBTUksRUFBYSxDQUFDLENBQzFHLEVBMEVKLEVEL05BLElBQU1xQixHQUFzQixVQUV0QkMsRUFBVyxJQUFJQyxFQUFnQixpQkFBa0IsZ0JBQWdCLEVBQ2xFLFNBQVMsQ0FBRSxHQUFJLGlCQUFrQixLQUFNLDhCQUErQixVQUFXLFFBQVMsRUFBR0MsRUFBSyxHQUFHLEdBQUcsQ0FBQyxFQUN6RyxTQUFTLENBQUUsR0FBSSxnQkFBaUIsS0FBTSxnQ0FBaUMsVUFBVyxRQUFTLEVBQUdBLEVBQUssR0FBRyxHQUFHLENBQUMsRUFDMUcsU0FDRyxDQUNJLEdBQUksbUJBQ0osS0FBTSxxQkFDTixVQUFXLE9BQ1gsU0FBVUMsQ0FDZCxFQUNBLFVBQWEsTUFBTUMsRUFBaUJMLEVBQW1CLEdBQUcsR0FDOUQsRUFFSkMsRUFBUyxhQUFhLEVBRWYsSUFBTUssRUFBU0wsRUFBUyxTQUFTLEVEVGpDLElBQU1NLEVBQWMsU0FBWSxDQUNuQyxJQUFNQyxFQUFnQixNQUFNQyxFQUFnQkMsRUFBTyxnQkFBZ0IsRUFFbkVDLEVBQWVDLEVBQUUsS0FDYkosRUFBZSxNQUNmSyxFQUFHLElBQUlDLEdBQUssQ0FBQ0EsRUFBRSxJQUFLLE9BQU9BLEVBQUUsSUFBSyxDQUFDLENBQXlCLEVBQzVERCxFQUFHLE9BQU8sQ0FBQyxFQUFtQixDQUFDRSxFQUFNLENBQUNDLEVBQUtDLENBQU0sS0FBUUYsRUFBS0UsQ0FBTSxFQUFJRCxFQUFNRCxFQUFLLENBQ3ZGLEVBR0EsV0FBVyxjQUFnQkcsRUFBZ0IsTUFBTU4sRUFBRSxLQUMvQ0QsRUFDQUUsRUFBRyxJQUFJTSxDQUF5QixFQUNoQ0MsR0FBTSxRQUFRLElBQUlBLENBQUUsRUFDcEJDLEVBQVFSLEVBQUcsSUFBSVMsR0FBVUEsR0FBVSxDQUFDLENBQUMsQ0FBQyxFQUN0Q0QsRUFBUVIsRUFBRyxJQUFJQSxFQUFHLElBQUlVLEdBQUtBLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFDbENGLEVBQVFSLEVBQUcsUUFBUSxDQUFDVyxFQUFXUCxJQUFXTyxFQUFVLElBQUlDLEdBQVksQ0FBQ0EsRUFBVVIsQ0FBTSxDQUFVLENBQUMsQ0FBQyxFQUNqR0ksRUFDSVIsRUFBRyxPQUFPLENBQUMsRUFBNkIsQ0FBQ2EsRUFBSyxDQUFDRCxFQUFVUixDQUFNLElBQzNELE9BQU8sT0FBT1MsRUFBSyxDQUNmLENBQUNELENBQVEsRUFBRyxLQUFLLElBQUlSLEVBQVFTLEVBQUlELENBQVEsR0FBSyxDQUFDLENBQ25ELENBQUMsQ0FDTCxDQUNKLENBQ0osQ0FDSixFQUVhRSxFQUFlLE1BQU9YLEVBQWlCQyxJQUFtQixDQUNuRSxJQUFNVyxFQUFnQlYsRUFBY0YsQ0FBRyxFQWV2QyxHQWJJWSxJQUFrQlgsSUFBUUEsRUFBUyxHQUVuQ1csR0FDQWhCLEVBQUUsS0FDRUQsRUFBYSxNQUFNLEVBQUdpQixFQUFnQixDQUFDLEVBQ3ZDZixFQUFHLE9BQU8sT0FBTyxFQUNqQkEsRUFBRyxJQUFJZ0IsR0FBZSxVQUFVLElBQUksV0FBV0EsQ0FBVyxFQUFFLEVBQUcsRUFDL0RoQixFQUFHLElBQUlpQixHQUFjQyxFQUF3QkQsRUFBWSxDQUFDZCxDQUFHLENBQUMsQ0FBQyxDQUNuRSxFQUdKRSxFQUFjRixDQUFHLEVBQUlDLEVBRWpCQSxFQUFTLEVBQUcsQ0FDWixJQUFJWSxFQUFjbEIsRUFBYU0sQ0FBTSxFQUVoQ1ksSUFDREEsRUFBYyxNQUFNRyxFQUFtQmYsRUFBTyxRQUFRLENBQUMsRUFBR2dCLEVBQVcsTUFBTSxRQUFRdkIsRUFBTyxnQkFBZ0IsQ0FBQyxFQUMzR3dCLEVBQTBCTCxFQUFhLEVBQUssRUFDNUNsQixFQUFhTSxDQUFNLEVBQUlZLEdBRzNCTSxFQUFzQk4sRUFBYSxDQUFDYixDQUFHLENBQUMsQ0FDNUMsQ0FFQSxJQUFNb0IsRUFBVSxVQUFVLE9BQU8sS0FBSyxPQUFPLElBQ3pDQSxJQUFZcEIsR0FBS3FCLEVBQXlCRCxFQUFTLEVBQUssRUFHNURFLEVBQXdCLEVBQ3hCLEdBQU0sQ0FBRSxTQUFBQyxDQUFTLEVBQUksVUFBVSxTQUFTLFFBQVEsU0FDaERDLEVBQXlCLFVBQVUsSUFBSSxXQUFXRCxDQUFRLENBQUMsQ0FDL0QsRUFFVzVCLEVBQTZCLENBQUMsRUFDOUJPLEVBQTRDLENBQUMsRUQzRXhELEdBQU0sQ0FBRSxNQUFBdUIsQ0FBTSxFQUFJLFVBRVpDLEdBQWUsQ0FBQyxDQUFFLEVBQUFDLEVBQUcsSUFBQUMsQ0FBSSxJQUMzQkgsRUFBQSxjQUFDLFVBQ0csVUFBVSxnSkFDVixRQUFTLElBQU1JLEVBQWFELEVBQUtELENBQUMsR0FFbENGLEVBQUEsY0FBQyxPQUNHLEtBQUssTUFDTCxPQUFRLEdBQ1IsTUFBTyxHQUNQLFFBQVEsWUFDUixVQUFXLHVDQUF1Q0UsQ0FBQyxJQUVuREYsRUFBQSxjQUFDLFFBQUssRUFBRSw4SUFBOEksQ0FDMUosQ0FDSixFQUdTSyxFQUFXLENBQUMsQ0FBRSxJQUFBRixDQUFJLElBQzNCSCxFQUFBLGNBQUMsT0FBSSxVQUFVLG1CQUNWTSxHQUFNLEVBQUcsQ0FBQyxFQUFFLElBQUlKLEdBQ2JGLEVBQUEsY0FBQ0MsR0FBQSxDQUFhLEVBQUdDLEVBQUcsSUFBS0MsRUFBSyxDQUNqQyxDQUNMLEVJMUJHLElBQU1JLEdBQWdCLElBQU0sTUFBTSxLQUFLLFNBQVMsaUJBQWlDLDJCQUEyQixDQUFDLEVBQ3ZHQyxHQUFzQkMsR0FDL0IsTUFBTSxLQUFLQSxFQUFVLGlCQUFpQyxpQ0FBaUMsQ0FBQyxFQUUvRUMsR0FBd0JDLElBQ2hDQSxFQUFRLE9BQU8sT0FBT0EsQ0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLE1BQU0sTUFBTSxNQUNsREEsRUFBYyxhQUFhLEtBQVFBLEVBQWMsTUFBTSxhQUFhLEtBRzVEQyxHQUFtQixJQUFNLFNBQVMsY0FBOEIsc0NBQXNDLEVBQ3RHQyxHQUE0QixJQUNyQyxTQUFTLGNBQThCLGlDQUFpQyxFQUUvREMsR0FBeUIsZ0ZBQ3pCQyxFQUFxQkMsR0FDOUJBLEVBQU8sY0FBaUNGLEVBQXNCLEVBQ3JERyxHQUE4QixJQUM1QkosR0FBMEIsRUFDM0IsY0FDTiwwRkFDSixFUlBKLEdBQU0sQ0FBRSxJQUFBSyxDQUFJLEVBQUksVUFDVixDQUFFLE1BQUFDLEdBQU8sU0FBQUMsRUFBUyxFQUFJLFVBRXRCQyxHQUFnQixDQUFDLFFBQVMsVUFBVyxVQUFXLFNBQVUsVUFBVyxTQUFTLEVBRTlFQyxFQUF5QixDQUFDQyxFQUF3QkMsSUFBbUIsQ0FDdkUsR0FBSUQsRUFBSSxNQUFNLE9BQVNGLEdBQWNHLENBQU0sRUFBRyxPQUU5Q0QsRUFBSSxNQUFNLFFBQVVDLEVBQVMsRUFBSSxJQUFNLFFBQ3ZDLElBQU1DLEVBQU1GLEVBQUksY0FBMEIsS0FBSyxFQUMvQ0UsRUFBSSxNQUFNLEtBQU9KLEdBQWNHLENBQU0sQ0FDekMsRUFFSUUsRUFDRUMsR0FBbUMsQ0FBQ0MsRUFBdUJDLEVBQWlCQyxFQUFTLEtBQVUsQ0FDakcsR0FBSUYsRUFBRyxhQUFhLGtCQUFrQixHQUNsQyxHQUFJLENBQUNFLEVBQVEsWUFDVkYsRUFBRyxhQUFhLG1CQUFvQixFQUFFLEVBRTdDLElBQU1HLEVBQU0sU0FBUyxjQUFjLEtBQUssRUFDcENELElBQ0lKLEdBQVMsWUFBV0EsRUFBUSxVQUFZLElBQzVDQSxFQUFVSyxHQUVkSCxFQUFHLFlBQVlHLENBQUcsRUFDbEJYLEdBQVMsT0FBT0QsR0FBQSxjQUFDYSxFQUFBLENBQVMsSUFBS0gsRUFBSyxFQUFJRSxDQUFHLEVBQzNDLFVBQVUsTUFBTUgsRUFBSSxDQUNoQixRQUFTRyxFQUNULFlBQWEsR0FDYixZQUFhLEdBRWIsVUFBVyxPQUNYLFVBQVcsT0FFWCxPQUFRLElBQ1IsTUFBTyxDQUFDLElBQUssQ0FBQyxFQUNkLE9BQU9FLEVBQWUsQ0FDbEIsSUFBTUMsRUFBUyxTQUFTLGNBQWMsS0FBSyxFQUNyQ0MsRUFBTSxTQUFTLGNBQWMsS0FBSyxFQUV4QyxPQUFBRCxFQUFPLEdBQUssZUFDWkEsRUFBTyxZQUFZQyxDQUFHLEVBRXRCQSxFQUFJLFVBQVkseUJBQ2hCQSxFQUFJLFlBQVlGLEVBQVMsTUFBTSxPQUFPLEVBRS9CLENBQUUsT0FBQUMsRUFBUSxTQUFVRSxFQUFFLFNBQVUsQ0FDM0MsRUFDQSxPQUFPSCxFQUFlLENBQ2xCQSxFQUFTLE9BQU8sV0FBVyxVQUFVLElBQUksNkJBQTZCLEVBRXRFLElBQU1JLEVBQVlKLEVBQVMsVUFBVSxjQUFpQyxTQUNoRUssRUFBVUQsRUFBUyxLQUFLQSxFQUFTLE9BQVMsQ0FBQyxFQUNqREMsRUFBUSxNQUFNLFlBQWMsS0FDaEMsRUFDQSxRQUFRTCxFQUFlLENBQ25CLHNCQUFzQixJQUFNLENBQ3hCQSxFQUFTLE9BQU8sV0FBVyxVQUFVLE9BQU8sNkJBQTZCLEVBQ3pFQSxFQUFTLE9BQU8sV0FBVyxVQUFVLElBQUksbUNBQW1DLENBQ2hGLENBQUMsQ0FDTCxFQUNBLE9BQU9BLEVBQWUsQ0FDbEIsc0JBQXNCLElBQU0sQ0FDeEJBLEVBQVMsT0FBTyxXQUFXLFVBQVUsT0FBTyxtQ0FBbUMsRUFFL0UsSUFBTUksRUFBWUosRUFBUyxVQUFVLGNBQWlDLFNBQ2hFSyxFQUFVRCxFQUFTLEtBQUtBLEVBQVMsT0FBUyxDQUFDLEVBQ2pEQyxFQUFRLE1BQU0sWUFBYyxRQUU1QkwsRUFBUyxRQUFRLENBQ3JCLENBQUMsQ0FDTCxDQUNKLENBQUMsQ0FDTCxFQUVhTSxFQUEyQixDQUFDQyxFQUFzQkMsRUFBaUIsS0FBUyxDQUNyRixJQUFNQyxFQUFNQyxHQUFpQixFQUN2QmYsRUFBS2dCLEVBQWtCRixDQUFHLEVBQ2hDcEIsRUFBdUJNLEVBQUlpQixFQUFjTCxDQUFRLENBQUMsRUFDOUNDLEdBQWdCZCxHQUFpQ0MsRUFBSVksRUFBVSxFQUFJLENBQzNFLEVBRWFNLEVBQTBCLENBQUNMLEVBQWlCLEtBQVMsQ0FDOUQsSUFBTU0sRUFBYUMsR0FBYyxFQUNqQ1osRUFBRSxLQUNFVyxFQUNBRSxFQUFHLElBQUlDLEdBQWEsQ0FDUUMsR0FBbUJELENBQVMsRUFFcEMsSUFBSUUsR0FBUyxDQUN6QixJQUFNdkIsRUFBTVgsRUFBSSxXQUFXbUMsR0FBcUJELENBQUssQ0FBQyxFQUFFLE1BQU0sRUFHOUQsR0FBSSxDQUFDbEMsRUFBSSxRQUFRVyxDQUFJLEVBQUcsT0FFeEIsSUFBTXlCLEVBQUlULEVBQWNoQixDQUFHLEVBQ3JCRCxFQUFLZ0IsRUFBa0JRLENBQUssRUFFbEM5QixFQUF1Qk0sRUFBSTBCLENBQUMsRUFDeEJiLEdBQWdCZCxHQUFpQ0MsRUFBSUMsQ0FBRyxDQUNoRSxDQUFDLENBQ0wsQ0FBQyxDQUNMLENBQ0osRUFFYTBCLEVBQTJCLE1BQU8xQixHQUF1QixDQUNsRSxJQUFJMkIsRUFDSixHQUFJdEMsRUFBSSxRQUFRVyxDQUFHLEVBQ2YyQixFQUFPcEIsRUFBRSxLQUNMLE1BQU1xQixFQUFjLEdBQUc1QixDQUFHLEVBQUUsRUFDNUI2QixHQUFLQSxFQUFFLE9BQU8sTUFDZFQsRUFBRyxJQUFJUyxHQUFLQSxFQUFFLE1BQU0sR0FBRyxDQUMzQixVQUNLeEMsRUFBSSxTQUFTVyxDQUFHLEVBQ3JCMkIsRUFBT3BCLEVBQUUsS0FDTCxNQUFNdUIsRUFBMkIsR0FBRzlCLENBQUcsRUFBRSxFQUN6Q29CLEVBQUcsSUFBSVMsR0FBS0EsRUFBRSxHQUFHLENBQ3JCLFVBQ0t4QyxFQUFJLGlCQUFpQlcsQ0FBRyxFQUM3QjJCLEVBQU9wQixFQUFFLEtBQ0wsTUFBTXdCLEVBQTBCLEdBQUcvQixDQUFHLEVBQUUsRUFDeENvQixFQUFHLElBQUlTLEdBQUtBLEVBQUUsR0FBRyxDQUNyQixNQUNDLE1BQU0sb0JBRVgsSUFBTUcsRUFBVUwsRUFBSyxJQUFJM0IsR0FBT2dCLEVBQWNoQixDQUFHLENBQUMsRUFBRSxPQUFPLE9BQU8sRUFDNURMLEVBQVMsS0FBSyxNQUFNcUMsRUFBUSxPQUFPLENBQUNDLEVBQUtSLElBQU1RLEVBQU1SLENBQUMsRUFBSU8sRUFBUSxNQUFNLEVBRXhFakMsRUFBS21DLEdBQTRCLEVBQ3ZDekMsRUFBdUJNLEVBQUlKLENBQU0sQ0FDckMsRUQxSUEsR0FBTSxDQUFFLElBQUF3QyxDQUFJLEVBQUksVUFFaEJDLEVBQVksRUFFWixVQUFVLE9BQU8saUJBQWlCLGFBQWMsSUFBTSxDQUNsRCxJQUFNQyxFQUFVLFVBQVUsT0FBTyxLQUFLLE9BQU8sSUFDN0MsR0FDSSxPQUFPQyxFQUFPLGFBQWEsSUFDMUJDLEVBQWNGLENBQU8sR0FBSyxPQUFPLG1CQUFxQixPQUFPQyxFQUFPLGFBQWEsRUFFbEYsT0FBTyxLQUFLLFVBQVUsT0FBTyxLQUFLLEVBRXRDRSxFQUF5QkgsQ0FBTyxDQUNwQyxDQUFDLEVBQ0RHLEVBQXlCLFVBQVUsT0FBTyxLQUFLLE9BQU8sR0FBSSxFQUUxRCxJQUFJQyxFQUNFQyxHQUFzQixJQUFJLGlCQUFpQixJQUFNQyxFQUF3QixDQUFDLEVBRWhGLElBQUksaUJBQWlCLElBQU0sQ0FDdkIsSUFBTUMsRUFBa0IsU0FBUyxjQUEyQixNQUFNLEVBQzlEQSxHQUFtQixDQUFDQSxFQUFnQixZQUFZSCxDQUFXLElBQ3ZEQSxHQUFhQyxHQUFvQixXQUFXLEVBQ2hERCxFQUFjRyxFQUNkRixHQUFvQixRQUFRRCxFQUFhLENBQ3JDLFVBQVcsR0FDWCxRQUFTLEVBQ2IsQ0FBQyxFQUVULENBQUMsRUFBRSxRQUFRLFNBQVMsS0FBTSxDQUN0QixVQUFXLEdBQ1gsUUFBUyxFQUNiLENBQUMsRUFFRCxVQUFVLFNBQVMsUUFBUSxPQUFPLE1BQU8sQ0FBRSxTQUFBSSxDQUFTLElBQTRCLENBQ3ZEQyxHQUFRLENBQUNYLEVBQUksUUFBU0EsRUFBSSxTQUFVQSxFQUFJLGdCQUFnQixDQUFDLEVBQzVEVSxDQUFRLEdBRTFCRSxFQUF5QlosRUFBSSxXQUFXVSxDQUFRLENBQUMsQ0FDckQsQ0FBQyIsCiAgIm5hbWVzIjogWyJhbnlQYXNzIiwgImFyIiwgImYiLCAiYXIiLCAiZXEiLCAic3RyIiwgInJlYyIsICJzZyIsICJmIiwgImd1YXJkIiwgIm1lbW9pemUiLCAiZ3VhcmQzIiwgImJyYW5jaGVzIiwgImd1YXJkIiwgInBNY2hhaW4iLCAiZiIsICJmYSIsICJpcyIsICJjIiwgImEiLCAiZmllbGQiLCAiY2h1bmNraWZ5IiwgIm4iLCAiZyIsICJmIiwgImFyIiwgInBzIiwgInBNY2hhaW4iLCAibWVtb2l6ZTIiLCAiZm4iLCAiZiIsICJtZW1vaXplIiwgImVxIiwgInN0ciIsICJhIiwgImYiLCAiU3BvdGlmeUxvYyIsICJ1cmkiLCAidWlkIiwgInNsZWVwIiwgIm1zIiwgInJlc29sdmUiLCAiZmV0Y2hHUUxBbGJ1bSIsICJ1cmkiLCAib2Zmc2V0IiwgImxpbWl0IiwgInJlbW92ZVdlYlBsYXlsaXN0VHJhY2tzIiwgInBsYXlsaXN0IiwgInRyYWNrcyIsICJ1cmkiLCAiZmV0Y2hXZWJBcnRpc3RzU3BvdCIsICJjaHVuY2tpZnkiLCAiaWRzIiwgImZldGNoV2ViUGxheWxpc3RzU3BvdCIsICJpZCIsICJmZXRjaFdlYkFsYnVtc1Nwb3QiLCAiZmV0Y2hXZWJUcmFja3NTcG90IiwgImZldGNoUGxhdEFydGlzdExpa2VkVHJhY2tzIiwgInVyaSIsICJvZmZzZXQiLCAibGltaXQiLCAiZmV0Y2hQbGF0UGxheWxpc3RDb250ZW50cyIsICJjcmVhdGVQbGF0Rm9sZGVyIiwgIm5hbWUiLCAibG9jYXRpb24iLCAiY3JlYXRlUGxhdFBsYXlsaXN0IiwgIm5hbWUiLCAibG9jYXRpb24iLCAic2V0UGxhdFBsYXlsaXN0VmlzaWJpbGl0eSIsICJwbGF5bGlzdCIsICJ2aXNpYmxlRm9yQWxsIiwgImZldGNoUGxhdEZvbGRlciIsICJmb2xkZXIiLCAiYWRkUGxhdFBsYXlsaXN0VHJhY2tzIiwgInBsYXlsaXN0IiwgInRyYWNrcyIsICJsb2NhdGlvbiIsICJmZXRjaFRyYWNrTEZNQVBJIiwgIkxGTUFwaUtleSIsICJhcnRpc3QiLCAidHJhY2tOYW1lIiwgImxhc3RGbVVzZXJuYW1lIiwgInVybCIsICJyZXMiLCAiZmV0Y2hUcmFja0xGTUFQSU1lbW9pemVkIiwgIm1lbW9pemUyIiwgInJhbmdlIiwgImFyIiwgImYiLCAidGFzayIsICJ0YXNrIiwgIlJlYWN0IiwgIlJlYWN0RE9NIiwgIkJ1dHRvblNlY29uZGFyeSIsICJyZXF1aXJlIiwgInJlIiwgImNhY2hlIiwgImlkIiwgIm1vZHVsZXMiLCAibW9kdWxlIiwgImZ1bmN0aW9uTW9kdWxlcyIsICJTZXR0aW5nQ29sdW1uIiwgIm0iLCAiU2V0dGluZ1RleHQiLCAiU2V0dGluZ1RvZ2dsZSIsICJTZXR0aW5nc1NlY3Rpb24iLCAiX1NldHRpbmdzU2VjdGlvbiIsICJuYW1lIiwgInNlY3Rpb25JZCIsICJzZWN0aW9uRmllbGRzIiwgInRhcmdldCIsICJwcm9wIiwgInNsZWVwIiwgImFsbFNldHRpbmdzQ29udGFpbmVyIiwgInBsdWdpblNldHRpbmdzQ29udGFpbmVyIiwgImlkIiwgIlJlYWN0RE9NIiwgIlJlYWN0IiwgInByb3BzIiwgImRlZmF1bHRWYWx1ZSIsICJ0YXNrIiwgIm5hbWVJZCIsICJ2YWx1ZSIsICJzZXRWYWx1ZVN0YXRlIiwgIm5ld1ZhbHVlIiwgImZpZWxkIiwgImlzVHlwZSIsICJpcyIsICJndWFyZDMiLCAiY2hpbGRyZW4iLCAiU2V0dGluZ0NvbHVtbiIsICJTZXR0aW5nVGV4dCIsICJCdXR0b25TZWNvbmRhcnkiLCAic2V0VmFsdWUiLCAiU2V0dGluZ1RvZ2dsZSIsICJjaGVja2VkIiwgImUiLCAidHlwZSIsICJvcHRzIiwgInNldHRpbmdJZCIsICJSQVRJTkdTX0ZPTERFUl9OQU1FIiwgInNldHRpbmdzIiwgIlNldHRpbmdzU2VjdGlvbiIsICJ0YXNrIiwgImxvYWRSYXRpbmdzIiwgImNyZWF0ZVBsYXRGb2xkZXIiLCAiQ09ORklHIiwgImxvYWRSYXRpbmdzIiwgInJhdGluZ3NGb2xkZXIiLCAiZmV0Y2hQbGF0Rm9sZGVyIiwgIkNPTkZJRyIsICJwbGF5bGlzdFVyaXMiLCAiZiIsICJhciIsICJwIiwgInVyaXMiLCAidXJpIiwgInJhdGluZyIsICJ0cmFja3NSYXRpbmdzIiwgImZldGNoUGxhdFBsYXlsaXN0Q29udGVudHMiLCAicHMiLCAicE1jaGFpbiIsICJ0cmFja3MiLCAidCIsICJ0cmFja1VyaXMiLCAidHJhY2tVcmkiLCAiYWNjIiwgInRvZ2dsZVJhdGluZyIsICJjdXJyZW50UmF0aW5nIiwgInBsYXlsaXN0VXJpIiwgInBsYXlsaXN0SWQiLCAicmVtb3ZlV2ViUGxheWxpc3RUcmFja3MiLCAiY3JlYXRlUGxhdFBsYXlsaXN0IiwgIlNwb3RpZnlMb2MiLCAic2V0UGxhdFBsYXlsaXN0VmlzaWJpbGl0eSIsICJhZGRQbGF0UGxheWxpc3RUcmFja3MiLCAibnBUcmFjayIsICJ1cGRhdGVOb3dQbGF5aW5nQ29udHJvbHMiLCAidXBkYXRlVHJhY2tMaXN0Q29udHJvbHMiLCAicGF0aG5hbWUiLCAidXBkYXRlQ29sbGVjdGlvbkNvbnRyb2xzIiwgIlJlYWN0IiwgIlJhdGluZ0J1dHRvbiIsICJpIiwgInVyaSIsICJ0b2dnbGVSYXRpbmciLCAiRHJvcGRvd24iLCAicmFuZ2UiLCAiZ2V0VHJhY2tMaXN0cyIsICJnZXRUcmFja0xpc3RUcmFja3MiLCAidHJhY2tMaXN0IiwgImdldFRyYWNrTGlzdFRyYWNrVXJpIiwgInRyYWNrIiwgImdldE5vd1BsYXlpbmdCYXIiLCAiZ2V0Q29sbGVjdGlvbkFjdGlvbkJhclJvdyIsICJwbGF5bGlzdEJ1dHRvblNlbGVjdG9yIiwgImdldFBsYXlsaXN0QnV0dG9uIiwgInBhcmVudCIsICJnZXRDb2xsZWN0aW9uUGxheWxpc3RCdXR0b24iLCAiVVJJIiwgIlJlYWN0IiwgIlJlYWN0RE9NIiwgImNvbG9yQnlSYXRpbmciLCAiY29sb3JpemVQbGF5bGlzdEJ1dHRvbiIsICJidG4iLCAicmF0aW5nIiwgInN2ZyIsICJsYXN0RGl2IiwgIndyYXBEcm9wZG93bkluc2lkZVBsYXlsaXN0QnV0dG9uIiwgInBiIiwgInVyaSIsICJmb3JjZWQiLCAiZGl2IiwgIkRyb3Bkb3duIiwgImluc3RhbmNlIiwgInBvcHBlciIsICJib3giLCAiZiIsICJjaGlsZHJlbiIsICJlbGVtZW50IiwgInVwZGF0ZU5vd1BsYXlpbmdDb250cm9scyIsICJuZXdUcmFjayIsICJ1cGRhdGVEcm9wZG93biIsICJucGIiLCAiZ2V0Tm93UGxheWluZ0JhciIsICJnZXRQbGF5bGlzdEJ1dHRvbiIsICJ0cmFja3NSYXRpbmdzIiwgInVwZGF0ZVRyYWNrTGlzdENvbnRyb2xzIiwgInRyYWNrTGlzdHMiLCAiZ2V0VHJhY2tMaXN0cyIsICJhciIsICJ0cmFja0xpc3QiLCAiZ2V0VHJhY2tMaXN0VHJhY2tzIiwgInRyYWNrIiwgImdldFRyYWNrTGlzdFRyYWNrVXJpIiwgInIiLCAidXBkYXRlQ29sbGVjdGlvbkNvbnRyb2xzIiwgInVyaXMiLCAiZmV0Y2hHUUxBbGJ1bSIsICJ4IiwgImZldGNoUGxhdEFydGlzdExpa2VkVHJhY2tzIiwgImZldGNoUGxhdFBsYXlsaXN0Q29udGVudHMiLCAicmF0aW5ncyIsICJhY2MiLCAiZ2V0Q29sbGVjdGlvblBsYXlsaXN0QnV0dG9uIiwgIlVSSSIsICJsb2FkUmF0aW5ncyIsICJucFRyYWNrIiwgIkNPTkZJRyIsICJ0cmFja3NSYXRpbmdzIiwgInVwZGF0ZU5vd1BsYXlpbmdDb250cm9scyIsICJtYWluRWxlbWVudCIsICJtYWluRWxlbWVudE9ic2VydmVyIiwgInVwZGF0ZVRyYWNrTGlzdENvbnRyb2xzIiwgIm5leHRNYWluRWxlbWVudCIsICJwYXRobmFtZSIsICJhbnlQYXNzIiwgInVwZGF0ZUNvbGxlY3Rpb25Db250cm9scyJdCn0K
(async () => {
    if (!document.getElementById("star-ratings-2-css")) {
        const el = document.createElement("style")
        el.id = "star-ratings-2-css"
        
        el.textContent = "svg.rating-1{fill:#ed5564!important}svg.rating-2{fill:#ffce54!important}svg.rating-3{fill:#a0d568!important}svg.rating-4{fill:#4fc1e8!important}svg.rating-5{fill:#ac92eb!important}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vZXh0ZW5zaW9ucy9zdGFyLXJhdGluZ3MtMi9hc3NldHMvc3R5bGVzLmNzcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsic3ZnLnJhdGluZy0xe2ZpbGw6I2VkNTU2NCAhaW1wb3J0YW50fXN2Zy5yYXRpbmctMntmaWxsOiNmZmNlNTQgIWltcG9ydGFudH1zdmcucmF0aW5nLTN7ZmlsbDojYTBkNTY4ICFpbXBvcnRhbnR9c3ZnLnJhdGluZy00e2ZpbGw6IzRmYzFlOCAhaW1wb3J0YW50fXN2Zy5yYXRpbmctNXtmaWxsOiNhYzkyZWIgIWltcG9ydGFudH0iXSwKICAibWFwcGluZ3MiOiAiQUFBQSxHQUFHLENBQUMsU0FBUyxLQUFLLGlCQUFrQixDQUFDLEdBQUcsQ0FBQyxTQUFTLEtBQUssaUJBQWtCLENBQUMsR0FBRyxDQUFDLFNBQVMsS0FBSyxpQkFBa0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxLQUFLLGlCQUFrQixDQUFDLEdBQUcsQ0FBQyxTQUFTLEtBQUssaUJBQWtCIiwKICAibmFtZXMiOiBbXQp9Cg== */\n"
        document.head.appendChild(el)
    }
})()