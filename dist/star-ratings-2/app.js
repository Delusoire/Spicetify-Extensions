import{anyPass as vt}from"https://esm.sh/fp-ts-std/Predicate";import{array as T,function as A}from"https://esm.sh/fp-ts";import{array as F,eq as lt,string as pt,record as wt,semigroup as Et,function as h}from"https://esm.sh/fp-ts";import{guard as ct,memoize as ut}from"https://esm.sh/fp-ts-std/Function";var C=t=>ct(t);var c=t=>async e=>t(await e),M=t=>e=>i=>i[t]===e;var d=t=>e=>h.flow(F.chunksOf(t),F.map(e),i=>Promise.all(i),c(F.flatten));var O=t=>h.pipe(t,h.tupled,ut(lt.contramap(JSON.stringify)(pt.Eq)),h.untupled);import{array as Nt,function as N}from"https://esm.sh/fp-ts";var D={before:{start:N.constant({before:"start"}),fromUri:t=>({before:{uri:t}}),fromUid:t=>({before:{uid:t}})},after:{end:N.constant({after:"end"}),fromUri:t=>({after:{uri:t}}),fromUid:t=>({after:{uid:t}})}};var H=t=>new Promise(e=>setTimeout(e,t));var _=async(t,e=0,i=487)=>(await Spicetify.GraphQL.Request(Spicetify.GraphQL.Definitions.getAlbum,{uri:t,locale:Spicetify.Locale.getLocale(),offset:e,limit:i})).data.albumUnion;var Vt=d(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists?ids=${t.join(",")}`)).artists),$t=d(1)(async([t])=>[await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/playlists/${t}`)]),Wt=d(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums?ids=${t.join(",")}`)).albums),zt=d(50)(async t=>(await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks?ids=${t.join(",")}`)).tracks);var G=async(t,e=0,i=100)=>(await Spicetify.Platform.LibraryAPI.getTracks({uri:t,offset:e,limit:i})).items,b=async t=>(await Spicetify.Platform.PlaylistAPI.getContents(t)).items,q=async(t,e={})=>await Spicetify.Platform.RootlistAPI.createFolder(t,e);var j=async(t,e={})=>await Spicetify.Platform.RootlistAPI.createPlaylist(t,e);var Q=async(t,e)=>await Spicetify.Platform.PlaylistPermissionsAPI.setBasePermission(t,e?"VIEWER":"BLOCKED");var V=async t=>await Spicetify.Platform.RootlistAPI.getContents({folderUri:t});var $=async(t,e,i={})=>await Spicetify.Platform.PlaylistAPI.add(t,e,i);var W=async(t,e)=>Spicetify.Platform.PlaylistAPI.remove(t,e);var dt=async(t,e,i,s="")=>{let n=new URL("https://ws.audioscrobbler.com/2.0/");return n.searchParams.append("method","track.getInfo"),n.searchParams.append("api_key",t),n.searchParams.append("artist",e),n.searchParams.append("track",i),n.searchParams.append("format","json"),n.searchParams.append("username",s),await fetch(n).then(r=>r.json())},Jt=O(dt);import{range as Rt}from"https://esm.sh/fp-ts/lib/ReadonlyNonEmptyArray";import{array as l,function as v}from"https://esm.sh/fp-ts";import{task as K}from"https://esm.sh/fp-ts";import{task as z}from"https://esm.sh/fp-ts";var{React:o,ReactDOM:yt}=Spicetify,{ButtonSecondary:mt}=Spicetify.ReactComponent,J=webpackChunkopen.push([[Symbol()],{},t=>t]),ft=Object.keys(J.m).map(t=>J(t)),gt=ft.filter(t=>typeof t=="object").map(t=>{try{return Object.values(t)}catch{}}).flat(),y=gt.filter(t=>typeof t=="function"),At=y.find(t=>/^function .\(.\)\{return\(0,.\.jsx\)\(/.test(t)),St=y.find(t=>t.toString().includes("textToHighlight")),ht=y.find(t=>t.toString().includes("setSectionFilterMatchQueryValue")&&t.toString().includes("filterMatchQuery")),bt=y.find(t=>t.toString().includes("textSubdued")&&t.toString().includes("viola")),xt=y.find(t=>t.toString().includes("condensed")&&t.toString().includes("onSelected"));var x=class t{constructor(e,i,s={}){this.name=e;this.id=i;this.sectionFields=s;this.pushSettings=()=>{this.stopHistoryListener&&this.stopHistoryListener(),this.stopHistoryListener=Spicetify.Platform.History.listen(()=>this.render()),this.render()};this.toObject=()=>new Proxy({},{get:(e,i)=>t.getFieldValue(this.getId(i.toString()))});this.render=async()=>{for(;!document.getElementById("desktop.settings.selectLanguage");){if(Spicetify.Platform.History.location.pathname!=="/preferences")return;await H(100)}let e=document.querySelector(".x-settings-container"),i=Array.from(e.children).find(({id:s})=>s===this.id);i||(i=document.createElement("div"),i.id=this.id,i.className="settingsContainer",e.appendChild(i)),yt.render(o.createElement(this.FieldsContainer,null),i)};this.addButton=e=>(this.addField("button",e),this);this.addToggle=(e,i=z.of(!1))=>(this.addField("toggle",e,i),this);this.addInput=(e,i=z.of(""))=>(this.addField("input",e,i),this);this.getId=e=>["extensions",this.id,e].join(":");this.useStateFor=e=>{let[i,s]=o.useState(t.getFieldValue(e));return[i,n=>{n!==void 0&&(s(n),t.setFieldValue(e,n))}]};this.FieldsContainer=()=>o.createElement(At,{filterMatchQuery:this.name},o.createElement(St,null,this.name),Object.values(this.sectionFields).map(e=>{let i=M("type");return C([[i("input"),this.InputField],[i("button"),this.ButtonField],[i("toggle"),this.ToggleField]])(()=>o.createElement(o.Fragment,null))(e)}));this.SettingField=({field:e,children:i})=>o.createElement(ht,{filterMatchQuery:e.id},o.createElement("div",{className:"x-settings-firstColumn"},o.createElement(bt,{htmlFor:e.id},e.desc)),o.createElement("div",{className:"x-settings-secondColumn"},i));this.ButtonField=e=>o.createElement(this.SettingField,{field:e},o.createElement(mt,{id:e.id,buttonSize:"sm",onClick:e.onClick,className:"x-settings-button"},e.text));this.ToggleField=e=>{let[i,s]=this.useStateFor(e.id);return o.createElement(this.SettingField,{field:e},o.createElement(xt,{id:e.id,value:t.getFieldValue(this.getId(e.id)),onSelected:n=>{s(n),e.onSelected?.(n)},className:"x-settings-button"}))};this.InputField=e=>{let[i,s]=this.useStateFor(e.id);return o.createElement(this.SettingField,{field:e},o.createElement("input",{className:"x-settings-input",id:e.id,dir:"ltr",value:t.getFieldValue(this.getId(e.id)),type:e.inputType,onChange:n=>{let r=n.currentTarget.value;s(r),e.onChange?.(r)}}))}}addField(e,i,s){if(s!==void 0){let r=this.getId(i.id);t.setDefaultFieldValue(r,s)}let n=Object.assign({},i,{type:e});this.sectionFields[i.id]=n}static{this.getFieldValue=e=>JSON.parse(Spicetify.LocalStorage.get(e)??"null")}static{this.setFieldValue=(e,i)=>Spicetify.LocalStorage.set(e,JSON.stringify(i))}static{this.setDefaultFieldValue=async(e,i)=>{t.getFieldValue(e)===null&&t.setFieldValue(e,await i())}}};var Pt="Ratings",Y=new x("Star Ratings 2","star-ratings-2").addInput({id:"heartThreshold",desc:"Threshold for liking trakcs",inputType:"number"},K.of("3")).addInput({id:"skipThreshold",desc:"Threshold for skipping trakcs",inputType:"number"},K.of("1")).addInput({id:"ratingsFolderUri",desc:"Ratings folder uri",inputType:"text",onChange:P},async()=>(await q(Pt)).uri);Y.pushSettings();var u=Y.toObject();var P=async()=>{let t=await V(u.ratingsFolderUri);m=v.pipe(t.items,l.map(e=>[e.uri,Number(e.name)]),l.reduce([],(e,[i,s])=>(e[s]=i,e))),globalThis.tracksRatings=p=await v.pipe(m,l.map(b),e=>Promise.all(e),c(l.map(e=>e??[])),c(l.map(l.map(e=>e.uri))),c(l.flatMap((e,i)=>e.map(s=>[s,i]))),c(l.reduce({},(e,[i,s])=>Object.assign(e,{[i]:Math.max(s,e[i]??0)}))))},X=async(t,e)=>{let i=p[t];if(i===e&&(e=0),i&&v.pipe(m.slice(0,i+1),l.filter(Boolean),l.map(r=>Spicetify.URI.fromString(r).id),l.map(r=>W(r,[{uri:t,uid:""}]))),p[t]=e,e>0){let r=m[e];r||(r=await j(e.toFixed(0),D.after.fromUri(u.ratingsFolderUri)),Q(r,!1),m[e]=r),$(r,[t])}let s=Spicetify.Player.data.track?.uri;s===t&&f(s,!1),R();let{pathname:n}=Spicetify.Platform.History.location;I(Spicetify.URI.fromString(n))},m=[],p={};var{React:g}=Spicetify,It=({i:t,uri:e})=>g.createElement("button",{className:"Button-sc-1dqy6lx-0 Button-textBrightAccent-sm-16-buttonTertiary-iconOnly-condensed-isUsingKeyboard-useBrowserDefaultFocusStyle rating-button",onClick:()=>X(e,t)},g.createElement("svg",{role:"img",height:16,width:16,viewBox:"0 0 16 16",className:`Svg-sc-ytk21e-0 Svg-img-icon rating-${t}`},g.createElement("path",{d:"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm11.748-1.97a.75.75 0 0 0-1.06-1.06l-4.47 4.47-1.405-1.406a.75.75 0 1 0-1.061 1.06l2.466 2.467 5.53-5.53z"}))),Z=({uri:t})=>g.createElement("div",{className:"rating-dropdown"},Rt(1,5).map(e=>g.createElement(It,{i:e,uri:t})));var tt=()=>Array.from(document.querySelectorAll(".main-trackList-indexable")),et=t=>Array.from(t.querySelectorAll("div.main-trackList-trackListRow")),it=t=>(t=Object.values(t)[0].child.child.child.child,t.pendingProps.uri??t.child.pendingProps.uri),rt=()=>document.querySelector("div.main-nowPlayingBar-nowPlayingBar"),Tt=()=>document.querySelector("div.main-actionBar-ActionBarRow"),Lt='button[aria-label="Add to Liked Songs"], button[aria-label="Add to playlist"]',U=t=>t.querySelector(Lt),nt=()=>Tt().querySelector('button[aria-label="Remove from Your Library"], button[aria-label="Save to Your Library"]');var{URI:S}=Spicetify,{React:kt,ReactDOM:Ft}=Spicetify,st=["unset","#ED5564","#FFCE54","A0D568","#4FC1E8","#AC92EB"],B=(t,e)=>{if(t.style.fill===st[e])return;t.style.opacity=e>0?"1":"unset";let i=t.querySelector("svg");i.style.fill=st[e]},w,ot=(t,e,i=!1)=>{if(t.hasAttribute("dropdown-enabled")){if(!i)return}else t.setAttribute("dropdown-enabled","");let s=document.createElement("div");i&&(w?.outerHTML&&(w.outerHTML=""),w=s),t.appendChild(s),Ft.render(kt.createElement(Z,{uri:e}),s),Spicetify.Tippy(t,{content:s,interactive:!0,animateFill:!1,placement:"left",animation:"fade",zIndex:1e4,delay:[200,0],render(n){let r=document.createElement("div"),a=document.createElement("div");return r.id="context-menu",r.appendChild(a),a.className="main-contextMenu-tippy",a.appendChild(n.props.content),{popper:r,onUpdate:A.constVoid}},onShow(n){n.popper.firstChild.classList.add("main-contextMenu-tippyEnter");let r=n.reference.parentElement.children,a=r.item(r.length-1);a.style.marginRight="0px"},onMount(n){requestAnimationFrame(()=>{n.popper.firstChild.classList.remove("main-contextMenu-tippyEnter"),n.popper.firstChild.classList.add("main-contextMenu-tippyEnterActive")})},onHide(n){requestAnimationFrame(()=>{n.popper.firstChild.classList.remove("main-contextMenu-tippyEnterActive");let r=n.reference.parentElement.children,a=r.item(r.length-2);a.style.marginRight="unset",n.unmount()})}})},f=(t,e=!0)=>{let i=rt(),s=U(i);B(s,p[t]),e&&ot(s,t,!0)},R=(t=!0)=>{let e=tt();A.pipe(e,T.map(i=>{et(i).map(n=>{let r=S.fromString(it(n)).toURI();if(!S.isTrack(r))return;let a=p[r],E=U(n);B(E,a),t&&ot(E,r)})}))},I=async t=>{let e;if(S.isAlbum(t))e=A.pipe(await _(`${t}`),r=>r.tracks.items,T.map(r=>r.track.uri));else if(S.isArtist(t))e=A.pipe(await G(`${t}`),T.map(r=>r.uri));else if(S.isPlaylistV1OrV2(t))e=A.pipe(await b(`${t}`),T.map(r=>r.uri));else throw"me out the window";let i=e.map(r=>p[r]).filter(Boolean),s=Math.round(i.reduce((r,a)=>r+a)/i.length),n=nt();B(n,s)};var{URI:L}=Spicetify;P();Spicetify.Player.addEventListener("songchange",()=>{let t=Spicetify.Player.data.track?.uri;if(Number(u.skipThreshold)&&(p[t]||Number.MAX_SAFE_INTEGER)<=Number(u.skipThreshold))return void Spicetify.Player.next();f(t)});f(Spicetify.Player.data.track?.uri);var k,at=new MutationObserver(()=>R());new MutationObserver(()=>{let t=document.querySelector("main");t&&!t.isEqualNode(k)&&(k&&at.disconnect(),k=t,at.observe(k,{childList:!0,subtree:!0}))}).observe(document.body,{childList:!0,subtree:!0});Spicetify.Platform.History.listen(async({pathname:t})=>{vt([L.isAlbum,L.isArtist,L.isPlaylistV1OrV2])(t)&&I(L.fromString(t))});
//! Does location actually point to document.body?
//# sourceMappingURL=data:application/json;base64,
(async () => {
    if (!document.getElementById("star-ratings-2-css")) {
        const el = document.createElement("style")
        el.id = "star-ratings-2-css"
        
        el.textContent = "svg.rating-1{fill:#ed5564!important}svg.rating-2{fill:#ffce54!important}svg.rating-3{fill:#a0d568!important}svg.rating-4{fill:#4fc1e8!important}svg.rating-5{fill:#ac92eb!important}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vZXh0ZW5zaW9ucy9zdGFyLXJhdGluZ3MtMi9hc3NldHMvc3R5bGVzLmNzcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsic3ZnLnJhdGluZy0xe2ZpbGw6I2VkNTU2NCAhaW1wb3J0YW50fXN2Zy5yYXRpbmctMntmaWxsOiNmZmNlNTQgIWltcG9ydGFudH1zdmcucmF0aW5nLTN7ZmlsbDojYTBkNTY4ICFpbXBvcnRhbnR9c3ZnLnJhdGluZy00e2ZpbGw6IzRmYzFlOCAhaW1wb3J0YW50fXN2Zy5yYXRpbmctNXtmaWxsOiNhYzkyZWIgIWltcG9ydGFudH0iXSwKICAibWFwcGluZ3MiOiAiQUFBQSxHQUFHLENBQUMsU0FBUyxLQUFLLGlCQUFrQixDQUFDLEdBQUcsQ0FBQyxTQUFTLEtBQUssaUJBQWtCLENBQUMsR0FBRyxDQUFDLFNBQVMsS0FBSyxpQkFBa0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxLQUFLLGlCQUFrQixDQUFDLEdBQUcsQ0FBQyxTQUFTLEtBQUssaUJBQWtCIiwKICAibmFtZXMiOiBbXQp9Cg== */\n"
        document.head.appendChild(el)
    }
})()