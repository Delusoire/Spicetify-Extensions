"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setParam = exports.getAllForParam = exports.getParam = exports.isURLSearchParams = exports.clone = exports.toRecord = exports.fromRecord = exports.toTuples = exports.fromTuples = exports.toString = exports.fromString = exports.isEmpty = exports.empty = void 0;
const O = require("fp-ts/Option");
const R = require("fp-ts/Record");
const function_1 = require("fp-ts/function");
const Function_1 = require("./Function");
const NEA = require("fp-ts/NonEmptyArray");
const A = require("fp-ts/Array");
const Array_1 = require("./Array");
const Tuple_1 = require("fp-ts/Tuple");
const Str = require("fp-ts/string");
const Tuple_2 = require("./Tuple");
exports.empty = (0, Function_1.construct)(URLSearchParams)([]);
const isEmpty = u => Array.from(u.keys()).length === 0;
exports.isEmpty = isEmpty;
const fromString = (x) => (0, function_1.pipe)([x], (0, Function_1.construct)(URLSearchParams));
exports.fromString = fromString;
const toString = (x) => x.toString();
exports.toString = toString;
const fromTuples = (x) => (0, function_1.pipe)([x], (0, Function_1.construct)(URLSearchParams));
exports.fromTuples = fromTuples;
const toTuples = (x) => (0, function_1.pipe)(x.entries(), Array_1.fromIterable);
exports.toTuples = toTuples;
exports.fromRecord = (0, function_1.flow)(R.foldMapWithIndex(Str.Ord)(A.getMonoid())((k, vs) => (0, function_1.pipe)(vs, A.map((0, Tuple_2.withFst)(k)))), exports.fromTuples);
const toRecord = (x) => R.fromFoldableMap(NEA.getSemigroup(), A.Foldable)((0, exports.toTuples)(x), (0, Tuple_1.mapSnd)(NEA.of));
exports.toRecord = toRecord;
const clone = (x) => (0, function_1.pipe)([x], (0, Function_1.construct)(URLSearchParams));
exports.clone = clone;
exports.isURLSearchParams = (0, Function_1.isInstanceOf)(URLSearchParams);
const getParam = (k) => (0, function_1.flow)((0, Function_1.invoke)("get")([k]), O.fromNullable);
exports.getParam = getParam;
const getAllForParam = (k) => (0, function_1.flow)((0, Function_1.invoke)("getAll")([k]), NEA.fromArray);
exports.getAllForParam = getAllForParam;
const setParam = (k) => (v) => (x) => {
    const y = (0, exports.clone)(x);
    y.set(k, v);
    return y;
};
exports.setParam = setParam;
