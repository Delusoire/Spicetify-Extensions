"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setHash = exports.modifyHash = exports.getHash = exports.setParams = exports.modifyParams = exports.getParams = exports.setPathname = exports.modifyPathname = exports.getPathname = exports.toString = exports.fromPathname = exports.fromStringO = exports.fromString = exports.toURLO = exports.toURL = exports.fromURL = exports.isURLPath = void 0;
const O = require("fp-ts/Option");
const E = require("fp-ts/Either");
const function_1 = require("fp-ts/function");
const Newtype_1 = require("./Newtype");
const URL_1 = require("./URL");
const phonyBase = "https://urlpath.fp-ts-std.samhh.com";
const isURLPath = (u) => (0, URL_1.isURL)(u) && u.origin === phonyBase;
exports.isURLPath = isURLPath;
const fromURL = (x) => (0, function_1.pipe)(new URL(x.href, phonyBase), (Newtype_1.pack));
exports.fromURL = fromURL;
const toURL = (f) => (baseUrl) => (x) => E.tryCatch(() => new URL((0, exports.toString)(x), baseUrl), e => f(e));
exports.toURL = toURL;
const toURLO = (baseUrl) => (0, function_1.flow)((0, exports.toURL)(function_1.identity)(baseUrl), O.fromEither);
exports.toURLO = toURLO;
const fromString = (f) => (x) => (0, function_1.pipe)(E.tryCatch(() => new URL(x, phonyBase), e => f(e)), E.map((Newtype_1.pack)));
exports.fromString = fromString;
exports.fromStringO = (0, function_1.flow)((0, exports.fromString)(function_1.identity), O.fromEither);
const fromPathname = (x) => {
    const y = new URL("", phonyBase);
    y.pathname = x;
    return (0, Newtype_1.pack)(y);
};
exports.fromPathname = fromPathname;
exports.toString = (0, function_1.flow)(Newtype_1.unpack, x => x.pathname + x.search + x.hash);
exports.getPathname = (0, function_1.flow)(Newtype_1.unpack, x => x.pathname);
const modifyPathname = (f) => (0, Newtype_1.over)((0, function_1.flow)(URL_1.clone, x => {
    x.pathname = f(x.pathname);
    return x;
}));
exports.modifyPathname = modifyPathname;
const setPathname = (x) => (0, exports.modifyPathname)((0, function_1.constant)(x));
exports.setPathname = setPathname;
exports.getParams = (0, function_1.flow)(Newtype_1.unpack, x => x.searchParams);
const modifyParams = (f) => (0, Newtype_1.over)((0, function_1.flow)(URL_1.clone, x => {
    x.search = f(x.searchParams).toString();
    return x;
}));
exports.modifyParams = modifyParams;
const setParams = (x) => (0, exports.modifyParams)((0, function_1.constant)(x));
exports.setParams = setParams;
exports.getHash = (0, function_1.flow)(Newtype_1.unpack, x => x.hash);
const modifyHash = (f) => (0, Newtype_1.over)((0, function_1.flow)(URL_1.clone, x => {
    x.hash = f(x.hash);
    return x;
}));
exports.modifyHash = modifyHash;
const setHash = (x) => (0, exports.modifyHash)((0, function_1.constant)(x));
exports.setHash = setHash;
