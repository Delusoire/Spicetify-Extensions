import * as IOE from "fp-ts/IOEither";
import * as IO from "fp-ts/IO";
import { execute as executeIO } from "./IO";
import { unsafeUnwrap as unsafeUnwrapE, unsafeUnwrapLeft as unsafeUnwrapLeftE, } from "./Either";
import { constVoid, flow } from "fp-ts/function";
import { pass as _pass } from "./Applicative";
export const unsafeUnwrap = flow(IO.map(unsafeUnwrapE), executeIO);
export const unsafeUnwrapLeft = flow(IO.map(unsafeUnwrapLeftE), executeIO);
export const unsafeExpect = (S) => flow(IOE.mapLeft(S.show), unsafeUnwrap);
export const unsafeExpectLeft = (S) => flow(IOE.map(S.show), unsafeUnwrapLeft);
export const sequenceArray_ = flow(IOE.sequenceArray, IOE.map(constVoid));
export const traverseArray_ = f => flow(IOE.traverseArray(f), IOE.map(constVoid));
export const pass = _pass(IOE.ApplicativePar);
