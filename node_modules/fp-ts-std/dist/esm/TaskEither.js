import * as TE from "fp-ts/TaskEither";
import * as T from "fp-ts/Task";
import { execute as executeT } from "./Task";
import { unsafeUnwrap as unsafeUnwrapE, unsafeUnwrapLeft as unsafeUnwrapLeftE, } from "./Either";
import { constVoid, flow } from "fp-ts/function";
import { pass as _pass } from "./Applicative";
export const unsafeUnwrap = flow(T.map(unsafeUnwrapE), executeT);
export const unsafeUnwrapLeft = flow(T.map(unsafeUnwrapLeftE), executeT);
export const unsafeExpect = (S) => flow(TE.mapLeft(S.show), unsafeUnwrap);
export const unsafeExpectLeft = (S) => flow(TE.map(S.show), unsafeUnwrapLeft);
export const sequenceArray_ = flow(TE.sequenceArray, TE.map(constVoid));
export const sequenceSeqArray_ = flow(TE.sequenceSeqArray, TE.map(constVoid));
export const traverseArray_ = f => flow(TE.traverseArray(f), TE.map(constVoid));
export const traverseSeqArray_ = f => flow(TE.traverseSeqArray(f), TE.map(constVoid));
export const pass = _pass(TE.ApplicativePar);
