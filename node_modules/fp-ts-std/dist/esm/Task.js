import * as T from "fp-ts/Task";
import { fieldMilliseconds, now, unMilliseconds } from "./Date";
import { when as _when, unless as _unless, pass as _pass } from "./Applicative";
import { constVoid, flow } from "fp-ts/function";
export const sleep = (n) => () => new Promise(resolve => {
    setTimeout(resolve, Math.floor(unMilliseconds(n)));
});
export const elapsed = (f) => (x) => async () => {
    const start = now();
    const y = await x();
    const duration = fieldMilliseconds.sub(now(), start);
    f(duration)();
    return y;
};
export const execute = (x) => x();
export const when = _when(T.ApplicativePar);
export const unless = _unless(T.ApplicativePar);
export const sequenceArray_ = flow(T.sequenceArray, T.map(constVoid));
export const sequenceSeqArray_ = flow(T.sequenceSeqArray, T.map(constVoid));
export const traverseArray_ = f => flow(T.traverseArray(f), T.map(constVoid));
export const traverseSeqArray_ = f => flow(T.traverseSeqArray(f), T.map(constVoid));
export const pass = _pass(T.ApplicativePar);
