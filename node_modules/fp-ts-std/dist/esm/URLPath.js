import * as O from "fp-ts/Option";
import * as E from "fp-ts/Either";
import { constant, flow, identity, pipe } from "fp-ts/function";
import { over, pack, unpack } from "./Newtype";
import { clone as cloneURL, isURL } from "./URL";
const phonyBase = "https://urlpath.fp-ts-std.samhh.com";
export const isURLPath = (u) => isURL(u) && u.origin === phonyBase;
export const fromURL = (x) => pipe(new URL(x.href, phonyBase), (pack));
export const toURL = (f) => (baseUrl) => (x) => E.tryCatch(() => new URL(toString(x), baseUrl), e => f(e));
export const toURLO = (baseUrl) => flow(toURL(identity)(baseUrl), O.fromEither);
export const fromString = (f) => (x) => pipe(E.tryCatch(() => new URL(x, phonyBase), e => f(e)), E.map((pack)));
export const fromStringO = flow(fromString(identity), O.fromEither);
export const fromPathname = (x) => {
    const y = new URL("", phonyBase);
    y.pathname = x;
    return pack(y);
};
export const toString = flow(unpack, x => x.pathname + x.search + x.hash);
export const getPathname = flow(unpack, x => x.pathname);
export const modifyPathname = (f) => over(flow(cloneURL, x => {
    x.pathname = f(x.pathname);
    return x;
}));
export const setPathname = (x) => modifyPathname(constant(x));
export const getParams = flow(unpack, x => x.searchParams);
export const modifyParams = (f) => over(flow(cloneURL, x => {
    x.search = f(x.searchParams).toString();
    return x;
}));
export const setParams = (x) => modifyParams(constant(x));
export const getHash = flow(unpack, x => x.hash);
export const modifyHash = (f) => over(flow(cloneURL, x => {
    x.hash = f(x.hash);
    return x;
}));
export const setHash = (x) => modifyHash(constant(x));
