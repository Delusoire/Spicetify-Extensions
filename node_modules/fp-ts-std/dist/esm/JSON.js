import { iso } from "newtype-ts";
import * as E from "fp-ts/Either";
import * as O from "fp-ts/Option";
import { flow, identity, pipe } from "fp-ts/function";
import { isString } from "fp-ts/string";
const isoJSONString = iso();
const mkJSONString = isoJSONString.wrap;
export const unJSONString = isoJSONString.unwrap;
export const stringify = (f) => (x) => pipe(E.tryCatch(() => JSON.stringify(x), e => f(e)), E.filterOrElse(isString, () => f(TypeError("Stringify output not a string"))), E.map(mkJSONString));
export const stringifyO = flow(stringify(identity), O.fromEither);
export const stringifyPrimitive = (x) => pipe(x, JSON.stringify, mkJSONString);
export const unstringify = flow(unJSONString, JSON.parse);
export const parse = (f) => (x) => E.tryCatch(() => JSON.parse(x), e => f(e));
export const parseO = flow(parse(identity), O.fromEither);
